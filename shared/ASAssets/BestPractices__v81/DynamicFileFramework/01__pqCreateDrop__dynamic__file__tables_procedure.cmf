<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="01_pqCreateDrop_dynamic_file_tables" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/01_pqCreateDrop_dynamic_file_tables" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>01_pqCreateDrop_dynamic_file:

	Provides a mechanism to create the Dynamic File Framework database repository sequence and tables.

	Input
		executeDDL				CHAR(1),	-- Y=execute the DDL, N=display the DDL in the console window only.
		dropResources			CHAR(1),	-- Y=drop the triggers, functions and tables first.  N=do not drop the resources.
		reateResources			CHAR(1),	-- Y=create all resources.  N=do not create resources.
	Output:
		ursCombinedResult		LONGVARCHAR,-- Provides a status on each sql statement executed
		sqlScript				LONGVARCHAR	-- Generates an output of the entire script which can be used for external execution

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="executeDDL" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="dropResources" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="createResources" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="cursCombinedResult" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sqlScript" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/00_ExecuteDDL" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputSQL" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="outputValue">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="EXECUTE_DDL_PACKAGE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="DATASOURCE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="CATALOG_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_SEQ" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_QUEUE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLESPACE_FILEGROUP" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROCESS_WAIT_TIME_SECONDS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CSV_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="EXCEL_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/introspectResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="dsPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="schemaTablePatterns" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="tableNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="schemaProcedurePatterns" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="introspectionResult" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="dataSourceType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="dataSourceSubtype" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/rebindResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="rebindVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="rebindVector" type="TREE" refId="2">
              <element name="oldPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="oldType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="newPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="newType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="3"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="3"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 01_pqCreateDrop_dynamic_file:

	Provides a mechanism to create the Dynamic File Framework database repository sequence and tables.

	Input
		executeDDL				CHAR(1),	-- Y=execute the DDL, N=display the DDL in the console window only.
		dropResources			CHAR(1),	-- Y=drop the triggers, functions and tables first.  N=do not drop the resources.
		reateResources			CHAR(1),	-- Y=create all resources.  N=do not create resources.
	Output:
		ursCombinedResult		LONGVARCHAR,-- Provides a status on each sql statement executed
		sqlScript				LONGVARCHAR	-- Generates an output of the entire script which can be used for external execution

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE &quot;01_pqCreateDrop_dynamic_file_tables&quot;(
	IN  executeDDL				CHAR(1),	-- Y=execute the DDL, N=display the DDL in the console window only.
	IN  dropResources			CHAR(1),	-- Y=drop the triggers, functions and tables first.  N=do not drop the resources.
	IN  createResources			CHAR(1),	-- Y=create all resources.  N=do not create resources.
	OUT cursCombinedResult		LONGVARCHAR,-- Provides a status on each sql statement executed
	OUT sqlScript				LONGVARCHAR	-- Generates an output of the entire script which can be used for external execution
)
BEGIN
	DECLARE debug						CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE	globalConstantsPath			VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.globalConstantsPath;
	DECLARE executeDDLPackagePath		LONGVARCHAR;
	DECLARE packageDatasourcePath		LONGVARCHAR;
	DECLARE rebindVector 				/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.rebindVector;
	DECLARE sqlStatement				LONGVARCHAR;
	DECLARE cursType					VARCHAR;
	DECLARE i							INTEGER;
	DECLARE ex							EXCEPTION;
	DECLARE curs						CURSOR (result INTEGER);
	DECLARE cursResult					INTEGER;
	DECLARE status						VARCHAR;
	DECLARE TYPE sqlRowType				ROW(cursType VARCHAR, sqlStatement LONGVARCHAR);
	DECLARE sqlRow						sqlRowType;
	DECLARE sqlVect						VECTOR(sqlRowType);
	DECLARE vectorCount					INTEGER;
	DECLARE queueDataSourceType			VARCHAR;
	DECLARE datasourceType				VARCHAR;
	DECLARE queueDatasourcePath			LONGVARCHAR;
	DECLARE tablespaceStatement			VARCHAR DEFAULT &apos;&apos;;
	DECLARE queueSchemaName				VARCHAR;
	DECLARE queueCatalogName			VARCHAR;
	DECLARE queueCatalogNameTemp		VARCHAR;
	DECLARE queueSequenceDynamicFile	VARCHAR;
	DECLARE queueTableDynamicFileEmail	VARCHAR;
	DECLARE queueTableDynamicFileQueue	VARCHAR;
	DECLARE tablespaceName				VARCHAR;	-- Optional value.  If not provided then it will use the default tablespace.
	DECLARE finalResultQuery			VARCHAR;
	DECLARE success						BIT;
	DECLARE createResponse 				XML;
	DECLARE faultResponse				XML;
	DECLARE resExists					BOOLEAN;
	DECLARE fullResourcePath			LONGVARCHAR;
	DECLARE fullSchemaPath				LONGVARCHAR;
	DECLARE resourceType				VARCHAR;
	DECLARE tableName					VARCHAR;
	DECLARE procedureName				VARCHAR;
	DECLARE sep							VARCHAR DEFAULT &apos;,&apos;;
	DECLARE errStatus 					VARCHAR;		-- SUCCESS OR FAILED
	DECLARE errMessage 					LONGVARCHAR;	-- Error message if errStatus=FAILED
	DECLARE introspectionResult 		LONGVARCHAR;	-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
	DECLARE dataSourceType				VARCHAR;		-- The type of data source that was introspected.
	DECLARE dataSourceSubtype 			VARCHAR;		-- The subtype of data source that was introspected.


	/********************************
	 * INITIALIZE PATHS
	 ********************************/
	SET sqlScript = &apos;&apos;;

	-- Get the datasource path, catalog and schema name to construct the path dynamically
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;EXECUTE_DDL_PACKAGE_PATH&apos;, 1, executeDDLPackagePath);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DATASOURCE_PATH&apos;, 1, queueDatasourcePath);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CATALOG_NAME&apos;, 1, queueCatalogName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;SCHEMA_NAME&apos;, 1, queueSchemaName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;TABLESPACE_FILEGROUP&apos;, 1, tablespaceName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_QUEUE&apos;, 1, queueTableDynamicFileQueue);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_EMAIL&apos;, 1, queueTableDynamicFileEmail);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_SEQ&apos;, 1, queueSequenceDynamicFile);
	-- Validate the constants
	IF (queueDatasourcePath IS NULL OR LENGTH(TRIM(queueDatasourcePath)) = 0) THEN
		RAISE ex VALUE &apos;The data source path name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DATASOURCE_PATH&apos;;
	END IF;
	IF (queueSchemaName IS NULL OR LENGTH(TRIM(queueSchemaName)) = 0) THEN
		RAISE ex VALUE &apos;The schema name may not be null or empty:  &apos;||globalConstantsPath||&apos;.SCHEMA_NAME&apos;;
	END IF;
	IF (queueCatalogName IS NULL OR LENGTH(TRIM(queueCatalogName)) = 0) THEN
		SET queueCatalogNameTemp = &apos;&apos;;
	ELSE
		SET queueCatalogNameTemp = &apos;/&apos;||queueCatalogName;
	END IF;
	IF (queueTableDynamicFileQueue IS NULL OR LENGTH(TRIM(queueTableDynamicFileQueue)) = 0) THEN
		RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_QUEUE&apos;;
	END IF;
	IF (queueTableDynamicFileEmail IS NULL OR LENGTH(TRIM(queueTableDynamicFileEmail)) = 0) THEN
		RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_EMAIL&apos;;
	END IF;
	IF (queueSequenceDynamicFile IS NULL OR LENGTH(TRIM(queueSequenceDynamicFile)) = 0) THEN
		RAISE ex VALUE &apos;The sequence name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_SEQ&apos;;
	END IF;
	SET fullSchemaPath = queueDatasourcePath || queueCatalogNameTemp || &apos;/&apos;||queueSchemaName;

	-- Get the data source type in order to determine the syntax for the sequence
	FOR r AS SELECT dataSourceType from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(queueDatasourcePath, &apos;DATA_SOURCE&apos;) DO
		SET queueDataSourceType = r.dataSourceType;
	END FOR;
	-- queueDataSourceType=Oracle 11g (Thin Driver)
	IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;oracle&apos;) &gt; 0) THEN
		SET finalResultQuery = &apos;SELECT 1 FROM DUAL&apos;;
		SET datasourceType = &apos;oracle&apos;;
		IF (tablespaceName IS NOT NULL and LENGTH(tablespaceName) &gt; 0) THEN
			SET tablespaceStatement = &apos;TABLESPACE &quot;&apos;||tablespaceName||&apos;&quot;&apos;;
		END IF;
	END IF;
	-- queueDataSourceType=Microsoft SQL Server 2012
	IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;sqlserver&apos;) &gt; 0) THEN
		SET finalResultQuery = &apos;SELECT 1&apos;;
		SET datasourceType = &apos;sqlserver&apos;;
		IF (tablespaceName IS NOT NULL and LENGTH(tablespaceName) &gt; 0) THEN
			SET tablespaceStatement = &apos;ON &quot;&apos;||tablespaceName||&apos;&quot;&apos;;
		END IF;
	END IF;
	-- queueDataSourceType=PostgreSQL 9.1
	IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;postgre&apos;) &gt; 0) THEN
		SET finalResultQuery = &apos;SELECT 1&apos;;
		SET datasourceType = &apos;postgres&apos;;
		IF (tablespaceName IS NOT NULL and LENGTH(tablespaceName) &gt; 0) THEN
			SET tablespaceStatement = &apos;TABLESPACE &quot;&apos;||tablespaceName||&apos;&quot;&apos;;
		END IF;
	END IF;
	-- Rebind the package procedure &quot;00_ExecuteDDL&quot; datasource path
	FOR r AS SELECT * from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(executeDDLPackagePath, &apos;PROCEDURE&apos;) DO
		IF (r.resourceType = &apos;DATA_SOURCE&apos;) THEN
			SET packageDatasourcePath = r.resourcePath;
		END IF;
	END FOR;
	IF (packageDatasourcePath IS NOT NULL AND packageDatasourcePath &lt;&gt; queueDatasourcePath) THEN
		SET rebindVector = VECTOR[(packageDatasourcePath, &apos;DATA_SOURCE&apos;, queueDatasourcePath, &apos;DATA_SOURCE&apos; ) ];

		BEGIN INDEPENDENT TRANSACTION
			CALL /shared/ASAssets/Utilities/repository/rebindResource(executeDDLPackagePath, &apos;PROCEDURE&apos;, rebindVector, success, createResponse, faultResponse);
		END;
	END IF;

/************************************************************************************************
 * DROP all resources first
 ************************************************************************************************/
	IF (datasourceType = &apos;oracle&apos;) THEN
		SET sqlVect = VECTOR[
			(&apos;DROP SEQUENCE &apos;||queueSequenceDynamicFile||&apos;&apos;, 		&apos;DROP SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot;&apos;),
			(&apos;DROP TABLE &apos;||queueTableDynamicFileQueue||&apos;&apos;, 		&apos;DROP TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot;&apos;),
			(&apos;DROP TABLE &apos;||queueTableDynamicFileEmail||&apos;&apos;, 		&apos;DROP TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot;&apos;)
		];
	END IF;

	IF (datasourceType = &apos;sqlserver&apos;) THEN
		SET sqlVect = VECTOR[
			(&apos;DROP SEQUENCE &apos;||queueSequenceDynamicFile||&apos;&apos;, 		&apos;DROP SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot;&apos;),
			(&apos;DROP TABLE &apos;||queueTableDynamicFileQueue||&apos;&apos;, 		&apos;DROP TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot;&apos;),
			(&apos;DROP TABLE &apos;||queueTableDynamicFileEmail||&apos;&apos;, 		&apos;DROP TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot;&apos;)
		];
	END IF;

	IF (datasourceType = &apos;postgres&apos;) THEN
		SET sqlVect = VECTOR[
			(&apos;DROP SEQUENCE &apos;||queueSequenceDynamicFile||&apos;&apos;, 		&apos;DROP SEQUENCE IF EXISTS &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot;&apos;),
			(&apos;DROP TABLE &apos;||queueTableDynamicFileQueue||&apos;&apos;, 		&apos;DROP TABLE IF EXISTS &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot; CASCADE&apos;),
			(&apos;DROP TABLE &apos;||queueTableDynamicFileEmail||&apos;&apos;, 		&apos;DROP TABLE IF EXISTS &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot; CASCADE&apos;)
		];
	END IF;
	SET vectorCount = CARDINALITY(sqlVect);

/************************************************************************************************
 * CREATE DYNAMIC_FILE_SEQ
 ************************************************************************************************/
	-- This is the sequence generator for processing &quot;Dynamic File Framework&quot; requests.
	IF (datasourceType = &apos;oracle&apos;) THEN
		SET sqlStatement = &apos;CREATE SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot; START WITH 1 NOCYCLE NOCACHE NOORDER&apos;;
	END IF;

	IF (datasourceType = &apos;sqlserver&apos;) THEN
		SET sqlStatement = &apos;CREATE SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot; START WITH 1 NO CACHE NO CYCLE&apos;;
	END IF;

	IF (datasourceType = &apos;postgres&apos;) THEN
		SET sqlStatement = &apos;CREATE SEQUENCE &quot;{0}&quot;.&quot;&apos;||queueSequenceDynamicFile||&apos;&quot; START WITH 1 NO CYCLE&apos;;
	END IF;

	SET vectorCount = vectorCount + 1;
	SET sqlVect = EXTEND(sqlVect, 1);
	SET sqlVect[vectorCount].cursType = &apos;CREATE SEQUENCE &apos;||queueSequenceDynamicFile;
	SET sqlVect[vectorCount].sqlStatement = sqlStatement;

/************************************************************************************************
 * CREATE DYNAMIC_FILE_QUEUE
 ************************************************************************************************/
	-- This table is used to provide a queue for processing &quot;Dynamic File Framework&quot; requests.
	IF (datasourceType = &apos;oracle&apos;) THEN
		SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot; (
  &quot;REQUEST_ID&quot;             NUMBER(19),
  &quot;REQUEST_DATE_START&quot;     TIMESTAMP(9),
  &quot;REQUEST_DATE_END&quot;       TIMESTAMP(9),
  &quot;ORGANIZATION&quot;           VARCHAR2(50 BYTE),
  &quot;PROJECT_NAME&quot;           VARCHAR2(50 BYTE),
  &quot;SUBPROJECT_NAME&quot;        VARCHAR2(50 BYTE),
  &quot;ACTION_ORIGINATOR&quot;      VARCHAR2(50 BYTE),
  &quot;ACTION_TYPE&quot;            VARCHAR2(1 BYTE),    --A=ADD, R=REMOVE, C=CLEANUP
  &quot;STATUS&quot;                 VARCHAR2(100 BYTE),
  &quot;MESSAGE&quot;                VARCHAR2(4000 BYTE),
  &quot;EMAIL_ERROR&quot;            VARCHAR2(4000 BYTE),
  &quot;REQUEST_FILE_NAME&quot;      VARCHAR2(255 BYTE),
  &quot;REQUEST_USER_NAME&quot;      VARCHAR2(255 BYTE),
  &quot;REQUEST_DOMAIN_NAME&quot;    VARCHAR2(255 BYTE),
  &quot;FILE_NAME&quot;              VARCHAR2(255 BYTE),
  &quot;PROXY_USER_NAME&quot;        VARCHAR2(255 BYTE),
  &quot;PROXY_USER_EMAIL&quot;       VARCHAR2(4000 BYTE),
  &quot;ALLOW_NULL_FILE_NAME&quot;   NUMBER(9,0),
  &quot;DATA_SOURCE_PATH&quot;       VARCHAR2(4000 BYTE), -- layer is required
  &quot;FORMATTING_LAYER_PATH&quot;  VARCHAR2(4000 BYTE), -- layer is required
  &quot;BUSINESS_LAYER_PATH&quot;    VARCHAR2(4000 BYTE), -- if null then do not create
  &quot;APPLICATION_LAYER_PATH&quot; VARCHAR2(4000 BYTE), -- if null then do not create
  &quot;PUBLISHED_SCHEMA_PATH&quot;  VARCHAR2(4000 BYTE), -- layer is required
  &quot;PUBLISHED_DATABASE&quot;     VARCHAR2(255 BYTE),  -- published database name
  &quot;CONSTANTS_PATH&quot;         VARCHAR2(4000 BYTE), -- path to constants file
  &quot;RETENTION_POLICY_DAYS&quot;  NUMBER(9,0)			-- The number of days to allow a file and views to be retained.
   ) &apos;||tablespaceStatement||&apos;
   RESULT_CACHE (MODE DEFAULT)  PCTUSED 0  PCTFREE 10  INITRANS 1  MAXTRANS 255
   STORAGE (INITIAL 64K  NEXT 1M  MAXSIZE UNLIMITED  MINEXTENTS 1  MAXEXTENTS UNLIMITED  PCTINCREASE 0
            BUFFER_POOL DEFAULT  FLASH_CACHE DEFAULT  CELL_FLASH_CACHE DEFAULT)
   LOGGING NOCOMPRESS MONITORING&apos;;
	END IF;

	IF (datasourceType = &apos;sqlserver&apos;) THEN
		SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot; (
  &quot;REQUEST_ID&quot;             NUMERIC(19),
  &quot;REQUEST_DATE_START&quot;     DATETIME2(3),
  &quot;REQUEST_DATE_END&quot;       DATETIME2(3),
  &quot;ORGANIZATION&quot;           VARCHAR(50),
  &quot;PROJECT_NAME&quot;           VARCHAR(50),
  &quot;SUBPROJECT_NAME&quot;        VARCHAR(50),
  &quot;ACTION_ORIGINATOR&quot;      VARCHAR(50),
  &quot;ACTION_TYPE&quot;            VARCHAR(1),    --A=ADD, R=REMOVE, C=CLEANUP
  &quot;STATUS&quot;                 VARCHAR(100),
  &quot;MESSAGE&quot;                VARCHAR(4000),
  &quot;EMAIL_ERROR&quot;            VARCHAR(4000),
  &quot;REQUEST_FILE_NAME&quot;      VARCHAR(255),
  &quot;REQUEST_USER_NAME&quot;      VARCHAR(255),
  &quot;REQUEST_DOMAIN_NAME&quot;    VARCHAR(255),
  &quot;FILE_NAME&quot;              VARCHAR(255),
  &quot;PROXY_USER_NAME&quot;        VARCHAR(255),
  &quot;PROXY_USER_EMAIL&quot;       VARCHAR(4000),
  &quot;ALLOW_NULL_FILE_NAME&quot;   NUMERIC(9,0),
  &quot;DATA_SOURCE_PATH&quot;       VARCHAR(4000), -- layer is required
  &quot;FORMATTING_LAYER_PATH&quot;  VARCHAR(4000), -- layer is required
  &quot;BUSINESS_LAYER_PATH&quot;    VARCHAR(4000), -- if null then do not create
  &quot;APPLICATION_LAYER_PATH&quot; VARCHAR(4000), -- if null then do not create
  &quot;PUBLISHED_SCHEMA_PATH&quot;  VARCHAR(4000), -- layer is required
  &quot;PUBLISHED_DATABASE&quot;     VARCHAR(255),  -- published database name
  &quot;CONSTANTS_PATH&quot;         VARCHAR(4000), -- path to constants file
  &quot;RETENTION_POLICY_DAYS&quot;  NUMERIC(9,0)	  -- The number of days to allow a file and views to be retained.
) &apos;;
	END IF;

	IF (datasourceType = &apos;postgres&apos;) THEN
		SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileQueue||&apos;&quot; (
  &quot;REQUEST_ID&quot;             NUMERIC(19,0),
  &quot;REQUEST_DATE_START&quot;     TIMESTAMP(9),
  &quot;REQUEST_DATE_END&quot;       TIMESTAMP(9),
  &quot;ORGANIZATION&quot;           VARCHAR(50),
  &quot;PROJECT_NAME&quot;           VARCHAR(50),
  &quot;SUBPROJECT_NAME&quot;        VARCHAR(50),
  &quot;ACTION_ORIGINATOR&quot;      VARCHAR(50),
  &quot;ACTION_TYPE&quot;            VARCHAR(1),    --A=ADD, R=REMOVE, C=CLEANUP
  &quot;STATUS&quot;                 VARCHAR(100),
  &quot;MESSAGE&quot;                VARCHAR(4000),
  &quot;EMAIL_ERROR&quot;            VARCHAR(4000),
  &quot;REQUEST_FILE_NAME&quot;      VARCHAR(255),
  &quot;REQUEST_USER_NAME&quot;      VARCHAR(255),
  &quot;REQUEST_DOMAIN_NAME&quot;    VARCHAR(255),
  &quot;FILE_NAME&quot;              VARCHAR(255),
  &quot;PROXY_USER_NAME&quot;        VARCHAR(255),
  &quot;PROXY_USER_EMAIL&quot;       VARCHAR(4000),
  &quot;ALLOW_NULL_FILE_NAME&quot;   NUMERIC(9,0),
  &quot;DATA_SOURCE_PATH&quot;       VARCHAR(4000), -- layer is required
  &quot;FORMATTING_LAYER_PATH&quot;  VARCHAR(4000), -- layer is required
  &quot;BUSINESS_LAYER_PATH&quot;    VARCHAR(4000), -- if null then do not create
  &quot;APPLICATION_LAYER_PATH&quot; VARCHAR(4000), -- if null then do not create
  &quot;PUBLISHED_SCHEMA_PATH&quot;  VARCHAR(4000), -- layer is required
  &quot;PUBLISHED_DATABASE&quot;     VARCHAR(255),  -- published database name
  &quot;CONSTANTS_PATH&quot;         VARCHAR(4000), -- path to constants file
  &quot;RETENTION_POLICY_DAYS&quot;  NUMERIC(9,0)	  -- The number of days to allow a file and views to be retained.
) &apos;;
	END IF;

	SET vectorCount = vectorCount + 1;
	SET sqlVect = EXTEND(sqlVect, 1);
	SET sqlVect[vectorCount].cursType = &apos;CREATE TABLE &apos;||queueTableDynamicFileQueue;
	SET sqlVect[vectorCount].sqlStatement = sqlStatement;


/************************************************************************************************
 * CREATE DYNAMIC_FILE_EMAIL
 ************************************************************************************************/
	-- This table is used to provide a table to track username emails &quot;Dynamic File Framework&quot;.
	IF (datasourceType = &apos;oracle&apos;) THEN
		SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot; (
  &quot;USER_NAME&quot;        VARCHAR2(255 BYTE),
  &quot;USER_EMAIL&quot;       VARCHAR2(4000 BYTE)
   ) &apos;||tablespaceStatement||&apos;
   RESULT_CACHE (MODE DEFAULT)  PCTUSED 0  PCTFREE 10  INITRANS 1  MAXTRANS 255
   STORAGE (INITIAL 64K  NEXT 1M  MAXSIZE UNLIMITED  MINEXTENTS 1  MAXEXTENTS UNLIMITED  PCTINCREASE 0
            BUFFER_POOL DEFAULT  FLASH_CACHE DEFAULT  CELL_FLASH_CACHE DEFAULT)
   LOGGING NOCOMPRESS MONITORING&apos;;
	END IF;

	IF (datasourceType = &apos;sqlserver&apos;) THEN
		SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot; (
  &quot;USER_NAME&quot;        VARCHAR(255),
  &quot;USER_EMAIL&quot;       VARCHAR(4000)
   ) &apos;;
	END IF;

	IF (datasourceType = &apos;postgres&apos;) THEN
		SET sqlStatement = 
&apos;CREATE TABLE &quot;{0}&quot;.&quot;&apos;||queueTableDynamicFileEmail||&apos;&quot; (
  &quot;USER_NAME&quot;        VARCHAR(255),
  &quot;USER_EMAIL&quot;       VARCHAR(4000)
   ) &apos;;
	END IF;

	SET vectorCount = vectorCount + 1;
	SET sqlVect = EXTEND(sqlVect, 1);
	SET sqlVect[vectorCount].cursType = &apos;CREATE TABLE &apos;||queueTableDynamicFileEmail;
	SET sqlVect[vectorCount].sqlStatement = sqlStatement;


	/***************************************************
	 * PROCESS the sqlStatements
	 ***************************************************/
	SET sqlScript = &apos;&apos;;
	SET i = 1;
	WHILE (i &lt;= CARDINALITY(sqlVect)) DO
		SET sqlRow = sqlVect[i];
		IF  (sqlRow.cursType LIKE &apos;DROP%&apos; OR
			 sqlRow.cursType LIKE &apos;CREATE%&apos; ) THEN
			-- Replace the {0} with the dataSourceSchemaName value
			SET sqlRow.sqlStatement = REPLACE(sqlRow.sqlStatement, &apos;{0}&apos;, queueSchemaName)||&apos;; ;&apos;||CHR(10);
			SET sqlRow.sqlStatement = sqlRow.sqlStatement || finalResultQuery;	--&apos;SELECT 1 FROM DUAL&apos;

			CALL PRINT(&apos;-- &apos;||i||&apos;:-----------------------------------------------------------------------------------------------&apos;);
			CALL PRINT(sqlRow.sqlStatement||&apos;; ;&apos;);
			SET sqlScript = sqlScript || CHR(10) || TRIM(sqlRow.sqlStatement)||&apos;; ;&apos;||CHR(10);

			IF (executeDDL IS NOT NULL and UPPER(executeDDL) = &apos;Y&apos;) THEN
				-- If CREATE DDL then createResources must be = &apos;Y&apos;..  If DROP DDL then dropResources must be = &apos;Y&apos;.
				IF ((sqlRow.cursType LIKE &apos;CREATE%&apos; AND createResources IS NOT NULL AND UPPER(createResources) = &apos;Y&apos;) OR
					(sqlRow.cursType LIKE &apos;DROP%&apos; AND dropResources IS NOT NULL AND UPPER(dropResources) = &apos;Y&apos;)) THEN

					-- Initialize the result
					SET status = &apos;PASS&apos;;

					-- Create/Drop the resource
					BEGIN INDEPENDENT TRANSACTION
						OPEN curs FOR SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/&quot;00_ExecuteDDL&quot;(sqlRow.sqlStatement);
						FETCH curs INTO cursResult;
						CLOSE curs;
					EXCEPTION
						ELSE
							CALL PRINT(sqlRow.cursType||&apos; EXCEPTION=&apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR));
							SET cursResult = -1;
							SET status = &apos;FAIL&apos;;
					END;

					-- Delete the CIS TABLE resource
					IF (sqlRow.cursType LIKE &apos;DROP%&apos; AND dropResources IS NOT NULL AND UPPER(dropResources) = &apos;Y&apos; AND 
						(INSTR(UPPER(sqlRow.cursType), &apos;DROP TABLE&apos;) &gt; 0 OR INSTR(UPPER(sqlRow.cursType), &apos;DROP PROCEDURE&apos;) &gt; 0) ) THEN

						IF (INSTR(UPPER(sqlRow.cursType), &apos;DROP TABLE&apos;) &gt; 0) THEN
							SET fullResourcePath = fullSchemaPath || &apos;/&apos; || TRIM(REPLACE(UPPER(sqlRow.cursType), &apos;DROP TABLE&apos;, &apos;&apos;));
							SET resourceType = &apos;TABLE&apos;;
						END IF;
						IF (INSTR(UPPER(sqlRow.cursType), &apos;DROP PROCEDURE&apos;) &gt; 0) THEN
							SET fullResourcePath = fullSchemaPath || &apos;/&apos; || TRIM(REPLACE(UPPER(sqlRow.cursType), &apos;DROP PROCEDURE&apos;, &apos;&apos;));
							SET resourceType = &apos;PROCEDURE&apos;;
						END IF;

						BEGIN INDEPENDENT TRANSACTION
							CALL /lib/resource/ResourceExists(fullResourcePath, resourceType, null, resExists);
							CALL PRINT(&apos;DROP: Test resource exists.  resExists=[&apos;||CAST(resExists AS VARCHAR)||&apos;]  resourceType=[&apos;||NVL(resourceType,&apos;null&apos;)||&apos;]  fullResourcePath=[&apos;||NVL(fullResourcePath,&apos;null&apos;)||&apos;]&apos;);
							IF (resExists) THEN
								CALL PRINT(&apos;Destroy resourceType=[&apos;||resourceType||&apos;]  fullResourcePath=[&apos;||fullResourcePath||&apos;]&apos;);
								CALL /shared/ASAssets/Utilities/repository/destroyResource(fullResourcePath, null, resourceType, success, createResponse, faultResponse);
							END IF;
						EXCEPTION
							ELSE
								CALL PRINT(sqlRow.cursType||&apos; EXCEPTION=&apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR));
								SET cursResult = -1;
								SET status = &apos;FAIL&apos;;
						END;
					END IF;

					-- Introspect the CIS TABLE or PROCEDURE resource
					IF (sqlRow.cursType LIKE &apos;CREATE%&apos; AND dropResources IS NOT NULL AND UPPER(dropResources) = &apos;Y&apos; AND 
						(INSTR(UPPER(sqlRow.cursType), &apos;CREATE TABLE&apos;) &gt; 0 OR INSTR(UPPER(sqlRow.cursType), &apos;CREATE PROCEDURE&apos;) &gt; 0) ) THEN

						SET tableName = null;
						SET procedureName = null;
						SET fullResourcePath = null;
						IF (INSTR(UPPER(sqlRow.cursType), &apos;CREATE TABLE&apos;) &gt; 0) THEN
							SET tableName = TRIM(REPLACE(UPPER(sqlRow.cursType), &apos;CREATE TABLE&apos;, &apos;&apos;));
							SET resourceType = &apos;TABLE&apos;;
							SET fullResourcePath = fullSchemaPath || &apos;/&apos; || tableName;
						END IF;
						IF (INSTR(UPPER(sqlRow.cursType), &apos;CREATE PROCEDURE&apos;) &gt; 0) THEN
							SET procedureName = TRIM(REPLACE(UPPER(sqlRow.cursType), &apos;CREATE PROCEDURE&apos;, &apos;&apos;));
							SET resourceType = &apos;PROCEDURE&apos;;
							SET fullResourcePath = fullSchemaPath || &apos;/&apos; || procedureName;
						END IF;

						BEGIN INDEPENDENT TRANSACTION
							CALL /lib/resource/ResourceExists(fullResourcePath, resourceType, null, resExists);
							CALL PRINT(&apos;CREATE: Test resource exists.  resExists=[&apos;||CAST(resExists AS VARCHAR)||&apos;]  resourceType=[&apos;||NVL(resourceType,&apos;null&apos;)||&apos;]  fullResourcePath=[&apos;||NVL(fullResourcePath,&apos;null&apos;)||&apos;]&apos;);
							IF (NOT resExists AND (tableName IS NOT NULL OR procedureName IS NOT NULL)) THEN
								CALL PRINT(&apos;INTROSPECT: queueDatasourcePath=[&apos;||queueDatasourcePath||&apos;]  queueCatalogName=[&apos;||NVL(queueCatalogName,&apos;null&apos;)||&apos;]&apos;||
											&apos;  queueSchemaName=[&apos;||NVL(queueSchemaName,&apos;null&apos;)||&apos;]&apos;||
											&apos;  tableName=[&apos;||NVL(tableName,&apos;null&apos;)||&apos;]  procedureName=[&apos;||NVL(procedureName,&apos;null&apos;)||&apos;]&apos;
								);
								CALL /shared/ASAssets/Utilities/repository/introspectResources(
									queueDatasourcePath,		-- mandatory.   Full path to datasource
									queueCatalogName,			-- optional (null) - Database catalog Name if applicable
									queueSchemaName,			-- mandatory - Database schema name.  Overrides the schema pattern.  When schemaPatterns is null the schemaName must be provided.
									null,						-- optional (null).  Comma separated list of patterns such as D%, E%, F%.    Introspect all tables starting with D, E and F.
									tableName,					-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.  When NULL, all tables for the schema are introspected.
									null,						-- comma separated list of patterns such as D%, E%, F%.    Introspect all new procedures starting with D, E and F.
									procedureName, 				-- NULL=no specified procedure list OR 1 or more comma separated procedures to introspect.  When NULL, all procedures are introspected.
									sep,						-- Default=,  The separator used to separate lists for the input parameters: tableNames and procedureNames
									debug,						-- Y=debug on, N=debug off, null=defaultValues.EnableDebugging1
									errStatus,					-- SUCCESS or FAILED
									errMessage,					-- Error message if errStatus=FAILED, otherwise null
									introspectionResult,		-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
									dataSourceType,				-- The type of data source that was introspected.
									dataSourceSubtype			-- The subtype of data source that was introspected.
								);
							END IF;
						EXCEPTION
							ELSE
								CALL PRINT(sqlRow.cursType||&apos; EXCEPTION=&apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR));
								SET cursResult = -1;
								SET status = &apos;FAIL&apos;;
						END;
					END IF;
				ELSE
					SET status = &apos;SKIP&apos;;
				END IF;
			ELSE
				SET status = &apos;SKIP&apos;;
			END IF;
		ELSE
			SET status = &apos;SKIP&apos;;
		END IF;
		IF (cursCombinedResult IS NULL) THEN
			SET cursCombinedResult = &apos;&apos;;
		ELSE
			SET cursCombinedResult = cursCombinedResult || &apos;,  &apos;||CHR(10);
		END IF;
		SET cursCombinedResult = cursCombinedResult ||status||&apos;=&apos;||sqlRow.cursType;
		CALL PRINT(&apos;&apos;);
		SET i = i + 1;
	END WHILE;
END</attribute>
  <attribute name="creationDate" type="LONG">1410976495807</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564745476781</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/375</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/393</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/471</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/374</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/420</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/413</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/446</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/415</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/448</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/491</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="dynamicFileQueueInsert" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileQueueInsert" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>dynamicFileQueueInsert:

	This procedure manages the insert of requests for A=Add, R=Remove, and C=Clean into the database queue table...DYNAMIC_FILE_QUEUE.
	This servers as a way of throttling requests so that the DV server does not become overwhelmed by file/view generation.
	The DYNAMIC_FILE_QUEUE servers as a historical log of activity and can be reported on and sorted using ORGANIZATION, PROJECT_NAME and
	SUBPROJECT_NAME.

 	Input:
		debug						N=no, Y=yes
		organization:				Mandatory - the organization name.  Used for filtering on the DYNAMIC_FILE_QUEUE table.
		projectName:				Mandatory - the project name.  Used for filtering on the DYNAMIC_FILE_QUEUE table.
		subprojectName:				Optional - the sub-project name.  Used for filtering on the DYNAMIC_FILE_QUEUE table.
		actionOriginator			Mandatory - The originating procedure.
		actiontype:					Mandatory - A=Add, R=Remove, C=Cleanup
		requestusername				Mandatory - The request user name comes from the environment context using GetProperty(&apos;CURRENT_USER_NAME&apos;)
		requestdomain				Mandatory - The request domain name comes from the environment context using GetProperty(&apos;CURRENT_USER_DOMAIN&apos;)
		requestfilename				Mandatory - The file name to be acted upon.
		allownullfilename			Mandatory - 0=Do not allow user to pass in null/empty for the file name.  Throw an exception.
											  - 1=Allow the user to pass in null/empty for the file name which results in picking up all unclaimed 
												(not introspected) files in the file system for the invoking user.
		constantslocation			Mandatory - the location of the project &quot;constants&quot; procedure
		metadatalayerpath			Mandatory - Fully qualified path to the Dynamic physical metadata data source folder where the file tables will be introspeted.
			e.g. /shared/ex_project/Physical/Metadata/Dynamic
		formattinglayerpath			Optional - Fully qualified path to the Dynamic physical formatting views folder where the views will be generated.
			e.g. /shared/ex_project/Physical/Formatting/Dynamic
		businesslayerpath			Optional - Fully qualified path to the Dynamic business logical views folder where the views will be generated.
			e.g. /shared/ex_project/Business/Logical/Dynamic
		applicationlayerpath		Optional - Fully qualified path to the Dynamic application views folder where the views will be generated.
			e.g. /shared/ex_project/Application/Views/Dynamic
		publishedschemapath			Mandatory - Fully Qualified path to the Dynamic database schema in the publish area.
			e.g. /services/databases/published_data_source/catalog/Dynamic
		publisheddatabase			Mandatory - The published database name
		retentionpolicydays			Mandatory - Delete files and DV resources older than x days.  This is a numeric value that will be converted from text to integer.
	Output:
		proxyfilename			VARCHAR,
		proxyfilename			VARCHAR,
            status				VARCHAR - status message
									FILE ADD QUEUED				actiontype=&apos;A&apos;
									FILE REMOVE QUEUED			actiontype=&apos;R&apos;
									FILE CLEAN-UP QUEUED		actiontype=&apos;C&apos;
									DUPLICATE REQUEST IGNORED	actiontype=&apos;A&apos;,&apos;R&apos;,&apos;C&apos;

									- Occurs when actiontype = &apos;A&apos; or &apos;R&apos; and the file extension, format or user are invalid.
									&apos;FILE REMOVED.&apos; + 1 of the following
										&apos;INVALID FILE EXTENSION.  VIEWS NOT PUBLISHED&apos; 	-- Invalid extension
										&apos;INVALID FILENAME.  VIEWS NOT PUBLISHED&apos;		-- Invalid filename. Missing the username in the file name.
										&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;	-- The actual or proxy username does not match the file username.
									&apos;UNABLE TO REMOVE FILE.&apos; + 1 of the following
										&apos;INVALID FILE EXTENSION.  VIEWS NOT PUBLISHED&apos;
										&apos;INVALID FILENAME.  VIEWS NOT PUBLISHED&apos;
										&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;
									&apos;FILE DOES NOT EXIST.&apos; + 1 of the following 
										&apos;INVALID FILE EXTENSION.  VIEWS NOT PUBLISHED&apos;
										&apos;INVALID FILENAME.  VIEWS NOT PUBLISHED&apos;
										&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="projectname" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="subprojectname" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="actionOriginator" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="actiontype" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="requestusername" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="requestdomain" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="requestfilename" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="allownullfilename" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="constantslocation" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="metadatalayerpath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="formattinglayerpath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="businesslayerpath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="appliationlayerpath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="publishedschemapath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="publisheddatabase" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="retentionpolicydays" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="proxyfilename" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SendEMail" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="from" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="replyTo" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="to" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="cc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="bcc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="subject" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
      <element name="contentType" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="content" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Content" type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/00_ExecuteDDL" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputSQL" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="outputValue">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/02_display_DYNAMIC_FILE_QUEUE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sortOrder" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestId" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestDateStart" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestDateEnd" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="projectName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="subProjectName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="actionOriginator" direction="IN">
        <datatype type="STRING" maxLength="50"/>
      </element>
      <element name="actionType" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="status" direction="IN">
        <datatype type="STRING" maxLength="100"/>
      </element>
      <element name="message" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="emailError" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="requestFileName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestDomainName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="fileName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="proxyUserName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="proxyUserEmail" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="allowNullFileName" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="formattingLayerPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="businessLayerPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="applicationLayerPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedSchemaPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedDatabase" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="retentionPolicyDays" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="queueResult" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="REQUEST_ID">
            <datatype type="DECIMAL" maxDigits="19" maxFractionalDigits="0"/>
          </element>
          <element name="REQUEST_DATE_START">
            <datatype type="DATETIME"/>
          </element>
          <element name="REQUEST_DATE_END">
            <datatype type="DATETIME"/>
          </element>
          <element name="ORGANIZATION">
            <datatype type="STRING" maxLength="50"/>
          </element>
          <element name="PROJECT_NAME">
            <datatype type="STRING" maxLength="50"/>
          </element>
          <element name="SUBPROJECT_NAME">
            <datatype type="STRING" maxLength="50"/>
          </element>
          <element name="ACTION_ORIGINATOR">
            <datatype type="STRING" maxLength="50"/>
          </element>
          <element name="ACTION_TYPE">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="STATUS">
            <datatype type="STRING" maxLength="100"/>
          </element>
          <element name="MESSAGE">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="EMAIL_ERROR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="REQUEST_FILE_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="REQUEST_USER_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="REQUEST_DOMAIN_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="FILE_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="PROXY_USER_NAME">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="PROXY_USER_EMAIL">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="ALLOW_NULL_FILE_NAME">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="DATA_SOURCE_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="FORMATTING_LAYER_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="BUSINESS_LAYER_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="APPLICATION_LAYER_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="PUBLISHED_SCHEMA_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="PUBLISHED_DATABASE">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="CONSTANTS_PATH">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="RETENTION_POLICY_DAYS">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/deleteFile" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="fileName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="messageAppend" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="fileDeleted" direction="OUT">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/emailGetUser" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="userName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="userEmail" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="EXECUTE_DDL_PACKAGE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="DATASOURCE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="CATALOG_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_SEQ" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_QUEUE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLESPACE_FILEGROUP" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROCESS_WAIT_TIME_SECONDS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CSV_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="EXCEL_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/environment/getEnvName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="envName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFoldersPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* dynamicFileQueueInsert:

	This procedure manages the insert of requests for A=Add, R=Remove, and C=Clean into the database queue table...DYNAMIC_FILE_QUEUE.
	This servers as a way of throttling requests so that the DV server does not become overwhelmed by file/view generation.
	The DYNAMIC_FILE_QUEUE servers as a historical log of activity and can be reported on and sorted using ORGANIZATION, PROJECT_NAME and
	SUBPROJECT_NAME.

 	Input:
		debug						N=no, Y=yes
		organization:				Mandatory - the organization name.  Used for filtering on the DYNAMIC_FILE_QUEUE table.
		projectName:				Mandatory - the project name.  Used for filtering on the DYNAMIC_FILE_QUEUE table.
		subprojectName:				Optional - the sub-project name.  Used for filtering on the DYNAMIC_FILE_QUEUE table.
		actionOriginator			Mandatory - The originating procedure.
		actiontype:					Mandatory - A=Add, R=Remove, C=Cleanup
		requestusername				Mandatory - The request user name comes from the environment context using GetProperty(&apos;CURRENT_USER_NAME&apos;)
		requestdomain				Mandatory - The request domain name comes from the environment context using GetProperty(&apos;CURRENT_USER_DOMAIN&apos;)
		requestfilename				Mandatory - The file name to be acted upon.
		allownullfilename			Mandatory - 0=Do not allow user to pass in null/empty for the file name.  Throw an exception.
											  - 1=Allow the user to pass in null/empty for the file name which results in picking up all unclaimed 
												(not introspected) files in the file system for the invoking user.
		constantslocation			Mandatory - the location of the project &quot;constants&quot; procedure
		metadatalayerpath			Mandatory - Fully qualified path to the Dynamic physical metadata data source folder where the file tables will be introspeted.
			e.g. /shared/ex_project/Physical/Metadata/Dynamic
		formattinglayerpath			Optional - Fully qualified path to the Dynamic physical formatting views folder where the views will be generated.
			e.g. /shared/ex_project/Physical/Formatting/Dynamic
		businesslayerpath			Optional - Fully qualified path to the Dynamic business logical views folder where the views will be generated.
			e.g. /shared/ex_project/Business/Logical/Dynamic
		applicationlayerpath		Optional - Fully qualified path to the Dynamic application views folder where the views will be generated.
			e.g. /shared/ex_project/Application/Views/Dynamic
		publishedschemapath			Mandatory - Fully Qualified path to the Dynamic database schema in the publish area.
			e.g. /services/databases/published_data_source/catalog/Dynamic
		publisheddatabase			Mandatory - The published database name
		retentionpolicydays			Mandatory - Delete files and DV resources older than x days.  This is a numeric value that will be converted from text to integer.
	Output:
		proxyfilename			VARCHAR,
            status				VARCHAR - status message
									FILE ADD QUEUED				actiontype=&apos;A&apos;
									FILE REMOVE QUEUED			actiontype=&apos;R&apos;
									FILE CLEAN-UP QUEUED		actiontype=&apos;C&apos;
									DUPLICATE REQUEST IGNORED	actiontype=&apos;A&apos;,&apos;R&apos;,&apos;C&apos;

									- Occurs when actiontype = &apos;A&apos; or &apos;R&apos; and the file extension, format or user are invalid.
									&apos;FILE REMOVED.&apos; + 1 of the following
										&apos;INVALID FILE EXTENSION.  VIEWS NOT PUBLISHED&apos; 	-- Invalid extension
										&apos;INVALID FILENAME.  VIEWS NOT PUBLISHED&apos;		-- Invalid filename. Missing the username in the file name.
										&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;	-- The actual or proxy username does not match the file username.
									&apos;UNABLE TO REMOVE FILE.&apos; + 1 of the following
										&apos;INVALID FILE EXTENSION.  VIEWS NOT PUBLISHED&apos;
										&apos;INVALID FILENAME.  VIEWS NOT PUBLISHED&apos;
										&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;
									&apos;FILE DOES NOT EXIST.&apos; + 1 of the following 
										&apos;INVALID FILE EXTENSION.  VIEWS NOT PUBLISHED&apos;
										&apos;INVALID FILENAME.  VIEWS NOT PUBLISHED&apos;
										&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE dynamicFileQueueInsert(
	IN	debug					CHAR(1), 		-- N=no, Y=yes
	IN	organization			VARCHAR,
	IN	projectname				VARCHAR,
	IN	subprojectname			VARCHAR,
	IN	actionOriginator		VARCHAR,
	IN	actiontype				VARCHAR,		-- A=Add, R=Remove, C=Cleanup
	IN  requestusername			VARCHAR,
	IN	requestdomain			VARCHAR,
	IN	requestfilename			VARCHAR,
	IN	allownullfilename		SMALLINT,		-- 0 or 1 are valid
	IN	constantslocation		VARCHAR(4000),
	IN	metadatalayerpath		VARCHAR(4000),
	IN	formattinglayerpath		VARCHAR(4000),
	IN	businesslayerpath		VARCHAR(4000),
	IN	appliationlayerpath		VARCHAR(4000),
	IN	publishedschemapath		VARCHAR(4000),
	IN	publisheddatabase		VARCHAR,
	IN 	retentionpolicydays		SMALLINT,
	OUT	proxyfilename			VARCHAR,
	OUT status					VARCHAR
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;dynamicFileQueueInsert&apos;;
	DECLARE	globalConstantsPath		VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.globalConstantsPath;
	DECLARE ex						EXCEPTION;
	DECLARE sequenceNum 			BIGINT;
	DECLARE envName					VARCHAR;
	DECLARE nodehost				VARCHAR;
	DECLARE nodeport				INTEGER;
	DECLARE port_num				VARCHAR;
	DECLARE resExists				BOOLEAN;
	DECLARE fileExtension			VARCHAR;
	DECLARE fileDeleted				INTEGER;
	DECLARE filenamePendingActions	BOOLEAN;
	DECLARE validFileExtension		BOOLEAN;
	DECLARE validFileName			BOOLEAN;
	DECLARE validFileUserAssociation BOOLEAN;
	DECLARE sendEmailException		BOOLEAN DEFAULT false;
	DECLARE message					LONGVARCHAR;
	DECLARE proxyusername			VARCHAR;
	DECLARE	proxyuseremail			LONGVARCHAR;
	DECLARE proxyfileusername		VARCHAR;
	DECLARE email_default			LONGVARCHAR;
	DECLARE email_subjectline		VARCHAR(1000);
	DECLARE email_message			VARCHAR(4000);
	DECLARE email_exception			VARCHAR(4000);
	DECLARE datasourcepath			VARCHAR(4000) DEFAULT null;
	DECLARE supportedCSVFileExt		VARCHAR;
	DECLARE supportedExcelFileExt	VARCHAR;
	DECLARE retentionpolicy			INTEGER;
	DECLARE retentionpolicydefault	VARCHAR;
	DECLARE endTimestampValue		VARCHAR;
	DECLARE insertstatus			VARCHAR(100);
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE seqStatement			LONGVARCHAR;
	DECLARE queueDataSourceType		VARCHAR;
	DECLARE queueDatasourcePath		LONGVARCHAR;
	DECLARE queueCatalogName		VARCHAR;
	DECLARE queueSchemaName			VARCHAR;
	DECLARE queueTableName			VARCHAR;
	DECLARE queueSeqName			VARCHAR;
	DECLARE fullTablePath			LONGVARCHAR;
	DECLARE fullSeqPath				LONGVARCHAR;
	DECLARE messageAppend			VARCHAR;
	DECLARE success					INTEGER;
	DECLARE faultResponse			XML;
	DECLARE pos						INTEGER;
	DECLARE queueResult 			CURSOR /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.queueResultType;

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: organization=[&apos;||NVL(organization,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: projectname=[&apos;||NVL(projectname,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: subprojectname=[&apos;||NVL(subprojectname,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: actiontype=[&apos;||NVL(actiontype,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: requestusername=[&apos;||NVL(requestusername,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: requestdomain=[&apos;||NVL(requestdomain,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: requestfilename=[&apos;||NVL(requestfilename,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: allownullfilename=[&apos;||NVL(CAST(allownullfilename AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: constantslocation=[&apos;||NVL(constantslocation,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: metadatalayerpath=[&apos;||NVL(metadatalayerpath,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: formattinglayerpath=[&apos;||NVL(formattinglayerpath,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: businesslayerpath=[&apos;||NVL(businesslayerpath,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: appliationlayerpath=[&apos;||NVL(appliationlayerpath,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: publishedschemapath=[&apos;||NVL(publishedschemapath,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: publisheddatabase=[&apos;||NVL(publisheddatabase,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INPUT: retentionpolicydays=[&apos;||NVL(CAST(retentionpolicydays AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
	END IF;

	-- Validate input parameters
	IF (allownullfilename IS NULL OR (allownullfilename IS NOT NULL AND allownullfilename &lt;&gt; 0 AND allownullfilename &lt;&gt; 1)) THEN
		RAISE ex VALUE moduleName||&apos;: The constant parameter &quot;ALLOW_NULL_FILE_NAME&quot; must be either 0 or 1.&apos;;
	END IF;
	IF (organization IS NULL OR LENGTH(TRIM(organization)) = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The constant parameter &quot;ORGANIZATION&quot; cannot be null or empty.&apos;;
	END IF;
	IF (projectname IS NULL OR LENGTH(TRIM(projectname)) = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The constant parameter &quot;PROJECT_NAME&quot; cannot be null or empty.&apos;;
	END IF;
	IF (actiontype IS NULL OR LENGTH(TRIM(actiontype)) = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;actiontype&quot; cannot be null or empty.&apos;;
	END IF;
	IF (actiontype NOT IN (&apos;A&apos;,&apos;R&apos;,&apos;C&apos;)) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;actiontype&quot; may only be (&apos;&apos;A&apos;&apos;, &apos;&apos;R&apos;&apos;, &apos;&apos;C&apos;&apos;).&apos;;
	END IF;
	IF (actiontype = &apos;C&apos; AND (retentionpolicydays IS NULL OR retentionpolicydays &lt;= 0)) THEN
		RAISE ex VALUE moduleName||&apos;: The constant parameter &quot;RETENTION_POLICY_DAYS&quot; must have a valid integer &gt; 0 for &quot;actiontype&quot;=&apos;&apos;C&apos;&apos;.&apos;;
	END IF;
	IF (actiontype = &apos;A&apos; AND requestfilename IS NULL AND allownullfilename = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;requestfilename&quot; may not be null when allownullfilename=0.&apos;;
	END IF;
	IF (actiontype = &apos;R&apos; AND (requestfilename IS NULL OR LENGTH(TRIM(requestfilename)) = 0)) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;requestfilename&quot; may not be null or empty when actiontype=&apos;&apos;R&apos;&apos;.&apos;;
	END IF;
	IF (constantslocation IS NULL OR LENGTH(TRIM(constantslocation)) = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;constantslocation&quot; cannot be null or empty.&apos;;
	END IF;
	CALL /lib/resource/ResourceExists(constantslocation, &apos;PROCEDURE&apos;, null, resExists);
	IF (NOT resExists) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;constantslocation&quot; value=[&apos;||constantslocation||&apos;] does not exist.&apos;;
	END IF;
	IF (metadatalayerpath IS NOT NULL AND LENGTH(TRIM(metadatalayerpath)) &gt; 0) THEN
		CALL /lib/resource/ResourceExists(metadatalayerpath, &apos;CONTAINER&apos;, null, resExists);
		IF (NOT resExists) THEN
			BEGIN INDEPENDENT TRANSACTION
				CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(metadatalayerpath, 1, 1, success, faultResponse);
			END;
		END IF;
	END IF;
	IF (formattinglayerpath IS NOT NULL AND LENGTH(TRIM(formattinglayerpath)) &gt; 0) THEN
		CALL /lib/resource/ResourceExists(formattinglayerpath, &apos;CONTAINER&apos;, null, resExists);
		IF (NOT resExists) THEN
			BEGIN INDEPENDENT TRANSACTION
				CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(formattinglayerpath, 1, 1, success, faultResponse);
			END;
		END IF;
	END IF;
	IF (businesslayerpath IS NOT NULL AND LENGTH(TRIM(businesslayerpath)) &gt; 0) THEN
		CALL /lib/resource/ResourceExists(businesslayerpath, &apos;CONTAINER&apos;, null, resExists);
		IF (NOT resExists) THEN
			BEGIN INDEPENDENT TRANSACTION
				CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(businesslayerpath, 1, 1, success, faultResponse);
			END;
		END IF;
	END IF;
	IF (appliationlayerpath IS NOT NULL AND LENGTH(TRIM(appliationlayerpath)) &gt; 0) THEN
		CALL /lib/resource/ResourceExists(appliationlayerpath, &apos;CONTAINER&apos;, null, resExists);
		IF (NOT resExists) THEN
			BEGIN INDEPENDENT TRANSACTION
				CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(appliationlayerpath, 1, 1, success, faultResponse);
			END;
		END IF;
	END IF;
	IF (publishedschemapath IS NOT NULL AND LENGTH(TRIM(publishedschemapath)) &gt; 0) THEN
		CALL /lib/resource/ResourceExists(publishedschemapath, &apos;CONTAINER&apos;, null, resExists);
		IF (NOT resExists) THEN
			BEGIN INDEPENDENT TRANSACTION
				CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(publishedschemapath, 1, 1, success, faultResponse);
			END;
		END IF;
	END IF;


	SET proxyfilename = requestfilename;
	-- Get the CIS Environment Indicator
	CALL /shared/ASAssets/Utilities/environment/getEnvName(envName);
	-- Get the hostname and port
	SELECT A.result INTO nodehost FROM /lib/util/GetProperty(&apos;SERVER_HOSTNAME&apos;) A;
	SELECT A.result INTO port_num FROM /lib/util/GetProperty(&apos;SERVER_JDBC_PORT&apos;) A;
	SET nodeport = CAST(port_num as INTEGER) - 1;

	-- Get the datasource path, catalog and schema name to construct the path dynamically
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DATASOURCE_PATH&apos;, 1, queueDatasourcePath);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CATALOG_NAME&apos;, 1, queueCatalogName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;SCHEMA_NAME&apos;, 1, queueSchemaName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_SEQ&apos;, 1, queueSeqName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_QUEUE&apos;, 1, queueTableName);
	IF (queueDatasourcePath IS NULL OR LENGTH(TRIM(queueDatasourcePath)) = 0) THEN
		RAISE ex VALUE &apos;The datasource path may not be null or empty:  &apos;||globalConstantsPath||&apos;.DATASOURCE_PATH&apos;;
	END IF;
	IF (queueSchemaName IS NULL OR LENGTH(TRIM(queueSchemaName)) = 0) THEN
		RAISE ex VALUE &apos;The schema name may not be null or empty:  &apos;||globalConstantsPath||&apos;.SCHEMA_NAME&apos;;
	END IF;
	IF (queueCatalogName IS NULL OR LENGTH(TRIM(queueCatalogName)) = 0) THEN
		SET queueCatalogName = &apos;&apos;;
	ELSE
		SET queueCatalogName = &apos;/&apos;||queueCatalogName;
	END IF;
	IF (queueTableName IS NULL OR LENGTH(TRIM(queueTableName)) = 0) THEN
		RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_EMAIL&apos;;
	END IF;
	IF (queueSeqName IS NULL OR LENGTH(TRIM(queueSeqName)) = 0) THEN
		RAISE ex VALUE &apos;The sequence name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_SEQ&apos;;
	END IF;
	IF (queueTableName IS NULL OR LENGTH(TRIM(queueTableName)) = 0) THEN
		RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_QUEUE&apos;;
	END IF;
	SET fullTablePath = queueDatasourcePath || queueCatalogName || &apos;/&apos;||queueSchemaName || &apos;/&apos;||queueTableName;
	CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(fullTablePath, null, fullTablePath);

	-- Get the data source type in order to determine the syntax for the sequence
	FOR r AS SELECT dataSourceType FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(queueDatasourcePath, &apos;DATA_SOURCE&apos;) DO
		SET queueDataSourceType = r.dataSourceType;
	END FOR;
	SET fullSeqPath =  &apos;&quot;&apos;||queueSchemaName||&apos;&quot;.&quot;&apos;||queueSeqName||&apos;&quot;&apos;;
	-- queueDataSourceType=Oracle 11g (Thin Driver)
	IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;oracle&apos;) &gt; 0) THEN
		SET seqStatement = &apos;SELECT &apos;||fullSeqPath||&apos;.NEXTVAL SEQUID FROM DUAL&apos;;
	END IF;
	-- queueDataSourceType=Microsoft SQL Server 2012
	IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;sqlserver&apos;) &gt; 0) THEN
		SET seqStatement = &apos;SELECT NEXT VALUE FOR &apos;||fullSeqPath;
	END IF;
	-- queueDataSourceType=PostgreSQL 9.1
	IF (INSTR(LOWER(REPLACE(queueDataSourceType,&apos; &apos;,&apos;&apos;)), &apos;postgre&apos;) &gt; 0) THEN
		SET seqStatement = &apos;SELECT NEXTVAL (&apos;&apos;&apos;||fullSeqPath||&apos;&apos;&apos;)&apos;;
	END IF;
	IF (seqStatement IS NULL OR LENGTH(TRIM(seqStatement)) = 0) THEN
		RAISE ex VALUE &apos;The sequence statement may not be null or empty.  The dataSourceType=[&apos;||NVL(queueDataSourceType,&apos;null&apos;)||&apos; is not supported.&apos;;
	END IF;

	-- Get the email default and other default values
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DEFAULT_EMAIL&apos;, 1, email_default);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DEFAULT_RETENTION_POLICY_DAYS&apos;, 1, retentionpolicydefault);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CSV_SUPPORTED_FILE_EXTENSIONS&apos;, 1, supportedCSVFileExt);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;EXCEL_SUPPORTED_FILE_EXTENSIONS&apos;, 1, supportedExcelFileExt);

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL DATASOURCE_PATH: queueDatasourcePath=[&apos;||NVL(queueDatasourcePath,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL DATASOURCE_PATH: queueDataSourceType=[&apos;||NVL(queueDataSourceType,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL CATALOG_NAME: queueCatalogName=[&apos;||NVL(queueCatalogName,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL SCHEMA_NAME: queueSchemaName=[&apos;||NVL(queueSchemaName,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL DEFAULT_EMAIL: email_default=[&apos;||NVL(email_default,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL DEFAULT_RETENTION_POLICY_DAYS: retentionpolicydefault=[&apos;||NVL(retentionpolicydefault,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL ENVIRONMENT_NAME: envName=[&apos;||NVL(envName,&apos;null&apos;)||&apos;]  nodehost=[&apos;||NVL(nodehost,&apos;null&apos;)||&apos;]  nodeport=[&apos;||NVL(CAST(nodeport as VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL CSV_SUPPORTED_FILE_EXTENSIONS: supportedCSVFileExt=[&apos;||NVL(supportedCSVFileExt,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;GLOBAL EXCEL_SUPPORTED_FILE_EXTENSIONS: supportedExcelFileExt=[&apos;||NVL(supportedExcelFileExt,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;SEQUENCE STATEMENT: seqStatement=[&apos;||NVL(seqStatement,&apos;null&apos;)||&apos;]&apos;);
	END IF;

	-- Establish the default status message
	IF (actiontype = &apos;A&apos;) THEN
		SET status = &apos;FILE ADD QUEUED&apos;;
	ELSEIF (actiontype = &apos;R&apos;) THEN
		SET status = &apos;FILE REMOVE QUEUED&apos;;
	ELSEIF (actiontype = &apos;C&apos;) THEN
		SET status = &apos;FILE CLEAN-UP QUEUED&apos;;
	END IF;

	-- If the proxy username is not null then use the proxy username instead of the actual username.
	-- The proxy username is controlled by the upload application and is passed in when the upload application invokes the dynamicFileCreate procedure.
	-- This is the only mechanism by which to distinguish between the procedure being called by the user and by the upload application.
	-- The upload application will insert the text USERNAME[username]username-filename.ext as part of the filename.
	-- Extract the username proxy from the filename.  Format: USERNAME[username]username-filename.ext
	SET proxyusername = requestusername;
	IF (INSTR(proxyfilename, &apos;USERNAME[&apos;) &gt; 0) THEN
		CALL /shared/ASAssets/Utilities/string/extractBiDelimitedText(proxyfilename,&apos;USERNAME&apos;,&apos;[&apos;,&apos;]&apos;,1,1,1,proxyusername);
		IF (proxyusername IS NOT NULL) THEN
			SET proxyfilename = REPLACE(proxyfilename, &apos;USERNAME[&apos;||proxyusername||&apos;]&apos;, &apos;&apos;);
			SET proxyusername = LOWER(proxyusername);
		END IF;
	END IF;
	-- Get the file username and validate the file format
	SET validFileUserAssociation = true;
	SET validFileName = true;
	SET pos = INSTR(proxyfilename, &apos;-&apos;);
	IF (pos &gt; 0) THEN
		SET proxyfileusername = SUBSTRING(proxyfilename, 1, pos-1);
		IF (proxyusername &lt;&gt; proxyfileusername) THEN
			SET validFileUserAssociation = false;
		END IF;
	ELSE
		SET proxyfileusername = null;
		IF (actiontype &lt;&gt; &apos;C&apos;) THEN
			SET validFileName = false;
		END IF;
	END IF;

	-- Get the file extension and validate the file format extension
	IF (INSTR(proxyfilename, &apos;.&apos;) &gt; 0) THEN
		SET pos = INSTR(proxyfilename, &apos;.&apos;, -1, 1);
		IF (pos &gt; 0) THEN
			SET fileExtension = SUBSTRING(proxyfilename, pos+1);
		END IF;
	END IF;
	SET validFileExtension = false;
	-- The file extension [.csv, .txt] was found.
	IF (INSTR(supportedCSVFileExt, lower(fileExtension)) &gt; 0) THEN
		SET datasourcepath = metadatalayerpath||&apos;/DynamicTempFiles_CSV&apos;;
		SET validFileExtension = true;
	END IF;
	-- The file extension [.xls, .xlsx] was found.
	IF (INSTR(supportedExcelFileExt, lower(fileExtension)) &gt; 0) THEN
		SET datasourcepath = metadatalayerpath||&apos;/DynamicTempFiles_Excel&apos;;
		SET validFileExtension = true;
	END IF;

	-- Get the user email
	CALL /shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/emailGetUser(debug, lower(proxyusername), proxyuseremail);

	-- Evaluate the retention policy
	IF (retentionpolicydays IS NOT NULL) THEN
		SET retentionpolicy = retentionpolicydays;
	ELSE
		IF (retentionpolicydefault IS NULL) THEN
			SET retentionpolicy = 0;
		ELSE
			SET retentionpolicy = CAST(retentionpolicydefault AS INTEGER);
		END IF;
	END IF;

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: validFileExtension=[&apos;||NVL(CAST(validFileExtension AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: validFileName=[&apos;||NVL(CAST(validFileName AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: validFileUserAssociation=[&apos;||NVL(CAST(validFileUserAssociation AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: proxyusername=[&apos;||NVL(proxyusername,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: proxyuseremail=[&apos;||NVL(proxyuseremail,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: proxyfilename=[&apos;||NVL(proxyfilename,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: proxyfileusername=[&apos;||NVL(proxyfileusername,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: datasourcepath=[&apos;||NVL(datasourcepath,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: fileExtension=[&apos;||NVL(fileExtension,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: supportedCSVFileExt=[&apos;||NVL(supportedCSVFileExt,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: supportedExcelFileExt=[&apos;||NVL(supportedExcelFileExt,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: retentionpolicy=[&apos;||NVL(CAST(retentionpolicy AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
	END IF;

	-- Determine if the file request has already been initiated but not completed
	SET filenamePendingActions = false;
	FOR r AS 
		SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/&quot;02_display_DYNAMIC_FILE_QUEUE&quot;(
			debug,				-- Y=debug on, N=debug off
			&apos;DESC&apos;,				-- Valid Values for sorting by REQUEST_DATE_START:   ASC|ASCENDING|DESC|DESCENDING
			null, null,
			&apos;IS NULL&apos;,			-- REQUEST_DATE_END IS NULL:  This represents a request that has been initiated but not completed
			organization,		-- Filter applied on ORGANIZATION if not null.
			projectname,		-- Filter applied on PROJECT_NAME if not null.
			subprojectname,		-- Filter applied on SUBPROJECT_NAME if not null.
			null,
			actiontype,			-- Filter applied on ACTION_TYPE if not null.
			null, null, null, null, null, null,
			proxyfilename,		-- Filter applied on FILE_NAME if not null.
			null, null, null,
			datasourcepath,		-- Filter applied on DATA_SOURCE_PATH if not null.
			null, null, null, null, null, null, null
			) 
	DO
		SET filenamePendingActions = true;
	END FOR;
	
	-- Use the default email if the proxy email is not known.
	-- This may be an indication that the administrator needs to add a user/email.
	IF (proxyuseremail IS NULL OR LENGTH(TRIM(proxyuseremail)) = 0) THEN
		SET proxyuseremail = email_default;
	END IF;

	SET endTimestampValue = &apos;null&apos;;
	SET insertstatus = &apos;IN PROGRESS&apos;;
	SET message = &apos;null&apos;;
	SET email_exception = &apos;null&apos;;
	IF (actiontype = &apos;A&apos; or actiontype = &apos;R&apos;) THEN
		-- If the data source path is null it means the file extension of the file is invalid indicating that the proper data data source path could not be determined.
		IF (NOT validFileExtension) THEN
			-- Invalid file based on an invalid file extension.
			SET datasourcepath = metadatalayerpath||&apos;/DynamicTempFiles_Excel&apos;;
			SET endTimestampValue = &apos;CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP)&apos;;
			SET message = &apos;&apos;&apos;The file extension [&apos;||lower(fileExtension)||&apos;] is not supported for filename=&apos;||proxyfilename||&apos;&apos;&apos;&apos;;
			SET insertstatus = &apos;INVALID FILE EXTENSION.  VIEWS NOT PUBLISHED&apos;;
			SET sendEmailException = true;

		-- Determine if this is a valid filename
		ELSEIF (NOT validFileName) THEN
			SET endTimestampValue = &apos;CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP)&apos;;
			SET message = &apos;&apos;&apos;Missing username in the format: &quot;username-filename.ext&quot; for filename=&apos;||proxyfilename||&apos;&apos;&apos;&apos;;
			SET insertstatus = &apos;INVALID FILENAME.  VIEWS NOT PUBLISHED&apos;;
			SET sendEmailException = true;

		-- Determine if this is a valid username and file username association
		ELSEIF (NOT validFileUserAssociation) THEN
			SET endTimestampValue = &apos;CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP)&apos;;
			SET message = &apos;&apos;&apos;The specified USERNAME[&apos;||proxyusername||&apos;] does not match the file username=[&apos;||proxyfileusername||&apos;] for filename=&apos;||proxyfilename||&apos;&apos;&apos;&apos;;
			SET insertstatus = &apos;FILE NOT ASSOCIATED WITH USERNAME=&apos;||NVL(proxyusername,&apos;null&apos;);
			SET sendEmailException = true;
		END IF;

		IF (sendEmailException) THEN
			-- Delete the invalid file
			CALL /shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/deleteFile(debug, proxyfilename, datasourcepath, insertstatus, fileDeleted, status);
			IF (status IS NOT NULL) THEN
				SET insertstatus = status;
			END IF;
			IF (debug = &apos;Y&apos;) THEN
				CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: status=[&apos;||insertstatus||&apos;]  message=[&apos;||message||&apos;]&apos;);
			END IF;

			-- Email an error that the file extension is not valid to the file upload user.
			IF (proxyuseremail IS NOT NULL AND LENGTH(TRIM(proxyuseremail)) &gt; 0) THEN
				SET email_message = 
&apos;&lt;H1&gt;Dynamic File: Queue Insert Report&lt;/H1&gt;
&lt;H2&gt;&lt;span style=&quot;font-size:20px&quot;&gt;Environment: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(envName,&apos;null&apos;) || &apos;&lt;/span&gt;&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Hostname: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(nodehost,&apos;null&apos;) || &apos;&lt;/span&gt;&apos;||
&apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Port: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(CAST(nodeport AS VARCHAR),&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Organization: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos;|| NVL(organization,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
&apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Project: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(projectname,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
&apos;&lt;span style=&quot;font-size:20px&quot;&gt;    SubProject: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(subprojectname,&apos;N/A&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2 style=&quot;font-size: 15px&quot;&gt;Exception: &apos;||insertstatus||&apos; : &apos;||message||&apos;&lt;/H2&gt;&apos;;

				SET email_subjectline = &apos;Dynamic File: [&apos;||NVL(envName,&apos;no env&apos;)||&apos;/&apos;||NVL(projectname,&apos;no project&apos;)||&apos;/&apos;||NVL(subprojectname,&apos;no subproject&apos;)||&apos;]&apos;||
					&apos; Dynamic File Queue Insert Error Report - &apos;||NVL(proxyfilename,&apos;no proxy filename available.&apos;);
				IF (debug = &apos;Y&apos;) THEN
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;EXCEPTION: Sending Email Subject [exception]:&apos;||CHR(10)||NVL(email_subjectline,&apos;null email subject line&apos;));
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;EXCEPTION: Sending Email Body [exception]:&apos;||CHR(10)||NVL(email_message,&apos;null email message&apos;));
				END IF;

				BEGIN INDEPENDENT TRANSACTION 
					-- Send the email
					CALL /lib/util/SendEMail (
							null, 
							null,
							proxyuseremail,
							null, 
							null,
							email_subjectline,
							&apos;TEXT_HTML&apos;,
							email_message
						);
				EXCEPTION
					ELSE
						SET email_exception = &apos;&apos;&apos;&apos;||SUBSTRING(CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR),1,3998)||&apos;&apos;&apos;&apos;;
						CALL LOG(moduleName||&apos; : SEND EMAIL EXCEPTION: &apos;||CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR));
				END;
			END IF;
		END IF;
	END IF;

	-- Determine if this requests already exists
	IF (filenamePendingActions) THEN
		SET status = &apos;DUPLICATE REQUEST IGNORED&apos;;
	ELSE -- insert the request
		-- Get the next sequence number 
		FOR r AS SELECT outputValue sequenceNum FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/&quot;00_ExecuteDDL&quot;(seqStatement) DO
			SET sequenceNum = r.sequenceNum;
		END FOR;
		IF (sequenceNum IS NULL OR sequenceNum &lt;= 0) THEN
			RAISE ex VALUE &apos;The sequence number was not properly generated.&apos;;
		END IF;
		IF (debug = &apos;Y&apos;) THEN
			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sequenceNum=[&apos;||NVL(CAST(sequenceNum AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		END IF;

		-- Insert the record into the database
		SET sqlStatement = &apos;INSERT INTO &apos;||fullTablePath||&apos; VALUES (&apos;||
			CAST(sequenceNum AS VARCHAR)||&apos;,&apos;||
			&apos;CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP)&apos;||&apos;,&apos;||
			endTimestampValue||&apos;,&apos;||
			NVL(&apos;&apos;&apos;&apos;||organization||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||projectname||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||subprojectname||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||actionOriginator||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;||
			&apos;&apos;&apos;&apos;||actiontype||&apos;&apos;&apos;&apos;||&apos;,&apos;|| 
			&apos;&apos;&apos;&apos;||insertstatus||&apos;&apos;&apos;&apos;||&apos;,&apos;|| 
			message||&apos;,&apos;||
			email_exception||&apos;,&apos;||
			NVL(&apos;&apos;&apos;&apos;||REPLACE(requestfilename,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||requestusername||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||requestdomain||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||REPLACE(proxyfilename,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||proxyusername||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||proxyuseremail||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(CAST(allownullfilename AS VARCHAR),&apos;0&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||datasourcepath||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||formattinglayerpath||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||businesslayerpath||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||appliationlayerpath||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;||
			NVL(&apos;&apos;&apos;&apos;||publishedschemapath||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||publisheddatabase||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;|| 
			NVL(&apos;&apos;&apos;&apos;||constantslocation||&apos;&apos;&apos;&apos;,&apos;null&apos;)||&apos;,&apos;||
			NVL(CAST(retentionpolicy AS VARCHAR),&apos;0&apos;) ||
			&apos;)&apos;;

		IF (debug = &apos;Y&apos;) THEN
			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;INTERNAL: sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
		END IF;
		-- Insert the row
		EXECUTE IMMEDIATE sqlStatement;
	END IF;

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Successfully completed.&apos;);
	END IF;
EXCEPTION
	ELSE
			IF (email_default IS NOT NULL AND LENGTH(TRIM(email_default)) &gt; 0) THEN
		        SET email_message = 
&apos;&lt;H1&gt;Dynamic File: Queue Insert Report&lt;/H1&gt;
&lt;H2&gt;&lt;span style=&quot;font-size:20px&quot;&gt;Environment: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(envName,&apos;null&apos;) || &apos;&lt;/span&gt;&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Hostname: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(nodehost,&apos;null&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Port: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(CAST(nodeport AS VARCHAR),&apos;null&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2&gt;&lt;span style=&quot;font-size: 20px&quot;&gt;Organization: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos;|| NVL(organization,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    Project: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(projectname,&apos;N/A&apos;) || &apos;&lt;/span&gt;&apos;||
   &apos;&lt;span style=&quot;font-size:20px&quot;&gt;    SubProject: &lt;/span&gt;&lt;span style=&quot;font-size:20px;color:blue&quot;&gt;&apos; || NVL(subprojectname,&apos;N/A&apos;) || &apos;&lt;/span&gt;
&lt;/H2&gt;
&lt;H2 style=&quot;font-size: 15px&quot;&gt;Exception: &apos; || SUBSTRING(NVL(CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR),&apos;  &apos;),1,2000) ||&apos;&lt;/H2&gt;&apos;;

				SET email_subjectline = &apos;Dynamic File: [&apos;||NVL(envName,&apos;no env&apos;)||&apos;/&apos;||NVL(projectname,&apos;no project&apos;)||&apos;/&apos;||NVL(subprojectname,&apos;no subproject&apos;)||&apos;]&apos;||
					&apos; Dynamic File Queue Insert Error Report - &apos;||NVL(requestfilename,&apos;no request filename available.&apos;);
				IF (debug = &apos;Y&apos;) THEN
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;EXCEPTION: Sending Email Subject [exception]:&apos;||CHR(10)||NVL(email_subjectline,&apos;null email subject line&apos;));
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;EXCEPTION: Sending Email Body [exception]:&apos;||CHR(10)||NVL(email_message,&apos;null email message&apos;));
				END IF;

				-- Send the email
				CALL /lib/util/SendEMail (
					null, 
					null,
					email_default,
					null, 
					null,
					email_subjectline,
					&apos;TEXT_HTML&apos;,
					email_message
				);
			END IF;
			RAISE;
END</attribute>
  <attribute name="creationDate" type="LONG">1502824293970</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564410960320</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">12/505</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1502824293970</attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="03_display_DYNAMIC_FILE_EMAIL" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/03_display_DYNAMIC_FILE_EMAIL" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>03_display_DYNAMIC_FILE_EMAIL:

	Provides a mechanism to output the contents of the DYNAMIC_FILE_EMAIL table.

	Input
		debug					CHAR(1),		-- Y=debug on, N=debug off
		sortOrder				VARCHAR,		-- Valid Values for sorting by USER_NAME:   ASC|ASCENDING|DESC|DESCENDING
		userName				VARCHAR,		-- Filter applied on USER_NAME if not null.  If % is present perform a LIKE otherwise perform = in WHERE clause.
		userEmail				VARCHAR(4000)	-- Filter applied on USER_EMAIL if not null.  If % is present perform a LIKE otherwise perform = in WHERE clause.
	Output:
		result					CURSOR 		-- Output of the DYNAMIC_FILE_EMAIL table

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="sortOrder" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="userName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="userEmail" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="USER_NAME">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="USER_EMAIL">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="EXECUTE_DDL_PACKAGE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="DATASOURCE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="CATALOG_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_SEQ" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_QUEUE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLESPACE_FILEGROUP" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROCESS_WAIT_TIME_SECONDS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CSV_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="EXCEL_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 03_display_DYNAMIC_FILE_EMAIL:

	Provides a mechanism to output the contents of the DYNAMIC_FILE_EMAIL table.

	Input
		debug					CHAR(1),		-- Y=debug on, N=debug off
		sortOrder				VARCHAR,		-- Valid Values for sorting by USER_NAME:   ASC|ASCENDING|DESC|DESCENDING
		userName				VARCHAR,		-- Filter applied on USER_NAME if not null.  If % is present perform a LIKE otherwise perform = in WHERE clause.
		userEmail				VARCHAR(4000)	-- Filter applied on USER_EMAIL if not null.  If % is present perform a LIKE otherwise perform = in WHERE clause.
	Output:
		result					CURSOR 		-- Output of the DYNAMIC_FILE_EMAIL table

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE &quot;03_display_DYNAMIC_FILE_EMAIL&quot;(
	IN  debug			CHAR(1),		-- Y=debug on, N=debug off
	IN 	sortOrder		VARCHAR,		-- Valid Values for sorting by REQUEST_DATE_START:   ASC|ASCENDING|DESC|DESCENDING
	IN  userName		VARCHAR,		-- Filter applied on USER_NAME if not null.   If % is present perform a LIKE otherwise perform = in WHERE clause.
	IN	userEmail		VARCHAR(4000),	-- Filter applied on USER_EMAIL if not null.  If % is present perform a LIKE otherwise perform = in WHERE clause.
    OUT result 			CURSOR  /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.emailResultType
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;03_display_DYNAMIC_FILE_EMAIL&apos;;
	DECLARE	globalConstantsPath		VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.globalConstantsPath;
	DECLARE sortOrderVal			VARCHAR DEFAULT sortOrder;
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE queueDatasourcePath		LONGVARCHAR;
	DECLARE queueCatalogName		VARCHAR;
	DECLARE queueSchemaName			VARCHAR;
	DECLARE queueTableName			VARCHAR;
	DECLARE fullTablePath			LONGVARCHAR;
	DECLARE validSortOrder			VARCHAR DEFAULT &apos;|ASC|ASCENDING|DESC|DESCENDING|&apos;;
	DECLARE val						LONGVARCHAR;
	DECLARE col						VARCHAR;
	DECLARE whereClauseFilter		LONGVARCHAR;
	DECLARE ex						EXCEPTION;

	IF (sortOrderVal IS NULL OR LENGTH(TRIM(sortOrderVal)) = 0) THEN
		SET sortOrderVal = &apos;&apos;;
	ELSE
		IF (INSTR(validSortOrder, &apos;|&apos;||UPPER(sortOrderVal)||&apos;|&apos;) = 0) THEN
			RAISE ex VALUE &apos;Invalid &quot;sortOrder&quot; value provided.  Valid=[&apos;||validSortOrder||&apos;]&apos;;
		END IF;
	END IF;
	IF (globalConstantsPath IS NULL OR LENGTH(TRIM(globalConstantsPath)) = 0) THEN
		RAISE ex VALUE &apos;The global constants path may not be null or emtpy.&apos;;
	END IF;

	-- This procedure is used to provide a queue for processing &quot;Dynamic View Framework&quot; requests.
	-- Get the datasource path, catalog and schema name to construct the path dynamically
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DATASOURCE_PATH&apos;, 1, queueDatasourcePath);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CATALOG_NAME&apos;, 1, queueCatalogName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;SCHEMA_NAME&apos;, 1, queueSchemaName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_EMAIL&apos;, 1, queueTableName);
	IF (queueDatasourcePath IS NULL OR LENGTH(TRIM(queueDatasourcePath)) = 0) THEN
		RAISE ex VALUE &apos;The datasource path may not be null or empty:  &apos;||globalConstantsPath||&apos;.DATASOURCE_PATH&apos;;
	END IF;
	IF (queueSchemaName IS NULL OR LENGTH(TRIM(queueSchemaName)) = 0) THEN
		RAISE ex VALUE &apos;The schema name may not be null or empty:  &apos;||globalConstantsPath||&apos;.SCHEMA_NAME&apos;;
	END IF;
	IF (queueCatalogName IS NULL OR LENGTH(TRIM(queueCatalogName)) = 0) THEN
		SET queueCatalogName = &apos;&apos;;
	ELSE
		SET queueCatalogName = &apos;/&apos;||queueCatalogName;
	END IF;
	IF (queueTableName IS NULL OR LENGTH(TRIM(queueTableName)) = 0) THEN
		RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_QUEUE&apos;;
	END IF;
	SET fullTablePath = queueDatasourcePath || queueCatalogName || &apos;/&apos;||queueSchemaName || &apos;/&apos;||queueTableName;
	CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(fullTablePath, null, fullTablePath);

	-- Determine the where clause
	SET whereClauseFilter = &apos;&apos;;

	-- Apply where clause for USER_NAME
	SET col = &apos;USER_NAME&apos;;
	SET val = TRIM(REPLACE(userName,CHR(9),&apos; &apos;));
	IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
		IF (length(whereClauseFilter) &gt; 0) THEN
			SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
		END IF;
		-- Reduce the number of double spaces to a single space
		while (INSTR(val, &apos;  &apos;) &gt; 0) do
			set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
		end while;
		-- Check for keywords: IS NULL or IS NOT NULL
		IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
			-- Create the where clause
			SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
		ELSE
			IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
				SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
			ELSE
				SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
			END IF;
		END IF;
	END IF;

	-- Apply where clause for USER_EMAIL
	SET col = &apos;USER_EMAIL&apos;;
	SET val = TRIM(REPLACE(userEmail,CHR(9),&apos; &apos;));
	IF (val IS NOT NULL AND LENGTH(TRIM(val)) &gt; 0) THEN
		IF (length(whereClauseFilter) &gt; 0) THEN
			SET whereClauseFilter = whereClauseFilter ||CHR(10)||&apos;      &apos;||&apos;AND&apos;;
		END IF;
		-- Reduce the number of double spaces to a single space
		while (INSTR(val, &apos;  &apos;) &gt; 0) do
			set val = REPLACE(val, &apos;  &apos;, &apos; &apos;);
		end while;
		-- Check for keywords: IS NULL or IS NOT NULL
		IF (UPPER(val) = &apos;IS NULL&apos; OR UPPER(val) = &apos;IS NOT NULL&apos;) THEN
			-- Create the where clause
			SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; &apos;||UPPER(val);
		ELSE
			IF (INSTR(val, &apos;%&apos;) &gt; 0) THEN
				SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; LIKE &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
			ELSE
				SET whereClauseFilter = whereClauseFilter || &apos; &apos;||col||&apos; = &apos;&apos;&apos;||val||&apos;&apos;&apos;&apos;;
			END IF;
		END IF;
	END IF;

	-- Add the WHERE clause predicate if a where clause exists
	IF (length(whereClauseFilter) &gt; 0) THEN
		SET whereClauseFilter = CHR(10)||&apos;    &apos;||&apos;WHERE&apos; || whereClauseFilter;
	END IF;

	-- Add the where clause and order by clause
	SET sqlStatement = CHR(10)||&apos;    &apos;||&apos;SELECT * FROM &apos;||fullTablePath||whereClauseFilter||CHR(10)||&apos;    &apos;||&apos;ORDER BY USER_NAME &apos;||UPPER(sortOrderVal);

	-- Debug if applicable
	IF (upper(debug) = &apos;Y&apos;) THEN
		CALL print(moduleName||&apos; : sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
	END IF;

	-- Execute the SQL Statement
	OPEN result FOR sqlStatement;
END</attribute>
  <attribute name="creationDate" type="LONG">1410976495807</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564410225346</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/150</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
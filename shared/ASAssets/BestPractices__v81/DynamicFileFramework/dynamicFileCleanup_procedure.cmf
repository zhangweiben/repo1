<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="dynamicFileCleanup" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileCleanup" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>dynamicFileCleanup:

    A custom script that cleans up files and views for Excel (non-ODBC) and File-Delimited data sources 
		based on a retention policy defined by the project&apos;s constants procedure.
 
	Input:
		debug:					Y=debug on, N=debug off
		inFileName:				The name of the file to introspect or null if all files in the file system are to be introspected.
									If null then allowNullFileName must be set to 1.
									Undocumented feature only to be used for the Web Upload Application Service Account.  DO NOT GIVE THIS INFORMATION TO USERS
										Format: USERNAME[nbkid]nbkid-filename.ext
												When the file name contains USERNAME[nbkid], it informs this procedure that the proxy user within the square brackets
												is the actual owner of the file and overrides the environment username which is set when the service account invokes
												this procedure.  This is required because this procedure verifies the actual user with the nbkid prefixed in front of
												the filename.  If they are different it does not perform any action.   With a service account there has to be a way
												in which the service account can inform this procedure who the actual user is.  Therefore the nbkid must match within
												the square brackets and prefixed to the filename in order for an action to be taken.  The service account acquires the
												actual username from its context before invoking this procedure.
		allowNullFileName:		Allows the invoking interface procedure to control the behavior of this implementation procedure.
									0=Do not allow user to pass in null/empty for the file name.  Throw an exception.
									1=Allow the user to pass in null/empty for the file name which results in picking up all unclaimed (not introspected) files in the file system for the invoking user.
   	 	datasourcePath: 		Fully Qualified path to a data source
		publishedDatabase:		The name of the published databases
	
	Output:
		result cursor with columns:
            status				- status message
                                    &apos;RETENTION POLICY EXCEEDED.  &apos;+ dynamicFileRemove message
									or
                                    &apos;FILE NOT SUPPORTED.  &apos;+ dynamicFileRemove message

								- dynamicFileRemove messages:
									&apos;FILE REMOVED.  PUBLISHED VIEWS REMOVED&apos; 
									&apos;FILE REMOVED.  VIEWS NOT PUBLISHED&apos;
									&apos;UNABLE TO REMOVE FILE.  PUBLISHED VIEWS REMOVED&apos;
									&apos;UNABLE TO REMOVE FILE.  VIEWS NOT PUBLISHED&apos;
									&apos;FILE DOES NOT EXIST.  PUBLISHED VIEWS REMOVED&apos;
									&apos;FILE DOES NOT EXIST&apos;
									&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;
									&apos;FILE DOES NOT EXIST.  FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;

            fileName 			- file name from the file system
            publishedTableName 	- name of the published file associated with the file 
            publishedTablePath 	- SQL URL of the published table
	    	publishedDatabase	- published database name
            metadataTableName	- the CIS metadata datasource table name
            metadataTablePath	- the CIS metadata datasource table path

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="projectname" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="subprojectname" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="retentionPolicy" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="datasourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="publishedDatabase" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="status">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="username">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="useremail">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="fileName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="publishedTableName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="publishedTablePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="publishedDatabase">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="metadataTableName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="metadataTablePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/emailGetUser" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="userName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="userEmail" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="EXECUTE_DDL_PACKAGE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="DATASOURCE_PATH" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="CATALOG_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SCHEMA_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_SEQ" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DYNAMIC_FILE_QUEUE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="TABLESPACE_FILEGROUP" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROCESS_WAIT_TIME_SECONDS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_EMAIL" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="DEFAULT_RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="CSV_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="EXCEL_SUPPORTED_FILE_EXTENSIONS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="status">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="fileName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="userEmail">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="fileTimestamp">
            <datatype type="DATETIME"/>
          </element>
          <element name="fileSize">
            <datatype type="INTEGER"/>
          </element>
          <element name="publishedTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="publishedDatabase">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileRemove" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inUsername" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inFileName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedDatabase" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="status">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="fileName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="publishedDatabase">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="metadataTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* dynamicFileCleanup:

    A custom script that cleans up files and views for Excel (non-ODBC) and File-Delimited data sources 
		based on a retention policy defined by the project&apos;s constants procedure.
 
	Input:
		debug:					Y=debug on, N=debug off
		inFileName:				The name of the file to introspect or null if all files in the file system are to be introspected.
									If null then allowNullFileName must be set to 1.
									Undocumented feature only to be used for the Web Upload Application Service Account.  DO NOT GIVE THIS INFORMATION TO USERS
										Format: USERNAME[nbkid]nbkid-filename.ext
												When the file name contains USERNAME[nbkid], it informs this procedure that the proxy user within the square brackets
												is the actual owner of the file and overrides the environment username which is set when the service account invokes
												this procedure.  This is required because this procedure verifies the actual user with the nbkid prefixed in front of
												the filename.  If they are different it does not perform any action.   With a service account there has to be a way
												in which the service account can inform this procedure who the actual user is.  Therefore the nbkid must match within
												the square brackets and prefixed to the filename in order for an action to be taken.  The service account acquires the
												actual username from its context before invoking this procedure.
		allowNullFileName:		Allows the invoking interface procedure to control the behavior of this implementation procedure.
									0=Do not allow user to pass in null/empty for the file name.  Throw an exception.
									1=Allow the user to pass in null/empty for the file name which results in picking up all unclaimed (not introspected) files in the file system for the invoking user.
   	 	datasourcePath: 		Fully Qualified path to a data source
		publishedDatabase:		The name of the published databases
	
	Output:
		result cursor with columns:
            status				- status message
                                    &apos;RETENTION POLICY EXCEEDED.  &apos;+ dynamicFileRemove message
									or
                                    &apos;FILE NOT SUPPORTED.  &apos;+ dynamicFileRemove message

								- dynamicFileRemove messages:
									&apos;FILE REMOVED.  &apos; + 1 of the following:
											&apos;PUBLISHED VIEWS REMOVED&apos;
											&apos;VIEWS NOT PUBLISHED&apos;
									&apos;UNABLE TO REMOVE FILE.  &apos;  + 1 of the following:
											&apos;PUBLISHED VIEWS REMOVED&apos;
											&apos;VIEWS NOT PUBLISHED&apos;
									&apos;FILE DOES NOT EXIST.  &apos; + 1 of the following:
											&apos;PUBLISHED VIEWS REMOVED&apos;
											&apos;VIEWS NOT PUBLISHED&apos;
									&apos;FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;
									&apos;FILE DOES NOT EXIST.  FILE NOT ASSOCIATED WITH USERNAME=&lt;username&gt;&apos;

            fileName 			- file name from the file system
            publishedTableName 	- name of the published file associated with the file 
            publishedTablePath 	- SQL URL of the published table
	    	publishedDatabase	- published database name
            metadataTableName	- the CIS metadata datasource table name
            metadataTablePath	- the CIS metadata datasource table path

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE dynamicFileCleanup(
	IN  debug					CHAR(1),	-- N=no, Y=yes
	IN	organization			VARCHAR,
	IN	projectname				VARCHAR,
	IN	subprojectname			VARCHAR,
	IN  retentionPolicy			INTEGER,
	IN	datasourcePath			VARCHAR(4000),
	IN	publishedDatabase		VARCHAR,
	OUT	result					PIPE (
        status 				VARCHAR(4000),
		username			VARCHAR(255),
		useremail			LONGVARCHAR,
		fileName			VARCHAR(255),
        publishedTableName 	VARCHAR(255), 
        publishedTablePath 	VARCHAR(4000),
		publishedDatabase	VARCHAR(255),
		metadataTableName	VARCHAR(255),
		metadataTablePath	VARCHAR(4000)
		)
)
BEGIN
	DECLARE moduleName				VARCHAR(255) DEFAULT &apos;dynamicFileCleanup&apos;;
	DECLARE	globalConstantsPath		VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.globalConstantsPath;
	DECLARE performClean			BIT;	-- 1=clean/remove old files.  0=Do not clean/remove files but report which ones will be removed.
	DECLARE retentionCompareDate	TIMESTAMP;
	DECLARE username				VARCHAR;
	DECLARE useremail				LONGVARCHAR;
	DECLARE fileName				VARCHAR;
	DECLARE fileUsername			VARCHAR;
	DECLARE prestatus				VARCHAR(4000);
	DECLARE status					VARCHAR(4000);
	DECLARE pos						INTEGER;
	DECLARE ex						EXCEPTION;
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE whereClauseStatement	LONGVARCHAR;
	DECLARE queueDatasourcePath		LONGVARCHAR;
	DECLARE queueCatalogName		VARCHAR;
	DECLARE queueSchemaName			VARCHAR;
	DECLARE queueTableName			VARCHAR;
	DECLARE fullTablePath			LONGVARCHAR;
	DECLARE queueResult 			CURSOR /shared/ASAssets/BestPractices_v81/DynamicFileFramework/constants.queueResultType;

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;: Entered &apos;||moduleName);
	END IF;

	-- Validate input parameters
	IF (organization IS NULL OR LENGTH(TRIM(organization)) = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;organization&quot; cannot be null or empty.&apos;;
	END IF;
	IF (projectname IS NULL OR LENGTH(TRIM(projectname)) = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;projectname&quot; cannot be null or empty.&apos;;
	END IF;
	IF (datasourcePath IS NULL OR LENGTH(TRIM(datasourcePath)) = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;datasourcePath&quot; cannot be null or empty.&apos;;
	END IF;
	IF (retentionPolicy IS NULL) THEN
		RAISE ex VALUE moduleName||&apos;: The input parameter &quot;retentionPolicy&quot; cannot be null or empty.&apos;;
	END IF;

	-- Get the datasource path, catalog and schema name to construct the path dynamically
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DATASOURCE_PATH&apos;, 1, queueDatasourcePath);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;CATALOG_NAME&apos;, 1, queueCatalogName);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;SCHEMA_NAME&apos;, 1, queueSchemaName);
		CALL /shared/ASAssets/Utilities/string/getConstantV2(globalConstantsPath, &apos;DYNAMIC_FILE_QUEUE&apos;, 1, queueTableName);
	IF (queueDatasourcePath IS NULL OR LENGTH(TRIM(queueDatasourcePath)) = 0) THEN
		RAISE ex VALUE moduleName||&apos;: The datasource path may not be null or empty:  &apos;||globalConstantsPath||&apos;.DATASOURCE_PATH&apos;;
	END IF;
	IF (queueSchemaName IS NULL OR LENGTH(TRIM(queueSchemaName)) = 0) THEN
		RAISE ex VALUE &apos;The schema name may not be null or empty:  &apos;||globalConstantsPath||&apos;.SCHEMA_NAME&apos;;
	END IF;
	IF (queueCatalogName IS NULL OR LENGTH(TRIM(queueCatalogName)) = 0) THEN
		SET queueCatalogName = &apos;&apos;;
	ELSE
		SET queueCatalogName = &apos;/&apos;||queueCatalogName;
	END IF;
	IF (queueTableName IS NULL OR LENGTH(TRIM(queueTableName)) = 0) THEN
		RAISE ex VALUE &apos;The table name may not be null or empty:  &apos;||globalConstantsPath||&apos;.DYNAMIC_FILE_QUEUE&apos;;
	END IF;
	SET fullTablePath = queueDatasourcePath || queueCatalogName || &apos;/&apos;||queueSchemaName || &apos;/&apos;||queueTableName;
	CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(fullTablePath, null, fullTablePath);

	-- Calculate retention date
	SET retentionCompareDate = CURRENT_TIMESTAMP - retentionPolicy;

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: ORGANIZATION=&apos;||NVL(organization,&apos;null&apos;));
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: PROJECT NAME=&apos;||NVL(projectname,&apos;null&apos;));
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: SUBPROJECT NAME=&apos;||NVL(subprojectname,&apos;null&apos;));
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: RETENTION POLICY=&apos;||NVL(CAST(retentionPolicy AS VARCHAR),&apos;null&apos;));
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: PUBLISHED DATABASE=[&apos;||NVL(publishedDatabase,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    INPUT: METADATA DATASOURCE PATH=[&apos;||NVL(datasourcePath,&apos;null&apos;)||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    CALCULATED: retentionCompareDate=&apos;||NVL(CAST(retentionCompareDate AS VARCHAR),&apos;null&apos;));
	END IF;

	FOR r AS 
		SELECT DISTINCT status, fileName, fileTimestamp 
			FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileList(debug, datasourcePath)
			WHERE (status = &apos;PUBLISHED&apos; and metadataTablePath like datasourcePath||&apos;%&apos;)
			   OR  status = &apos;NOT PUBLISHED&apos; 
			   OR  status = &apos;FILE NOT SUPPORTED&apos;
	DO
		-- Initialize variables
		SET username = null;
		SET useremail = null;
		SET fileName = r.fileName;
		SET whereClauseStatement = &apos;&apos;;
		-- Get the file username if it is prepended to the filename
		SET fileUsername = null;
		SET pos = INSTR(fileName, &apos;-&apos;);
		IF (pos &gt; 0) THEN
			SET fileUsername = SUBSTRING(fileName, 1, pos-1);
		END IF;

		-- Lookup the original username for the latest file that was submitted.
		IF (organization IS NOT NULL AND LENGTH(TRIM(organization)) &gt; 0) THEN
			SET whereClauseStatement = whereClauseStatement || &apos;       AND ORGANIZATION = &apos;&apos;&apos;||organization||&apos;&apos;&apos;&apos;||CHR(10);
		END IF;
		IF (projectname IS NOT NULL AND LENGTH(TRIM(projectname)) &gt; 0) THEN
			SET whereClauseStatement = whereClauseStatement || &apos;       AND PROJECT_NAME = &apos;&apos;&apos;||projectname||&apos;&apos;&apos;&apos;||CHR(10);
		END IF;
		IF (subprojectname IS NOT NULL AND LENGTH(TRIM(subprojectname)) &gt; 0) THEN
			SET whereClauseStatement = whereClauseStatement || &apos;       AND SUBPROJECT_NAME = &apos;&apos;&apos;||subprojectname||&apos;&apos;&apos;&apos;||CHR(10);
		END IF;
		IF (fileName IS NOT NULL AND LENGTH(TRIM(fileName)) &gt; 0) THEN
			SET whereClauseStatement = whereClauseStatement || &apos;       AND FILE_NAME = &apos;&apos;&apos;||REPLACE(fileName,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;&apos;||CHR(10);
		END IF;
		IF (fileUsername IS NOT NULL AND LENGTH(TRIM(fileUsername)) &gt; 0) THEN
			SET whereClauseStatement = whereClauseStatement || &apos;       AND PROXY_USER_NAME = &apos;&apos;&apos;||REPLACE(fileUsername,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;&apos;||CHR(10);
		END IF;

		SET sqlStatement = &apos;SELECT * FROM &apos;||fullTablePath||CHR(10)||
				&apos; WHERE REQUEST_ID = &apos;||CHR(10)||
				&apos;   ( SELECT MAX(REQUEST_ID) FROM &apos;||fullTablePath||CHR(10)||
                &apos;     WHERE ACTION_TYPE = &apos;&apos;A&apos;&apos;&apos;||CHR(10)||
				whereClauseStatement || 
				&apos;   )&apos;;
		IF (debug = &apos;Y&apos;) THEN
			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
		END IF;

		-- Perform the lookup
		OPEN queueResult for sqlStatement;
		FOR u AS queueResult DO
			-- Get the last record for this particular file which is the most current record because the rows are sorted by the REQUEST_DATE_START ascending.
			SET username = u.PROXY_USER_NAME;
			SET useremail = u.PROXY_USER_EMAIL;
		END FOR;
		-- If the file exists but there is no entry in the database then try an alternative approach to getting the user name and email
		IF (username IS NULL AND useremail IS NULL) THEN
			-- Get the file username
			SET pos = INSTR(r.fileName, &apos;-&apos;);
			IF (pos &gt; 0) THEN
				SET username = SUBSTRING(r.fileName, 1, pos-1);
			ELSE
				SET username = &apos;admin&apos;;
			END IF;
			-- Get the email for the username
			CALL /shared/ASAssets/BestPractices_v81/DynamicFileFramework/Helper/emailGetUser(debug, username, useremail);
		ELSE
			SET fileName = &apos;USERNAME[&apos;||username||&apos;]&apos;||fileName;
		END IF;

		IF (debug = &apos;Y&apos;) THEN
			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fileName=[&apos;||fileName||&apos;]  status=[&apos;||r.status||&apos;]  fileTimestamp=[&apos;||r.fileTimestamp||&apos;]  username=[&apos;||NVL(username,&apos;null&apos;)||&apos;]  useremail=[&apos;||NVL(useremail,&apos;null&apos;)||&apos;]&apos;);
		END IF;

		-- Remove the file if it is beyond the retention policy
		IF (r.fileTimestamp &lt;= retentionCompareDate OR r.status = &apos;FILE NOT SUPPORTED&apos;) THEN
			SET status = &apos;&apos;;
			IF (r.status = &apos;FILE NOT SUPPORTED&apos;) THEN
				SET prestatus = r.status||&apos;.  &apos;;
				IF (debug = &apos;Y&apos;) THEN
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;File is not supported and will be deleted.  Filename=[&apos;||r.fileName||&apos;]&apos;);
				END IF;
			ELSEIF (r.fileTimestamp &lt;= retentionCompareDate) THEN
				SET prestatus = &apos;RETENTION POLICY EXCEEDED.  &apos;;
				IF (debug = &apos;Y&apos;) THEN
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;File timestamp is older than the retention policy and will be deleted.  Filename=[&apos;||r.fileName||&apos;]&apos;||
						&apos;  fileTimestamp=[&apos;||r.fileTimestamp||&apos;]  &lt;= retentionCompareDate=[&apos;||retentionCompareDate||&apos;]&apos;);
				END IF;
			END IF;

			-- Delete the file and views
			FOR m AS SELECT * FROM /shared/ASAssets/BestPractices_v81/DynamicFileFramework/dynamicFileRemove(debug, username, fileName, datasourcePath, publishedDatabase) DO
				SET status = prestatus || m.status;
				IF (debug = &apos;Y&apos;) THEN
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;REMOVED FILE:  Filename=[&apos;||m.fileName||&apos;]  status=[&apos;||status||&apos;]&apos;);
				END IF;
				INSERT INTO result VALUES(status, username, useremail, r.fileName, m.publishedTableName, m.publishedTablePath, m.publishedDatabase, m.metadataTableName, m.metadataTablePath);
			END FOR;
		ELSE
			IF (debug = &apos;Y&apos;) THEN
				CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;File timestamp is within the retention policy.  Filename=[&apos;||r.fileName||&apos;]&apos;||
					&apos;  fileTimestamp=[&apos;||r.fileTimestamp||&apos;]  &gt; retentionCompareDate=[&apos;||retentionCompareDate||&apos;]&apos;);
			END IF;
		END IF;
	END FOR;

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;: Exiting &apos;||moduleName);
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1503576149458</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">1500</attribute>
  <attribute name="creatorUserName" type="STRING">dynview</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564411089594</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">1500</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1503576149458</attribute>
</metadata>
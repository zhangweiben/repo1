<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="dynamicFileRebuild" path="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/Templates/Application/Services/Dynamic/dynamicFileRebuild" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>dynamicFileRebuild:

    A custom script that rebuilds the published views for files that are not currently published.
	This can be useful in a situation where DV failed to publish a view.
	This can be useful in a sitation where Dynamic File had to be rebuilt and the files in the file system 
		need to republished in bulk without user intervention.
    Assumption: Publish area (Virtual database, Catalog and Schema) and Datasources are already created.

    Invoked externally by a user: select * from CATALOG.DYNAMIC.dynamicFileRebuild()

     Input: none
    Output:
        Cursor with columns:
            status               - status messages:
									Queuing Messages:
										&apos;FILE ADD QUEUED&apos;
										&apos;INVALID FILENAME&apos;
										&apos;DUPLICATE REQUEST IGNORED&apos;

									Email Messages:
										&apos;UNKNOWN&apos;
										&apos;FILE ADDED.  NO VIEWS PUBLISHED&apos;
										&apos;FILE ADDED.  VIEWS PUBLISHED&apos;
										&apos;FILE ADDED.  VIEWS ALREADY EXISTS&apos;
										&apos;FILE ADDED.  VIEWS OVERWRITTEN&apos;
										&apos;FILE DOES NOT EXIST&apos;

										- Occurs when the file being added contains no Excel sheets and/or no columns and no data
										&apos;FILE REMOVED.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
										&apos;UNABLE TO REMOVE FILE.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
										&apos;FILE DOES NOT EXIST.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;

										&apos;ERROR: Data source type not supported: &apos;+&lt;dataSourceType&gt;
										&apos;ERROR: File Name is required.&apos;  - occurs when (allowNullFileName = 0 and (fileName IS NULL OR LENGTH(fileName) = 0))

            fileName             - file name from the file system
            fileTimestamp 		 - file timestamp, 
            fileSize 			 - file size,
            publishedTableName   - name of the published file associated with the file 
            publishedTablePath   - SQL URL of the published table
            publishedDatabase    - published database name

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

    This procedure was generated by &quot;initCreateResources&quot; on YYYY-MM-DD</annotation>
  <parameters>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="status">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="fileName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="fileTimestamp">
          <datatype name="TIMESTAMP" type="DATETIME"/>
        </element>
        <element name="fileSize">
          <datatype name="BIGINT" type="INTEGER"/>
        </element>
        <element name="publishedTableName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="publishedTablePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="publishedDatabase">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_LOCAL_LOOPBACK/BestPractices_v81/DynamicFileFramework/dynamicFileQueueInsert" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="projectname" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="subprojectname" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="actionOriginator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="actiontype" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestusername" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestdomain" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="requestfilename" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="allownullfilename" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="constantslocation" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="metadatalayerpath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="formatlayerpath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="businesslayerpath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="appliationlayerpath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publishedschemapath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="publisheddatabase" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="retentionpolicydays" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="proxyfilename" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/Templates/Application/Services/Dynamic/constants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="ORGANIZATION" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PROJECT_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SUBPROJECT_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PUBLISHED_DATABASE" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PUBLISHED_SCHEMA_PATH" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="APPLICATION_LAYER" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="BUSINESS_LAYER" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="FORMATTING_LAYER" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="PHYSICAL_METADATA_LAYER" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="RETENTION_POLICY_DAYS" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ALLOW_NULL_FILE_NAME" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DynamicFileFramework/Templates/Application/Services/Dynamic/dynamicFileList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="status">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="fileName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="fileTimestamp">
            <datatype type="DATETIME"/>
          </element>
          <element name="fileSize">
            <datatype type="INTEGER"/>
          </element>
          <element name="metadataTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTableName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="publishedTablePath">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="publishedDatabase">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* dynamicFileRebuild:

    A custom script that rebuilds the published views for files that are not currently published.
	This can be useful in a situation where DV failed to publish a view.
	This can be useful in a sitation where Dynamic File had to be rebuilt and the files in the file system 
		need to republished in bulk without user intervention.
    Assumption: Publish area (Virtual database, Catalog and Schema) and Datasources are already created.

    Invoked externally by a user: select * from CATALOG.DYNAMIC.dynamicFileRebuild()

     Input: none
    Output:
        Cursor with columns:
            status               - status messages:
									Queuing Messages:
										&apos;FILE ADD QUEUED&apos;
										&apos;INVALID FILENAME&apos;
										&apos;DUPLICATE REQUEST IGNORED&apos;

									Email Messages:
										&apos;UNKNOWN&apos;
										&apos;FILE ADDED.  NO VIEWS PUBLISHED&apos;
										&apos;FILE ADDED.  VIEWS PUBLISHED&apos;
										&apos;FILE ADDED.  VIEWS ALREADY EXISTS&apos;
										&apos;FILE ADDED.  VIEWS OVERWRITTEN&apos;
										&apos;FILE DOES NOT EXIST&apos;

										- Occurs when the file being added contains no Excel sheets and/or no columns and no data
										&apos;FILE REMOVED.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
										&apos;UNABLE TO REMOVE FILE.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;
										&apos;FILE DOES NOT EXIST.  NO COLUMNS DETECTED.  VIEWS NOT PUBLISHED&apos;

										&apos;ERROR: Data source type not supported: &apos;+&lt;dataSourceType&gt;
										&apos;ERROR: File Name is required.&apos;  - occurs when (allowNullFileName = 0 and (fileName IS NULL OR LENGTH(fileName) = 0))

            fileName             - file name from the file system
            fileTimestamp 		 - file timestamp, 
            fileSize 			 - file size,
            publishedTableName   - name of the published file associated with the file 
            publishedTablePath   - SQL URL of the published table
            publishedDatabase    - published database name

	Modified Date:	Modified By:		CSW Version:	Reason:
	02/20/2018		Mike Tinius			7.0.5			Adapted for Assets Data Abstraction Best Practices

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

    This procedure was generated by &quot;initCreateResources&quot; on YYYY-MM-DD
*/
PROCEDURE dynamicFileRebuild(
    OUT result PIPE (
		status				VARCHAR(4000),
        fileName 			VARCHAR(255),
        fileTimestamp 		TIMESTAMP, 
        fileSize 			BIGINT,
        publishedTableName 	VARCHAR(255), 
        publishedTablePath 	VARCHAR(4000),
		publishedDatabase	VARCHAR(255)
        )
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;dynamicFileRebuild&apos;;
	DECLARE requestfilename		VARCHAR;
	DECLARE fileUsername		VARCHAR;
	DECLARE constantsLocation	VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/DynamicFileFramework/Templates/Application/Services/Dynamic/constants.constantsLocation;
	DECLARE organization		VARCHAR;
	DECLARE projectName			VARCHAR;
	DECLARE subprojectName		VARCHAR;
	DECLARE publishedDatabase	VARCHAR;
	-- Published Schema Path: e.g. /services/databases/published_data_source/catalog/Dynamic : Dynamic is recommended for the schema name
	DECLARE publishedSchemaPath VARCHAR(4000);
	-- Physical Metadata Path                           /shared/base_project_path/Physical/Metadata/Dynamic
	DECLARE metadataLayerPath	VARCHAR(4000);
	-- Middle layer paths [optional]
	DECLARE formattingLayerPath	VARCHAR(4000);			--/shared/base_project_path/Physical/Formatting/Dynamic
	DECLARE businessLayerPath	VARCHAR(4000);			--/shared/base_project_path/Business/Logical/Dynamic
	DECLARE applicationLayerPath VARCHAR(4000);			--/shared/base_project_path/Application/Views/Dynamic

	-- Allows this invoking interface procedure to control the behavior of the implementation procedure.
	DECLARE allowNullFileName	VARCHAR;				--	0=Do not allow user to pass in null/empty for the file name.  Throw an exception.
														--	1=Allow the user to pass in null/empty for the file name which results in picking up all unclaimed (not introspected) files in the file system for the invoking user.
	DECLARE requestusername		VARCHAR;
	DECLARE requestdomain		VARCHAR;
	DECLARE retentionpolicydays VARCHAR;				-- Delete files and DV resources older than x days.  This is a numeric value that will be converted from text to integer.
	DECLARE proxyfilename		VARCHAR;
	DECLARE status				VARCHAR;
	DECLARE pos					INTEGER;

	-- Get the current username in order to prefix to the file name
	call /lib/util/GetProperty(&apos;CURRENT_USER_NAME&apos;,requestusername);
	call /lib/util/GetProperty(&apos;CURRENT_USER_DOMAIN&apos;,requestdomain);

	-- Get application constants
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;ORGANIZATION&apos;, 1, organization);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;PROJECT_NAME&apos;, 1, projectName);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;SUBPROJECT_NAME&apos;, 1, subprojectName);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;PUBLISHED_DATABASE&apos;, 1, publishedDatabase);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;PUBLISHED_SCHEMA_PATH&apos;, 1, publishedSchemaPath);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;APPLICATION_LAYER&apos;, 1, applicationLayerPath);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;BUSINESS_LAYER&apos;, 1, businessLayerPath);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;FORMATTING_LAYER&apos;, 1, formattingLayerPath);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;PHYSICAL_METADATA_LAYER&apos;, 1, metadataLayerPath);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;ALLOW_NULL_FILE_NAME&apos;, 1, allowNullFileName);
	call /shared/ASAssets/Utilities/string/getConstantV2(constantsLocation, &apos;RETENTION_POLICY_DAYS&apos;, 1, retentionpolicydays);

	-- Search for all files not published and queue them up to be added
	for f as 
		select * from /shared/ASAssets/BestPractices_v81/DynamicFileFramework/Templates/Application/Services/Dynamic/dynamicFileList()
			where status = &apos;NOT PUBLISHED&apos;
	do
		set requestfilename = f.fileName;

		-- Get the file username
		SET pos = INSTR(requestfilename, &apos;-&apos;);
		IF (pos &gt; 0) THEN
			SET fileUsername = SUBSTRING(requestfilename, 1, pos-1);
		END IF;

		-- Construct the filename with special proxy username syntax: USERNAME[user]filename.ext
		if (fileUsername is not null and length(trim(fileUsername)) &gt; 0) then
			set requestfilename = &apos;USERNAME[&apos;||fileUsername||&apos;]&apos;||f.fileName;
		end if;

		-- Queue up the file to be published
		-- Insert a request into the database table queue
		call /shared/ASAssets/BestPractices_v81/DynamicFileFramework/DYNAMIC_FILE_LOCAL_LOOPBACK/BestPractices_v81/DynamicFileFramework/dynamicFileQueueInsert(
			&apos;N&apos;,
			organization,
			projectName,
			subprojectName,
			moduleName,
			&apos;A&apos;,	-- ADD File
			requestusername,
			requestdomain,
			requestfilename,
			CAST(allowNullFileName AS SMALLINT),
			constantsLocation,
			metadataLayerPath,
			formattingLayerPath,
			businessLayerPath,
			applicationLayerPath,
			publishedSchemaPath,
			publishedDatabase,
			CAST(retentionpolicydays AS SMALLINT),
			proxyfilename,
			status
		);
		INSERT INTO result(status, fileName, fileTimestamp, fileSize, publishedTableName, publishedTablePath, publishedDatabase) 
				VALUES (status, proxyfilename, f.fileTimestamp, f.fileSize, &apos;TBD&apos;, &apos;TBD&apos;, publishedDatabase);
	end for;
END</attribute>
  <attribute name="creationDate" type="LONG">1504125338038</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap_im</attribute>
  <attribute name="creatorUserId" type="INTEGER">1914</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564410136788</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">1914</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1504125338038</attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="pCommon_Model_Union" path="/shared/ASAssets/BestPractices_v81/DataSource/pCommon_Model_Union" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="CommonModelType" type="TABLE" refId="1">
        <element name="datasourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="projectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="greatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="grandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="physicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="physicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourceNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="logicalName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="annotation">
          <datatype name="VARCHAR" type="STRING" maxLength="32767"/>
        </element>
        <element name="logicalTransformation">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="physicalNameEncoded">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/Common_Model_v3_file1.csv" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32768"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/Common_Model_v3_file2.csv" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32768"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/Common_Model_v3_file3.csv" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32768"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/Common_Model_v3_file4_sample_lab.csv" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32768"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32768"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/Common_Model_v3_file1.xlsx/Sheet1" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/Common_Model_v3_file2.xlsx/Sheet1" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/Common_Model_v3_file3.xlsx/Sheet1" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/Common_Model_v3_file4_sample_lab.xlsx/Sheet1" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="Data Source">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Project Folder Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Great Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Grandparent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Parent Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Container Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Physical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Name">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Type">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Transformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="Logical Definition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="System Messages">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="datasourceName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="projectFolderName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="greatGrandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="grandparentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="parentName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="containerName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="physicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalName">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="logicalType">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="compositeTransformation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="annotation">
        <datatype type="STRING" maxLength="32767"/>
      </element>
      <element name="blank">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/DataSource/common_model_v3" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="ResourceId">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="DataSource">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ProjectFolderName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="GreatGrandParentName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="GrandParentName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ParentName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ContainerName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="PhysicalName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="NativeType">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="LogicalName">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="LogicalType">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="LogicalTransformation">
        <datatype type="STRING" maxLength="1024"/>
      </element>
      <element name="LogicalDefinition">
        <datatype type="STRING" maxLength="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="codingListType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	Modified Date:	Modified By:		CSW Version:	Reason:
	11/21/2014		Mike Tinius			6.2.6			Added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the various name fields.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE pCommon_Model_Union(
    OUT result PIPE /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;pCommon_Model_Union&apos;;
	DECLARE codingListColumns		VARCHAR(4000);	-- comma separate list of encoded values
	-- Get the default value for which common model spreadsheet type to access
	DECLARE commonModelType			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.commonModelType;
	DECLARE resourceNameEncoded		VARCHAR;
	DECLARE PUBLIC TYPE CommonModelType ROW(
        datasourceName 				VARCHAR(255), 
        projectFolderName 			VARCHAR(255), 
        greatGrandParentName 		VARCHAR(255), 
        grandParentName 			VARCHAR(255), 
        parentName 					VARCHAR(255), 
        containerName 				VARCHAR(255), 
        physicalName 				VARCHAR(255), 
        physicalType 				VARCHAR(255), 
		resourceNum					INTEGER,
        logicalName 				VARCHAR(255), 
        logicalType 				VARCHAR(255), 
        annotation 					VARCHAR(32767), 
        logicalTransformation 		VARCHAR(1024),
		physicalNameEncoded			VARCHAR(255)
        );
	DECLARE CommonModel				CommonModelType;
	DECLARE rnum					INTEGER DEFAULT 0;
	DECLARE ex						EXCEPTION;

	-- Get the list of encoding values
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList(&apos;codingListColumns&apos;, codingListColumns);

	IF (commonModelType = &apos;EXCEL&apos;) THEN
		/************************************************
		 * Read EXCEL spreadsheets (default)
		 ************************************************/
        FOR r AS  
            SELECT 
				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the datasourceName.
				CAST(CASE WHEN datasourceName IS NOT NULL AND INSTR(datasourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(datasourceName),&apos;&quot;&apos;) = 1 THEN SUBSTR(datasourceName, 2, LENGTH(datasourceName)-2)
					 ELSE datasourceName
					 END AS VARCHAR(255)) datasourceName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the projectFolderName.
				CAST(CASE WHEN projectFolderName IS NOT NULL AND INSTR(projectFolderName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(projectFolderName),&apos;&quot;&apos;) = 1 THEN SUBSTR(projectFolderName, 2, LENGTH(projectFolderName)-2)
					 ELSE projectFolderName
					 END AS VARCHAR(255)) projectFolderName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the greatGrandParentName.
				CAST(CASE WHEN greatGrandParentName IS NOT NULL AND INSTR(greatGrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(greatGrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(greatGrandParentName, 2, LENGTH(greatGrandParentName)-2)
					 ELSE greatGrandParentName
					 END AS VARCHAR(255)) greatGrandParentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the grandParentName.
				CAST(CASE WHEN grandParentName IS NOT NULL AND INSTR(grandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(grandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(grandParentName, 2, LENGTH(grandParentName)-2)
					 ELSE grandParentName
					 END AS VARCHAR(255)) grandParentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the parent name.
				CAST(CASE WHEN parentName IS NOT NULL AND INSTR(parentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(parentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(parentName, 2, LENGTH(parentName)-2)
					 ELSE parentName
					 END AS VARCHAR(255)) parentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the container name.
				CAST(CASE WHEN containerName IS NOT NULL AND INSTR(containerName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(containerName),&apos;&quot;&apos;) = 1 THEN SUBSTR(containerName, 2, LENGTH(containerName)-2)
					 ELSE containerName
					 END AS VARCHAR(255)) containerName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the physical name.
				CAST(CASE WHEN physicalName IS NOT NULL AND INSTR(physicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(physicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(physicalName, 2, LENGTH(physicalName)-2)
					 ELSE physicalName
					 END AS VARCHAR(255)) physicalName,

			    CAST(physicalType AS VARCHAR(255)) physicalType, 
				CAST(0 as INTEGER) resourceNum,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the column name.
				CAST(CASE WHEN logicalName IS NOT NULL AND INSTR(logicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(logicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(logicalName, 2, LENGTH(logicalName)-2)
					 ELSE logicalName
					 END AS VARCHAR(255)) logicalName,

			    CAST(logicalType AS VARCHAR(255)) logicalType, 
			    CAST(annotation AS  VARCHAR(32767)) annotation, 
			    CAST(
				  CASE WHEN logicalType = &apos;TABLE&apos; THEN &apos;&apos;
					   WHEN logicalType = &apos;PROCEDURE&apos; THEN &apos;&apos;
					   ELSE compositeTransformation
				  END AS VARCHAR(4000)) AS logicalTransformation,
				physicalName physicalNameEncoded -- original value
			FROM 
				-- UNION of 4 Excel Spreadsheets
				(((SELECT * FROM /shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/&quot;Common_Model_v3_file1.xlsx&quot;/Sheet1
				 UNION ALL
				  SELECT * FROM /shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/&quot;Common_Model_v3_file2.xlsx&quot;/Sheet1)
				 UNION ALL
				  SELECT * FROM /shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/&quot;Common_Model_v3_file3.xlsx&quot;/Sheet1)
				 UNION ALL
				  SELECT * FROM /shared/ASAssets/BestPractices_v81/DataSource/CommonModelExcelSources/&quot;Common_Model_v3_file4_sample_lab.xlsx&quot;/Sheet1) Common_Model
			WHERE logicalName is not null and LENGTH(logicalName) &gt; 0
		DO
			set CommonModel = r;
			set rnum = rnum + 1;
			set CommonModel.resourceNum = rnum;
			-- Validate input from Excel
			if ( (CommonModel.physicalName is null or LENGTH(CommonModel.physicalName) = 0) and (CommonModel.logicalType is null or LENGTH(CommonModel.logicalType) = 0) ) then
				raise ex value &apos;SPREADSHEET ERROR (Common_Model_v3_file[1-3].xlsx): Logical Type required.  New fields that are not inherited from a physical view must be assigned a logical type.&apos;;
			end if;
			-- Get the encoded value for the original resourceName value
			if (INSTR(CommonModel.physicalNameEncoded, &apos;&quot;&apos;) &gt; 0) then
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, CommonModel.physicalNameEncoded, moduleName, &apos;N&apos;, &apos;physicalNameEncoded&apos;, CommonModel.physicalNameEncoded);
			end if;
			INSERT INTO result VALUES(CommonModel);
		END FOR;
	ELSEIF (commonModelType = &apos;CSV&apos;) THEN
		/************************************************
		 * Read CSV spreadsheets
		 ************************************************/
        FOR r AS 
			SELECT
				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the datasourceName.
				CAST(CASE WHEN datasourceName IS NOT NULL AND INSTR(datasourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(datasourceName),&apos;&quot;&apos;) = 1 THEN SUBSTR(datasourceName, 2, LENGTH(datasourceName)-2)
					 ELSE datasourceName
					 END AS VARCHAR(255)) datasourceName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the projectFolderName.
				CAST(CASE WHEN projectFolderName IS NOT NULL AND INSTR(projectFolderName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(projectFolderName),&apos;&quot;&apos;) = 1 THEN SUBSTR(projectFolderName, 2, LENGTH(projectFolderName)-2)
					 ELSE projectFolderName
					 END AS VARCHAR(255)) projectFolderName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the greatGrandParentName.
				CAST(CASE WHEN greatGrandParentName IS NOT NULL AND INSTR(greatGrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(greatGrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(greatGrandParentName, 2, LENGTH(greatGrandParentName)-2)
					 ELSE greatGrandParentName
					 END AS VARCHAR(255)) greatGrandParentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the grandParentName.
				CAST(CASE WHEN grandParentName IS NOT NULL AND INSTR(grandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(grandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(grandParentName, 2, LENGTH(grandParentName)-2)
					 ELSE grandParentName
					 END AS VARCHAR(255)) grandParentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the parent name.
				CAST(CASE WHEN parentName IS NOT NULL AND INSTR(parentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(parentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(parentName, 2, LENGTH(parentName)-2)
					 ELSE parentName
					 END AS VARCHAR(255)) parentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the container name.
				CAST(CASE WHEN containerName IS NOT NULL AND INSTR(containerName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(containerName),&apos;&quot;&apos;) = 1 THEN SUBSTR(containerName, 2, LENGTH(containerName)-2)
					 ELSE containerName
					 END AS VARCHAR(255)) containerName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the physical name.
				CAST(CASE WHEN physicalName IS NOT NULL AND INSTR(physicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(physicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(physicalName, 2, LENGTH(physicalName)-2)
					 ELSE physicalName
					 END AS VARCHAR(255)) physicalName,

			    CAST(physicalType AS VARCHAR(255)) physicalType, 
				CAST(0 as INTEGER) resourceNum,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the column name.
				CAST(CASE WHEN logicalName IS NOT NULL AND INSTR(logicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(logicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(logicalName, 2, LENGTH(logicalName)-2)
					 ELSE logicalName
					 END AS VARCHAR(255)) logicalName,

				CAST(logicalType AS VARCHAR(255)) logicalType, 
				CAST(annotation AS  VARCHAR(32767)) annotation, 
			    CAST(
				  CASE WHEN logicalType = &apos;TABLE&apos; THEN &apos;&apos;
					   WHEN logicalType = &apos;PROCEDURE&apos; THEN &apos;&apos;
					   ELSE compositeTransformation
				  END AS VARCHAR(4000)) AS logicalTransformation,
				physicalName physicalNameEncoded	-- original value
			FROM 
				-- UNION of 4 CSV Spreadsheets (An export of Excel worksheets)
				(((SELECT * FROM      /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/&quot;Common_Model_v3_file1.csv&quot;
				 UNION ALL
				  SELECT * FROM      /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/&quot;Common_Model_v3_file2.csv&quot;)
				 UNION ALL
				  SELECT * FROM      /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/&quot;Common_Model_v3_file3.csv&quot;)
				 UNION ALL
				  SELECT * FROM      /shared/ASAssets/BestPractices_v81/DataSource/CommonModelCSVSources/&quot;Common_Model_v3_file4_sample_lab.csv&quot;) Common_Model
			WHERE logicalName is not null and LENGTH(logicalName) &gt; 0 
		DO
			set CommonModel = r;
			set rnum = rnum + 1;
			set CommonModel.resourceNum = rnum;
			-- Validate input from Excel
			if ( (CommonModel.physicalName is null or LENGTH(CommonModel.physicalName) = 0) and (CommonModel.logicalType is null or LENGTH(CommonModel.logicalType) = 0) ) then
				raise ex value &apos;SPREADSHEET ERROR (Common_Model_v3_file[1-3].csv): Logical Type required.  New fields that are not inherited from a physical view must be assigned a logical type.&apos;;
			end if;
			-- Get the encoded value for the original resourceName value
			if (INSTR(CommonModel.physicalNameEncoded, &apos;&quot;&apos;) &gt; 0) then
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, CommonModel.physicalNameEncoded, moduleName, &apos;N&apos;, &apos;physicalNameEncoded&apos;, CommonModel.physicalNameEncoded);
			end if;
			INSERT INTO result VALUES(CommonModel);
		END FOR;
	ELSEIF (commonModelType = &apos;DB&apos;) THEN
		/************************************************
		 * Read CSV spreadsheets
		 ************************************************/
        FOR r AS 
			SELECT
				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the datasourceName.
				CAST(CASE WHEN DataSource IS NOT NULL AND INSTR(DataSource,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(DataSource),&apos;&quot;&apos;) = 1 THEN SUBSTR(DataSource, 2, LENGTH(DataSource)-2)
					 ELSE DataSource
					 END AS VARCHAR(255)) datasourceName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the projectFolderName.
				CAST(CASE WHEN ProjectFolderName IS NOT NULL AND INSTR(ProjectFolderName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ProjectFolderName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ProjectFolderName, 2, LENGTH(ProjectFolderName)-2)
					 ELSE ProjectFolderName
					 END AS VARCHAR(255)) projectFolderName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the greatGrandParentName.
				CAST(CASE WHEN GreatGrandParentName IS NOT NULL AND INSTR(GreatGrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(GreatGrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(GreatGrandParentName, 2, LENGTH(GreatGrandParentName)-2)
					 ELSE GreatGrandParentName
					 END AS VARCHAR(255)) greatGrandParentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the grandParentName.
				CAST(CASE WHEN GrandParentName IS NOT NULL AND INSTR(GrandParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(GrandParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(GrandParentName, 2, LENGTH(GrandParentName)-2)
					 ELSE GrandParentName
					 END AS VARCHAR(255)) grandParentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the parent name.
				CAST(CASE WHEN ParentName IS NOT NULL AND INSTR(ParentName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ParentName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ParentName, 2, LENGTH(ParentName)-2)
					 ELSE ParentName
					 END AS VARCHAR(255)) parentName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the container name.
				CAST(CASE WHEN ContainerName IS NOT NULL AND INSTR(ContainerName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(ContainerName),&apos;&quot;&apos;) = 1 THEN SUBSTR(ContainerName, 2, LENGTH(ContainerName)-2)
					 ELSE ContainerName
					 END AS VARCHAR(255)) containerName,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the physical name.
				CAST(CASE WHEN PhysicalName IS NOT NULL AND INSTR(PhysicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(PhysicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(PhysicalName, 2, LENGTH(PhysicalName)-2)
					 ELSE PhysicalName
					 END AS VARCHAR(255)) physicalName,

			    CAST(NativeType AS VARCHAR(255)) physicalType, 
				CAST(0 as INTEGER) resourceNum,

				-- 2014/11/21 mtinius: added code to only strip out enclosing double quotes and not if there is a double quote in between as part of the column name.
				CAST(CASE WHEN LogicalName IS NOT NULL AND INSTR(LogicalName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(LogicalName),&apos;&quot;&apos;) = 1 THEN SUBSTR(LogicalName, 2, LENGTH(LogicalName)-2)
					 ELSE LogicalName
					 END AS VARCHAR(255)) logicalName,

				CAST(LogicalType AS VARCHAR(255)) logicalType, 
				CAST(LogicalDefinition AS  VARCHAR(32767)) annotation, 
			    CAST(
				  CASE WHEN LogicalType = &apos;TABLE&apos; THEN &apos;&apos;
					   WHEN LogicalType = &apos;PROCEDURE&apos; THEN &apos;&apos;
					   ELSE LogicalTransformation
				  END AS VARCHAR(4000)) AS logicalTransformation,
				PhysicalName physicalNameEncoded	-- original value
			FROM 
				-- Retrieve from the Postgres &quot;ciscache&quot;.&quot;common_model_v3&quot; database table
				/shared/ASAssets/BestPractices_v81/DataSource/common_model_v3
			WHERE LogicalName is not null and LENGTH(LogicalName) &gt; 0
			ORDER BY ResourceId  
		DO
			set CommonModel = r;
			set rnum = rnum + 1;
			set CommonModel.resourceNum = rnum;
			-- Validate input from Excel
			if ( (CommonModel.physicalName is null or LENGTH(CommonModel.physicalName) = 0) and (CommonModel.logicalType is null or LENGTH(CommonModel.logicalType) = 0) ) then
				raise ex value &apos;SPREADSHEET ERROR (Common_Model_v3_file[1-3].csv): Logical Type required.  New fields that are not inherited from a physical view must be assigned a logical type.&apos;;
			end if;
			-- Get the encoded value for the original resourceName value
			if (INSTR(CommonModel.physicalNameEncoded, &apos;&quot;&apos;) &gt; 0) then
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, CommonModel.physicalNameEncoded, moduleName, &apos;N&apos;, &apos;physicalNameEncoded&apos;, CommonModel.physicalNameEncoded);
			end if;
			INSERT INTO result VALUES(CommonModel);
		END FOR;
	END IF;
END</attribute>
  <attribute name="cacheLastTracking" type="STRING">/shared/PSAssets/BestPractices_v80/DataSource/CommonModelCache/cache_tracking</attribute>
  <attribute name="creationDate" type="LONG">1383011700167</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1572986813872</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">asp5665</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="public_types" type="MAP">
    <item>
      <key type="STRING">CommonModelType</key>
      <value type="BYTE_ARRAY">EB8GAgAPAEMAbwBtAG0AbwBuAE0AbwBkAGUAbABUAHkAcABlBikAQQAvAHMAaABhAHIAZQBkAC8AQQBTAEEAcwBzAGUAdABzAC8AQgBlAHMAdABQAHIAYQBjAHQAaQBjAGUAcwBfAHYAOAAxAC8ARABhAHQAYQBTAG8AdQByAGMAZQAvAHAAQwBvAG0AbQBvAG4AXwBNAG8AZABlAGwAXwBVAG4AaQBvAG4GKgAPAEMAbwBtAG0AbwBuAE0AbwBkAGUAbABUAHkAcABlAxIAAAABAxIAAAABARMBCRQAAAAOECEGFQAOAGQAYQB0AGEAcwBvAHUAcgBjAGUATgBhAG0AZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBsGAgAHAFYAQQBSAEMASABBAFIDEgAAAAIEBAAAAAAAAAD/ARMB/////xAhBhUAEQBwAHIAbwBqAGUAYwB0AEYAbwBsAGQAZQByAE4AYQBtAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAL//xAhBhUAFABnAHIAZQBhAHQARwByAGEAbgBkAFAAYQByAGUAbgB0AE4AYQBtAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAL//xAhBhUADwBnAHIAYQBuAGQAUABhAHIAZQBuAHQATgBhAG0AZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAAAv//ECEGFQAKAHAAYQByAGUAbgB0AE4AYQBtAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAL//xAhBhUADQBjAG8AbgB0AGEAaQBuAGUAcgBOAGEAbQBlAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC//8QIQYVAAwAcABoAHkAcwBpAGMAYQBsAE4AYQBtAGUDLwAAAAEDFgAAAAADGgAAAAEDGwAAAAEDIP////8DIgAAAAADEgAAAAL//xAhBhUADABwAGgAeQBzAGkAYwBhAGwAVAB5AHAAZQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAMSAAAAAv//ECEGFQALAHIAZQBzAG8AdQByAGMAZQBOAHUAbQMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBkGAgAHAEkATgBUAEUARwBFAFIDEgAAAAMEB/////+AAAAABAYAAAAAf/////////8QIQYVAAsAbABvAGcAaQBjAGEAbABOAGEAbQBlAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC//8QIQYVAAsAbABvAGcAaQBjAGEAbABUAHkAcABlAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC//8QIQYVAAoAYQBuAG4AbwB0AGEAdABpAG8AbgMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBsGAgAHAFYAQQBSAEMASABBAFIDEgAAAAQEBAAAAAAAAH//ARMB/////xAhBhUAFQBsAG8AZwBpAGMAYQBsAFQAcgBhAG4AcwBmAG8AcgBtAGEAdABpAG8AbgMvAAAAAQMWAAAAAAMaAAAAAQMbAAAAAQMg/////wMiAAAAAAgZEBsGAgAHAFYAQQBSAEMASABBAFIDEgAAAAUEBAAAAAAAAAQAARMB/////xAhBhUAEwBwAGgAeQBzAGkAYwBhAGwATgBhAG0AZQBFAG4AYwBvAGQAZQBkAy8AAAABAxYAAAAAAxoAAAABAxsAAAABAyD/////AyIAAAAAAxIAAAAC/////w==</value>
    </item>
  </attribute>
  <attribute name="references" type="NULL"/>
</metadata>
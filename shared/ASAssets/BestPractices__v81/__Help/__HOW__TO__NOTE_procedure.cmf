<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="_HOW_TO_NOTE" path="/shared/ASAssets/BestPractices_v81/_Help/_HOW_TO_NOTE" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters></parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/*  _HOW_TO_NOTE

	=========================================================
	Best Practices View Generation Scripts v8.1
	=========================================================
	Author:      Mike Tinius
	Date:        05/20/2015
	CSW Version: 6.2.x, 7.0.x

	-----------------------------------------
	Upgrading Best Practices 1.0 and higher
	-----------------------------------------
	Please refer to &quot;Best Practices Getting Started Guide vX.X.pdf&quot; for instructions on how to upgrade.

	The procedure “upgradeProject” now supports the ability to automatically upgrade any Best Practices version starting with 1.0. 
 
	Location: /shared/ASAssets/BestPractices_v80/_ProjectMaintenance/upgradeProject

	----------------------------------------------------------------------------------
	HOW TO:  Create a new CIS project based on the Best Practices Generic Template
	----------------------------------------------------------------------------------
	*******************
	**** AUTOMATED ****
	*******************
	1) Execute the script to generate a project
		Location: /shared/ASAssets/BestPractices_vXX/_ProjectMaintenance/generateProject()

		a) Execute &quot;/shared/ASAssets/BestPractices_vXX/generateProject(&lt;path-to-project&gt;, generateTestFolder, overwrite)&quot;

	2) Create Data Sources

	3) Execute the script to generate the &quot;ConfigureStartingFolders&quot; script
		Location: /shared/ASAssets/BestPractices_vXX/_ProjectMaintenance/generateConfigureStartingFolders()

		Note:  These folders are the key to the generation scripts.  The entries tell the generation scripts which source folders and target folders to use for the generation.

		a) Execute &quot;/shared/ASAssets/BestPractices_vXX/generateConfigureStartingFolders(&lt;path-to-project&gt;)&quot;

	4) Proceed to the View Generation section.

	****************
	**** MANUAL ****
	****************

	1) Copy the generic best practices project
		a) Right-mouse click on &quot;DataAbstraction_GENERIC_Template&quot; and select copy

	2) Paste the generic project
		a) Select a target folder in which to paste. This is entirely your choice.  
			You may want projects to be created off of the /Shared folder or you may want sub-folders.
		b) Right-mouse click on the selected folder and select paste

	3) Rename the folder to your project name
		a) right-click on the folder and select rename
		b) this also rebinds the procedures in the /generationScripts/Generate folder 
			to the correct /constants/defaultValues() procedure.  Make sure that these are not 
			pointing to /shared/ASAssets/BestPractices_vXX/DataAbstraction_GENERIC_Template/constants/defaultValues
			but instead point to &lt;your-project-folder&gt;/constants/defaultValues().

	4) Update the defaultValues with the correct base path
		Note:  All the generation is dynamically driven off of this basePath.
		a) Copy the folder path
			1) Right click on the folder and select open
			2) Click on the info tab
			3) Copy the path in the &quot;Name:&quot; field
		b) Open &lt;your-project-folder&gt;/constants/defaultValues
		c) Replace basePath with your-project-folder base path.

	5) Edit the ConfigureStartingFolders
		Note:  These folders are the key to the generation scripts.  The entries tell the generation scripts
				which source folders and target folders to use for the generation.
		a) There is an &quot;INSERT&quot; template for each level of the Best Practices containing a source and target folder
			Typically, the target folder for one level becomes the source folder for the next level up.
		b) Modify the folders according to the sources that you have and your folder structure.

	6) Proceed to the View Generation section.

	*************************
	**** VIEW GENERATION ****
	*************************

	1) Generate Views
		Note:  You are now ready to generate views.  View generation options:
		a) generatePhysicalViews()		- This procedure is used for generating &quot;Physical Views&quot; from a data sources. Deprecated but still useful when you need CRUD operations.
		b) generateFormattingViews()	- This procedure is used for generating &quot;Physical/Formatting&quot; views either from other views or from data sources (Physial/Metadata). 
		c) generateLogicalViews()		- This procedure is used for generating &quot;Business/Logical&quot; views either from the Formatting views.  
		d) generateBusinessViews()		- This procedure is used for generating &quot;Business/Business&quot; views from Logical Views.  
		e) generateClientViews()		- This procedure is used for generating &quot;Application/Views&quot; either from lower level views.  
		f) generateClientPublished()	- This procedure is used for generating &quot;Application/Published&quot; views either from lower level views.  
		g) generatePublishedResource()	- This procedure is used for generating LINKS into the Composite Database.
		h) generateViews()				- This procedure is used for generating any layer of &quot;Views&quot; either from other views or from data sources.  
		i) generateCRUDOperation() 		- This procedure is used for generating Read/Write CRUD operation procedures.  In this context, CRUD includes 
											&quot;Create&quot;, &quot;Read&quot;, &quot;Retrieve Primary Key&quot;, &quot;Update&quot;, and &quot;Delete&quot;. 
		j) generateTypeDefinitions()	- This procedure is used for generating &quot;Type Definitions&quot; for use by the Read/Write CRUD procedures.  

		Note: generateTypeDefinitions - this is performed automatically when generateCRUDOperation() is executed.
			It is provided as an independent procedure as well.  Unless specified, this script will generate
			and overwrite any existing procedures named &quot;TypeDefinitionsGen&quot;.

		Note: generateViews() - this is the generic form of the more specific generate-&quot;Layer&quot;-Views().  If 
			the generate-&quot;Layer&quot;-Views() is too confining for your purposes, then you can configure and use
			generateViews() in a more generic way.

		k) generateDatasourceListCSV()	- This procedure is used for generating the Best Practices, Common Model spreadsheet as a CSV file.  The benefit
											of this is that it provides a round-trip capability whereby, you can either start with the spreadsheet and generate the
											Formatting views or you can modify the Formatting views and generate the spreadsheet. 
		l) generateDatasourceList()		- This procedure is used for generating a list of columns either from a folder of views or from data sources (Physical/Metadata). 
											This can be very useful when you need to understand what all the columns are in your datasource.
	-----------------------------------------
	FOLDER CONTENTS: /shared/ASAssets/BestPractices
	-----------------------------------------
	/DataAbstraction_GENERIC_Template - a template used to create a new project based on the Best Practices.
		The folder structure for a project includes the following:
		/_scripts/
			/_Custom				- a folder used to move custom procedures to when upgrading the Best Practices scripts.
			/Configure				- configure the generation scripts with a list of folders (data source / views) to process.
			/Constants				- contains default values and type definitions
			/Display				- display data lineage for a resource or a listing of resources in a folder.
			/Documentation			- provides the ability to generate documentation for the project
			/Generate				- generate views, CRUD operations or type definitions.
									- Dependency on 3 file system csv files located in D:\CompositeSoftware\BestPractices				
										Common_Model_v2_file1.csv, Common_Model_v2_file2.csv, Common_Model_v2_file3.csv
			/Rebind					- rebind all the views from one folder to a different folder.

		/Application 			- container to hold client mapping views and procedures
			/DefinitionSets		- Provides a central location to contain the Schema, WSDL and SQL definition sets
			/Published			- application facing views and procedures that established a contract with the client application.
			/Services 			- application procedures either generated or created here.  Additionally, CRUD procedures are generated here.
			/Views 				- application client facing views are created or generated here.

		/Business	 			- container to hold business logical views.
			/Business			- these views contain “where clauses” to create selective business-oriented views of data or aggregation of data.
			/Logical			- subject areas that are compliant with the customer logical/canonical data model.  These views contain no &quot;where clauses&quot;.

		/Physical				- container to hold physical sources and views.
			/Formatting			- physical to business logical formatting and transformation.
				/Transformation - create XML to relational transformations here.  The formatting would use this folder as a source for XML sources.
			/Physical			- (DEPRECATED) abstraction of the physical sources providing a layer of insulation for rebinding and caching.
			/Metadata			- access to physical source structures (tables, files, web services etc.).
				/SequenceGenerator	- container to hold the sequence generator facade.
					getUniqueID() 	- a facade procedure which is used to invoke the true generator which is implementation specific.
		
	/DataAbstractionSample - a running sample of the Best Practices featuring the following:
		1) Best Practices Layering approach
		2) View generation scripts
		3) Create, Read, RetrievePK, Update, and Delete (CRUD) generation scripts

		Dependencies:  
			1) Oracle SQL DDL scripts required to create the oracle demo tables
			2) File system csv files located in D:\CompositeSoftware\BestPractices
					Common_Model_v2_file1.csv
					Common_Model_v2_file2.csv
					Common_Model_v2_file3.csv
			3) RPAD was added to Composite Server in version 5.1.0.1.
					If you are using the BestPractices code samples prior to that version then
					you must check the box for RPAD in the custom functions and restart the server.

	/Procedures - The implementation of the generation scripts
		Dependencies: /shared/ASAssets/Utilities is a common library of CIS utilities that must be installed first.

	-----------------------------------------
	CRUD Generation FOLDER CONTENTS:
	-----------------------------------------
	CRUD = Create, Read, Update, Delete
	The following details the folder structure that is generated when using the generateCRUDOperation().  
	CRUD operations are generated in &lt;basePath&gt;/&lt;clientServicePath&gt;/CRUD.
	An example can found in /shared/ASAssets/BestPractices/DataAbstractionSample/Application/Client_Services/CRUD

		/CRUD 				- Default CRUD folder
			/Coordinate 	- A coordinator (save) procedure is generated for every target view.
				/test 		- A test harness procedure to invoke the Coordinator procedure.
			/Create 		- A create procedure is generated for every target view.
				/Custom		- A custom procedure that allows the user to modify the values prior to create.
				/test 		- A test harness procedure to invoke the Create procedure.
			/Definitions	- A type definitions procedure is generated with the public types for each view
								Note:  if generating CRUD procedures, &quot;TypeDefinitionsGen()&quot; will be automatically generated and
								will overwrite any existing procedure named &quot;TypeDefinitionsGen&quot;
			/Read 			- A read procedure is generated for every target view.
				/test 		- A test harness procedure to invoke the Read procedure.
			/RetrievePK 	- A retrieve primary key procedure is generated for every target view.
				/test 		- A test harness procedure to invoke the RetrievePK procedure.
			/Update 		- An update procedure is generated for every target view.
				/Custom		- A custom procedure that allows the user to modify the values prior to update.
				/test 		- A test harness procedure to invoke the Update procedure.
			/Delete 		- A delete procedure is generated for every target view.
				/test 		- A test harness procedure to invoke the Delete procedure.
			/Utility 		- A folder to place the custom utility procedures that may be needed for CRUD.
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE &quot;_HOW_TO_NOTE&quot;()BEGIN END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1513829976555</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
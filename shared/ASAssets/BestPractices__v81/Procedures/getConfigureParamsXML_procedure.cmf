<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getConfigureParamsXML" path="/shared/ASAssets/BestPractices_v81/Procedures/getConfigureParamsXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="basePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="generateMode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="outputMode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="generateViews" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="resourceCaseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="columnCaseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="useAliasRule" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="resourcePrefix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="resourceSuffix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="generateWithSourceColumn" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="generateCast" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="generateIndexes" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="ConfigParamsXML" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/Pause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="timeInMilliSeconds" direction="IN">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="scriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="defaultValuesXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="updateValue" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outXMLDoc" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	getConfigureParamsXML:
	-- Data Virtualization Best Practices --
	Set up the ConfigParamsXML by merging the default settings with any any user settings.

	    	--	 	G=Generate the resource names 
	    	--	 	R=Retrieve the resource name,  (resources include PATH names, VIEW names AND COLUMN names)
   	&apos;G&apos;,	-- generateMode,

 	   		--	 	A=Return All abstract columns, 
	    	--	 	U=Return ONLY Unchanged/Dropped columns that were NOT found.
   	&apos;A&apos;,	-- outputMode,

			--     0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation
			--     1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection, 
			--     2=Do generate           - Perform the VIEW Generation with a select * projection, 
	1,		-- generateViews

			--  TABLES/PROCEDURES only.  This caseRule is only used for tables or procedures.
			--	 	Assumption:  The original table name has to have separators (_) for this to work properly.
			--			     If the original word has no separators then the case rule gets applied to the single word
			--		j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
			--		C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
			--		T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
			--		U=UPPER_CASE - All word parts are UPPER case with separtors retained
			--		l=lower_case - All word parts are lower case with separators retained
			--		O=Original_case - The word is not changed at all -- just pass it through as is
	&apos;O&apos;,	-- resourceCaseRule (used when generateMode=&apos;G&apos;) 

			--  COLUMNS only.  This caseRule is only used for columns.
			--	 	Assumption:  The original column name has to have separators (_) for this to work properly.
			--			     If the original word has no separators then the case rule gets applied to the single word
			--		j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
			--		C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
			--		T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
			--		U=UPPER_CASE - All word parts are UPPER case with separtors retained
			--		l=lower_case - All word parts are lower case with separators retained
			--		O=Original_case - The word is not changed at all -- just pass it through as is
	&apos;O&apos;,	-- columnCaseRule (used when generateMode=&apos;G&apos;) 

			--		default=_
			--	    Word part separator consisting of a 1 character value such as &apos;_&apos;
			--		which is used to separate the word parts within a column.  Spaces ARE NOT allowed IN COLUMN NAMES.
			--		Example MY_COLUMN_NAME
	&apos;_&apos;,	-- separator (used when generateMode=&apos;G&apos;)

			--	 	When generating the logical name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
			--		  to match a word part against the Alias table.  For exmaple:
			--			word part=ds		table alias=DS		table rule=DataSource
			--		0=[default] DO NOT perform alias rule lookup at all.  Word Part is passed through
			--			result=ds
			--	  	1=Use alias rule and MATCH CASE exactly
			--			result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
			--		2=Use alias rule and DO NOT MATCH CASE
			--			result=DataSource (UPPER(&apos;ds&apos;) = UPPER(&apos;DS&apos;), therefore DataSource is returned	
	2,		-- useAliasRule (used when generateMode=&apos;G&apos;)

			-- 		Any set of characters used to prefix a table or procedure name.  Include underscores with the suffix if applicable.
			--		Example: V_ MY_TABLE or V_MY_TABLE 	
	null,	-- resourcePrefix (used when generateMode=&apos;G&apos;)

			--  	Any set of characters used to suffix a table or procedure name.  Include underscores with the suffix if applicable.
			--		Example: _APP MY_TABLE or MY_TABLE_APP 	
	null,	-- resourceSuffix (used when generateMode=&apos;G&apos;)

			--	 	This parameter allows the user to control whether to generate the view with the original data source
			--		   column or not.  It adds a level of control and flexibility into this automation process.
			--		Regarding the retrieved logicalColumn from the mapping spreadsheet.
			--		   When logicalColumn IS blank OR NULL then
			--		   0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
			--	 	   1=[default] Generate the view with the source column (pass through)-logical status is UNCHANGED
	1,		-- generateWithSourceColumn (used when generateMode=&apos;R&apos;)

			-- 		This parameter allows the user to control whether to generate the cast statement around the generated
			--		   column or not.  It uses the column type from the source view.
			--		0=[default] Do not generate CAST statement.  Pass through column as is.  Default behavior.
			-- 		1=Generate the CAST statement around the column
	0,		--	generateCast (used when generateMode=&apos;G&apos;)

			-- 		This parameter allows the user to control whether to generate indexes on the target views 
			--		   as derived from the underlying resources
			--		0=[default] Do not generate indexes
			-- 		1=Generate indexes
	1,		--	generateIndexes

	&apos;Y&apos;,	-- Debug level 1: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
	&apos;N&apos;,	-- Debug level 2: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
	&apos;N&apos;,	-- Debug level 3: &apos;Y&apos;=print to log and console window, &apos;F&apos;=no debug output to log or console
	NULL, 	-- Path to the base project directory.  Path gets SET dynamically so it is initially set to NULL.
	NULL, 	-- Path to the scripts subfolder of the project directory.  Path gets SET dynamically so it is initially set to NULL.

			-- The amount of padding to use when printing out the columnName (in the example below padding of 30 is used)
	40		-- padAmount - The amount of padding to use when printing out the columnName (in the example below padding of 30 is used)

	Input:
		basePath - Path to the base project directory  
    	generateMode - user setting (see above description)
    	outputMode - user setting (see above description)
    	generateViews - user setting (see above description)
    	caseRule - user setting (see above description)
    	useAliasRule - user setting (see above description)
    	generateWithSourceColumn - user setting (see above description)
    	generateCast - user setting (see above description)
	Output:
		&lt;ConfigParams&gt;
			&lt;generateMode&gt;&lt;/generateMode&gt;
			&lt;outputMode&gt;&lt;/outputMode&gt;
			&lt;generateViews&gt;&lt;/generateViews&gt;
			&lt;resourceCaseRule&gt;&lt;/resourceCaseRule&gt;
			&lt;columnCaseRule&gt;&lt;/columnCaseRule&gt;
			&lt;separator&gt;&lt;/separator&gt;
			&lt;useAliasRule&gt;&lt;/useAliasRule&gt;
			&lt;resourcePrefix&gt;&lt;/resourcePrefix&gt;
			&lt;resourceSuffix&gt;&lt;/resourceSuffix&gt;
			&lt;generateWithSourceColumn&gt;&lt;/generateWithSourceColumn&gt;
			&lt;generateCast&gt;&lt;/generateCast&gt;
			&lt;generateIndexes&gt;&lt;/generateIndexes&gt;
			&lt;debug&gt;&lt;/debug&gt;
			&lt;debug2&gt;&lt;/debug2&gt;
			&lt;debug3&gt;&lt;/debug3&gt;
			&lt;basePath&gt;&lt;/basePath&gt;
			&lt;scriptsPath&gt;&lt;/scriptsPath&gt;
			&lt;padAmount&gt;&lt;/padAmount&gt;
		&lt;/ConfigParams&gt;

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	06/15/2010		Mike Tinius			5.2.0			Created new
	09/21/2015		Mike Tinius			7.0.x			B.P. 8.1.7:  Added generateViews=2 for a select * projection.  Requires Utilities_2015Q3
	01/24/2019		Mike Tinius			8.0.0			B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix and resourceSuffix. 
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.
	06/12/2019		Mike Tinius			7.0.8			B.P. 2019.200: Derived the new getConfigureParamsXML from getConfigureParams to eliminate vector usage.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getConfigureParamsXML(
	IN basePath					VARCHAR(4000),-- (MANDATORY FIELD)
	 		-- Path to the base project directory  
			-- Path gets SET dynamically so it is initially set to NULL.
    IN generateMode				CHAR(1),--(OPTIONAL)
    IN outputMode				CHAR(1),--(OPTIONAL)
    IN generateViews			SMALLINT,--(OPTIONAL)
    IN resourceCaseRule			CHAR(1),--(OPTIONAL)
    IN columnCaseRule			CHAR(1),--(OPTIONAL)
    IN useAliasRule				SMALLINT,--(OPTIONAL)
    IN resourcePrefix			VARCHAR,--(OPTIONAL)
    IN resourceSuffix			VARCHAR,--(OPTIONAL)
    IN generateWithSourceColumn SMALLINT,--(OPTIONAL)
    IN generateCast 			SMALLINT,--(OPTIONAL)
	IN generateIndexes			SMALLINT,--(OPTIONAL)
   OUT ConfigParamsXML			LONGVARCHAR
)
BEGIN
	DECLARE localDebug					CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE debug						CHAR(1);
	DECLARE indent						VARCHAR DEFAULT &apos;&apos;;
	DECLARE moduleName					VARCHAR DEFAULT indent||&apos;getConfigureParamsXML&apos;;
	DECLARE sqlstmt						VARCHAR(500);
	DECLARE ConfigParamsCursor			CURSOR (ConfigParamsXML LONGVARCHAR);
	DECLARE defaultValuesXML			LONGVARCHAR;
	DECLARE ConfigParams_XML			XML;
	DECLARE scriptsPath					VARCHAR(4000);
	DECLARE envValue					LONGVARCHAR;
	DECLARE request						LONGVARCHAR;
	DECLARE resultValue					LONGVARCHAR;
	DECLARE message						LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE no_basePath_provided		EXCEPTION;
	DECLARE no_scriptsPath_provided		EXCEPTION;
	DECLARE no_configParams_provided	EXCEPTION;

	-- Get environment variables
	call /lib/util/GetEnvironment(&apos;best.practices.scriptsPath&apos;,envValue);
	if (envValue IS NOT NULL AND UPPER(envValue) = &apos;[NULL]&apos;) then
		set scriptsPath = null;
	else
		set scriptsPath = envValue;
	end if;
	IF ((scriptsPath IS NULL) OR (LENGTH(TRIM(scriptsPath)) = 0)) THEN 
		RAISE no_scriptsPath_provided;
	END IF;
 	IF ((basePath IS NULL) OR (LENGTH(TRIM(basePath)) = 0)) THEN 
		RAISE no_basePath_provided;
	END IF;

    -- Get the ConfigureParams info and override with the any &quot;NOT NULL&quot; parameters that are passed in.
    -- Return NULL if basePath is not provided.
	call /shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML(scriptsPath, defaultValuesXML);
	SET defaultValuesXML = REPLACE(REPLACE(defaultValuesXML, CHR(10), &apos;&apos;), CHR(13), &apos;&apos;);
	IF (UPPER(localDebug) = &apos;Y&apos;) THEN
		CALL PRINT(&apos;defaultValuesXML:&apos;||CHR(10)||NVL(defaultValuesXML,&apos;null&apos;));
	END IF;
	-- Get the scriptsPath from the default value XML
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;configureScriptsPath&apos;, defaultValuesXML, resultValue);
	IF (UPPER(localDebug) = &apos;Y&apos;) THEN
		CALL PRINT(&apos;configureScriptsPath=&apos;||NVL(resultValue,&apos;null&apos;));
	END IF;
	IF (resultValue IS NULL OR LENGTH(resultValue) = 0 OR LOWER(resultValue) = &apos;null&apos;) THEN
		RAISE no_scriptsPath_provided VALUE &apos;The configureScriptsPath is null or empty.&apos;;
	END IF;

	SET sqlstmt = REPLACE(&apos;SELECT * FROM &apos;|| resultValue || &apos;/ConfigureParams()&apos;, &apos;//&apos;, &apos;/&apos;);
	IF (UPPER(localDebug) = &apos;Y&apos;) THEN
		CALL PRINT(&apos;sqlstmt=&apos;||NVL(sqlstmt,&apos;null&apos;));
		CALL PAUSE(500);
	END IF;

	OPEN ConfigParamsCursor FOR sqlstmt;
	FOR r AS ConfigParamsCursor DO
		SET ConfigParamsXML = r.ConfigParamsXML;
	END FOR;

	IF (ConfigParamsXML IS NULL OR LENGTH(TRIM(ConfigParamsXML)) = 0) THEN
		RAISE no_configParams_provided VALUE &apos;The ConfigParamsXML procedure could not be found.&apos;;
	END IF;

	-- Set generateMode
	IF (generateMode IS NOT NULL) THEN
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateMode&apos;, generateMode, ConfigParamsXML, ConfigParamsXML);
	END IF;
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateMode&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  generateMode=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set outputMode
	IF (outputMode IS NOT NULL) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;outputMode&apos;, outputMode, ConfigParamsXML, ConfigParamsXML);
	END IF;
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;outputMode&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  outputMode=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set generateViews
	IF (generateViews IS NOT NULL) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateViews&apos;, CAST(generateViews AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
	ELSE
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateViews&apos;, &apos;1&apos;, ConfigParamsXML, ConfigParamsXML);
	END IF;
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateViews&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  generateViews=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set resourceCaseRule
	IF (resourceCaseRule IS NOT NULL OR LENGTH(resourceCaseRule) &gt; 0) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourceCaseRule&apos;, resourceCaseRule, ConfigParamsXML, ConfigParamsXML);
	ELSE
		-- if null set default to &apos;O&apos; original
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourceCaseRule&apos;, &apos;O&apos;, ConfigParamsXML, ConfigParamsXML);
	END IF; 
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourceCaseRule&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  resourceCaseRule=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set columnCaseRule
	IF (columnCaseRule IS NOT NULL OR LENGTH(columnCaseRule) &gt; 0) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;columnCaseRule&apos;, columnCaseRule, ConfigParamsXML, ConfigParamsXML);
	ELSE
		-- if null set default to &apos;O&apos; original
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;columnCaseRule&apos;, &apos;O&apos;, ConfigParamsXML, ConfigParamsXML);
	END IF; 
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;columnCaseRule&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  columnCaseRule=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set useAliasRule
	IF (useAliasRule IS NOT NULL OR LENGTH(useAliasRule) &gt; 0) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;useAliasRule&apos;, CAST(useAliasRule AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
	ELSE
		-- if null set default to &apos;0&apos; original
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;useAliasRule&apos;, &apos;0&apos;, ConfigParamsXML, ConfigParamsXML);
	END IF; 
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;useAliasRule&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  useAliasRule=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set resourcePrefix
	IF (resourcePrefix IS NOT NULL OR LENGTH(resourcePrefix) &gt; 0) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourcePrefix&apos;, resourcePrefix, ConfigParamsXML, ConfigParamsXML);
	ELSE
		-- set to null as default
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourcePrefix&apos;, null, ConfigParamsXML, ConfigParamsXML);
	END IF; 
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourcePrefix&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  resourcePrefix=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set resourceSuffix
	IF (resourceSuffix IS NOT NULL OR LENGTH(resourceSuffix) &gt; 0) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourceSuffix&apos;, resourceSuffix, ConfigParamsXML, ConfigParamsXML);
	ELSE
		-- set to null as default
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;resourceSuffix&apos;, null, ConfigParamsXML, ConfigParamsXML);
	END IF; 
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;resourceSuffix&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  resourceSuffix=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set generateWithSourceColumn
	IF (generateWithSourceColumn IS NOT NULL OR LENGTH(generateWithSourceColumn) &gt; 0) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateWithSourceColumn&apos;, CAST(generateWithSourceColumn AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
	ELSE
		-- if null set default to &apos;1&apos; original
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateWithSourceColumn&apos;, &apos;1&apos;, ConfigParamsXML, ConfigParamsXML);
	END IF; 
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateWithSourceColumn&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  generateWithSourceColumn=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set generateCast
	IF (generateCast IS NOT NULL OR LENGTH(generateCast) &gt; 0) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateCast&apos;, CAST(generateCast AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
	ELSE
		-- if null set default to &apos;0&apos; original
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateCast&apos;, &apos;0&apos;, ConfigParamsXML, ConfigParamsXML);
	END IF; 
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateCast&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  generateCast=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set generateIndexes
	IF (generateIndexes IS NOT NULL OR LENGTH(generateIndexes) &gt; 0) THEN 
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateIndexes&apos;, CAST(generateIndexes AS VARCHAR), ConfigParamsXML, ConfigParamsXML);
	ELSE
		-- if null set default to &apos;0&apos; original
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;generateIndexes&apos;, &apos;0&apos;, ConfigParamsXML, ConfigParamsXML);
	END IF; 
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;generateIndexes&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  generateIndexes=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug&apos;, ConfigParamsXML, debug);
	SET message = message || &apos;  debug=[&apos;||TRIM(NVL(debug,&apos;  &apos;))||&apos;]&apos;;

	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug2&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  debug2=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug3&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  debug3=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	-- Set basePath
	CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;basePath&apos;, basePath, ConfigParamsXML, ConfigParamsXML);
	SET message = message || &apos;  basePath=[&apos;||TRIM(NVL(basePath,&apos;  &apos;))||&apos;]&apos;;

	-- Set scriptsPath
	CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;scriptsPath&apos;, scriptsPath, ConfigParamsXML, ConfigParamsXML);
	SET message = message || &apos;  scriptsPath=[&apos;||TRIM(NVL(scriptsPath,&apos;  &apos;))||&apos;]&apos;;

	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;padAmount&apos;, ConfigParamsXML, resultValue);
	SET message = message || &apos;  padAmount=[&apos;||TRIM(NVL(resultValue,&apos;  &apos;))||&apos;]&apos;;

	if (UPPER(debug) = &apos;Y&apos;) then
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573155473170</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">aiuhmb0</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:8:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:9:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/221</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>Pause</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/220</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/212</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/207</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
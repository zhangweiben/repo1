<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getNamesRetrievedContainer" path="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/getNamesRetrievedContainer" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inLogicalID" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inContainerList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inProjectFolderName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inGreatGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inContainerName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inResourceName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="generateWithSourceColumn" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="inDebug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="containerList" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="logicalName" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="logicalType" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="logicalTransformation" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="annotation" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inReplaceStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outReplaceStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="codingListType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getNamesRetrievedContainer:
	-- Composite Best Practices --
	Retrieve the logical name and composite transformation from the Common Model spreadsheet files based on the
	passed in word (resourceName) and container.  Return a status indicating indicating whether the resource is
	FOUND, UNCHANGED or DROPPED.  If no results are found and the incoming parameter &quot;generateWithSourceColumn=1&quot;
	then set the status to UNCHANGED otherwise set it to DROPPED.
 
	Input:
		inContainerList	- null for the first invocation and then a list of all columns for a given resource.

		inProjectFolderName - the name of the project folder (defaultValue.basePath)(projectName)

		inGreatGrandParentName - the name of the great grand parent of the parent 	(dataSourcename)

		inGrandParentName - the name of the grand parent of the parent 				(catalogName)

		inParentName - the name of the parent of the container 						(schemaName)

		inContainer - the parent of the &quot;inResourceName&quot; or resource. 				(viewName)
			Values: any text without blanks in it

		inResourceName - a generic term for any resource name						(columnName)
			Values: any text without blanks in it

			-- 1 or 0, used when generateMode=&apos;R&apos;
			--  This parameter allows the user to control whether to generate the view with the original data source
			--	   column or not.  It adds a level of control and flexibility into this automation process.
			--	Regarding the retrieved logicalColumn from the mapping spreadsheet.
			--	   When logicalColumn IS blank OR NULL then
			-- 	   1=Generate the view with the source column (pass through)-logical status is UNCHANGED
			--	   0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
		generateWithSourceColumn 

		debug - Y or N
	Output:
		containerList - a list of all columns for a given resource.
		logicalName - the result is the logical name found in the excel spreadsheet files
			Values: the logical column name
		logicalType - the logical column type
		logicalTransformation - the composite transformation found in the excel spreadsheet file
		annotation - the &quot;Logical_Definition&quot; annotation for the view
		status - the status of the result
			-- FOUND - found when it finds a match to physical name in the spreadsheet
			-- UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
			-- DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			getNameRetrieved() - Created new
	09/27/2012		Mike Tinius			5.2.0			Removed TRIM() statements so that it can find fields with spaces in front or back of an element.
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	04/15/2013		Mike Tinius			5.2.0			Added replaceSymbol() to convert annotation text with &lt;TAB&gt;&lt;CR&gt;&lt;LF&gt; to real values
	04/22/2013		Mike Tinius			5.2.0			Added logicalType for Best Pracices 7.1
	06/24/2013		Mike Tinius			6.0.0			7.2: Multiple instances of Best Practices supported
	10/10/2013		Mike Tinius			6.1.0			8.0: Added datasourceName, projectFolderName and grandParentName
	11/25/2014		Mike Tinius			6.2.6			8.1.5: 1) Created from getNameRetrieved() to be more efficient by selecting all of the columns for the passed in containerName
																  and creating a &quot;containerList&quot; string that get created the first time but then is passed in/out on subsequent calls.
																  When getName() invokes this procedure to look up columns, it already has the string an only has to locate the unique
																  physical column name within the string which is faster than a database lookup since it is in memory.   This implementation
																  drops the overall time from minutes to seconds for creating a view.
																2) Fixed issue when any of the input names contain a single quote which is caused by a path having a single quote.														
	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	01/24/2019		Mike Tinius			8.0.0			Allow for logicalID to be T,C,F.  If F then treat it like T.  T=table, C=column, F=folder
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getNamesRetrievedContainer(
	IN  inLogicalID				CHAR(1),		-- C=column, T=table [alleviates confusion between the same physical name being a column or table.
	IN  inContainerList			LONGVARCHAR,
	IN  inProjectFolderName		VARCHAR(4000),
	IN  inGreatGrandParentName	VARCHAR(4000),
	IN  inGrandParentName		VARCHAR(4000),
	IN  inParentName			VARCHAR(4000),
	IN 	inContainerName			VARCHAR(4000),
	IN	inResourceName			VARCHAR(4000),
	IN  generateWithSourceColumn SMALLINT,
	IN  inDebug					CHAR(1),
	OUT containerList			LONGVARCHAR, 
	OUT logicalName				VARCHAR(4000),
	OUT logicalType				VARCHAR(4000),
	OUT logicalTransformation	LONGVARCHAR,
	OUT annotation				LONGVARCHAR,
	OUT	status					VARCHAR 
		-- FOUND - found when it finds a match to physical name in the spreadsheet
		-- UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
		-- DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;    &apos;||&apos;getNamesRetrievedContainer&apos;;
	DECLARE debug					CHAR(1) DEFAULT inDebug;
	DECLARE debug2					CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE	notEmpty				INTEGER DEFAULT 0;
	DECLARE commonModelViewPath		VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.commonModelViewPath;
	DECLARE commonModelRow			/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
	DECLARE	commonModelCursor 		CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
	DECLARE startTime				TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE duration				INTERVAL HOUR to SECOND;
	DECLARE i						INTEGER DEFAULT 0;
	DECLARE codingListRetriveColumns VARCHAR(4000);
	DECLARE	physicalName			VARCHAR(4000);
	DECLARE containerListTemp		LONGVARCHAR;
	DECLARE resourceName			VARCHAR(4000);
	DECLARE columnNumber			VARCHAR;
	DECLARE decodedValue			LONGVARCHAR;
	DECLARE logicalID				CHAR(1); -- C for column and T for table
	DECLARE ex						EXCEPTION;
/*
	DECLARE PUBLIC TYPE commonModelRow ROW (
        datasourceName 			VARCHAR(255), 
        projectFolderName 		VARCHAR(255), 
        greatGrandParentName 	VARCHAR(255), 
        grandParentName 		VARCHAR(255), 
        parentName 				VARCHAR(255), 
        containerName 			VARCHAR(255), 
        resourceName 			VARCHAR(255), 
		resourceNum				INTEGER, 
        logicalName 			VARCHAR(255), 
        logicalType 			VARCHAR(255), 
        annotation 				VARCHAR(32767), 
        logicalTransformation 	VARCHAR(32767),
		resourceNameEncoded		VARCHAR(255)
	);
*/
	if (debug = &apos;Y&apos;) then
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, 
			&apos;inLogicalID=[&apos;||NVL(inLogicalID,&apos;null&apos;)||
			&apos;]  inProjectFolderName=[&apos;||NVL(inProjectFolderName,&apos;null&apos;)||
			&apos;]  inGreatGrandParentName=[&apos;||NVL(inGreatGrandParentName,&apos;null&apos;)||
			&apos;]  inGrandParentName=[&apos;||NVL(inGrandParentName,&apos;null&apos;)||
			&apos;]  inParentName=[&apos;||NVL(inParentName,&apos;null&apos;)||
			&apos;]  inContainerName=[&apos;||NVL(inContainerName,&apos;null&apos;)||
			&apos;]  inResourceName=[&apos;||NVL(inResourceName,&apos;null&apos;)||
			&apos;]  generateWithSourceColumn=[&apos;||NVL(cast(generateWithSourceColumn as varchar),&apos;null&apos;)||
			&apos;]  commonModelViewPath=[&apos;||NVL(commonModelViewPath,&apos;null&apos;)||&apos;]&apos;);
	end if;


	if (inLogicalID IS NULL OR LENGTH(inLogicalID) = 0 OR inLogicalID NOT IN (&apos;C&apos;,&apos;T&apos;,&apos;F&apos;)) then
		raise ex value &apos;The input parameter inLogicalID=[&apos;||NVL(inLogicalID,&apos;null&apos;)||&apos;] is invalid.&apos;;
	end if;

	-- Get the coding list.  [codingListColumns, codingListFrom, codingListComma, codingListRetriveColumns]
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList(&apos;codingListRetriveColumns&apos;, codingListRetriveColumns);

	-- Set the output = input
	SET containerList = inContainerList;

	-- Create the container list the first time only
	IF (containerList IS NULL OR LENGTH(containerList) = 0) THEN
		-- Construct the base SQL statement
		set sqlStatement = &apos;SELECT * FROM &apos;||commonModelViewPath||&apos; WHERE &apos;;

		/***********************************
		 * Construct the where clause
		 ***********************************/
		-- AND projectFolderName
		if (inProjectFolderName IS NOT NULL AND LENGTH(inProjectFolderName) &gt; 0) then
			set resourceName = inProjectFolderName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; projectFolderName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
			else
				set sqlStatement = sqlStatement || &apos; projectFolderName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
			end if;
		end if;
		-- AND greatGrandParentName
		if (inGreatGrandParentName IS NOT NULL AND LENGTH(inGreatGrandParentName) &gt; 0) then
			set resourceName = inGreatGrandParentName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and (greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or grandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and (greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or grandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
			end if;
		end if;
		-- AND grandParentName
		if (inGrandParentName IS NOT NULL AND LENGTH(inGrandParentName) &gt; 0) then
			set resourceName = inGrandParentName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and (grandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and (grandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
			end if;
		end if;
		-- AND parentName
		if (inParentName IS NOT NULL AND LENGTH(inParentName) &gt; 0) then
			set resourceName = inParentName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and (parentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or grandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and (parentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or grandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
			end if;
		end if;
		-- containerName
		if (inContainerName IS NOT NULL AND LENGTH(inContainerName) &gt; 0) then
			set resourceName = inContainerName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and (containerName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or parentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and (containerName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or parentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
			end if;
		end if;
		-- physicalName
		if (inResourceName IS NOT NULL AND LENGTH(inResourceName) &gt; 0) then
			set resourceName = inResourceName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and (physicalName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; or containerName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos;) &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and (physicalName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; or containerName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;) &apos;;
			end if;
		end if;
		-- ORDER BY
		set sqlStatement = sqlStatement || &apos; ORDER BY resourceNum&apos;;

		IF (UPPER(debug) = &apos;Y&apos;) THEN
			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, NVL(sqlStatement,&apos;null&apos;));
		END IF;

		SET containerList = &apos;&apos;;
		open commonModelCursor for sqlStatement;
		FOR r AS commonModelCursor DO
			IF (r.logicalName IS NOT NULL AND length(r.logicalName) &gt; 0) THEN
				IF (r.logicalType = &apos;TABLE&apos;) THEN
					set logicalID = &apos;T&apos;;
				ELSE
					set logicalID = &apos;C&apos;;
				END IF;
				SET physicalName = r.physicalName;
				SET containerListTemp = i||&apos;!::!&apos;||r.logicalName||&apos;!::!&apos;||NVL(r.logicalType,&apos;null&apos;)||&apos;!::!&apos;||NVL(r.logicalTransformation,&apos;null&apos;)||&apos;!::!&apos;||NVL(r.annotation,&apos;null&apos;);
				-- Encode the temporary list so that it does not interfere with required characters: ,[]|
				CALL /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;N&apos;, codingListRetriveColumns, containerListTemp, moduleName, debug2, &apos;containerListTemp&apos;, containerListTemp);
				SET containerList = containerList || &apos;!:!&apos;||logicalID||&apos;:&apos;||NVL(physicalName,&apos;null&apos;)||&apos;!:!&apos;||&apos;[&apos;||REPLACE(containerListTemp,&apos;!::!&apos;,&apos;|&apos;)||&apos;]&apos;;
			END IF;
			set i = i + 1;
		END FOR;

		IF (UPPER(debug) = &apos;Y&apos;) THEN
			SET duration = CURRENT_TIMESTAMP - startTime;
			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;duration=[&apos;||CAST(duration AS VARCHAR)||&apos;]  containerList=[&apos;||NVL(containerList,&apos;null&apos;)||&apos;]&apos;);
		END IF;
	END IF;

	-- 1/24/19 mtinius: treat logicalID=F as a T
	SET logicalID = inLogicalID;
	-- For the purposes of folders just treat them as tables for the parsing.
	IF (logicalID = &apos;F&apos;) THEN
		SET logicalID = &apos;T&apos;;
	END IF;

	SET resourceName = inResourceName;
	SET logicalName = NULL;
	SET logicalType = &apos;&apos;;
	SET logicalTransformation = &apos;&apos;;
	SET annotation = NULL;
	CALL /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;N&apos;, codingListRetriveColumns, physicalName, moduleName, debug2, &apos;physicalName&apos;, physicalName);

	CALL /shared/ASAssets/Utilities/string/extractBiDelimitedText(containerList, &apos;!:!&apos;||logicalID||&apos;:&apos;||resourceName||&apos;!:!&apos;, &apos;[&apos;,&apos;]&apos;,1,0,1, containerListTemp);
	--call print(&apos;containerListTemp=&apos;||containerListTemp);
	SET i = 1;
	FOR r AS SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(containerListTemp,&apos;|&apos;,0,0,0,0,0) DO
		SET decodedValue = r.object;
		CALL /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;N&apos;, codingListRetriveColumns, r.object, moduleName, debug2, &apos;decodedValue&apos;, decodedValue);
		--call print(&apos;decodedValue=&apos;||NVL(decodedValue,&apos;null&apos;));
		CASE
			WHEN i = 1 THEN SET columnNumber = TRIM(decodedValue); 
			WHEN i = 2 THEN SET logicalName = decodedValue; 
			WHEN i = 3 THEN SET logicalType = TRIM(decodedValue); 
			WHEN i = 4 THEN SET logicalTransformation = TRIM(decodedValue); 
			WHEN i = 5 THEN SET annotation = decodedValue; 
			ELSE
		END CASE;
		SET status = &apos;FOUND&apos;;
		SET i = i + 1;
	END FOR;

	IF (logicalName IS NULL OR LENGTH(logicalName) = 0) THEN
		SET logicalName = inResourceName;
		IF (generateWithSourceColumn = 1) THEN
			SET status = &apos;UNCHANGED&apos;;
		ELSE
			SET status = &apos;DROPPED&apos;;
		END IF;			
	END IF;

	-- Convert the &lt;TAB&gt;&lt;CR&gt;&lt;LF&gt; symbols present in the annotation field which comes from the spreadsheet to real values
	CALL /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol(&apos;F&apos;, annotation, annotation);

	IF (UPPER(debug) = &apos;Y&apos;) THEN
		SET duration = CURRENT_TIMESTAMP - startTime;
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, 
			&apos;duration=[&apos;||CAST(duration AS VARCHAR)||
			&apos;]  logicalName=[&apos;||NVL(logicalName,&apos;null&apos;)||
			&apos;]  logicalType=[&apos;||NVL(logicalType,&apos;null&apos;)||
			&apos;]  logicalTransformation=[&apos;||NVL(logicalTransformation,&apos;null&apos;)||
			&apos;]  status=[&apos;||NVL(status,&apos;null&apos;)||
			&apos;]  annotation=[&apos;||NVL(annotation,&apos;null&apos;)||
			&apos;]&apos;);
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600195898</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
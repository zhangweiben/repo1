<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getNameRetrieved" path="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/getNameRetrieved" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inProjectFolderName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGreatGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGrandParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inParentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inContainerName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inResourceName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="generateWithSourceColumn" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="logicalName" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="logicalType" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="logicalTransformation" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="annotation" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inReplaceStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outReplaceStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getNameRetrieved:
	-- Composite Best Practices --
	Retrieve the logical name and composite transformation from the Common Model spreadsheet files based on the
	passed in word (resourceName) and container.  Return a status indicating indicating whether the resource is
	FOUND, UNCHANGED or DROPPED.  If no results are found and the incoming parameter &quot;generateWithSourceColumn=1&quot;
	then set the status to UNCHANGED otherwise set it to DROPPED.
 
	Input:
		inProjectFolderName - the name of the project folder (defaultValue.basePath)(projectName)

		inGreatGrandParentName - the name of the great grand parent of the parent 	(dataSourcename)

		inGrandParentName - the name of the grand parent of the parent 				(catalogName)

		inParentName - the name of the parent of the container 						(schemaName)

		inContainer - the parent of the &quot;inResourceName&quot; or resource. 				(viewName)
			Values: any text without blanks in it

		inResourceName - a generic term for any resource name						(columnName)
			Values: any text without blanks in it

			-- 1 or 0, used when generateMode=&apos;R&apos;
			--  This parameter allows the user to control whether to generate the view with the original data source
			--	   column or not.  It adds a level of control and flexibility into this automation process.
			--	Regarding the retrieved logicalColumn from the mapping spreadsheet.
			--	   When logicalColumn IS blank OR NULL then
			-- 	   1=Generate the view with the source column (pass through)-logical status is UNCHANGED
			--	   0=Do NOT generate the view with the source column (no pass through)-logical status is DROPPED
		generateWithSourceColumn 

		debug - Y or N
	Output:
		logicalName - the result is the logical name found in the excel spreadsheet files
			Values: the logical column name
		logicalType - the logical column type
		compositeTransformation - the composite transformation found in the excel spreadsheet file
		annotation - the &quot;Logical_Definition&quot; annotation for the view
		status - the status of the result
			-- FOUND - found when it finds a match to physical name in the spreadsheet
			-- UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
			-- DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	09/27/2012		Mike Tinius			5.2.0			Removed TRIM() statements so that it can find fields with spaces in front or back of an element.
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	04/15/2013		Mike Tinius			5.2.0			Added replaceSymbol() to convert annotation text with &lt;TAB&gt;&lt;CR&gt;&lt;LF&gt; to real values
	04/22/2013		Mike Tinius			5.2.0			Added logicalType for Best Pracices 7.1
	06/24/2013		Mike Tinius			6.0.0			7.2: Multiple instances of Best Practices supported
	10/10/2013		Mike Tinius			6.1.0			8.0: Added datasourceName, projectFolderName and grandParentName
	11/21/2014		Mike Tinius			6.2.6			B.P. 8.1.5: 1) Instead of doing a replace &quot; it only removes &quot; around the text for various names.  Also removed call to isEmpty().
																	2) Fixed issue when any of the input names contain a single quote which is caused by a path having a single quote.														
	
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getNameRetrieved(
	IN  inProjectFolderName		VARCHAR,
	IN  inGreatGrandParentName	VARCHAR,
	IN  inGrandParentName		VARCHAR,
	IN  inParentName			VARCHAR,
	IN 	inContainerName			VARCHAR,
	IN	inResourceName			VARCHAR,
	IN  generateWithSourceColumn SMALLINT,
	IN  debug					CHAR(1),
	OUT logicalName				VARCHAR,
	OUT logicalType				VARCHAR,
	OUT logicalTransformation	LONGVARCHAR,
	OUT annotation				LONGVARCHAR,
	OUT	status					VARCHAR 
		-- FOUND - found when it finds a match to physical name in the spreadsheet
		-- UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
		-- DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;    &apos;||&apos;getNameRetrieved&apos;;
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE	notEmpty				INTEGER DEFAULT 0;
	DECLARE commonModelViewPath		VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.commonModelViewPath;
	DECLARE commonModelRow			/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
	DECLARE	commonModelCursor 		CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
	DECLARE startTime				TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE duration				INTERVAL HOUR to SECOND;
	DECLARE resourceName			VARCHAR(4000);
/*
	DECLARE PUBLIC TYPE commonModelRow ROW (
        datasourceName 			VARCHAR(255), 
        projectFolderName 		VARCHAR(255), 
        greatGrandParentName 	VARCHAR(255), 
        grandParentName 		VARCHAR(255), 
        parentName 				VARCHAR(255), 
        containerName 			VARCHAR(255), 
        resourceName 			VARCHAR(255), 
		resourceNum				INTEGER, 
        logicalName 			VARCHAR(255), 
        logicalType 			VARCHAR(255), 
        annotation 				VARCHAR(32767), 
        logicalTransformation	VARCHAR(32767),
		resourceNameEncoded		VARCHAR(255)
	);
*/
	if (debug = &apos;Y&apos;) then
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, 
			&apos;inProjectFolderName=[&apos;||NVL(inProjectFolderName,&apos;null&apos;)||	
			&apos;]  inGreatGrandParentName=[&apos;||NVL(inGreatGrandParentName,&apos;null&apos;)||
			&apos;]  inGrandParentName=[&apos;||NVL(inGrandParentName,&apos;null&apos;)||
			&apos;]  inParentName=[&apos;||NVL(inParentName,&apos;null&apos;)||
			&apos;]  inContainerName=[&apos;||NVL(inContainerName,&apos;null&apos;)||
			&apos;]  inResourceName=[&apos;||NVL(inResourceName,&apos;null&apos;)||
			&apos;]  generateWithSourceColumn=[&apos;||NVL(cast(generateWithSourceColumn as varchar),&apos;null&apos;)||
			&apos;]  commonModelViewPath=[&apos;||NVL(commonModelViewPath,&apos;null&apos;)||&apos;]&apos;);
	end if;

	-- Construct the base SQL statement
	set sqlStatement = &apos;SELECT * FROM &apos;||commonModelViewPath||&apos; WHERE &apos;;

	/***********************************
	 * Construct the where clause
	 ***********************************/
		-- AND projectFolderName
		if (inProjectFolderName IS NOT NULL AND LENGTH(inProjectFolderName) &gt; 0) then
			set resourceName = inProjectFolderName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; projectFolderName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
			else
				set sqlStatement = sqlStatement || &apos; projectFolderName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
			end if;
		end if;
		-- AND greatGrandParentName
		if (inGreatGrandParentName IS NOT NULL AND LENGTH(inGreatGrandParentName) &gt; 0) then
			set resourceName = inGreatGrandParentName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and greatGrandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
			end if;
		end if;
		-- AND grandParentName
		if (inGrandParentName IS NOT NULL AND LENGTH(inGrandParentName) &gt; 0) then
			set resourceName = inGrandParentName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and grandParentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and grandParentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
			end if;
		end if;
		-- AND parentName
		if (inParentName IS NOT NULL AND LENGTH(inParentName) &gt; 0) then
			set resourceName = inParentName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and parentName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and parentName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos;&apos;;
			end if;
		end if;
		-- containerName
		if (inContainerName IS NOT NULL AND LENGTH(inContainerName) &gt; 0) then
			set resourceName = inContainerName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and containerName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and containerName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
			end if;
		end if;
		-- physicalName
		if (inResourceName IS NOT NULL AND LENGTH(inResourceName) &gt; 0) then
			set resourceName = inResourceName;
			if (INSTR(resourceName, &apos;&apos;&apos;&apos;) &gt; 0) then
				set resourceName = REPLACE(resourceName, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (INSTR(resourceName,&apos;&quot;&apos;) = 1 AND INSTR(REVERSE(resourceName),&apos;&quot;&apos;) = 1) THEN 
				set sqlStatement = sqlStatement || &apos; and physicalName = &apos;||&apos;&apos;&apos;&apos;||SUBSTR(resourceName, 2, LENGTH(resourceName)-2)||&apos;&apos;&apos; &apos;;
			else
				set sqlStatement = sqlStatement || &apos; and physicalName = &apos;||&apos;&apos;&apos;&apos;||resourceName||&apos;&apos;&apos; &apos;;
			end if;
		end if;

	IF (UPPER(debug) = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, NVL(sqlStatement,&apos;null&apos;));
	END IF;

	open commonModelCursor for sqlStatement;
	SET logicalName = NULL;
	SET logicalType = &apos;&apos;;
	SET logicalTransformation = &apos;&apos;;
	FOR r AS commonModelCursor DO
		IF (r.logicalName IS NOT NULL AND length(r.logicalName) &gt; 0) THEN
			SET logicalName = r.logicalName;
			SET logicalType = r.logicalType;
			SET logicalTransformation = r.logicalTransformation;
			SET annotation = r.annotation;  --extractBiDelimitedText(commonModelRow.annotation, &apos;Logical_Definition&apos;,&apos;(&apos;,&apos;)&apos;,1,1);
			SET status = &apos;FOUND&apos;;
		END IF;
	END FOR;

	IF (logicalName IS NULL OR LENGTH(logicalName) = 0) THEN
		SET logicalName = inResourceName;
		IF (generateWithSourceColumn = 1) THEN
			SET status = &apos;UNCHANGED&apos;;
		ELSE
			SET status = &apos;DROPPED&apos;;
		END IF;			
	END IF;

	-- Convert the &lt;TAB&gt;&lt;CR&gt;&lt;LF&gt; symbols present in the annotation field which comes from the spreadsheet to real values
	CALL /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol(&apos;F&apos;, annotation, annotation);

	IF (UPPER(debug) = &apos;Y&apos;) THEN
		SET duration = CURRENT_TIMESTAMP - startTime;
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, 
			&apos;duration=[&apos;||CAST(duration AS VARCHAR)||
			&apos;]  logicalName=[&apos;||NVL(logicalName,&apos;null&apos;)||
			&apos;]  logicalType=[&apos;||NVL(logicalType,&apos;null&apos;)||
			&apos;]  logicalTransformation=[&apos;||NVL(logicalTransformation,&apos;null&apos;)||
			&apos;]  status=[&apos;||NVL(status,&apos;null&apos;)||
			&apos;]  annotation=[&apos;||NVL(annotation,&apos;null&apos;)||
			&apos;]&apos;);
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600171959</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="parseConcat" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseConcat" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inColumnExpression" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="concatVect" direction="OUT" nullable="true">
      <datatype name="concatVect" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	parseConcat - parse the column expression to determine if the expression is primarily a concat (expr1 || expr2 || expr3)
	EXAMPLES:
		concat=1 :: x||y
		concat=1 :: func(x) || func(y)
		concat=0 :: func(x||func(y||z))
		concat=1 :: func(x||func(y||z)) || funct(a||b)
		concat=0 :: case w||x when 1 then 2 else y||z end
		concat=1 :: case w||x when 1 then 2 else y||z end || case a||b when 1 then 2 else c||d end
		concat=1 :: case x||y when 1 then 2 else 3 end || func(case x||y when 1 then 2 else 3 end)||funct(c||d)

	IN
		inColumnExpression - the incoming column expression
	OUT
		concatVect - Vector of concatentation parts

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	06/24/2013		Mike Tinius			6.0.0			7.2: Multiple instances of Best Practices supported
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE parseConcat(
	IN	inColumnExpression	LONGVARCHAR, -- The column text to pars
	OUT concatVect			VECTOR(LONGVARCHAR)
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;parseConcat&apos;;
	DECLARE debug			CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
	DECLARE columnExpression LONGVARCHAR DEFAULT TRIM(inColumnExpression);
	DECLARE numVect			INTEGER DEFAULT 0;
	DECLARE exprLen			INTEGER;
	DECLARE ch				CHAR(1);
	DECLARE word			VARCHAR DEFAULT &apos;&apos;;
	DECLARE separators		VARCHAR DEFAULT &apos; ()|,&apos;;
	DECLARE i 				INTEGER;
	DECLARE caseEndPos		INTEGER DEFAULT 0;
	DECLARE numCaseBeg		INTEGER DEFAULT 0;
	DECLARE numCaseEnd		INTEGER DEFAULT 0;
	DECLARE numLeftParen	INTEGER DEFAULT 0;
	DECLARE numRightParen	INTEGER DEFAULT 0;
	DECLARE numConcat		INTEGER DEFAULT 0;
	DECLARE lastConcatPos	INTEGER DEFAULT 1;
	DECLARE quote			INTEGER DEFAULT 0; -- 0=off, 1=on -- quotes come in pairs so turn on when 1st one found and turn off when second one found.  Everything in between is ignored.
	DECLARE concatFound		INTEGER;

	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;||&apos;,columnExpression, numConcat);
	set concatFound = 0;
	set concatVect = VECTOR[null];

	IF (numConcat &gt; 0) THEN
		-- Initialize all occurrences of &apos;||||&apos; to &apos;||&apos; until there are no more duplicates
		call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;||||&apos;, columnExpression, numConcat);
		WHILE (numConcat &gt; 0) DO
			set columnExpression = REPLACE(columnExpression, &apos;||||&apos;, &apos;||&apos;);
			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;||||&apos;, columnExpression, numConcat);
		END WHILE;

		-- Start the normal processing
		set i = 1;
		set exprLen = LENGTH(columnExpression);
		WHILE (i &lt;= exprLen) DO
			set ch = SUBSTRING(columnExpression,i,1);
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;ch=[&apos;||ch||&apos;]&apos;);
			end if;
			-- When a single quote is found turn off processing until the end quote is found.  Nothing should be processed in between quotes
			IF (ch = &apos;&apos;&apos;&apos;) THEN
				IF (quote = 0) THEN
					set quote = 1;
				ELSE
					set quote = 0;
				END IF;
			END IF;
			-- Keep processing if not a quote
			IF (quote = 0) THEN
				-- If a separator is found then detect whether a CASE/END statment has been found
				IF (POSITION(ch IN separators) &gt; 0 OR ch = chr(13) or ch = chr(11) or i = exprLen) THEN
					IF (i = exprLen) THEN
						set word = word || ch;
					END IF;
					IF (TRIM(UPPER(word)) = &apos;CASE&apos;) THEN
						set numCaseBeg = numCaseBeg + 1;
					END IF;
					IF (TRIM(UPPER(word)) = &apos;END&apos;) THEN
						set numCaseEnd = numCaseEnd + 1;
						IF (numCaseBeg = numCaseEnd) THEN
							set numCaseBeg = 0;
							set numCaseEnd = 0;
						END IF;
					END IF;
					if (debug = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;word=[&apos;||word||&apos;]&apos;);
					end if;
					set word = &apos;&apos;;
				END IF;
				-- Look for functions and concat pipes &apos;||&apos;
				CASE ch
					WHEN &apos;(&apos; THEN 
						set numLeftParen = numLeftParen + 1;
					WHEN &apos;)&apos; THEN
						set numRightParen = numRightParen + 1;
						-- Reset the function parenthesis count when they are equal.  Equal opening and closing pairs have been found.
						IF (numLeftParen = numRightParen) THEN
							set numLeftParen = 0;
							set numRightParen = 0;
						END IF;
					WHEN &apos;|&apos; THEN
						IF (SUBSTRING(columnExpression,i+1,1) = &apos;|&apos;) THEN							
							set numConcat = numConcat + 1;
							if (debug = &apos;Y&apos;) then
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;isConcat:: ch=[&apos;||NVL(ch,&apos;null&apos;)||&apos;]  i=&apos;||i||&apos;  lastConcatPos=&apos;||lastConcatPos||&apos;  numLeftParen=&apos;||numLeftParen||&apos;  numRightParen=&apos;||numRightParen);
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;isConcat:: ch=[&apos;||NVL(ch,&apos;null&apos;)||&apos;]  i=&apos;||i||&apos;  lastConcatPos=&apos;||lastConcatPos||&apos;  numCaseBeg=&apos;||numCaseBeg||&apos;  numCaseEnd=&apos;||numCaseEnd);
							end if;
							IF (numLeftParen=0 AND numRightParen=0 AND numCaseBeg = 0) THEN
								if (debug = &apos;Y&apos;) then
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;parseConcat:: pattern found (concat w/function): [expr1 || expr2]&apos;);
								end if;
								set concatFound = 1;
								set numVect = numVect + 1;
								set concatVect[numVect] = SUBSTRING(columnExpression,lastConcatPos,i-lastConcatPos);
								set concatVect = extend(concatVect,1);
								set lastConcatPos = i + 2;
							ELSEif (numCaseBeg=0 AND numCaseEnd=0 AND numLeftParen=0) THEN
								if (debug = &apos;Y&apos;) then
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;parseConcat:: pattern found (concat w/case): [expr1 || expr2]&apos;);
								end if;
								set concatFound = 1;
								set numVect = numVect + 1;
								set concatVect[numVect] = TRIM(SUBSTRING(columnExpression,lastConcatPos,i-lastConcatPos));
								set concatVect = extend(concatVect,1);
								set lastConcatPos = i + 2;
							END IF;
						END IF;
					ELSE
						set word = word || ch;
				END CASE;
			END IF;
			set i = i + 1;
		END WHILE;
	END IF;
	IF (concatFound &gt; 0) THEN
		set numVect = numVect + 1;
		set concatVect[numVect] = TRIM(SUBSTRING(columnExpression,lastConcatPos,i-lastConcatPos));
		set concatVect = extend(concatVect,1);
	END IF;
	set concatVect = truncate(concatVect,1);

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1554898129804</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
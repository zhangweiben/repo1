<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="findString2" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/findString2" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>findString:
	Given two input strings, this function returns an integer value representing the starting 
	position of the first string within the second string.  The third parameter indicates which direction
	to begin searching.  When &apos;F&apos;, begin searching forward from the beginning of the second string.
	When &apos;R&apos;, begin search in reverse from the end of the second string.
		* This function is case-sensitive.
		* All string types, all numeric types, and all data types are accepted as input arguments.
		* The output is always an integer provided none of the input strings is NULL. Otherwise, NULL is returned.
		* If any of the arguments is NULL, the function returns NULL.
		* If the first argument is a blank string, the function returns 1 (one).
		* If the first argument is not found within the second argument, the function returns 0 (zero).
 
	Input:
		searchString - The search string is what you are looking for.  If this value is null, then the output is null
						A blank (&apos;&apos;) non-null string for the search string always produces 1 for an output.
			Values: Any text value
		stringToSearch - The string to search within for the search string. If this value is null, then the output is null
			Values: Any text value
		direction - The direction which you want to search
			Values: &apos;F&apos;=search forward, &apos;R&apos;=search in reverse
	Output:
		pos - an integer value representing the position of the string
			Values: null, or any positive integer

		Examples: 
	  		direction=&apos;F&apos;
				POSITION(‘it’ IN ‘case-sensitivity’),  
					Output: 10           ^
				POSITION(‘’ IN ‘mistake’) -- a blank non-null string for the search string always produces 1 for an output.
					Output: 1
				POSITION(‘no’ IN ’yes’)
					Output: 0
	  		direction=&apos;R&apos;
				POSITION(‘it’ IN ‘case-sensitivity’)
					Output: 14               ^
				POSITION(‘no’ IN ’yes’)
					Output: 0

	Exceptions:  none
	Author:      Mike Tinius
	Date:        8/17/2010
	CSW Version: 5.1.0

    Copyright (c) 2010
    Composite Software, Inc.
    All Rights Reserved
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inSearchString" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inStringToSearch" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inDirection" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="startingPosition" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inOccurrences" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="pos" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/* findString:
	Given two input strings, this function returns an integer value representing the starting 
	position of the first string within the second string.  The third parameter indicates which direction
	to begin searching.  When &apos;F&apos;, begin searching forward from the beginning of the second string.
	When &apos;R&apos;, begin search in reverse from the end of the second string.
		* This function is case-sensitive.
		* All string types, all numeric types, and all data types are accepted as input arguments.
		* The output is always an integer provided none of the input strings is NULL. Otherwise, NULL is returned.
		* If any of the arguments is NULL, the function returns 0 (zero).
		* If the first argument is a blank string, the function returns 0 (zero).
		* If the first argument is not found within the second argument, the function returns 0 (zero).
 
	Input:
		searchString - The search string is what you are looking for.  If this value is null, then the output is 0
						A blank (&apos;&apos;) non-null string for the search string always produces 0 for an output.
			Values: Any text value
		stringToSearch - The string to search within for the search string. If this value is null, then the output is null
			Values: Any text value
		direction - The direction which you want to search
			Values: &apos;F&apos;=search forward, &apos;R&apos;=search in reverse
		startingPosition - The starting position to begin the search.
		occurrences - The number of the occurrence to return
	Output:
		pos - an integer value representing the position of the string
			Values: 0 if not found or string values are null, or any positive integer

		Examples: 
	  		direction=&apos;F&apos;
				search for ‘it’  in ‘case-sensitivity’
					Output: 10              ^
				search for ‘’ in ‘mistake’ -- a blank non-null string for the search string always produces 0 for an output.
					Output: 0
				search for ‘no’ in ’yes’
					Output: 0
	  		direction=&apos;R&apos;
				search for ‘it’ in ‘case-sensitivity’
					Output: 14                 ^
				search for ‘no’ in ’yes’
					Output: 0

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE findString2(
	IN inSearchString	LONGVARCHAR,	-- what you find
	IN inStringToSearch	LONGVARCHAR,	-- what to search
	IN inDirection		CHAR(1),		--&apos;F&apos;=search forward, &apos;R&apos;=search in reverse
	IN startingPosition INTEGER, 		-- The starting position to begin the search.
	IN inOccurrences 	INTEGER, 		-- The number of occurrences to bypass
	OUT pos				INTEGER			-- The position of the beginning of the occurrence of the text found.  Strings always start at 1.
										-- returns 0 if the StringToSearch is null or string not found
)
BEGIN
	DECLARE searchString	LONGVARCHAR DEFAULT inSearchString;
	DECLARE stringToSearch	LONGVARCHAR DEFAULT inStringToSearch;
	DECLARE direction		CHAR(1) DEFAULT inDirection;
	DECLARE occurrences		INTEGER DEFAULT inOccurrences;
	DECLARE numFound		INTEGER DEFAULT 0;
	DECLARE len				INTEGER;
	DECLARE num				INTEGER;
	DECLARE begChar			CHAR(2);
	DECLARE endChar			CHAR(2);
	
	if (searchString is null) then
		set searchString = &apos;&apos;;
	end if;
	if (stringToSearch is null) then
		set stringToSearch = &apos;&apos;;
	end if;
	if (direction is null) then
		set direction = &apos;F&apos;; -- Default is Forward search
	end if;
	if (occurrences is null) then
		set occurrences = 1; -- Default occurrences to 1 if null
	end if;

	-- This code is here because there is a bug where LENGTH(s) where s=[ ] returns 0 length even though there is a space there
	set searchString = &apos;\&quot;&apos;||searchString||&apos;\&quot;&apos;;
	set len = LENGTH(searchString);
	-- Extract the true search string from the escape quoted string
	set searchString = SUBSTRING(searchString,3,LENGTH(searchString)-4);
	set len = len - 4; -- Get the true length by reducing for the escape quoted string
--	call print(&apos;searchString:   len=&apos;||len ||&apos;   s=[&apos;||searchString||&apos;]&apos;);
--	call print(&apos;stringToSearch: len=&apos;||LENGTH(stringToSearch)||&apos;   s=[&apos;||stringToSearch||&apos;]&apos;);

	set pos = 0;
	IF (UPPER(direction) = &apos;F&apos;) THEN -- Search Forward
		set pos = startingPosition;
		if (startingPosition is null or startingPosition = 0) then
			set pos = 1;
		end if;
		set pos = INSTR(stringToSearch, searchString, pos, occurrences);
	ELSE -- Search in Reverse
		-- not working: set pos = INSTR(stringToSearch, searchString, length(stringToSearch), occurrences);
		IF (len = 0) THEN
			set pos = 0;
		ELSE
	    	set pos = length(stringToSearch);
	    	posLoop:
			while (pos &gt; 0) do
				if (SUBSTRING(stringToSearch, pos, len) = searchString) then
					set numFound = numFound + 1;
					if (numFound = occurrences) then
						leave posLoop;
					end if;
				end if;
				set pos = pos - 1;
			end while;
		END IF;
	END IF;
	if (pos is null) then
		set pos = 0;
	end if;
--	call print(&apos;pos=&apos;||pos);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1513829825991</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
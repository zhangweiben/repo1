<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="extractSQLParts" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractSQLParts" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inSqlScript" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="debug2" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="sqlScriptColumns" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="fromClause" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="codingListColumns" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="codingListFrom" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/findString2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSearchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inDirection" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="startingPosition" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inOccurrences" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="pos" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="codingListType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/replaceNonAsciiChar" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inReplaceStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outReplaceStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	extractSQLParts - Parse the incoming sql script and extract the column list into one variable and the from clause into another variable.
		Encode the column list for special characters that are found within single or double quotes.

	IN
		inSqlScript			LONGVARCHAR,	- The incoming SQL Script
		debug				CHAR(1),		- Level 1 debug for this procedure (Y or N)
		debug2				CHAR(1), 		- Level 2 debug for invoked procedures (Y or N)
	OUT
		sqlScriptColumns	LONGVARCHAR,	- The list of columns encoded with special characters found between single and double quotes.
		fromClause			LONGVARCHAR,	- The from clause
		codingList			VARCHAR(4000)	- The encoding list used to encode the columns.  This will be used to decode the columns

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/16/2013		Mike Tinius			5.2.0			Created new
	11/19/2014		Mike Tinius			6.2.6			8.1.5: Added UPPER to &apos; FROM &apos;,UPPER(sqlScript) to catch lower case &quot;from&quot; clause.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE extractSQLParts(
	IN	inSqlScript				LONGVARCHAR,
	IN  debug					CHAR(1),	-- Level 1 debug for this procedure
	IN  debug2					CHAR(1), 	-- Level 2 debug for invoked procedures
	OUT sqlScriptColumns		LONGVARCHAR,
	OUT fromClause				LONGVARCHAR,
	OUT codingListColumns		VARCHAR(4000),
	OUT codingListFrom			VARCHAR(4000)
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;extractSQLParts&apos;;
	DECLARE sqlScript			LONGVARCHAR DEFAULT inSqlScript;
	DECLARE newline				VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
	DECLARE pos		 			INTEGER;
	DECLARE begPos		 		INTEGER;
	DECLARE endPos		 		INTEGER;
	DECLARE codingListComma		VARCHAR;

	-- Get the coding list.  [codingListColumns, codingListFrom, codingListComma, codingListRetriveColumns]
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList(&apos;codingListColumns&apos;, codingListColumns);
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList(&apos;codingListFrom&apos;, codingListFrom);
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList(&apos;codingListComma&apos;, codingListComma);

	-- Replace all non ASCI characters such as \r\n (chr(13)chr(10)) and tab (chr(9) with a space.
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/replaceNonAsciiChar(sqlScript,sqlScript);
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. replace non-ascii sqlScript=&apos;||sqlScript||newline);
	end if;

	-- Encode the sqlScript with special characters in Double Quotes only.   These are typically the columns in double quotes.
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListFrom, sqlScript, moduleName, debug2, &apos;sqlScript&apos;, sqlScript);
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;2. encode(D) sqlScript=&apos;||sqlScript||&apos;  encode_list=&apos;||codingListColumns||newline);
	end if;

	-- Add a space in front of the SQL Statement
	set sqlScript = &apos; &apos;|| sqlScript;
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;3. add beg space sqlScript=&apos;||sqlScript||newline);
	end if;

	-- Remove the Composite OPTION separated by {OPTION }
	set begPos = POSITION(&apos;{&apos; IN sqlScript);
	set endPos = POSITION(&apos;}&apos; IN sqlScript);
	while (begPos &gt; 0 and endPos &gt; 0) do
		set sqlScript = SUBSTRING(sqlScript,1,begPos-1) || SUBSTRING(sqlScript,endPos+1,LENGTH(sqlScript));
		set begPos = POSITION(&apos;{&apos; IN sqlScript);
		set endPos = POSITION(&apos;}&apos; IN sqlScript);
	end while;

	-- Remove comments /* and */ from the sql
	set begPos = POSITION(&apos;/*&apos; IN sqlScript);
	set endPos = POSITION(&apos;*/&apos; IN sqlScript);
	while (begPos &gt; 0 and endPos &gt; 0) do
		set sqlScript = SUBSTRING(sqlScript,1,begPos-1) || SUBSTRING(sqlScript,endPos+2,LENGTH(sqlScript));
		set begPos = POSITION(&apos;/*&apos; IN sqlScript);
		set endPos = POSITION(&apos;*/&apos; IN sqlScript);
	end while;

	-- Remove the SELECT keyword from the sql script
	set pos = POSITION(&apos; SELECT &apos; in UPPER(sqlScript));
	if (pos &gt; 0) then
		set sqlScript = &apos; &apos;||TRIM(SUBSTRING(sqlScript, pos+8, LENGTH(sqlScript)));
	end if;
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;SELECT: pos=&apos;||pos|| &apos; 4. sqlScript=[&apos;||sqlScript||&apos;]&apos;||newline);
	end if;

	-- Remove the DISTINCT keyword from the sql script
	set pos = POSITION(&apos; DISTINCT &apos; in UPPER(sqlScript));
	if (pos &gt; 0) then
		set sqlScript = TRIM(SUBSTRING(sqlScript, pos+10, LENGTH(sqlScript)));
	end if;
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;DISTINCT: pos=&apos;||pos||&apos; 5. sqlScript=[&apos;||sqlScript||&apos;]&apos;||newline);
	end if;

	-- Extract the FROM clause from the sql script
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/findString2(&apos; FROM &apos;,UPPER(sqlScript),&apos;R&apos;,null,1,pos);
	if (pos &gt; 0) then
		set fromClause = TRIM(SUBSTRING(sqlScript, pos, LENGTH(sqlScript)));
	end if;
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;6. extract FROM: pos=&apos;||pos||&apos; fromClause=[&apos;||fromClause||&apos;]&apos;||newline);
	end if;

	-- Replace commas with a space so that multiple tables will be parsed
	set fromClause = REPLACE(fromClause, &apos;,&apos;, &apos; &apos;);
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;7. replace commas fromClause=[&apos;||fromClause||&apos;]&apos;||newline);
	end if;

	--Extract the columns
	--	CALL PRINT(&apos;+++++++ sqlScript:&apos;||sqlScript||&apos; pos:&apos;||CAST(pos AS VARCHAR)) ;
	set sqlScriptColumns = TRIM(SUBSTRING(sqlScript,1,pos-1));
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;8. extract SQL COLUMNS sqlScriptColumns=[&apos;||sqlScriptColumns||&apos;]&apos;||newline);
	end if;

	--Encode the values within single quotes.  Columns were done in step 1.
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;S&apos;, codingListColumns, sqlScriptColumns, moduleName, debug2, &apos;sqlScriptColumns&apos;, sqlScriptColumns);
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;9. encode(S) SQL COLUMNS sqlScriptColumns=&apos;||sqlScriptColumns||&apos;  encode_list=&apos;||codingListColumns||newline);
	end if;

	-- Replace commas inside left and right parentheses
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;P&apos;, codingListComma, sqlScriptColumns, moduleName, debug2, &apos;sqlScriptColumns&apos;, sqlScriptColumns);
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;10. encode(P) SQL COLUMNS sqlScriptColumns=&apos;||sqlScriptColumns||&apos;  encode_list=&apos;||codingListComma||newline);
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">1384519100968</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
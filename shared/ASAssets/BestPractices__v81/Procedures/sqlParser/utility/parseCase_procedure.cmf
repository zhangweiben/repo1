<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="parseCase" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCase" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inColumnExpression" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="function" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="columnList" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="columnExpression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="begPos" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="endPos" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inColumnList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	parseCase - parse the column expression and extract expressions from the case statement
		There are two kinds of case statements &quot;simple syntax&quot; and &quot;searched syntax&quot;
		&quot;simple syntax&quot;
			CASE &lt;comparison-value&gt;
				WHEN &lt;conditional-expression 1&gt; THEN &lt;scalar-expression 1&gt;
				WHEN &lt;conditional-expression 2&gt; THEN &lt;scalar-expression 2&gt;
				WHEN &lt;conditional-expression 3&gt; THEN &lt;scalar-expression 3&gt;
				[ELSE &lt;default-scalar-expression&gt;]
			END
		&quot;searched syntax&quot;
			CASE
				WHEN &lt;conditional-expression 1&gt; THEN &lt;scalar-expression 1&gt;
				WHEN &lt;conditional-expression 2&gt; THEN &lt;scalar-expression 2&gt;
				WHEN &lt;conditional-expression 3&gt; THEN &lt;scalar-expression 3&gt;
				[ELSE &lt;default-scalar-expression&gt;]
			END
		Use the strategy of finding the 1st CASE keyword and matching END keyword.  There may be nested case statements.
		Remove literal single quoted strings as they are not relevant
		Remove CASE keywords including [CASE,WHEN,THEN,ELSE,END]
		Remove operands including[IS,NOT,NULL,=,&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;,&lt;,&gt;,&amp;le;,&amp;ge;,&lt;&gt;]

	IN
		inColumnExpression - the incoming column expression
	OUT
		function - primary function found
		columnList - a list of column expressions found that are not literal strings or numbers.
			this may contain additional function expressions

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE parseCase(
-- CASE table.col1 WHEN 1 then &apos;A&apos; WHEN 2 then &apos;B&apos; ELSE &apos;C&apos; END
-- case trim ( CAST ( TRIM ( col1 ) as varchar (255 ) )  ) when 1 then &apos;a&apos; when 2 then &apos;b&apos; else &apos;c&apos; end
-- case when trim ( CAST ( TRIM ( col1 ) as varchar ( 255 ) )  ) = 1 then col2 else col3 end
	IN	inColumnExpression	LONGVARCHAR, -- The column text to pars
	OUT function			LONGVARCHAR,
	OUT columnList			LONGVARCHAR
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;parseCase&apos;;
	DECLARE debug			CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
	DECLARE columnExpression LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE sep				VARCHAR DEFAULT &apos;^&apos;; -- separator
	DECLARE caseType		VARCHAR DEFAULT &apos;&apos;;	-- Simple or Searched
	DECLARE exprLen			INTEGER;
	DECLARE expression		LONGVARCHAR;
	DECLARE expression2		LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE ch				CHAR(1);
	DECLARE word			VARCHAR DEFAULT &apos;&apos;;
	DECLARE separators		VARCHAR DEFAULT &apos; ,&apos;;
	DECLARE i,j				INTEGER DEFAULT 1;
	DECLARE numCase			INTEGER DEFAULT 0;
	DECLARE numWhen			INTEGER DEFAULT 0;
	DECLARE numThen			INTEGER DEFAULT 0;
	DECLARE casePos			INTEGER DEFAULT 0; -- CASE(expr WHEN expr2 THEN res1 ELSE res2 END)
	DECLARE whenPos			INTEGER DEFAULT 0; -- WHEN expr2 THEN res1 ELSE res2 END)
	DECLARE thenPos			INTEGER DEFAULT 0; -- THEN res1 ELSE res2 END)
	DECLARE elsePos			INTEGER DEFAULT 0; -- ELSE res2 END)
	DECLARE endPos			INTEGER DEFAULT 0; -- END)
	DECLARE quote			INTEGER DEFAULT 0; -- 0=off, 1=on -- quotes come in pairs so turn on when 1st one found and turn off when second one found.  Everything in between is ignored.

	set function = &apos;&apos;;
	set columnList =&apos;&apos;;

	set columnExpression = TRIM(inColumnExpression);
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;columnExpression=&apos;||NVL(columnExpression,&apos;null&apos;));
	end if;

	-- Determine the type of case statement &apos;Simple&apos; or &apos;Searched&apos;
	set casePos = INSTR(UPPER(columnExpression),&apos;CASE &apos;,1);
	set whenPos = INSTR(UPPER(columnExpression),&apos;WHEN &apos;,1);
	if (casePos &gt; 0 and whenPos &gt; 0)  then
		set word = TRIM(SUBSTRING(columnExpression,casePos+5,whenPos-casePos-5));
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;between case/when=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
		end if;
		if (word IS NULL OR LENGTH(&apos;|&apos;||word||&apos;|&apos;) = 2) then  --Empty
			set caseType = &apos;Searched&apos;;
		else
			set caseType = &apos;Simple&apos;;
		end if;
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;case type=&apos;||caseType||&apos; Syntax  between case/when=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
		end if;
/* Searched CASE example to parse.   Note: &quot;else&quot; is optional in a case statement.
	case 
		when State = &apos;CA&apos; then 
			case 
				when SUBSTR(Zip,1,2) = &apos;94&apos; then State||&apos; region 1&apos;
				when SUBSTR(Zip,1,2) = &apos;93&apos; then State||&apos; region 2&apos;
				else State||&apos; region 3&apos;
				end
		when State = &apos;PA&apos; then 
			case
				when SUBSTR(Zip,1,3) = &apos;195&apos; then State||&apos; region 4&apos;
				when SUBSTR(Zip,1,2) = &apos;196&apos; then State||&apos; region 5&apos;
				else State||&apos; region 6&apos;
				end
		else State || &apos; region 7&apos;
	end Region,
*/
		set word = &apos;&apos;;
		set i = 1;
		set exprLen = LENGTH(columnExpression);
		WHILE (i &lt;= exprLen) DO
			set ch = SUBSTRING(columnExpression,i,1);
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;ch=[&apos;||ch||&apos;]&apos;);
			end if;
			-- If a separator is found then detect whether a CASE/END statment has been found
			-- Look for a separator and start processing the word
			IF (POSITION(ch IN separators) &gt; 0 or i=exprLen) THEN
				IF (i = exprLen) THEN
					set word = word || ch;
				END IF;
				if (debug = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;word=[&apos;||word||&apos;]&apos;);
				end if;
				IF (TRIM(UPPER(word)) = &apos;CASE&apos;) THEN
					set numCase = numCase + 1;
					IF (numCase = 1) THEN
						set function = &apos;CASE&apos;;
						set casePos = i;
						if (debug = &apos;Y&apos;) then
							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;CASE:  beg=&apos;||cast(casePos as varchar));
						end if;
					END IF;
				END IF;

				IF (TRIM(UPPER(word)) = &apos;WHEN&apos;) THEN
					set numWhen = numWhen + 1;
					IF (numCase = 1) THEN
						set whenPos = i;
						-- Extract the columList between CASE and WHEN
						IF (numWhen = 1) THEN
							if (debug = &apos;Y&apos;) then
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between CASE and WHEN:  beg=&apos;||cast(casePos as varchar)||&apos; endPos=&apos;||cast(whenPos-4 as varchar));
							end if;
							call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,casePos,whenPos-4,columnList,columnList);
						-- Extract the columnList between THEN and WHEN
						ELSEIF	(numThen &gt; 0 and numWhen &gt; 0 and numWhen &gt; numThen) THEN	
							if (debug = &apos;Y&apos;) then
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between THEN and WHEN:  beg=&apos;||cast(thenPos as varchar)||&apos; endPos=&apos;||cast(whenPos-4 as varchar));
							end if;
							call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,thenPos,whenPos-4,columnList,columnList);
						END IF;
					END IF;
				END IF;

				IF (TRIM(UPPER(word)) = &apos;THEN&apos;) THEN
					set numThen = numThen + 1;
					IF (numCase = 1) THEN 
						set thenPos = i;
						-- Extract the columnList between WHEN and THEN
						IF (whenPos &lt; thenPos) THEN 
							if (debug = &apos;Y&apos;) then
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between WHEN and THEN:  beg=&apos;||cast(whenPos as varchar)||&apos; endPos=&apos;||cast(thenPos-4 as varchar));
							end if;
							call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,whenPos,thenPos-4,columnList,columnList);
						END IF;
					END IF;
				END IF;

				IF (TRIM(UPPER(word)) = &apos;ELSE&apos;) THEN
					IF (numCase = 1) THEN
						set elsePos = i;
						-- Extract the columnList between the last THEN and ELSE
						IF	(elsePos &gt; thenPos) THEN	
							if (debug = &apos;Y&apos;) then
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between the last THEN and ELSE:  beg=&apos;||cast(thenPos as varchar)||&apos; endPos=&apos;||cast(elsePos-4 as varchar));
							end if;
							call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,thenPos,elsePos-4,columnList,columnList);
						END IF;
					END IF;
				END IF;

				IF (TRIM(UPPER(word)) = &apos;END&apos;) THEN
					set numCase = numCase - 1;
					IF (numCase = 0) THEN
						set endPos = i;
						-- Extract the columnList between ELSE and END
						if (elsePos &gt; 0) then
							if (debug = &apos;Y&apos;) then
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between ELSE and END:  beg=&apos;||cast(elsePos as varchar)||&apos; endPos=&apos;||cast(endPos-3 as varchar));
							end if;
							call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,elsePos,endPos-3,columnList,columnList);
						-- Extract the columnList between the last THEN and END
						else
							if (debug = &apos;Y&apos;) then
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Extract the columList between THEN and END:  beg=&apos;||cast(thenPos as varchar)||&apos; endPos=&apos;||cast(endPos-3 as varchar));
							end if;
							call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseCaseExtract(columnExpression,thenPos,endPos-3,columnList,columnList);
						end if;
					END IF;
				END IF;
				set word = &apos;&apos;;
			ELSE
				set word = word || ch;
			END IF;
			set i = i + 1;
		END WHILE;
		if (debug = &apos;Y&apos;) then
			if (caseType = &apos;Simple&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Function &quot;Simple Case&quot; Pattern: CASE expr1 WHEN expr2 THEN res1 WHEN val2 THEN res2 ELSE res3 END&apos;);
			elseif (caseType = &apos;Searched&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Function &quot;Searched Case&quot; Pattern: CASE WHEN expr1 [&lt;, =, &gt;, &lt;=, &gt;=, &lt;&gt;] expr2 THEN res1 ELSE res2 END&apos;);
			else
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Case pattern not found.&apos;);
			end if;
		end if;
	end if;
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Return function=[&apos;||NVL(function,&apos;null&apos;)||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Return columnList=[&apos;||NVL(columnList,&apos;null&apos;)||&apos;]&apos;);
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1554898110523</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
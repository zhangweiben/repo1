<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="test_resolveColumnAlias" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/test/test_resolveColumnAlias" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="sqlScriptColumns" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="fromClause" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="fromClauseVector" direction="OUT" nullable="true">
      <datatype name="fromClauseVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="1">
            <element name="resourcePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="resourceType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceAlias">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="codingListColumns" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="codingListFrom" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="foundNonAsciiChar" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="SqlScriptV2Row" type="TABLE" refId="1">
        <element name="derivedColumn">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="sourceAlias">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="sourceColumn">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="columnAlias">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="columnType">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="sourceExpression">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="sourceExpressionNoCast">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="sourceColumnList">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="functionList">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="sourcePath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractColumnList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sqlScript" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClauseVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="2">
              <element name="resourcePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="resourceType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceAlias">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="codingListColumns" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="3">
          <element name="columnExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractSQLParts" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSqlScript" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="debug2" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sqlScriptColumns" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClause" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="codingListColumns" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="codingListFrom" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isComment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="keyword" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="isComment" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseFromClause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inFromClause" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="fromClauseVector" direction="OUT">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="2">
              <element name="resourcePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="resourceType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceAlias">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnAlias" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sourceExpression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inResourceColumnList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnNameSearchTag" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingListColumns" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="columnAlias" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="remainder" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/test/sqlScriptTestSelections" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="choice" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourcePath" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="fromClause" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="sqlScript" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE test_resolveColumnAlias(
	OUT sqlScriptColumns	LONGVARCHAR,
	OUT fromClause			LONGVARCHAR,
	OUT fromClauseVector	VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions.FromClause_Type),
	OUT codingListColumns	VARCHAR(4000),
	OUT codingListFrom		VARCHAR(4000),
	OUT foundNonAsciiChar	VARCHAR,
	OUT result 				PIPE /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.SqlScriptV2Row
/* (
		sourceAlias 			VARCHAR(4000), 
		sourceColumn 			VARCHAR(4000), 
		columnAlias 			VARCHAR(4000), 
		columnType				VARCHAR,
		sourceExpression 		LONGVARCHAR, -- complete source expression as defined in the view
		sourceExpressionNoCast	LONGVARCHAR, -- source expression with no outer cast 
		functionList			LONGVARCHAR, -- list of functions used by the view
		sourcePath 				LONGVARCHAR  -- path to the source view (parent view)
	)
*/
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;test_resolveColumnAlias&apos;;
	DECLARE debug1				CHAR(1) DEFAULT &apos;Y&apos;; -- Level 1 debug
	DECLARE debug2				CHAR(1) DEFAULT &apos;N&apos;; -- Level 2 debug
	DECLARE rec					/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.SqlScriptV2Row;
	DECLARE isComment			INTEGER;
	DECLARE begPos				INTEGER;
	DECLARE occurrence			INTEGER;
	DECLARE resColumnNameList	LONGVARCHAR;
	DECLARE resColumnTypeList	LONGVARCHAR;
	DECLARE columnNameSearchTag	VARCHAR DEFAULT &apos;:COLUMN_NAME:&apos;;
	DECLARE columnTypeSearchTag	VARCHAR DEFAULT &apos;:COLUMN_TYPE:&apos;;
	DECLARE newline				VARCHAR DEFAULT CHR(10);
	DECLARE columnName			VARCHAR(4000);
	DECLARE columnNameReserved	VARCHAR(4000);
	DECLARE resourcePath		LONGVARCHAR;
	DECLARE resourceType		VARCHAR;
	DECLARE sqlScript			LONGVARCHAR;
	DECLARE choice				INTEGER;

	set choice = 6;
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/test/sqlScriptTestSelections(choice, resourcePath, resourceType, fromClause, sqlScript);

	-- Construct a list of columns to pass into resolveColumnAlias
	for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, resourceType) do
		set columnName = r.columnName;
		if (r.columnName is not null) then
			if (resColumnNameList is not null) then
				set resColumnNameList = resColumnNameList || &apos; &apos;;
				set resColumnTypeList = resColumnTypeList || &apos; &apos;;
			else
				set resColumnNameList = &apos;&apos;;
				set resColumnTypeList = &apos;&apos;;
			end if;
			-- Check for spaces in the column and surround with double quotes
			if (POSITION(&apos; &apos; IN r.columnName) &gt; 0) then
				set columnName = &apos;&quot;&apos;||columnName||&apos;&quot;&apos;;
			end if;

			-- Make sure any reserved words are quoted
			--Pattern:  COLUMN_NAME:[mycolumn]
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, &apos;F&apos;, columnNameReserved);
			set resColumnNameList = resColumnNameList || columnNameSearchTag||&apos;[&apos;||columnNameReserved||&apos;]&apos;;
			--Pattern:  COLUMN_NAME:[mycolumn COLUMN_TYPE:{INTEGER}]
			set resColumnTypeList = resColumnTypeList || columnNameSearchTag||&apos;[&apos;||columnNameReserved||&apos; &apos;||columnTypeSearchTag||&apos;{&apos;||r.columnType||&apos;}&apos;||&apos;]&apos;;
		end if;
	end for;
	-- Print out source column list
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug1,&apos;resColumnNameList=&apos;||NVL(resColumnNameList,&apos;null&apos;)||newline);
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug1,&apos;resColumnTypeList=&apos;||NVL(resColumnTypeList,&apos;null&apos;)||newline);

	-- Extract the SQL Columns and From clause
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractSQLParts(sqlScript, debug1, debug2, sqlScriptColumns, fromClause, codingListColumns, codingListFrom);

	-- Vector of FROM clauses to handle more than one table
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseFromClause(fromClause, codingListFrom, fromClauseVector);

	-- Double check for any special non-ascii characters
/* 	set outReplaceStr = TRIM(REPLACE(inReplaceStr,chr(13),&apos; &apos;)); -- Carriage return
	set outReplaceStr = TRIM(REPLACE(outReplaceStr,chr(10),&apos; &apos;)); -- Line Feed
	set outReplaceStr = TRIM(REPLACE(outReplaceStr,chr(9),&apos; &apos;)); -- Tab

	--Replace XML carriage return/line feed with a space
	set outReplaceStr = TRIM(REPLACE(REPLACE(outReplaceStr,&apos;&amp;#xd;&apos;,&apos; &apos;),&apos;&amp;#xD;&apos;,&apos; &apos;)); -- XML Carriage Return representation
	set outReplaceStr = TRIM(REPLACE(REPLACE(outReplaceStr,&apos;&amp;#xa;&apos;,&apos; &apos;),&apos;&amp;#xA;&apos;,&apos; &apos;)); -- XML Line Feed representation
*/
	set foundNonAsciiChar = &apos;false&apos;;
	if ((POSITION(chr(13) IN fromClause) &gt; 0) or 
		(POSITION(chr(10) IN fromClause) &gt; 0) or 
		(POSITION(chr(9)  IN fromClause) &gt; 0) or 
		(POSITION(&apos;&amp;#xd;&apos; IN fromClause) &gt; 0) or 
		(POSITION(&apos;&amp;#xa;&apos; IN fromClause) &gt; 0) or
		(POSITION(&apos;&amp;#xD;&apos; IN fromClause) &gt; 0) or 
		(POSITION(&apos;&amp;#xA;&apos; IN fromClause) &gt; 0) ) then
			set foundNonAsciiChar = &apos;true&apos;;
	end if;

	-- Extract the columns from the SQL Script into separate rows for processing
	for r as 
		select * from /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractColumnList(sqlScriptColumns, fromClauseVector, codingListColumns) 
	do
		set rec.sourceExpression = r.columnExpression;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug1,&apos;------------------- Start Process Column -------------------&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug1,&apos;sourceExpression=&apos;||NVL(rec.sourceExpression,&apos;null&apos;));

/***************
Handle comments at the beginning of a line
Remove those first
*****************/
		call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isComment(rec.sourceExpression, isComment);
		if (isComment = 0) then
			set begPos = POSITION(&apos;--&apos; IN rec.sourceExpression);
			if (begPos &gt; 0) then
				set rec.sourceExpression = SUBSTRING(rec.sourceExpression, 1, begPos-1);
			end if;
			set occurrence = 1; -- get the first column in the expression

			-- Resolve the column alias right away before even trying to extract the rest of the column. 
			-- It will make resolving the column much easier by taking one piece of the puzzle out of the parsing equation.
			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnAlias(
					rec.sourceExpression, resColumnNameList, columnNameSearchTag, codingListColumns, rec.columnAlias, rec.sourceExpression);

			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D S&apos;, codingListColumns, rec.sourceExpression, moduleName, debug2, &apos;sourceExpression&apos;, rec.sourceColumnList);

			insert into result values(rec);
		end if;
	end for;
END</attribute>
  <attribute name="creationDate" type="LONG">1384524250650</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="extractInterval" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractInterval" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inColumnExpression" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inOccurrence" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="function" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="contents" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="remainder" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/findString2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSearchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inDirection" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="startingPosition" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inOccurrences" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="pos" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	extractInterval -Extract the INTERVAL syntax from a column expression and treat it as the function.
		Unless a real column is present, there is no further lineage on this type of column.

	Syntax - INTERVAL DAY - The interval day literal has the following syntax:
		INTERVAL &apos;dd hh:mm:ss.nn&apos; DAY TO SECOND
		INTERVAL &apos;dd hh:mm&apos; DAY TO MINUTE
		INTERVAL &apos;dd hh&apos; DAY TO HOUR
		INTERVAL &apos;dd&apos; DAY
		INTERVAL &apos;hh&apos; HOUR
		INTERVAL &apos;mm&apos; MINUTE
		INTERVAL &apos;ss.nn&apos; SECOND

	Syntax - INTERVAL YEAR
		INTERVAL &apos;12&apos; YEAR [TO MONTH]
		INTERVAL &apos;3&apos; MONTH
		If year-month is the unit of measurement, the syntax is
		INTERVAL &apos;2-11&apos; YEAR TO MONTH
		A dash separates the year and month values. The month value must not exceed 11 months. 
		Negative intervals may be represented in three ways:
		-INTERVAL &apos;3&apos; MONTH
		INTERVAL &apos;-3&apos; MONTH
		INTERVAL -&apos;3&apos; MONTH
	In fact, all three may be used at once which results in a -3 month interval.
	A default precision of 2 is assigned if none is specified. For example,
		INTERVAL &apos;99&apos; year(2)
		INTERVAL &apos;99&apos; year
	Both expressions above are the same. The precision is a number indicating the maximum number of digits in the leading number. 
	For example, the expression below is invalid because the precision is exceeded by the five digits in the year value.
		INTERVAL &apos;20001&apos; year(4)
	If it is a year-month interval, the precision only applies to the year
		INTERVAL &apos;200-09&apos; year(3) to month

	Example of EXTRACT with INTERVAL
		SELECT 	orders.OrderDate,
				EXTRACT(SECOND FROM INTERVAL &apos;2 23:51:19.124&apos; DAY TO SECOND),
				EXTRACT(MINUTE FROM INTERVAL &apos;2 23:51:19.124&apos; DAY TO SECOND),
				EXTRACT(HOUR FROM INTERVAL &apos;2 23:51:19.124&apos; DAY TO SECOND),
				EXTRACT(DAY FROM INTERVAL &apos;2 23:51:19.124&apos; DAY TO SECOND),
				EXTRACT(YEAR FROM INTERVAL &apos;499-11&apos; YEAR(3) TO MONTH),
				EXTRACT(MONTH FROM INTERVAL &apos;500&apos; MONTH(3))	

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE extractInterval(
	IN inColumnExpression		LONGVARCHAR,
	-- The occurrence of comma separated list of expressions to return in the contents field
	--  for functions that reference more than one column. If null or 0, then return the comma separate list.
	--  Examples:
	--   CONCAT(col1, col2)
	--   col1 || col2 || col3 || col4
	--   coalesce(col1, col2, col3)
	IN inOccurrence		INTEGER,
	OUT function		VARCHAR,
	OUT contents		LONGVARCHAR,
	OUT remainder		LONGVARCHAR
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;extractInterval&apos;;
	DECLARE debug				CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
	DECLARE columnExpression	LONGVARCHAR DEFAULT TRIM(inColumnExpression);
	DECLARE occurrence			INTEGER DEFAULT inOccurrence;
	DECLARE begPos 				INTEGER;
	DECLARE midPos 				INTEGER;
	DECLARE endPos 				INTEGER;
	DECLARE i					INTEGER DEFAULT 1;
	DECLARE operations			VECTOR (VARCHAR(1)) DEFAULT VECTOR[&apos;+&apos;,&apos;-&apos;,&apos;/&apos;,&apos;*&apos;,&apos;%&apos;];
	DECLARE keywordsV			VECTOR (VARCHAR) DEFAULT VECTOR[&apos;TO&apos;,&apos;DAY&apos;,&apos;SECOND&apos;,&apos;MINUTE&apos;,&apos;HOUR&apos;,&apos;MONTH&apos;,&apos;YEAR&apos;];
	DECLARE keywords			VARCHAR DEFAULT &apos;INTERVAL TO DAY SECOND MINUTE HOUR MONTH YEAR CURRENT_DATE CURRENT_TIMESTAMP CURRENT_TIME&apos;;
	DECLARE keyword				VARCHAR;

	if (occurrence is null) then
		set occurrence = 1;
	end if;
	set begPos = INSTR(UPPER(columnExpression),&apos;INTERVAL&apos;,1,1);
	if (begPos &gt; 0) then
		while (i &lt;= CARDINALITY(operations)) do
			set columnExpression = REPLACE(columnExpression,operations[i],&apos;&apos;);
			set i = i + 1;
		end while;
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;remove operations:: ce=&apos;||columnExpression);
		end if;
		-- Look for the single quotes in the string:
		--  INTERVAL &apos;2 23:51:19.124&apos; DAY TO SECOND
		call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/findString2(&apos;&apos;&apos;&apos;,columnExpression,&apos;F&apos;,begPos+8,1, midPos);
		call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/findString2(&apos;&apos;&apos;&apos;,columnExpression,&apos;F&apos;,begPos+8,2, endPos);
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;positions:: INTERVAL=&apos;||begPos||&apos;  beg&apos;&apos;=&apos;||midPos||&apos;  end&apos;&apos;=&apos;||endPos);
		end if;
		-- Remove literal
		if (midPos &gt; 0 and endPos &gt; midPos) then
			set columnExpression = TRIM(SUBSTRING(columnExpression,1,midPos-1))||&apos; &apos;||TRIM(SUBSTRING(columnExpression,endPos+1,LENGTH(columnExpression)));
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;remove literal:: ce=&apos;||columnExpression);
		end if;
		set i = 1;
		for r as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(columnExpression,&apos; &apos;,0,0,0,1,0) do
			set keyword = r.object;
--			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;regex split:: word=&apos;||keyword);
			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/findString2(&apos;(&apos;,keyword,&apos;F&apos;,1,1, begPos);
			if (begPos &gt; 0) then
				set keyword = SUBSTRING(keyword,1,begPos-1);
			end if;
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;regex split:: word=&apos;||keyword);
			end if;
			if (POSITION(keyword IN keywords) = 0) then
				if (i &lt;= occurrence) then
					if (debug = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;regex non-keyword:: word=&apos;||r.object);
					end if;
					set contents = keyword;
				end if;
			end if;
			set i = i + 1;	
		end for;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1557255075409</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
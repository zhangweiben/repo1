<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="resolveColumnAlias" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnAlias" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="sourceExpression" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inResourceColumnList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="columnNameSearchTag" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="codingListColumns" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="columnAlias" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="remainder" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/returnOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="remainderText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	resolveColumnAlias - Resolve the alias for the column.

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	11/16/2013		Mike Tinius			6.1.0			8.0: Added codingListColumns to input and decode to resolve comparison of columns with encoded spaces.
	11/20/2014		Mike Tinius			6.2.6			8.1.5: Added &apos;D S&apos; to the getCodedString(&apos;D&apos;, &apos;D S&apos;, ...) invocation because of a change to getCodedString.
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE resolveColumnAlias(
	IN  sourceExpression		LONGVARCHAR,
	IN  inResourceColumnList	LONGVARCHAR,
	IN  columnNameSearchTag		VARCHAR,
	IN  codingListColumns		VARCHAR(4000),
	OUT columnAlias				VARCHAR,
	OUT remainder				LONGVARCHAR
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;resolveColumnAlias&apos;;
	DECLARE resourceColumnList	LONGVARCHAR DEFAULT inResourceColumnList;
	DECLARE debug				CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
	DECLARE newline				VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
	DECLARE notEmpty			INTEGER DEFAULT 0;
	DECLARE empty				INTEGER DEFAULT 1;
	DECLARE aliasFound			BOOLEAN DEFAULT false;
	DECLARE columnName			VARCHAR;
	DECLARE temp1				LONGVARCHAR;
	DECLARE temp2				LONGVARCHAR;
	DECLARE pos					INTEGER;
	DECLARE startTime			TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE duration			INTERVAL MINUTE TO SECOND;
	DECLARE seconds				DECIMAL(32,3);
	DECLARE debugTime			CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugTime;

	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;in   sourceExpression=[&apos;||sourceExpression||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;in   resourceColumnList=[&apos;||resourceColumnList||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;in   columnNameSearchTag=[&apos;||NVL(columnNameSearchTag,&apos;null&apos;)||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;in   codingListColumns=[&apos;||NVL(codingListColumns,&apos;null&apos;)||&apos;]&apos;);
	end if;
	-- Initialize the columnAlis to blank in case there is no column alias.
	set columnAlias = &apos;&apos;;
	set remainder = sourceExpression;

	-- If there is a space present then likelihood of alias increases otherwise there is no column alias.
	if (POSITION(&apos; &apos; IN sourceExpression) &gt; 0) then
		call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/returnOccurrence(sourceExpression,&apos;E&apos;,&apos; &apos;,1,remainder,columnAlias);
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. extracted columnAlias=[&apos;||columnAlias||&apos;]  remainder=[&apos;||remainder||&apos;]&apos;);
		end if;

		-- If the potential extracted column alias matches the column name in the list then the alias is found
		-- Stop comparing once the alias is found
		set pos = POSITION(columnNameSearchTag||&apos;[&apos;||columnAlias||&apos;]&apos; IN resourceColumnList);
		if (pos &gt; 0) then
			-- Set the string so it starts with the found column.  This allows extractBiDelimitedText to select the first occurrence.
			set resourceColumnList = SUBSTRING(resourceColumnList, pos, LENGTH(resourceColumnList));
			call /shared/ASAssets/Utilities/string/extractBiDelimitedText(resourceColumnList, columnNameSearchTag, &apos;[&apos;, &apos;]&apos;, 1, 0, 1, columnName);
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;out  ALIAS FOUND, columnName=[&apos;||NVL(columnName,&apos;null&apos;)||&apos;]  remainder=[&apos;||NVL(remainder,&apos;null&apos;)||&apos;]&apos;);
			end if;
			set columnAlias = columnName;
			set aliasFound = true;
		end if;

		if (aliasFound) then
			-- Determine if the keyword &quot;AS&quot; was used in front of the alias column
			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/returnOccurrence(remainder,&apos;E&apos;,&apos; &apos;,1,temp1,temp2);
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;temp1=[&apos;||NVL(temp1,&apos;null&apos;)||&apos;]  temp2=[&apos;||NVL(temp2,&apos;null&apos;)||&apos;]&apos;);
			end if;
			-- Yes &quot;AS&quot; was used in front so take the remainder (temp1) thus removing &quot;AS&quot; from the remainder string
			if (UPPER(temp2) = &apos;AS&apos;) then
				set remainder = temp1;				
			end if;
			-- No &quot;AS&quot; was not used so keep the remainder which was captured prior to the for loop.
		else
			-- Alias was not found so stay with the original expression.
			set columnAlias = &apos;&apos;;
			set remainder = sourceExpression;
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;ALIAS NOT FOUND,  columnName=[&apos;||NVL(columnName,&apos;null&apos;)||&apos;]  remainder=[&apos;||NVL(remainder,&apos;null&apos;)||&apos;]&apos;);
			end if;
		end if;
	end if;
	set duration = CURRENT_TIMESTAMP - startTime;
	set seconds = EXTRACT(SECONDS FROM duration);
	if (seconds &gt; .03 and debugTime = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;duration=&apos;||cast(duration as varchar)||&apos;  columnAlias=&apos;||NVL(columnAlias,&apos;null&apos;));
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="parseArithmeticOperators" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseArithmeticOperators" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inColumnList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="columnList" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isNumber" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="valueString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	parseArithmeticOperators - parse a column expression that contains mathematic operators and return the column list
		with separators as needed.

		Arithmetic Operators:  ADD (+), DIVIDE (/), MODULO (%), MULTIPLY (*), NEGATE (-), SUBTRACT (-) and FACTORIAL(!)
			Of these, all the operators except NEGATE take two arguments, whereas Negate takes only one.
			The following section lists the input and output types for each of the built-in arithmetic operators.
	IN
		inColumnList - the existing column list to add to
	OUT
		columnList - a list of column expressions found that are not literal strings or numbers.
			this may contain additional function expressions

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	06/24/2013		Mike Tinius			6.0.0			7.2: Multiple instances of Best Practices supported
	10/25/2013		Mike Tinius			6.2.0			8.0: Removed the TRIM around the SUBSTRING for wordPart and wordToken as the space separator is required
	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE parseArithmeticOperators(
	IN inColumnList		LONGVARCHAR,
	OUT columnList		LONGVARCHAR
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;parseArithmeticOperators&apos;;
	DECLARE debug			CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
	DECLARE regex			VARCHAR DEFAULT &apos;[\+\-\/\*\%\!]&apos;;
	DECLARE recordSeparator	VARCHAR DEFAULT &apos;001f&apos;;
	DECLARE sep				VARCHAR DEFAULT &apos;^&apos;; -- separator
	DECLARE expression		LONGVARCHAR;
	DECLARE columnListTmp	LONGVARCHAR;
	DECLARE word			LONGVARCHAR;
	DECLARE wordPart		LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE wordToken		LONGVARCHAR;
	DECLARE embeddedCase	BOOLEAN DEFAULT false;
	DECLARE numDoubleQuotes INTEGER;
	DECLARE pos1,pos2		INTEGER;
	DECLARE isNumber		INTEGER;

	set columnList = &apos;&apos;;
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;inColumnList=[&apos;||NVL(inColumnList,&apos;null&apos;)||&apos;]&apos;);
	end if;

	-- Split the incoming expression into its existing delimiter &quot;^&quot;
	for r as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(inColumnList,sep,0,0,0,0,0) do
		set word = r.object;
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;split word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
		end if;

		-- Look for double quotes first.  They always come in pairs.
		call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;&quot;&apos;, word, numDoubleQuotes);
		set numDoubleQuotes = numDoubleQuotes + 1;

		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;numDoubleQuotes=[&apos;||NVL(cast(numDoubleQuotes as varchar),&apos;null&apos;)||&apos;]&apos;);
		end if;

		set wordPart = &apos;&apos;;
		while (numDoubleQuotes &gt; 0 AND word IS NOT NULL AND LENGTH(&apos;|&apos;||word||&apos;|&apos;) &gt; 2) do  --notEmpty
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
			end if;
			if (numDoubleQuotes &gt;= 2) then
				call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(word,&apos;&quot;&apos;,1, pos1);
				call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(word,&apos;&quot;&apos;,2, pos2);
				if (debug = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;pos1=[&apos;||NVL(cast(pos1 as varchar),&apos;null&apos;)||&apos;]  pos2=[&apos;||NVL(cast(pos2 as varchar),&apos;null&apos;)||&apos;]&apos;);
				end if;

				-- Double Quote found in first position &quot;table&quot;.&quot;col1&quot;
				if (pos1 = 1 and pos2 &gt; pos1) then
					set wordToken = SUBSTRING(word,pos1,pos2);
					set wordPart = wordPart || TRIM(SUBSTRING(word,pos1,pos2));
					set numDoubleQuotes = numDoubleQuotes - 2;
					set word = SUBSTRING(word,pos2+1);
					if (debug = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. wordToken=[&apos;||NVL(wordToken,&apos;null&apos;)||&apos;]  wordPart=[&apos;||NVL(wordPart,&apos;null&apos;)||&apos;]  word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
					end if;

				-- Double Quote found in pos1 and pos2
				elseif (pos1 &gt; 1 and pos2 &gt; pos1) then
					call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(SUBSTRING(word,1,pos1-1), regex, recordSeparator, 0, wordToken);
					set wordPart = wordPart || wordToken;
					set word = SUBSTRING(word,pos1);
					if (debug = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;2. wordToken=[&apos;||NVL(wordToken,&apos;null&apos;)||&apos;]  wordPart=[&apos;||NVL(wordPart,&apos;null&apos;)||&apos;]  word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
					end if;
				end if;
			else
				if (word is not null and LENGTH(word) &gt; 0) then
					call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(word, regex, recordSeparator, 0, wordToken);
					set wordPart = wordPart || wordToken;
					set word = SUBSTRING(word,pos1);
					set numDoubleQuotes = numDoubleQuotes - 1;
					if (debug = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;3. wordToken=[&apos;||NVL(wordToken,&apos;null&apos;)||&apos;]  wordPart=[&apos;||NVL(wordPart,&apos;null&apos;)||&apos;]  word=[&apos;||NVL(word,&apos;null&apos;)||&apos;]&apos;);
					end if;
				end if;
			end if;
		end while;

		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;wordPart[&apos;||NVL(wordPart,&apos;null&apos;)||&apos;]&apos;);
		end if;

			--- Split into words based on aritmetic separators
			for s as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(wordPart,recordSeparator,0,0,0,1,0) do
				set wordToken = s.object;
				if (debug = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;math word=[&apos;||NVL(wordToken,&apos;null&apos;)||&apos;]&apos;);
				end if;
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isNumber(wordToken, isNumber);
				if (wordToken IS NOT NULL AND LENGTH(&apos;|&apos;||wordToken||&apos;|&apos;) &gt; 2 and isNumber = 0) then  --notEmpty
					if (columnList IS NOT NULL AND LENGTH(&apos;|&apos;||columnList||&apos;|&apos;) &gt; 2 and wordToken != &apos;.&apos;) then  --notEmpty
						set columnList = columnList || sep;
					end if;
					set columnList = columnList || wordToken;
				end if;
			end for;
	end for;
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;columnList=[&apos;||NVL(columnList,&apos;null&apos;)||&apos;]&apos;);
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1554566369823</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
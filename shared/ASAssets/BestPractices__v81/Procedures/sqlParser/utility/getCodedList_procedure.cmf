<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getCodedList" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedList" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="codingListType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="codingList" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*	getCodedList:
	The set of codes to be used for encoding and decoding sql script objects.

	Input:
		codingListType	VARCHAR,	one of [codingListColumns, codingListFrom, codingListComma, codingListRetriveColumns]
	Output:
		codingList		VARCHAR(4000),
	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	10/28/2013		Mike Tinius			6.2.0			8.0: new.  Perform a string encode or decode of special characters
	11/20/2014		Mike Tinius			6.2.6			8.1.5: Modified codingListFrom to include the same set of code values that columns have because 
																folders can have the same set of characters that also need to be escpaped.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE getCodedList(
	IN  codingListType				VARCHAR,	--[codingListColumns, codingListFrom, codingListComma, codingListRetriveColumns]
	OUT codingList					VARCHAR(4000)
)
BEGIN
	DECLARE encodedSpace 			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedSpace;  			-- _0020 -- &apos; &apos; space
	DECLARE encodedPeriod 			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedPeriod;  			-- _002E -- &apos;.&apos; period
	DECLARE encodedPipe 			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedPipe;  			-- _007C -- &apos;|&apos; pipe
	DECLARE encodedComma 			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedComma;  			-- _002C -- &apos;,&apos; comma
	DECLARE encodedOpFact			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpFact;			-- _0021 -- &apos;!&apos; factorial operator
	DECLARE encodedDollar			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedDollar; 			-- _0024 -- &apos;$&apos; dollar sign
	DECLARE encodedOpMod			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpMod; 			-- _0025 -- &apos;%&apos; modulo operator
	DECLARE encodedLParen			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedLParen;			-- _0028 -- &apos;(&apos; left parenthesis
	DECLARE encodedRParen			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedRParen;			-- _0029 -- &apos;)&apos; right parenthesis
	DECLARE encodedOpMult			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpMult;			-- _002A -- &apos;*&apos; multiply operator
	DECLARE encodedOpAdd			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpAdd;				-- _002B -- &apos;+&apos; addition operator
	DECLARE encodedOpSub			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpSub;				-- _002D -- &apos;-&apos; subtraction operator
	DECLARE encodedOpDiv			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedOpDiv;				-- _002F -- &apos;/&apos; division operator
	DECLARE encodedQuestionMark		VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedQuestionMark;		-- _003F -- &apos;?&apos; question mark
	DECLARE encodedLeftBracket		VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedLeftBracket;		-- _005B -- &apos;[&apos; right square bracket
	DECLARE encodedRightBracket		VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedRightBracket;		-- _005D -- &apos;]&apos; left square bracket
	DECLARE encodedBackslash		VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedBackslash;			-- _005C -- &apos;\&apos; backslash
	DECLARE encodedCarat			VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedCarat;				-- _005E -- &apos;^&apos; carat
	DECLARE encodedLeftCurlyBracket	VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedLeftCurlyBracket;	-- _007B -- &apos;{&apos; left curly bracket
	DECLARE encodedRightCurlyBracket VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedRightCurlyBracket;-- _007D -- &apos;}&apos; right curly bracket
	DECLARE encodedSingleQuote		VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedSingleQuote;		-- _0027 -- &apos;&apos;&apos; single quote
	DECLARE encodedDoubleDoubleQuote VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/encodedValues.encodedDoubleDoubleQuote;-- _0022_0022 -- &apos;&quot;&quot;&apos; Double double quote

	-- Establish the encoding and decoding list for a column
	if (codingListType = &apos;codingListColumns&apos;) then
		set codingList = TRIM(encodedDoubleDoubleQuote||&apos;,&apos;||encodedSingleQuote||&apos;,&apos;||encodedSpace||&apos;,&apos;||encodedPeriod||&apos;,&apos;||encodedPipe||&apos;,&apos;||encodedComma||&apos;,&apos;||
			encodedOpFact||&apos;,&apos;||encodedDollar||&apos;,&apos;||encodedOpMod||&apos;,&apos;||encodedLParen||&apos;,&apos;||encodedRParen||&apos;,&apos;||encodedOpMult||&apos;,&apos;||encodedOpAdd||&apos;,&apos;||encodedOpSub||&apos;,&apos;||encodedOpDiv||&apos;,&apos;||
			encodedQuestionMark||&apos;,&apos;||encodedLeftBracket||&apos;,&apos;||encodedRightBracket||&apos;,&apos;||encodedBackslash||&apos;,&apos;||encodedCarat||&apos;,&apos;||encodedLeftCurlyBracket||&apos;,&apos;||encodedRightCurlyBracket);
	end if;

	-- Establish the encoding and decoding list for a from clause [same as columns]
	if (codingListType = &apos;codingListFrom&apos;) then
		set codingList = TRIM(encodedDoubleDoubleQuote||&apos;,&apos;||encodedSingleQuote||&apos;,&apos;||encodedSpace||&apos;,&apos;||encodedPeriod||&apos;,&apos;||encodedPipe||&apos;,&apos;||encodedComma||&apos;,&apos;||
			encodedOpFact||&apos;,&apos;||encodedDollar||&apos;,&apos;||encodedOpMod||&apos;,&apos;||encodedLParen||&apos;,&apos;||encodedRParen||&apos;,&apos;||encodedOpMult||&apos;,&apos;||encodedOpAdd||&apos;,&apos;||encodedOpSub||&apos;,&apos;||encodedOpDiv||&apos;,&apos;||
			encodedQuestionMark||&apos;,&apos;||encodedLeftBracket||&apos;,&apos;||encodedRightBracket||&apos;,&apos;||encodedBackslash||&apos;,&apos;||encodedCarat||&apos;,&apos;||encodedLeftCurlyBracket||&apos;,&apos;||encodedRightCurlyBracket);
	end if;

	-- Establish the simple encoding list for comma
	if (codingListType = &apos;codingListComma&apos;) then
		set codingList = TRIM(encodedComma);
	end if;

	-- Establish the simp
	if (codingListType = &apos;codingListRetriveColumns&apos;) then
		set codingList = TRIM(encodedComma||&apos;,&apos;||encodedLeftBracket||&apos;,&apos;||encodedRightBracket||&apos;,&apos;||encodedPipe);
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">1385044042248</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
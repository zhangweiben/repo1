<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="parseFromClause" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseFromClause" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="inFromClause" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="codingList" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="fromClauseVector" direction="OUT" nullable="true">
      <datatype name="fromClauseVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="1">
            <element name="resourcePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="resourceType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceAlias">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isFromClauseKeyword" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="keyword" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="foundKeyword" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/removeSqlOptions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSqlText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outSqlText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getDelimitedOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	parseFromClause - Parse the FROM clause and return each from path in a vector.

	TO DO:
		1) handle simple paths with no separator (/)

	Scenarios tested:
		No spaces/no double quotes
		/shared/BestPractices_TestCases/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO/CUSTOMERS
		/shared/BestPractices_TestCases/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO/CUSTOMERS CUSTOMERS

		No spaces in path/double quotes in alias
		/shared/BestPractices_TestCases/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO/CUSTOMERS &quot;MY CUSTOMERS&quot;

		Space/Double quote in table name and alias
		/shared/BestPractices_TestCases/Physical/Metadata/MyData/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot;
		/shared/BestPractices_TestCases/Physical/Metadata/MyData/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity&quot;

		Space/Double quote in path and table name
		/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot;
		/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity&quot;

		Complex from clause with spaces/double quotes on both sides of the join keywords
		/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity&quot; inner join 
			/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity2&quot;

		/shared/BestPractices_TestCases/Physical/Metadata/&quot;My Data&quot;/CACHE_DB/CIS/dbo/&quot;Drilling Activity&quot; &quot;Drilling Activity&quot; inner join 
			/shared/BestPractices_TestCases/Physical/Metadata/OracleSource/cisOraDemoDS/CISORADEMO/CUSTOMERS CUSTOMERS


	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	09/13/2013		Mike Tinius			6.1.0			Fixed issue with double quotes in table name with no alias
	10/25/2013		Mike Tinius			6.1.0			8.0: Added a replace of spaces inside double quotes &quot; &quot; to an encoded space &quot;_0020&quot; to resolve regexSplit.
	11/15/2013		Mike Tinius			6.1.0			8.0: Added codingList to the input parameter.
	12/19/2013		Mike Tinius			6.1.0			8.1: Forced the table alias to be the resource name which averts the issue when the alias name is different than the table name
														     and causes the generateDatasourceList to generate rows inconsistent with the source view.   The generateFormattingViews
														     requires the lookup of the spreadsheet based on the source view name.
	03/28/2014		Mike Tinius			6.2.0			8.1.1: Added &quot;resourceType&quot; to the debug message.
	11/20/2014		Alex Dedov			6.2.6			8.1.5: Added exception block around getBasicResourceCursor() call to catch invalid path errors.
	11/20/2014		Mike Tinius			6.2.6			8.1.5: Added &apos;D N&apos; to the getCodedString(&apos;D&apos;, &apos;D N&apos;, ...) invocation because of a change to getCodedString.
	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE parseFromClause(
	IN inFromClause			LONGVARCHAR,
	IN codingList			VARCHAR(4000),
	OUT fromClauseVector	VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions.FromClause_Type) 
/*     DECLARE PUBLIC TYPE FromClause_Type ROW (
        resourcePath LONGVARCHAR, 
		resourceAlias VARCHAR  );
*/
)
BEGIN
	DECLARE moduleName						VARCHAR DEFAULT &apos;parseFromClause&apos;;
	DECLARE debug							CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser3;
	DECLARE newline							VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
	DECLARE fromClause 						LONGVARCHAR DEFAULT TRIM(inFromClause);
	DECLARE tempString						LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE fromPath						LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE pairCount						INTEGER DEFAULT 0;
	DECLARE vectorCount						INTEGER DEFAULT 0;
	DECLARE fromPos							INTEGER;
	DECLARE wherePos						INTEGER;
	DECLARE orderByPos						INTEGER;
	DECLARE groupByPos						INTEGER;
	DECLARE onPos							INTEGER;
	DECLARE pos								INTEGER;
	DECLARE occurrences 					INTEGER;
	DEcLARE keyword							LONGVARCHAR;
	DECLARE keywordFound					BIT;
	DECLARE pathNotComplete					BOOLEAN;	
	DECLARE startTime						TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE duration						INTERVAL MINUTE TO SECOND;
	DECLARE seconds							DECIMAL(32,3);
	DECLARE debugTime						CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugTime;

	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;------------------- Begin Parse From Clause -------------------&apos;);
		-- Print out the parsing algorithms to turn spaces into encoded spaces
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;&apos;);

		-- Print out FROM Clause
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. Orig fromClause=&apos;||fromClause||newline);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. Orig codingList=&apos;||codingList||newline);
	end if;

	-- 1. Remove keywords and sections that are not pertinent to a from clause
	set fromPos = POSITION(&apos;FROM&apos; in UPPER(fromClause));
	if (fromPos &gt; 0) then
		set fromClause = TRIM(SUBSTRING(fromClause, fromPos+4, LENGTH(fromClause)));
	end if;
	-- Remove OFFSET clause
	set orderByPos = POSITION(&apos;OFFSET&apos; IN UPPER(fromClause));
	if (orderByPos &gt; 0) then
		set fromClause = SUBSTRING(fromClause,1,orderByPos-1);
	end if;
	-- Remove ORDER BY clause
	set orderByPos = POSITION(&apos;ORDER BY&apos; IN UPPER(fromClause));
	if (orderByPos &gt; 0) then
		set fromClause = SUBSTRING(fromClause,1,orderByPos-1);
	end if;
	-- Remove HAVING clause
	set orderByPos = POSITION(&apos;HAVING&apos; IN UPPER(fromClause));
	if (orderByPos &gt; 0) then
		set fromClause = SUBSTRING(fromClause,1,orderByPos-1);
	end if;
	-- Remove GROUP BY clause
	set groupByPos = POSITION(&apos;GROUP BY&apos; IN UPPER(fromClause));
	if (groupByPos &gt; 0) then
		set fromClause = SUBSTRING(fromClause,1,groupByPos-1);
	end if;
	-- Remove WHERE clause
	set wherePos = POSITION(&apos;WHERE&apos; IN UPPER(fromClause));
	if (wherePos &gt; 0) then
		set fromClause = SUBSTRING(fromClause,1,wherePos-1);
	end if;
	-- Remove SQL Option { OPTION }
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/removeSqlOptions(fromClause,fromClause);

--  1) Remove extraneous keywords
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;2. remove keywords fromClause=&apos;||fromClause||newline);
	end if;

	-- Initialize variables
	set fromClauseVector = VECTOR[(null)];

	-- Extract word parts based on space &apos; &apos; delimiter as a cursor
	for r as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(fromClause,&apos; &apos;,0,0,0,0,0) do
		set keyword = r.object;
		if (keyword IS NOT NULL AND LENGTH(&apos;|&apos;||keyword||&apos;|&apos;) &gt; 2) then  --notEmpty
			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isFromClauseKeyword(keyword,keywordFound);
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;keyword=[&apos;||keyword||&apos;]  keywordFound=&apos;||keywordFound);
			end if;

			if (keywordFound = 0) then
				-- A pair is a table resource path and table alias
				if (pairCount = 0) then
					if (POSITION(&apos;/shared/&apos; IN keyword) &gt; 0 or POSITION(&apos;/users/&apos; IN keyword) &gt; 0 or POSITION(&apos;/services/&apos; IN keyword) &gt; 0) then
						-- Initialize the vector
						if (vectorCount &gt; 0) then
							set fromClauseVector = EXTEND(fromClauseVector,1);-- always increase the vector when a table path is found
						end if;
						set vectorCount = vectorCount + 1;

						-- If the from clause is a procedure, then strip off the parenthesis forward - /path/proc()
						set pos = POSITION(&apos;(&apos; IN keyword);
						if (pos = 0) then
							set fromClauseVector[vectorCount].resourcePath = TRIM(keyword);
						else
							set fromClauseVector[vectorCount].resourcePath = TRIM(SUBSTRING(keyword,1,pos-1));
						end if;

						-- Get the resource name from the resource path
						call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(fromClauseVector[vectorCount].resourcePath, &apos;R&apos;, &apos;/&apos;, 1, 0, fromClauseVector[vectorCount].resourceName);

						-- Replace &quot; with empty.  Replace encodeSpace _0020 with an actual space &apos; &apos;, Replace encodedPeriod _002E with an actual &apos;.&apos;
						-- Decode anywhere in the path
						call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D N&apos;, codingList, REPLACE(fromClauseVector[vectorCount].resourcePath,&apos;&quot;&apos;,&apos;&apos;), moduleName, debug, &apos;fromResourcePath&apos;, fromClauseVector[vectorCount].resourcePath);

						if (debug = &apos;Y&apos;) then
							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. fromClauseVector[&apos;||vectorCount||&apos;].resourcePath=&apos;||fromClauseVector[vectorCount].resourcePath||&apos;  resourceType=&apos;||fromClauseVector[vectorCount].resourceType);
						end if;

-- 20141113#DA CHANGE Begin: Handle Admin API exceptions
BEGIN 
						for r1 as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(fromClauseVector[vectorCount].resourcePath,null) do
							set fromClauseVector[vectorCount].resourceType = r1.&quot;type&quot;;
						end for;
EXCEPTION
	ELSE
		set fromClauseVector[vectorCount].resourceType = &apos;&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,&apos;Y&apos;,&apos;Failed to retrieve resource info: &apos;||CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR));
END;
-- 20141113#DA CHANGE End
 
						set pairCount = pairCount + 1;--the path is the first of the pair (path,alias)
					end if;
				else -- The table path was found since pairCount &gt; 0
					-- Just in case check to see if the resource is a path (in case no alias was provided)
					if (POSITION(&apos;/shared/&apos; IN keyword) &gt; 0 or POSITION(&apos;/users/&apos; IN keyword) &gt; 0 or POSITION(&apos;/services/&apos; IN keyword) &gt; 0) then
						set fromClauseVector = EXTEND(fromClauseVector,1);-- always increase the vector when a table path is found
						set vectorCount = vectorCount + 1; -- increase the vector since no alias was found

						-- Get the resource name from the resource path
						call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(fromClauseVector[vectorCount].resourcePath, &apos;R&apos;, &apos;/&apos;, 1, 0, fromClauseVector[vectorCount].resourceName);

						-- Replace &quot; with empty.  Replace encodeSpace _0020 with an actual space &apos; &apos;, Replace encodedPeriod _002E with an actual &apos;.&apos;
						-- Decode anywhere in the path
						call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D N&apos;, codingList, REPLACE(fromClauseVector[vectorCount].resourcePath,&apos;&quot;&apos;,&apos;&apos;), moduleName, debug, &apos;fromResourcePath&apos;, fromClauseVector[vectorCount].resourcePath);


-- 20141113#DA CHANGE Begin: Handle Admin API exceptions
BEGIN 
						for r1 as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(fromClauseVector[vectorCount].resourcePath,null) do
							set fromClauseVector[vectorCount].resourceType = r1.&quot;type&quot;;
						end for;
EXCEPTION
	ELSE
		set fromClauseVector[vectorCount].resourceType = &apos;&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,&apos;Y&apos;,&apos;Failed to retrieve resource info: &apos;||CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR));
END;
-- 20141113#DA CHANGE End


						set pairCount = pairCount + 1;--the path is the first of the pair (path,alias)
						if (debug = &apos;Y&apos;) then
							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;2. fromClauseVector[&apos;||vectorCount||&apos;].resourcePath=&apos;||fromClauseVector[vectorCount].resourcePath||&apos;  resourceType=&apos;||fromClauseVector[vectorCount].resourceType);
						end if;
					else -- This is definitely an alias and not a path
						-- Decode anywhere in the path
						call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D N&apos;, codingList, keyword, moduleName, debug, &apos;fromResourceAlias&apos;, fromClauseVector[vectorCount].resourceAlias);
						set pairCount = 0;--reset the pairCount to zero since both path and alias were found
						if (debug = &apos;Y&apos;) then
							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;3. fromAlias=&apos;||fromClauseVector[vectorCount].resourceAlias);
						end if;
					end if;
				end if;
			else
				set pairCount = 0;
			end if;
		end if;
	end for;

	-- Make sure each table has an alias (use the last / delimited word as the alias if it has none
	set vectorCount = 1;
	WHILE (vectorCount &lt;= CARDINALITY(fromClauseVector)) DO

		-- Decode anywhere in the path
		call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;D&apos;, codingList, fromClauseVector[vectorCount].resourceName, moduleName, debug, &apos;fromResourcePath&apos;, fromClauseVector[vectorCount].resourceName);

		-- Force the alias to be the same as the resource name
		set fromClauseVector[vectorCount].resourceAlias = fromClauseVector[vectorCount].resourceName;

		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;sourceName=&apos;||fromClauseVector[vectorCount].resourceName||&apos;  sourceAlias=&apos;||fromClauseVector[vectorCount].resourceAlias||&apos;  sourcePath=&apos;||fromClauseVector[vectorCount].resourcePath||&apos;  sourceType=&apos;||fromClauseVector[vectorCount].resourceType);
		end if;
		set vectorCount = vectorCount + 1;
	END WHILE;
	set duration = CURRENT_TIMESTAMP - startTime;
	set seconds = EXTRACT(SECONDS FROM duration);
	if (seconds &gt; .05 and debugTime = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;duration=&apos;||cast(duration as varchar)||&apos;  inFromClause=&apos;||inFromClause);
	end if;
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;------------------- End Parse From Clause -------------------&apos;);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
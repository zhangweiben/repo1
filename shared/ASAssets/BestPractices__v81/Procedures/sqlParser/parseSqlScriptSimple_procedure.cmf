<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="parseSqlScriptSimple" path="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/parseSqlScriptSimple" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="sqlScript" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="SqlScriptV2Row" type="TABLE" refId="1">
        <element name="derivedColumn">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="sourceAlias">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="sourceColumn">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="columnAlias">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="columnType">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="sourceExpression">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="sourceExpressionNoCast">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="sourceColumnList">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="functionList">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="sourcePath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractColumnList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sqlScript" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClauseVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="2">
              <element name="resourcePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="resourceType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceAlias">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="codingListColumns" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="3">
          <element name="columnExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractSQLParts" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSqlScript" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="debug2" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sqlScriptColumns" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClause" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="codingListColumns" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="codingListFrom" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inStringName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isComment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="keyword" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="isComment" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseColumnExpression" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inColumnExpression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inFunctionList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inColumnList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inRecurseDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="functionList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="recurseDepth" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseFromClause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inFromClause" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="fromClauseVector" direction="OUT">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="2">
              <element name="resourcePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="resourceType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceAlias">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/removeOuterCast" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceExpression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="sourceExpressionNoCast" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnAlias" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sourceExpression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inResourceColumnList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnNameSearchTag" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingListColumns" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="columnAlias" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="remainder" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnSource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceAlias" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="inColumnName" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="fromClauseVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="FromClause_Type" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions" referenceType="FromClause_Type" type="TREE" refId="2">
              <element name="resourcePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="resourceType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceAlias">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="codingListColumns" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="codingListFrom" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="outSourceAlias" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outSourcePath" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnType" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceColumn" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnAlias" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inResColumnTypeList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnNameSearchTag" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnTypeSearchTag" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingListColumns" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/returnOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="remainderText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cursorNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="columnBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="paramDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	parseSqlScript - Driver procedure to parse the SQL Script for a View/Table.
		This is the secondary interface into the sqlParser routines.  
		The main interface is &quot;parseSqlScriptComplex&quot;.  Use that method for invocation.

		Note: This method may return a duplicate &quot;columnAlias&quot; columns when the column is derived from multiple &quot;sourceColumn&quot;s.

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	11/11/2011		Mike Tinius			5.2.0			Created new
	03/15/2013		Mike Tinius			5.2.0			Modifications for Best Practices 7.0
	06/24/2013		Mike Tinius			6.0.0			7.2: Multiple instances of Best Practices supported
	09/17/2013		Mike Tinius			6.1.0			7.3.1: Remove the Composite OPTION separated by {OPTION }.  Remove comments separated by /* * /.  Remove -- comments for a single column expression.
	10/25/2013		Mike Tinius			6.1.0			8.0: Added a replace of spaces inside double quotes &quot; &quot; to an encoded space &quot;_0020&quot; to resolve regexSplit.
	11/15/2013		Mike Tinius			6.1.0			8.0: Moved the initial parsing of the sql script to extract column list and from clause to a separate procedure to allow it to be
															 invoked by a test script as well for testing purposes.
	12/18/2013		Mike Tinius			6.2.0			8.1: Fixed issue with quoting reserved words around the column alias, sourceColumn and sourceAlias using applyReservedListToWord().
	03/28/2014		Mike Tinius			6.2.0			8.1.1: Added ability to parse PROCEDURE types and return the column list.
	11/20/2014		Mike Tinius			6.2.6			8.1.5: Added &apos;P D S&apos; to the getCodedString(&apos;D&apos;, &apos; P D S&apos;, ...) invocation because of a change to getCodedString.
	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE parseSqlScriptSimple(
	IN	sqlScript			LONGVARCHAR,
	IN	resourcePath		LONGVARCHAR,
	IN  resourceType		VARCHAR,
	OUT result 				PIPE /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.SqlScriptV2Row
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;parseSqlScriptSimple&apos;;
	DECLARE debug				CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser1;
	DECLARE debug2				CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugSqlParser2;
	DECLARE newline				VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
	DECLARE sep					CHAR(1) DEFAULT &apos;^&apos;;
	DECLARE sqlScriptColumns	LONGVARCHAR;
	DECLARE fromClause 			LONGVARCHAR;
	DECLARE pos		 			INTEGER;
	DECLARE begPos		 		INTEGER;
	DECLARE endPos		 		INTEGER;
	DECLARE i					INTEGER;
	DECLARE sourceExpression  	LONGVARCHAR;
	DECLARE sourceExpressionNoCast LONGVARCHAR;
	DECLARE sourceAlias  		LONGVARCHAR;
	DECLARE sourceColumn  		LONGVARCHAR;
	DECLARE columnName			VARCHAR(4000);
	DECLARE columnAlias			LONGVARCHAR;
	DECLARE columnList			LONGVARCHAR;
	DECLARE columnNameReserved	VARCHAR(4000);
	DECLARE functionList		LONGVARCHAR;
	DECLARE sourcePath			LONGVARCHAR;
	DECLARE columnType			VARCHAR;
	DECLARE dummy				LONGVARCHAR;
	DECLARE fromClauseVector	VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/TypeDefinitions.FromClause_Type);
	DECLARE numOccurrences		INTEGER;
	DECLARE columnSame			BOOLEAN;
	DECLARE occurrence			INTEGER DEFAULT 1;
	DECLARE recurseDepth		INTEGER;
	DECLARE isComment			INTEGER;
	DECLARE object				LONGVARCHAR;
	/* 
		Any time a new pattern is added here it must also be added in the procedure &quot;resolveColumnAlias&quot; and &quot;parseFromClause&quot;

	*/
	DECLARE resColumnNameList	LONGVARCHAR;
	DECLARE resColumnTypeList	LONGVARCHAR;
	DECLARE columnNameSearchTag	VARCHAR DEFAULT &apos;:COLUMN_NAME:&apos;;
	DECLARE columnTypeSearchTag	VARCHAR DEFAULT &apos;:COLUMN_TYPE:&apos;;
	DECLARE codingListColumns	VARCHAR(4000);
	DECLARE codingListFrom		VARCHAR(4000);
	DECLARE startTime			TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE debugTime			CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.debugTime;

	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;ORIGINAL SIMPLE sqlScript=&apos;||sqlScript||newline);
	end if;

	-- Extract the SQL Columns and From clause
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractSQLParts(sqlScript, debug, debug2, sqlScriptColumns, fromClause, codingListColumns, codingListFrom);

	-- Vector of FROM clauses to handle more than one table
	call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseFromClause(fromClause, codingListColumns, fromClauseVector);

	if (resourceType = &apos;TABLE&apos;) then
		-- Construct a list of columns to pass into resolveColumnAlias
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, resourceType) do
			set columnName = r.columnName;
			if (columnName is not null) then
				if (resColumnNameList is not null) then
					set resColumnNameList = resColumnNameList || &apos; &apos;;
					set resColumnTypeList = resColumnTypeList || &apos; &apos;;
				else
					set resColumnNameList = &apos;&apos;;
					set resColumnTypeList = &apos;&apos;;
				end if;

				--call print(&apos;____________orig columnName=&apos;||columnName);
				-- Make sure any reserved words are quoted.   
				-- 2014-11-21: mtinius 
				--   Handle the unique situation where there is a double quote in the column name.  
				--   In CIS there must be 2 double quotes present in the view to escape a single double quote for the view to be valid.
				if (INSTR(columnName, &apos;&quot;&apos;) &gt; 0) then
					set columnName = REPLACE(columnName, &apos;&quot;&apos;, &apos;&quot;&quot;&apos;);
					set columnNameReserved = &apos;&quot;&apos;||columnName||&apos;&quot;&apos;;
				else
					--Pattern:  COLUMN_NAME:[mycolumn]
					call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, &apos;F&apos;, columnNameReserved);
				end if;

				-- Encode column names within &quot;D&quot; double quotes
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, columnNameReserved, moduleName, debug, &apos;columnNameReserved&apos;, columnNameReserved);

				--call print(&apos;____________columnNameReserved=&apos;||columnNameReserved);
				set resColumnNameList = resColumnNameList || columnNameSearchTag||&apos;[&apos;||columnNameReserved||&apos;]&apos;;
				--Pattern:  COLUMN_NAME:[mycolumn COLUMN_TYPE:{INTEGER}]
				set resColumnTypeList = resColumnTypeList || columnNameSearchTag||&apos;[&apos;||columnNameReserved||&apos; &apos;||columnTypeSearchTag||&apos;{&apos;||r.columnType||&apos;}&apos;||&apos;]&apos;;
			end if;
		end for;
	end if;

	if (resourceType = &apos;PROCEDURE&apos;) then
		-- Construct a list of columns to pass into resolveColumnAlias
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, resourceType, 1) WHERE columnType != &apos;CURSOR&apos; do
			set columnName = r.columnName;
			if (columnName is not null) then
				if (resColumnNameList is not null) then
					set resColumnNameList = resColumnNameList || &apos; &apos;;
					set resColumnTypeList = resColumnTypeList || &apos; &apos;;
				else
					set resColumnNameList = &apos;&apos;;
					set resColumnTypeList = &apos;&apos;;
				end if;

				-- Make sure any reserved words are quoted.   
				-- 2014-11-21: mtinius 
				--   Handle the unique situation where there is a double quote in the column name.  
				--   In CIS there must be 2 double quotes present in the view to escape a single double quote for the view to be valid.
				if (INSTR(columnName, &apos;&quot;&apos;) &gt; 0) then
					set columnName = REPLACE(columnName, &apos;&quot;&apos;, &apos;&quot;&quot;&apos;);
					set columnNameReserved = &apos;&quot;&apos;||columnName||&apos;&quot;&apos;;
				else
					-- Make sure any reserved words are quoted
					--Pattern:  COLUMN_NAME:[mycolumn]
					call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, &apos;F&apos;, columnNameReserved);
				end if;

				-- Encode column names within &quot;D&quot; double quotes
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, columnNameReserved, moduleName, debug, &apos;columnNameReserved&apos;, columnNameReserved);

				set resColumnNameList = resColumnNameList || columnNameSearchTag||&apos;[&apos;||columnNameReserved||&apos;]&apos;;
				--Pattern:  COLUMN_NAME:[mycolumn COLUMN_TYPE:{INTEGER}]
				set resColumnTypeList = resColumnTypeList || columnNameSearchTag||&apos;[&apos;||columnNameReserved||&apos; &apos;||columnTypeSearchTag||&apos;{&apos;||r.columnType||&apos;}&apos;||&apos;]&apos;;
			end if;
		end for;
	end if;
	-- Print out source column list
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;resColumnNameList=&apos;||NVL(resColumnNameList,&apos;null&apos;)||newline);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;resColumnTypeList=&apos;||NVL(resColumnTypeList,&apos;null&apos;)||newline);
	end if;

	-- Extract the columns from the SQL Script into separate rows for processing
	for r as 
		select * from /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/extractColumnList(sqlScriptColumns, fromClauseVector, codingListColumns) 
	do
		set sourceExpression = r.columnExpression;
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;------------------- Start Process Column -------------------&apos;);
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;sourceExpression=&apos;||NVL(sourceExpression,&apos;null&apos;));
		end if;
/***************
Handle comments at the beginning of a line
Remove those first
*****************/
		call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/isComment(sourceExpression, isComment);
		if (isComment = 0) then
			set begPos = POSITION(&apos;--&apos; IN sourceExpression);
			if (begPos &gt; 0) then
				set sourceExpression = SUBSTRING(sourceExpression, 1, begPos-1);
			end if;
			set occurrence = 1; -- get the first column in the expression

			-- Resolve the column alias right away before even trying to extract the rest of the column. 
			-- It will make resolving the column much easier by taking one piece of the puzzle out of the parsing equation.
			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnAlias(
					sourceExpression, resColumnNameList, columnNameSearchTag ,codingListColumns, columnAlias, sourceExpression);

			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;1. columnAlias=&apos;||NVL(columnAlias,&apos;null&apos;)||&apos; sourceExpression=&apos;||NVL(sourceExpression,&apos;null&apos;)||newline);
			end if;

			-- Encode column names within &quot;D&quot; double quotes
			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;E&apos;, &apos;D&apos;, codingListColumns, sourceExpression, moduleName, debug, &apos;sourceExpression&apos;, sourceExpression);

			-- Extract the function list and column list from the source expression
			call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/parseColumnExpression(
					sourceExpression,null,null,0,	-- INPUT
					functionList,columnList,recurseDepth -- OUTPUT
				);

			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;2. functionList=[&apos;||NVL(functionList,&apos;null&apos;)||&apos;] columnList=[&apos;||NVL(columnList,&apos;null&apos;)||&apos;] recurseDepth=[&apos;||recurseDepth||&apos;]&apos;||newline);
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;3. columnList=[&apos;||NVL(columnList,&apos;null&apos;)||&apos;]&apos;||newline);
			end if;

			-- Split the column list base on the separator &apos;^&apos; e.g. State^Zip comes from the compound column expression: State||Zip
			for r as 
				select * from /shared/ASAssets/Utilities/string/extractDelimitedText(columnList,sep,0,0,0,0,0)
					where object is not null and length(trim(object)) &gt; 0
			do
--select * from /shared/ASAssets/Utilities/string/TextUtils/RegexSplit(columnList,&apos;\&apos;||sep,0) do
				set object = r.object;
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;4. object=[&apos;||NVL(object,&apos;null&apos;)||&apos;]&apos;);

				-- Split out the source alias and source column
				IF (POSITION(&apos;.&apos; IN object) &gt; 0) THEN
					call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/returnOccurrence(object,&apos;E&apos;,&apos;.&apos;,1,sourceAlias,sourceColumn);
				ELSE
					-- parse out the COLUMN
					set sourceColumn = TRIM(object);
					set sourceAlias = &apos;&apos;;
				END IF;

				-- Resolve the table alias and path for columns with no alias
				-- Look down one level and inspect the source to find a matching column
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnSource(sourceAlias,sourceColumn,fromClauseVector,codingListColumns,codingListFrom,sourceAlias,sourcePath);

				-- Resolve the Column Type
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/resolveColumnType(sourceColumn,columnAlias,resColumnTypeList,columnNameSearchTag,columnTypeSearchTag,codingListColumns,columnType);

				-- Resolve an empty Column Alias.  Use the source column if column alias is blank
				if (columnAlias is null or LENGTH(columnAlias) = 0) then
					set columnAlias = sourceColumn;
				end if;

				-- Parse out the outer cast statement if it exists.
				if (POSITION(&apos;CAST&apos; IN UPPER(functionList)) = 1) then
					call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/removeOuterCast(sourceExpression,sourceExpressionNoCast);
				else
					set sourceExpressionNoCast = sourceExpression;
				end if;

				-- Convert encoded characters back to a real characters
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;P D S&apos;, codingListColumns, sourceAlias, moduleName, &apos;N&apos;, &apos;sourceAlias&apos;, sourceAlias);
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;P D S&apos;, codingListColumns, sourceColumn, moduleName, &apos;N&apos;, &apos;sourceColumn&apos;, sourceColumn);
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;P D S&apos;, codingListColumns, columnAlias, moduleName, &apos;N&apos;, &apos;columnAlias&apos;, columnAlias);
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;P D S&apos;, codingListColumns, sourceExpression, moduleName, &apos;N&apos;, &apos;sourceExpression&apos;, sourceExpression);
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;P D S&apos;, codingListColumns, sourceExpressionNoCast, moduleName, &apos;N&apos;, &apos;sourceExpressionNoCast&apos;, sourceExpressionNoCast);
				call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/getCodedString(&apos;D&apos;, &apos;P D S&apos;, codingListColumns, columnList, moduleName, &apos;N&apos;, &apos;columnList&apos;, columnList);

				-- Log the variables
				if (debug = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;5. Result:&apos;);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;sourceAlias=[&apos;||NVL(sourceAlias,&apos;null&apos;)||&apos;]&apos;);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;sourceColumn=[&apos;||NVL(sourceColumn,&apos;null&apos;)||&apos;]&apos;);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;columnAlias=[&apos;||NVL(columnAlias,&apos;null&apos;)||&apos;]&apos;);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;columnType=[&apos;||NVL(columnType,&apos;null&apos;)||&apos;]&apos;);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;sourceExpression=&apos;||NVL(sourceExpression,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;sourceExpressionNoCast=&apos;||NVL(sourceExpressionNoCast,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;functionList=[&apos;||NVL(functionList,&apos;null&apos;)||&apos;]&apos;);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;sourcePath=[&apos;||NVL(sourcePath,&apos;null&apos;)||&apos;]&apos;);
				end if;

				-- Apply reserved list to each variable
				call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(sourceAlias, &apos;F&apos;, sourceAlias);
				call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(sourceColumn, &apos;F&apos;, sourceColumn);
				call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnAlias, &apos;F&apos;, columnAlias);

				-- Insert the completed record into the pipe cursor
				insert into result values(null, sourceAlias,sourceColumn,columnAlias,columnType,sourceExpression,sourceExpressionNoCast,columnList,functionList,sourcePath);

			end for;
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;------------------- End Process Column -------------------&apos;);
			end if;
		end if;
	end for;
	if (debugTime = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;duration=&apos;||cast(CURRENT_TIMESTAMP - startTime as varchar)||&apos; resourcePath=&apos;||resourcePath);
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="generateCRUD_OperationsXML" path="/shared/ASAssets/BestPractices_v81/Procedures/generateCRUD_OperationsXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="copyPrivilegeMode" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="startingFolderXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="ConfigParamsXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inProjectFolderName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="generateViewsRow" type="TABLE" refId="1">
        <element name="datasourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="projectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="greatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="grandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="columnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalColumnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalColumnType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalStatus">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="containerPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="duration">
          <datatype name="IntervalDay" type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Coordinator" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Create" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_CreateCustom" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Delete" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Read" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_RetrievePK" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_TypeDefinitionsXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="sourceResource" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="startingFolderXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="inConfigParamsXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Update" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_UpdateCustom" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_isEmpty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="crudVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="2">
              <element name="crudPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedurePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="procedureName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="viewpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="constantspath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocpath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typedefprocname">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="customcreatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="customupdatepath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="pkList">
                <datatype name="pkList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="crudGenColumnType" type="TREE" refId="3">
                      <element name="colName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="colType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="columnList">
                <datatype name="columnList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/getPrimaryKeys" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenColumnType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenColumnType" type="TREE" refId="2">
              <element name="colName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="colType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="pkVector" direction="OUT">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <reference refId="2"/>
          </itemDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="scriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="defaultValuesXML" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/isDerivedPathMatch" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="exactMatch" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="derivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="sourcepath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resultValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="tagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="updateValue" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXMLDoc" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outXMLDoc" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCopyPrivilegeEntries" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFolders" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="stringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/extractXMLOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inContentXML" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inTagName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIncludeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	generateCRUD_OperationsXML:
	-- Data Virtualization Best Practices --

	Generate CRUD procedures for each view in the layer specified by the incoming layerType parameters.  CRUD stands
	for &quot;Create, Read, Update, Delete&quot;.  The CRUD procedures only support views that map one-to-one with their physical
	counterpart.  Views with joins are not supported.

	This procedure uses the values set in /generationScripts/Configure file as a starting point for the directories to generate from.
	The CRUD procedures are generated into the /L1_Mapping_Layer/Client_Services/CRUD folder
 
	Input:
		Environmnet Variables set by invoking generate...Views procedures:
			This is an alternative approach to setting variables without modiffying the signature of a procedure.

			-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
			-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
			-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
		overwrite - allows user to decide whether they want to overwrite an existing view or not.

			-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
			-- null (default) - do not set any privileges at all
			-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
			-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
		copyPrivilegeMode

			-- The XML of starting folders including source, target and derived filter path
		startingFolderXML 

			-- The XML of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
		ConfigParamsXML 

			-- the name of the project folder (defaultValue.basePath)(projectName)
		inProjectFolderName

	Output:
		-- CRUD Generation Output definition structure
		crudResponseType 	ROW(
			resourceName			VARCHAR(255),			-- name of the resource to generated CRUD operations for
			generated				CHAR(1),				-- Y or N - indicating whether the resource was skipped due to lack of primary keys
			success					BIT,					-- 1=success, 0=fail
			message					VARCHAR(1000)			-- status message
		)

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	06/15/2010		Mike Tinius			5.2.0			Created new
	05/22/2013		Mike Tinius			6.0.0			Modified for Best Practices 7.1
	10/28/2013		Mike Tinius			6.2.2			B.P. 8.0: Added inProjectFolderName to the input parameters
	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.
																	   Modified call from copyResourcesPrivileges to copyResourcesPrivilegesV2 to remove VECTOR usage
	06/12/2019		Mike Tinius			7.0.8			B.P. 2019.200: Derived the new generateCRUD_OperationsXML from generateCRUD_Operations to eliminate vector usage.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE generateCRUD_OperationsXML(
		-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
		-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
		-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
	IN overwrite				INTEGER,

		-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
		-- null (default) - do not set any privileges at all
		-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
		-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
	IN copyPrivilegeMode		BIT,

		-- The XML of starting folders including source, target and derived filter path
	IN startingFolderXML		LONGVARCHAR,

		-- The XML of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
	IN ConfigParamsXML			LONGVARCHAR,

		-- the name of the project folder (defaultValue.basePath)(projectName)
	IN inProjectFolderName 		VARCHAR,

    OUT result PIPE 			/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.generateViewsRow
/*  INSERT INTO result VALUES(&apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, typeDefProcName, &apos;PROCEDURE&apos;, &apos;GENERATED&apos;, resourcePath);
	-- CRUD Generation results
	DECLARE PUBLIC TYPE generateCRUDRow ROW (
		datasourceName			VARCHAR(255), 
		greatGrandParentName	VARCHAR(255), 
		grandParentName			VARCHAR(255), 
		parentName				VARCHAR(255),
        containerName 			VARCHAR(255), 
        containerType 			VARCHAR(255), 
        name	 				VARCHAR(255), 
        logicalName 			VARCHAR(255), 
        logicalType 			VARCHAR(255), 
        logicalStatus 			VARCHAR(4000), 
        containerPath 			TypeDefinitions.pathType
	);
*/
)
BEGIN
	DECLARE indent						VARCHAR DEFAULT &apos;&apos;;
	DECLARE moduleName					VARCHAR DEFAULT indent||&apos;generateCRUD_OperationsXML&apos;;
	DECLARE debug						CHAR(1);
	DECLARE debug2						CHAR(1);
	DECLARE scriptsPath					LONGVARCHAR;
	DECLARE defaultValuesXML			LONGVARCHAR;
	DECLARE defaultValuesRec			/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.defaultValuesType;
	DECLARE i,j							INTEGER DEFAULT 1;
	DECLARE Empty						SMALLINT DEFAULT 1;
	DECLARE notEmpty					SMALLINT DEFAULT 0;
	DECLARE childResourceResponse		XML;
	DECLARE parentPath					VARCHAR(4000);
	DECLARE resourcePath				VARCHAR(4000);
	DECLARE resourceType				VARCHAR(255);
	DECLARE resourceName				VARCHAR(255);
	DECLARE sqlStatement				LONGVARCHAR;
	DECLARE childResCursor				CURSOR /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.childResourceResponseType;
	DECLARE generateActive				BOOLEAN DEFAULT false;
	DECLARE pkVector					VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenColumnType);
	DECLARE columnVector				VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenColumnType);
	DECLARE crudVector					VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenType) DEFAULT VECTOR[(null)];
	DECLARE status						VARCHAR;
	DECLARE resultNode					LONGVARCHAR;
	DECLARE numStartingFolders			INTEGER;
	DECLARE singleStartingFolderExtendedXML	LONGVARCHAR;
	DECLARE singleStartingFolderExtendedRec 	/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.startingFolderExtendedType;
	DECLARE startingFolderExtendedRec 	/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.startingFolderExtendedType;
	DECLARE faultResponse				XML;
	DECLARE crudOutput					/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.generateViewsRow;
	DECLARE resourceExists				BOOLEAN;
	DECLARE success						BIT; --1=sucess, 0=fail
	DECLARE ex							EXCEPTION;
	DECLARE isDerivedMatch				INTEGER;
	-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
	-- 1=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
	DECLARE exactMatch					SMALLINT DEFAULT 0;
	DECLARE copyPrivilegeEntry			LONGVARCHAR;
	DECLARE updatePrivilegesRecursively	BIT DEFAULT 1;

	if (debug = &apos;Y&apos;) then
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;BEGIN: ============================================&apos;);
	end if;

	-- Set local Configuration parameters	
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug&apos;, ConfigParamsXML, debug);
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;debug2&apos;, ConfigParamsXML, debug2);
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;scriptsPath&apos;, ConfigParamsXML, scriptsPath);

	-- Set the default values
	call /shared/ASAssets/BestPractices_v81/Procedures/getDefaultValuesXML(scriptsPath, defaultValuesXML);
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;genUniqueIDPath&apos;, defaultValuesXML, defaultValuesRec.genUniqueIDPath);
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;constantsScriptsPath&apos;, defaultValuesXML, defaultValuesRec.constantsScriptsPath);
	call /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;typeDefinitionPath&apos;, defaultValuesXML, defaultValuesRec.typeDefinitionPath);

	set crudVector[1].genUniqueIDPath = defaultValuesRec.genUniqueIDPath;
	set crudOutput.projectFolderName = inProjectFolderName;

	-- Begin looping through the starting &quot;SOURCE&quot; folders which provides the initial context to generate the CRUD operations from
	SET i = 1;
	CALL /shared/ASAssets/Utilities/string/numOccurrences(&apos;&lt;startingFolderExtendedType&gt;&apos;, startingFolderXML, numStartingFolders);
	WHILE (i &lt;= numStartingFolders) DO
		CALL /shared/ASAssets/Utilities/&quot;xml&quot;/extractXMLOccurrence(startingFolderXML, &apos;startingFolderExtendedType&apos;, i, 0, 0, 0, status, resultNode);
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;process&apos;, resultNode, startingFolderExtendedRec.process);
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;pathDerivation&apos;, resultNode, startingFolderExtendedRec.pathDerivation);
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;sourceFolderPath&apos;, resultNode, startingFolderExtendedRec.sourceFolderPath);
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;targetFolderPath&apos;, resultNode, startingFolderExtendedRec.targetFolderPath);
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;derivedFilterPath&apos;, resultNode, startingFolderExtendedRec.derivedFilterPath);
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;typeDefProcName&apos;, resultNode, startingFolderExtendedRec.typeDefProcName);
		CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;typeDefProcPath&apos;, resultNode, startingFolderExtendedRec.typeDefProcPath);

		-- Determine if this record should be processed or not
		IF (startingFolderExtendedRec.process = 1 AND 
			(startingFolderExtendedRec.sourceFolderPath IS NOT NULL AND LENGTH(&apos;|&apos;||startingFolderExtendedRec.sourceFolderPath||&apos;|&apos;) &gt; 2) AND
			(startingFolderExtendedRec.targetFolderPath IS NOT NULL AND LENGTH(&apos;|&apos;||startingFolderExtendedRec.targetFolderPath||&apos;|&apos;) &gt; 2)) THEN

			-- Instantiate a single record for the current record
			SET singleStartingFolderExtendedXML = &apos;&lt;startingFolderExtendedType&gt;&apos;||resultNode||&apos;&lt;/startingFolderExtendedType&gt;&apos;;
			SET singleStartingFolderExtendedRec = startingFolderExtendedRec;
			-- Perform a cross-over of sourceFolderPath and TargetFolderPath for the purposes of executing generateDatasourceList
			-- The reason is that generateDatasourceList uses the target folder to generate from instead of the source folder
			CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;sourceFolderPath&apos;, singleStartingFolderExtendedRec.targetFolderPath, singleStartingFolderExtendedXML, singleStartingFolderExtendedXML);
			CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlUpdateNodeValue(&apos;targetFolderPath&apos;, singleStartingFolderExtendedRec.sourceFolderPath, singleStartingFolderExtendedXML, singleStartingFolderExtendedXML);
			CALL /shared/ASAssets/BestPractices_v81/Procedures/xmlGetNodeValue(&apos;targetFolderPath&apos;, singleStartingFolderExtendedXML, singleStartingFolderExtendedRec.targetFolderPath);

			if (debug = &apos;Y&apos;) then
				CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;&apos;);
				CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; SOURCE FOLDER=&apos;||NVL(startingFolderExtendedRec.sourceFolderPath,&apos;null&apos;));
				CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; TARGET FOLDER=&apos;||NVL(startingFolderExtendedRec.targetFolderPath,&apos;null&apos;));
				CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;DERIVED FILTER=&apos;||NVL(startingFolderExtendedRec.derivedFilterPath,&apos;null&apos;));
				CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;&apos;);
			end if;

			-- Initialize the crudPath and constants path
			set crudVector[1].constantspath = defaultValuesRec.constantsScriptsPath;
			set crudVector[1].crudPath = startingFolderExtendedRec.targetFolderPath;
			set crudVector[1].typedefprocname = startingFolderExtendedRec.typeDefProcName;
			set crudVector[1].typedefprocpath = startingFolderExtendedRec.typeDefProcPath;

			-- Get the parent path for the CRUD path
			call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(crudVector[1].crudPath, &apos;E&apos;, resourceName, parentPath);

			-- Setup the copyPrivilegeEntry for the main directories that exist under the crudPath
			set copyPrivilegeEntry = 
				&apos;  &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				&apos;    &lt;resource:srcResource&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(parentPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:type&gt;CONTAINER&lt;/resource:type&gt;&apos;||CHR(10)||
				&apos;    &lt;/resource:srcResource&gt;&apos;||CHR(10)||
				&apos;    &lt;resource:dstResource&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(crudVector[1].crudPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:type&gt;CONTAINER&lt;/resource:type&gt;&apos;||CHR(10)||
				&apos;    &lt;/resource:dstResource&gt;&apos;||CHR(10)||
				&apos;  &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				&apos;&apos;;
		/*
			INSERT INTO result VALUES(&apos;&apos;, &apos;&apos;, &apos;&apos;, typeDefProcName, &apos;&apos;, &apos;PROCEDURE&apos;, &apos;GENERATED&apos;, typeDefsPath);
			-- View Generation results
			DECLARE PUBLIC TYPE generateViewsRow ROW (
				datasourceName			VARCHAR(255), 
				greatGrandParentName	VARCHAR(255), 
				grandParentName			VARCHAR(255), 
				parentName				VARCHAR(255),
				containerName 			VARCHAR(255), 
				containerType 			VARCHAR(255), 
				columnName 				VARCHAR(4096), 
				logicalColumnName 		VARCHAR(4096), 
				logicalColumnType 		VARCHAR(255), 
				logicalStatus 			VARCHAR(4000), 
				containerPath 			VARCHAR(4000)
			);
		*/
			/********** Create all of the sub-folders for CRUD operations: /Definitions **********/
			set crudOutput.logicalColumnName = &apos;/&apos;||defaultValuesRec.typeDefinitionPath;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
	BEGIN INDEPENDENT TRANSACTION
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudOutput.containerPath, success, faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;
			INSERT INTO result VALUES(crudOutput);

			/********** Generate the Type Definitions Procedure: /Definitions/TypeDefinitions **********/
			set crudOutput.logicalColumnName = crudVector[1].typedefprocname;
			set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
			set crudOutput.containerPath = crudVector[1].typedefprocpath||&apos;/&apos;||crudOutput.logicalColumnName;

	BEGIN INDEPENDENT TRANSACTION

			-- Invoke the generate CRUD Type Definitions with a subsequent call to generateDatasourceList to get the list of views in the &quot;targetFolderPath&quot;
			call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_TypeDefinitionsXML(debug2, overwrite, singleStartingFolderExtendedRec.targetFolderPath, singleStartingFolderExtendedXML, crudVector, ConfigParamsXML, crudOutput.logicalStatus);
			INSERT INTO result VALUES(crudOutput);
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	BEGIN INDEPENDENT TRANSACTION

			/********** Create all of the sub-folders for CRUD operations: /Coordinate/test **********/
			set crudOutput.logicalColumnName = &apos;/Coordinate/test&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /Create/test **********/
			set crudOutput.logicalColumnName = &apos;/Create/test&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /Create/Custom **********/
			set crudOutput.logicalColumnName = &apos;/Create/Custom&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /Read/test **********/
			set crudOutput.logicalColumnName = &apos;/Read/test&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /RetrievePK/test **********/
			set crudOutput.logicalColumnName = &apos;/RetrievePK/test&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /Update/Custom **********/
			set crudOutput.logicalColumnName = &apos;/Update/Custom&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /Update/test **********/
			set crudOutput.logicalColumnName = &apos;/Update/test&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /Delete/test **********/
			set crudOutput.logicalColumnName = &apos;/Delete/test&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /isEmpty/test **********/
			set crudOutput.logicalColumnName = &apos;/isEmpty/test&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	

			/********** Create all of the sub-folders for CRUD operations: /Utility **********/
			set crudOutput.logicalColumnName = &apos;/Utility&apos;;
			set crudOutput.logicalColumnType = &apos;CONTAINER&apos;;
			set crudOutput.containerPath = crudVector[1].crudPath||crudOutput.logicalColumnName;
			set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
			call /lib/resource/ResourceExists(crudOutput.containerPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (overwrite = 2 or not resourceExists) then
				call /shared/ASAssets/Utilities/repository/createAllFolders(crudVector[1].crudPath||crudOutput.logicalColumnName,success,faultResponse);
				IF (success = 1) THEN set crudOutput.logicalStatus = &apos;GENERATED&apos;; ELSE set crudOutput.logicalStatus = &apos;ERROR&apos;; END IF;
			END IF;
			INSERT INTO result VALUES(crudOutput);	
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	BEGIN INDEPENDENT TRANSACTION

			-- Get the specific resource type for the target resource
			set resourceType = null;
			FOR resource AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(startingFolderExtendedRec.sourceFolderPath, resourceType) DO
				set resourceType = resource.&quot;type&quot;;
			END FOR;

			IF (resourceType is not null) THEN
			  FOR list AS 
				SELECT name, resPath, resType, subType 
				FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(startingFolderExtendedRec.sourceFolderPath, resourceType) 
			  DO
				if (debug = &apos;Y&apos;) then
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;BEGIN: ============================================&apos;);
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;NAME=&apos;||list.name);	
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;PATH=&apos;||list.resPath); 	
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;TYPE=&apos;||list.resType);	
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;TYPE=&apos;||list.subType);	
					CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;---------------------------------------------------&apos;);
				end if;

				-- Only process rows that come back from the recursive resource tree list that are actually Data Sources
				-- Folders will be derived because the full path is provided to the resource
				IF (list.resType = &apos;TABLE&apos;) THEN

					-- Put quotes around &quot;_folder&quot; or &quot;1_folder&quot; but in a way that it is not hard-coded if _ or 0-9 exists in the first charcater of the folder name
					-- Apply reserved list to path
					CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(list.resPath,null,resourcePath);
				
					-- Provides the ability to return metadata on Composite Views (a.k.a. resource type = TABLE).
					OPEN childResCursor FOR 
						SELECT resourceName, resourcePath, resourceType, subtype, enabled, annotation, NULL, columnName, columnType, nativeBaseType, nativeType
						FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, list.resType);
						/* Important Note:  The FIRST ROW FOR a TABLE returns a NULL IN the columnName.  
						   This IS used TO determine the start OF a new TABLE.  Don&apos;t change the XSLT -- getResourceResponseXSLT_SQL_TABLE
							   getResourceResponseXSLT_SQL_TABLE returns the following:
							select--&gt; resourceName: RDS_T_FGRT
							select--&gt; resourcePath: /shared/DeutscheBank/Central/RDS3/L4_Physical_Layer/L4_1_Physical_Views/dbInstrument/RDS/RDS_T_FGRT
							select--&gt; resourceType: TABLE
							select--&gt; subtype: SQL_TABLE
							select--&gt; enabled: 1
							select--&gt; null, --isNullable
								  tableType: VIEW
								  sqlText: [NULL]
							select--&gt; columnName: FGRT_TYP
							select--&gt; columnType: VARCHAR(20)
							select--&gt; nativeBaseType: VARCHAR2
							select--&gt; nativeType: VARCHAR2(20)			
						*/

					if (debug2 = &apos;Y&apos;) then
						CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;------------------------&apos;);	
						CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos; child resource:&apos;);	
						CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;------------------------&apos;);	
					end if;

					-- Found a resource (CONTAINER or TABLE)			   
					set j = 1;
					SET columnVector = VECTOR[(NULL)];
					FOR childRes AS childResCursor DO	
						if (debug2 = &apos;Y&apos;) then
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;[childRes] resourceName=&apos;||NVL(childRes.resourceName,&apos;null&apos;)||
									&apos;  Type=&apos;||NVL(childRes.resourceType,&apos;null&apos;)||&apos;  Column=[&apos;||NVL(childRes.columnName,&apos;null&apos;)||&apos;]&apos;);
						end if;

						-- Found a TABLE so process it and generate CRUD operations		    	
						-- The first row in the column list is always the Table name and type and tells us to begin
						IF (childRes.resourceType = &apos;TABLE&apos;) THEN
							set resourceName = childRes.resourceName;
							set resourcePath = childRes.resourcePath;
							set resourceType = childRes.resourceType;

							-- Determine if the target path is a match to the derivedFilterPath
							call /shared/ASAssets/BestPractices_v81/Procedures/isDerivedPathMatch(debug2, exactMatch, startingFolderExtendedRec.derivedFilterPath, startingFolderExtendedRec.sourceFolderPath, childRes.resourcePath, null, isDerivedMatch);
							if (isDerivedMatch  = 1) then
								set generateActive = true;
							else
								set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
								if (debug = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;No match to derivedFilterPath.  resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
								end if;
							end if;
							set crudOutput.logicalColumnName = resourceName;
						END IF;
						-- build the list of columns
						IF (childRes.columnName IS NOT NULL AND LENGTH(&apos;|&apos;||childRes.columnName||&apos;|&apos;) &gt; 2) THEN
							SET columnVector[j].colName = childRes.columnName;
							SET columnVector[j].colType = childRes.columnType;
							SET columnVector = EXTEND(columnVector, 1);
							SET j = j + 1;	
						END IF;
					END FOR;

					IF (generateActive) THEN
						SET columnVector = TRUNCATE(columnVector, 1);
						-- resolve the primary key vector for this TABLE
						call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/getPrimaryKeys(resourcePath,resourceType,columnVector,pkVector);
				
						-- setup the CRUD variables vector
						set crudVector[1].viewname = resourceName;
						set crudVector[1].viewpath = resourcePath;
						set crudVector[1].customcreatepath = crudVector[1].crudPath||&apos;/Create/Custom&apos;;
						set crudVector[1].customupdatepath = crudVector[1].crudPath||&apos;/Update/Custom&apos;;
						set crudVector[1].pkList = pkVector;
						set crudVector[1].columnList = columnVector;

						-- Only generate CRUD operations if there is one or more primary keys for a view.
						IF (CARDINALITY(pkVector) &gt; 0) THEN
							--generate CRUD operations
							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/Coordinate&apos;;
							set crudVector[1].procedureName = &apos;save_&apos;||resourceName;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Coordinator(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);

							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/Create&apos;;
							set crudVector[1].procedureName = &apos;create_&apos;||resourceName;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Create(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);

							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/Create/Custom&apos;;
							set crudVector[1].procedureName = &apos;custom_&apos;||resourceName;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_CreateCustom(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);

							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/Read&apos;;
							set crudVector[1].procedureName = &apos;get_&apos;||resourceName||&apos;_ById&apos;;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Read(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);

							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/RetrievePK&apos;;
							set crudVector[1].procedureName = &apos;retrievePK_&apos;||resourceName;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_RetrievePK(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);

							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/Update&apos;;
							set crudVector[1].procedureName = &apos;update_&apos;||resourceName;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Update(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);

							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/Update/Custom&apos;;
							set crudVector[1].procedureName = &apos;custom_&apos;||resourceName;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_UpdateCustom(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);

							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/Delete&apos;;
							set crudVector[1].procedureName = &apos;delete_&apos;||resourceName;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Delete(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);

							set crudVector[1].procedurePath = crudVector[1].crudPath||&apos;/isEmpty&apos;;
							set crudVector[1].procedureName = &apos;isEmpty_&apos;||resourceName;
							set crudOutput.logicalColumnName = crudVector[1].procedureName; 
							set crudOutput.logicalColumnType = &apos;PROCEDURE&apos;;
							set crudOutput.containerPath =  crudVector[1].procedurePath||&apos;/&apos;||crudOutput.logicalColumnName;
							call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_isEmpty(debug2,overwrite,crudVector, crudOutput.logicalStatus);
							INSERT INTO result VALUES(crudOutput);
						ELSE
							if (debug = &apos;Y&apos;) then
								CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;No Primary keys, skipping Resource: &apos;||resourcePath);
							end if;
							set crudOutput.logicalColumnName = resourceName; 
							set crudOutput.logicalColumnType = resourceType;
							set crudOutput.containerPath =  resourcePath;
							set crudOutput.logicalStatus = &apos;SKIPPED&apos;;
							INSERT INTO result VALUES(crudOutput);
						END IF; -- IF (CARDINALITY(pkVector) &gt; 0) THEN
						-- reset generate active to insure processing is turned off until another TABLE is found.
						set generateActive = false;
					END IF; -- IF (generateActive) THEN
					if (debug = &apos;Y&apos;) then
						CALL /shared/ASAssets/Utilities/log/logDebugMessage(&apos;&apos;, debug,&apos;&apos;);
					end if;
				END IF; 
			 END FOR;
		   END IF;	-- IF (resourceType is not null) THEN	
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;
		 END IF; -- IF (startingFolderExtendedRec.process = 1) THEN

	BEGIN INDEPENDENT TRANSACTION
		-- Update the privileges
		if (updatePrivilegesRecursively is not null and copyPrivilegeMode is not null and copyPrivilegeMode = 1) then
			call /shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2(updatePrivilegesRecursively, copyPrivilegeMode, copyPrivilegeEntry, success, faultResponse);
			if (faultResponse is not null) then
				raise ex value CAST(faultResponse as LONGVARCHAR);
			end if;
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	 SET i = i + 1;
	END WHILE;   

	set crudOutput = null;
	set crudOutput.parentName = &apos;FINISHED&apos;;
	INSERT INTO result VALUES(crudOutput);  
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564598932166</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
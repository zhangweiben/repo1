<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="generateCRUD_Coordinator" path="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/generateCRUD_Coordinator" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="crudVector" direction="IN" nullable="true">
      <datatype name="crudVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="crudGenType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenType" type="TREE" refId="1">
            <element name="crudPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="procedurePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="procedureName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="viewname">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="viewpath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="constantspath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typedefprocpath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typedefprocname">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="customcreatepath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="customupdatepath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="genUniqueIDPath">
              <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
            </element>
            <element name="pkList">
              <datatype name="pkList" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="crudGenColumnType" type="TREE" refId="2">
                    <element name="colName">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="colType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="columnList">
              <datatype name="columnList" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <reference refId="2"/>
                </itemDatatype>
              </datatype>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/getDefaultTestValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="colType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="prefixVarcharValue" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="defaultValue" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/isPrimaryKey" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="colName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="pkVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="crudGenColumnType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="crudGenColumnType" type="TREE" refId="2">
              <element name="colName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="colType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="pkFound" direction="OUT">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*

	Modified Date:	Modified By:		CSW Version:	Reason:
	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
*/
PROCEDURE generateCRUD_Coordinator(
	IN 	debug				CHAR(1),
	IN overwrite			INTEGER,
		-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
		-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
		-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
	IN 	crudVector			VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenType),
	OUT status				VARCHAR
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;generateCRUD_Coordinator&apos;;
	DECLARE padAmount				INTEGER DEFAULT 0;
	DECLARE padChar					CHAR(1) DEFAULT &apos; &apos;;
	DECLARE i,j,len					INTEGER;
	DECLARE s						LONGVARCHAR;
	DECLARE commentPK,outPKColumn,outPK,pkVarList,if_thenPK,setPK,setDefaultPK	VARCHAR(2000);
	DECLARE pkList					VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenColumnType);
	DECLARE columnList				VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.crudGenColumnType);
	DECLARE pkFound					SMALLINT;
	DECLARE success					BIT;
	DECLARE createResponse 			XML;
	DECLARE faultResponse			XML;
	DECLARE fullResourcePath		VARCHAR(4000);
	DECLARE CSW_Version				VARCHAR;
	DECLARE NEWLINE					VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
	DECLARE utilitiesRootPath		VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.utilitiesRootPath;
	DECLARE bestPracticesRootPath	VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.bestPracticesRootPath;
	DECLARE word					VARCHAR;
	DECLARE defaultTestValue		VARCHAR;
	DECLARE resourceExists			BOOLEAN DEFAULT false;
	DECLARE ex						EXCEPTION;
	DECLARE typedefprocname			VARCHAR(4000);
	DECLARE typedefprocpath			VARCHAR(2048);
	DECLARE resourcePathReserved	VARCHAR(4096);

	CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;BEGIN: ============================================&apos;);
	-----------------------------------------------------------------------------------------
	-- Template code for the &quot;create_$viewname SQL script
	-----------------------------------------------------------------------------------------
/* TEMPLATE FOR Coordinator SCRIPT:
PROCEDURE saveSupportingDocumentsService(
        IN SSN VARCHAR(255), 
        IN Branch_Code VARCHAR(255), 
        IN Supporting_Documents_Identifier                                        DOUBLE,
        IN File_Binary                                                            BLOB,
        IN File_Name                                                              VARCHAR(255),
        IN File_Extension                                                         VARCHAR(255),
        IN Is_Signed                                                              VARCHAR(255),
        IN Type_Code                                                              VARCHAR(255),
        IN Customer_Medical_Identifier                                            DOUBLE,
        IN Application_Identifier                                                 DOUBLE,
        IN Create_By                                                              DOUBLE,
        IN Create_Date                                                            VARCHAR(255),
        IN Modify_By                                                              DOUBLE,
        IN Modify_Date                                                            TIMESTAMP,
-- standard OUT variables
	OUT result VARCHAR,
	OUT errorID INTEGER,
	OUT errorName LONGVARCHAR,
	OUT errorMessage LONGVARCHAR,
	OUT errorTrace LONGVARCHAR
)
BEGIN
-- STANDARD VARIABLES --------------------------------------------------
	DECLARE moduleName		VARCHAR(255) DEFAULT &apos;saveSupportingDocumentsService()&apos;;
	DECLARE Empty			INTEGER DEFAULT /shared/BestPractices/DataAbstractionSample/constants/defaultValues.Empty;
	DECLARE notEmpty		INTEGER DEFAULT /shared/BestPractices/DataAbstractionSample/constants/defaultValues.notEmpty;
	DECLARE SUPPORTING_DOCUMENTS_Vect VECTOR (TypeDefinitions.SUPPORTING_DOCUMENTS_Type) DEFAULT VECTOR [(NULL)];
-- CUSTOM VARIABLES ----------------------------------------------------  

	BEGIN INDEPENDENT TRANSACTION
-- INPUT VALIDATION ----------------------------------------------------  
	SET result = &apos;success&apos;;	

-- VECTOR ASSIGNMNET ---------------------------------------------------
	SET SUPPORTING_DOCUMENTS_Vect[1].Supporting_Documents_Identifier = 	Supporting_Documents_Identifier;
	SET SUPPORTING_DOCUMENTS_Vect[1].File_Binary = 					File_Binary;
	SET SUPPORTING_DOCUMENTS_Vect[1].File_Name = 					File_Name;
	SET SUPPORTING_DOCUMENTS_Vect[1].File_Extension = 				File_Extension;
	SET SUPPORTING_DOCUMENTS_Vect[1].Is_Signed = 					Is_Signed;
	SET SUPPORTING_DOCUMENTS_Vect[1].Type_Code = 					Type_Code;
	SET SUPPORTING_DOCUMENTS_Vect[1].Customer_Medical_Identifier = 	Customer_Medical_Identifier;
	SET SUPPORTING_DOCUMENTS_Vect[1].Application_Identifier = 		Application_Identifier;
	SET SUPPORTING_DOCUMENTS_Vect[1].Create_Date = 					Create_Date;
	SET SUPPORTING_DOCUMENTS_Vect[1].Create_By = 					Create_By;
	SET SUPPORTING_DOCUMENTS_Vect[1].Modify_By = 					Modify_By;
	SET SUPPORTING_DOCUMENTS_Vect[1].Modify_Date = 					Modify_Date;

-- INVOKCE CRUD PROCEDURE(s) -------------------------------------------
	CALL /shared/VIPS_01/DataAbstraction/L1_Mapping_Layer/L1_1_Client_Services/Updates/created_SUPPORTING_DOCUMENTS(inVector,msgVector);

-- CATCH EXCEPTIONS ----------------------------------------------------   
	COMMIT;
        EXCEPTION
        	ELSE 
        	    SET result = &apos;failure&apos;;
		    	SET errorID = CURRENT_EXCEPTION.ID;
		    	SET errorName = CURRENT_EXCEPTION.NAME;
		    	SET errorMessage = CURRENT_EXCEPTION.MESSAGE;
		    	SET errorTrace = CURRENT_EXCEPTION.TRACE;
		    	CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,&apos;Y&apos;, errorTrace);
		    	ROLLBACK;
      END;
END
*/
	-----------------------------------------------------------------------------------------
	-- Create the &quot;save_$viewname SQL procedure resource if it does not exist
	-----------------------------------------------------------------------------------------
	set fullResourcePath = REPLACE(crudVector[1].procedurePath ||&apos;/&apos;||crudVector[1].procedureName,&apos;//&apos;,&apos;/&apos;);
	if (debug = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fullResourcePath=&apos;||fullResourcePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;viewname=[&apos;||NVL(crudVector[1].viewname,&apos;null&apos;)||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;typedefprocpath=[&apos;||NVL(crudVector[1].typedefprocpath,&apos;null&apos;)||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;typedefprocname=[&apos;||NVL(crudVector[1].typedefprocname,&apos;null&apos;)||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;procedureName=[&apos;||NVL(crudVector[1].procedureName,&apos;null&apos;)||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;crudPath=[&apos;||NVL(crudVector[1].crudPath,&apos;null&apos;)||&apos;]&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;constantsScriptsPath=[&apos;||NVL(crudVector[1].constantspath,&apos;null&apos;)||&apos;]&apos;);
	end if;

	set status = &apos;GENERATED&apos;;
	call /lib/resource/ResourceExists(fullResourcePath,&apos;PROCEDURE&apos;,null,resourceExists);
	if (not resourceExists) then
		call /shared/ASAssets/Utilities/repository/createResource(crudVector[1].procedurePath, crudVector[1].procedureName,&apos;PROCEDURE&apos;,&apos;SQL_SCRIPT_PROCEDURE&apos;,success,createResponse,faultResponse);
	else
		set resourceExists = true;
	end if;

	-- Apply the reserved path to the procedure name
	call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(crudVector[1].typedefprocname, null, typedefprocname);
	call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(crudVector[1].typedefprocpath, null, typedefprocpath);

	if ((not resourceExists) or (resourceExists and overwrite = 2)) then
		-----------------------------------------------------------------------------------------
		-- Build the &quot;save_$viewname SQL script
		-----------------------------------------------------------------------------------------
		set pkList = crudVector[1].pkList;
		set columnList = crudVector[1].columnList;
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;pkList size=&apos;||CARDINALITY(pkList));
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;columnList size=&apos;||CARDINALITY(columnList));
		end if;

		-- Determine the maximum padding length and add 15
		set i = 1;
		WHILE (i &lt;= CARDINALITY(columnList)) DO
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);
			IF (LENGTH(word) &gt; padAmount) then
				set padAmount = LENGTH(word);
			END IF;
			set i = i + 1;
		END WHILE;
		set padAmount = LENGTH(&apos;set &apos;||crudVector[1].viewname||&apos;_Vect[1].&apos;) + padAmount + LENGTH(&apos; =&apos;);

		set commentPK = &apos;&apos;;
		set outPK = &apos;&apos;;
		set outPKColumn = &apos;&apos;;
		set pkVarList = &apos;&apos;;
		set if_thenPK = &apos;&apos;;
		set setPK = &apos;&apos;;
		set setDefaultPK = &apos;&apos;;
		set i = 1;
		set len = CARDINALITY(pkList);
		WHILE (i &lt;= len) DO
			-- Create the comment section parameters
			set commentPK = commentPK||&apos;			&apos;||pkList[i].colName||&apos;_PK		&apos;||pkList[i].colType;
			IF (i &lt; len) THEN
				set commentPK = commentPK||&apos;,&apos;||NEWLINE;
			ELSE
				set commentPK = commentPK||NEWLINE;
			END IF;

			-- Create the OUT parameters
			set outPK = outPK||&apos;	OUT &apos;||RPAD(pkList[i].colName||&apos;_PK&apos;,padAmount,padChar)||pkList[i].colType||&apos;,&apos;||NEWLINE;
			set outPKColumn = outPKColumn || pkList[i].colName||&apos;_PK&apos;;
			IF (i &lt; len) THEN
				set outPKColumn = outPKColumn||&apos;,&apos;;
			END IF;

			-- Create the PK variable list (pkVarList)
			set pkVarList = pkVarList||crudVector[1].viewname||&apos;_Vect[1].&apos;||pkList[i].colName;
			IF (i &lt; len) THEN
				set pkVarList = pkVarList||&apos;,&apos;;
--			ELSE -- last column
--				set pkVarList = pkVarList;	
			END IF;

			-- Create the IF-THEN check for primary keys and set a unique ID PK
			set if_thenPK = if_thenPK||&apos;			IF (&apos;||crudVector[1].viewname||&apos;_Vect[1].&apos;||pkList[i].colName||&apos; IS NULL OR LENGTH(&apos;&apos;|&apos;&apos;||&apos;||crudVector[1].viewname||&apos;_Vect[1].&apos;||pkList[i].colName||&apos;||&apos;&apos;|&apos;&apos;) = 2) THEN&apos;||NEWLINE;
--			set if_thenPK = if_thenPK||&apos;			IF (isEmpty(&apos;||crudVector[1].viewname||&apos;_Vect[1].&apos;||pkList[i].colName||&apos;) = Empty) THEN&apos;||NEWLINE;
			set if_thenPK = if_thenPK||&apos;				call &apos;||crudVector[1].genUniqueIDPath||&apos;(&apos;||crudVector[1].viewname||&apos;_Vect[1].&apos;||pkList[i].colName||&apos;);&apos;||NEWLINE;
			set if_thenPK = if_thenPK||&apos;				set newPK = true;&apos;||NEWLINE;
			set if_thenPK = if_thenPK||&apos;			END IF;&apos;||NEWLINE;

			-- Create the set PK for the out parameters
			set setPK = setPK||&apos;	set &apos;||pkList[i].colName||&apos;_PK = &apos;||crudVector[1].viewname||&apos;_Vect[1].&apos;||pkList[i].colName||&apos;;&apos;||NEWLINE;

			-- Create the set default value for the primary keys
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);
			set setDefaultPK = setDefaultPK||&apos;	set &apos;||word||&apos; = null;&apos;||NEWLINE;

			set i = i + 1;
		END WHILE;
		if (debug = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;setDefaultPK=[&apos;||NVL(setDefaultPK,&apos;null&apos;)||&apos;]&apos;);
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;setPK=[&apos;||NVL(setPK,&apos;null&apos;)||&apos;]&apos;);
		end if;

		-- Generate the script text
		set s = &apos;&apos;;
		set s = s||&apos;/* &apos;||crudVector[1].procedureName||&apos;:&apos;||NEWLINE;
		set s = s||&apos;	*** GENERATED PROCEDURE --- MODIFIABLE ***&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	Composite Software CRUD procedure for &quot;COORDINATOR&quot;.   &apos;||NEWLINE;
		set s = s||&apos;	The purpose of this procedure is to provide the CRUD Coordination for the view(s): &quot;&apos;||crudVector[1].viewname||&apos;&quot;.&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	Input:&apos;||NEWLINE;
		set s = s||&apos;		 operation	CHAR(1),-- C=Create, U=update, D=Delete.&apos;||NEWLINE;
		set s = s||&apos;		 explicit	BIT,	-- 1=update all fields as is even if null.&apos;||NEWLINE;
		set s = s||&apos;		 					-- 0=only update non null fields.&apos;||NEWLINE;
		set s = s||&apos;		 Fields from the view(s).&apos;||NEWLINE;
		set s = s||&apos;	Output: &apos;||NEWLINE;
		set s = s||&apos;		Primary key variable(s):&apos;||NEWLINE;
		set s = s||commentPK;
		set s = s||&apos;		Standard variables:&apos;||NEWLINE;
		set s = s||&apos;			result 		 VARCHAR - 0 (success) or 30000+ (error).&apos;||NEWLINE;
		set s = s||&apos;			errorID 	 INTEGER - error ID.&apos;||NEWLINE;
		set s = s||&apos;			errorName 	 LONGVARCHAR - error name.&apos;||NEWLINE;
		set s = s||&apos;			errorMessage LONGVARCHAR - error message.&apos;||NEWLINE;
		set s = s||&apos;			errorTrace 	 LONGVARCHAR - error trace&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	Exceptions:  defaultValues.crudRaiseExceptions&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	Author:      Generated from Composite Best Practices generation scripts&apos;||NEWLINE;
		set s = s||&apos;	Date:        &apos;||CURRENT_DATE||NEWLINE;
		call /lib/util/GetProperty(&apos;SERVER_VERSION_NUMBER&apos;,CSW_Version);
		set s = s||&apos;	CSW Version: &apos;||NVL(CSW_Version,&apos;null&apos;)||NEWLINE;
		set s = s||&apos;*/&apos;||NEWLINE;
		set s = s||&apos;PROCEDURE &apos;||crudVector[1].procedureName||&apos;(&apos;||NEWLINE;
		set s = s||&apos;	IN  &apos;||RPAD(&apos;operation&apos;,padAmount,padChar)||&apos;CHAR(1),--C=Create, U=update, D=Delete&apos;||NEWLINE;
		set s = s||&apos;	IN	&apos;||RPAD(&apos;explicit&apos;,padAmount,padChar)||&apos;BIT, 	-- 1=update all fields as is even if null.  0=only update non null fields.&apos;||NEWLINE;
		set s = s||&apos;	-- Fields from the view(s)&apos;||NEWLINE;
		set i = 1;
		WHILE (i &lt;= CARDINALITY(columnList)) DO
			if (columnList[i].colName is not null) then
				call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);
				set s = s||&apos;	IN  &apos;||RPAD(word,padAmount,padChar)||columnList[i].colType||&apos;,&apos;||NEWLINE;
			end if;
			set i = i + 1;
		END WHILE;
		set s = s||&apos;	-- primary key variables&apos;||NEWLINE;
		set s = s||outPK;
		set s = s||&apos;	-- standard OUT variables&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;result&apos;,padAmount,padChar)||&apos;VARCHAR(255),&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;errorID&apos;,padAmount,padChar)||&apos;INTEGER,&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;errorName&apos;,padAmount,padChar)||&apos;LONGVARCHAR,&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;errorMessage&apos;,padAmount,padChar)||&apos;LONGVARCHAR,&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;errorTrace&apos;,padAmount,padChar)||&apos;LONGVARCHAR&apos;||NEWLINE;
		set s = s||&apos;)&apos;||NEWLINE;
		set s = s||&apos;BEGIN&apos;||NEWLINE;
		set s = s||&apos;	-- STANDARD VARIABLES --------------------------------------------------&apos;||NEWLINE;
		set s = s||&apos;    DECLARE moduleName			varchar(255) default &apos;&apos;&apos;||crudVector[1].procedureName||&apos;&apos;&apos;;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE debug				CHAR(1) DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.debug;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE debugTime			CHAR(1) DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.debugTime;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE debugException		CHAR(1) DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.debugException;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE &quot;ON&quot;				BIT DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.&quot;ON&quot;;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE LogIdentifier		&apos;||bestPracticesRootPath||&apos;/Procedures/TypeDefinitions.LogIdentifierType;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE StartTime			TIMESTAMP DEFAULT CURRENT_TIMESTAMP;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE EndTime				TIMESTAMP;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE TotalTime			INTERVAL MINUTE TO SECOND;&apos;||NEWLINE;
		set s = s||&apos;	DECLARE newPK				BOOLEAN DEFAULT false;&apos;||NEWLINE;
		set s = s||&apos;	-- when set to 1, then only execute for interface purposes and no execution of the logic&apos;||NEWLINE;
		set s = s||&apos;	DECLARE executeProcedureCode BIT DEFAULT &apos;||crudVector[1].constantspath||&apos;/defaultValues.executeProcedureCode;&apos;||NEWLINE;

		set s = s||&apos;	DECLARE &apos;||crudVector[1].viewname||&apos;_Vect	VECTOR (&apos;||typedefprocpath||&apos;/&apos;||typedefprocname||&apos;.&apos;||crudVector[1].viewname||&apos;_Type) DEFAULT VECTOR[(null)];&apos;||NEWLINE;
		set s = s||&apos;	DECLARE msgVector			VECTOR(&apos;||bestPracticesRootPath||&apos;/Procedures/TypeDefinitions.crudMessageType);&apos;||NEWLINE;
		set s = s||&apos;	-- CUSTOM INPUT VARIABLES ---------------------------------------------- &apos;||NEWLINE; 
		set s = s||NEWLINE;
		set s = s||&apos;	-- CUSTOM VARIABLES ---------------------------------------------------- &apos;||NEWLINE; 
		set s = s||NEWLINE;
		set s = s||&apos;	SET result = &apos;&apos;0&apos;&apos;;&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;IF (executeProcedureCode = &quot;ON&quot;) THEN&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	BEGIN INDEPENDENT TRANSACTION&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	-- INPUT VALIDATION ---------------------------------------------------- &apos;||NEWLINE; 
		set s = s||&apos;	-- Format the Identifier fields for logging purposes.  9 potential (name,value) fields are available for use.&apos;||NEWLINE;
		set s = s||&apos;	--    name=Enter a field tag in single quotes.  Value=use the varible name and cast to varchar(4000) for non-string type fields.&apos;||NEWLINE;
		set s = s||&apos;	--    formatLogIdFields returns blank if no fields are provided because LogIdentifier should never be null.&apos;||NEWLINE;
		set s = s||&apos;	call &apos;||bestPracticesRootPath||&apos;/Procedures/crudProcedures/formatLogIdFields(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,LogIdentifier);&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	-- CUSTOM LOGIC --------------------------------------------------------&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	-- Invoke the RetrievePK procedure.&apos;||NEWLINE;
		set s = s||&apos;	--    Move any VECTOR assignments from the list below that will assist in identifying the primary key.&apos;||NEWLINE;
		set s = s||&apos;	--    If the primary key is not present in the request, then use a combination of fields that make up the foreign key.&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	-- VECTOR ASSIGNMENT ---------------------------------------------------&apos;||NEWLINE;
		set i = 1;
		WHILE (i &lt;= CARDINALITY(columnList)) DO
			if (columnList[i].colName is not null) then
				call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);
				set s = s||&apos;	&apos;||RPAD(&apos;set &apos;||crudVector[1].viewname||&apos;_Vect[1].&apos;||word||&apos; =&apos;,padAmount,padChar)||&apos; &apos;||word||&apos;;&apos;||NEWLINE;
			end if;
			set i = i + 1;
		END WHILE;
		set s = s||NEWLINE;

		set s = s||&apos;	-- Check if PK exists.  If not and the ID was passed in then set the newPK=true so the passed in ID is used instead of generating one.&apos;||NEWLINE;
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(REPLACE(crudVector[1].crudPath ||&apos;/RetrievePK/retrievePK_&apos;||crudVector[1].viewname,&apos;//&apos;,&apos;/&apos;), null, resourcePathReserved);
		set s = s||&apos;	call &apos;||resourcePathReserved||&apos;(&apos;||crudVector[1].viewname||&apos;_Vect,LogIdentifier,&apos;||outPKColumn||&apos;);&apos;||NEWLINE;

		set s = s||&apos;	if (&apos;;
		set i = 0;
		for pk as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(outPKColumn, &apos;,&apos;,0,0,0,0,0) do
			if (i = 0) then
				set s = s||pk.object||&apos; is null&apos;;
			else
				set s = s||&apos; and &apos;||pk.object||&apos; is null&apos;;
			end if;
			set i = i + 1;
		end for;
		for pk as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(pkVarList, &apos;,&apos;,0,0,0,0,0) do
			set s = s||&apos; and &apos;||pk.object||&apos; is not null&apos;;
		end for;

		set s = s||&apos;) then&apos;||NEWLINE;
		set s = s||&apos;		set newPK = true;&apos;||NEWLINE;
		set s = s||&apos;	end if;&apos;||NEWLINE;

		set s = s||NEWLINE;
		set s = s||&apos;	-- INVOKE CRUD PROCEDURE(s) -------------------------------------------&apos;||NEWLINE;
		set s = s||&apos;	CASE UPPER(operation)&apos;||NEWLINE;
		set s = s||&apos;		WHEN &apos;&apos;C&apos;&apos; THEN&apos;||NEWLINE;
		set s = s||&apos;			-- Assign a Unique ID if the primary key(s) are null.&apos;||NEWLINE;
		set s = s||if_thenPK||NEWLINE;
		set s = s||&apos;			IF (newPK) THEN&apos;||NEWLINE;
		set s = s||&apos;				-- Invoke the create procedure.&apos;||NEWLINE;
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(REPLACE(crudVector[1].crudPath||&apos;/Create/create_&apos;||crudVector[1].viewname,&apos;//&apos;,&apos;/&apos;), null, resourcePathReserved);
		set s = s||&apos;				call &apos;||resourcePathReserved||&apos;(&apos;||crudVector[1].viewname||&apos;_Vect,LogIdentifier,msgVector);&apos;||NEWLINE;
		set s = s||&apos;			ELSE&apos;||NEWLINE;
		set s = s||&apos;				-- Invoke the update procedure.&apos;||NEWLINE;
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(REPLACE(crudVector[1].crudPath||&apos;/Update/update_&apos;||crudVector[1].viewname,&apos;//&apos;,&apos;/&apos;), null, resourcePathReserved);
		set s = s||&apos;				call &apos;||resourcePathReserved||&apos;(&apos;||crudVector[1].viewname||&apos;_Vect,explicit,LogIdentifier,msgVector);&apos;||NEWLINE;
		set s = s||&apos;			END IF;&apos;||NEWLINE;
		set s = s||&apos;		WHEN &apos;&apos;U&apos;&apos; THEN&apos;||NEWLINE;
		set s = s||&apos;			-- Invoke the update procedure.&apos;||NEWLINE;
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(REPLACE(crudVector[1].crudPath||&apos;/Update/update_&apos;||crudVector[1].viewname,&apos;//&apos;,&apos;/&apos;), null, resourcePathReserved);
		set s = s||&apos;			call &apos;||resourcePathReserved||&apos;(&apos;||crudVector[1].viewname||&apos;_Vect,explicit,LogIdentifier,msgVector);&apos;||NEWLINE;
		set s = s||&apos;		WHEN &apos;&apos;D&apos;&apos; THEN&apos;||NEWLINE;
		set s = s||&apos;			-- Invoke the RetrievePK procedure.&apos;||NEWLINE;
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(REPLACE(crudVector[1].crudPath ||&apos;/RetrievePK/retrievePK_&apos;||crudVector[1].viewname,&apos;//&apos;,&apos;/&apos;), null, resourcePathReserved);
		set s = s||&apos;			call &apos;||resourcePathReserved||&apos;(&apos;||crudVector[1].viewname||&apos;_Vect,LogIdentifier,&apos;||pkVarList||&apos;);&apos;||NEWLINE;
		set s = s||&apos;			-- Invoke the delete procedure.&apos;||NEWLINE;
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(REPLACE(crudVector[1].crudPath||&apos;/Delete/delete_&apos;||crudVector[1].viewname,&apos;//&apos;,&apos;/&apos;), null, resourcePathReserved);
		set s = s||&apos;			call &apos;||resourcePathReserved||&apos;(&apos;||crudVector[1].viewname||&apos;_Vect,LogIdentifier,msgVector);&apos;||NEWLINE;
		set s = s||&apos;		ELSE&apos;||NEWLINE;
		set s = s||&apos;	END CASE;&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	-- INIT OUT PRIMARY KEYS -----------------------------------------------&apos;||NEWLINE;
		set s = s||setPK;
		set s = s||NEWLINE;
		set s = s||&apos;    -- Calculate the Duration of this procedure.&apos;||NEWLINE;
		set s = s||&apos;    set EndTime = CURRENT_TIMESTAMP;&apos;||NEWLINE;
		set s = s||&apos;    set TotalTime = EndTime - StartTime;&apos;||NEWLINE;
		set s = s||&apos;    call &apos;||utilitiesRootPath||&apos;/log/logDebugMessage(moduleName, debugTime, LogIdentifier || &apos;&apos;DURATION=&apos;&apos;||cast(TotalTime as varchar) || &apos;&apos; BEGIN=&apos;&apos;||StartTime ||&apos;&apos; END=&apos;&apos;|| FORMAT_DATE(EndTime, &apos;&apos;hh24:mi:ss.ff&apos;&apos;) );&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;-- HANDLE EXCEPTIONS -------------------------------------------------------&apos;||NEWLINE;
		set s = s||&apos;    COMMIT;&apos;||NEWLINE;
		set s = s||&apos;	EXCEPTION&apos;||NEWLINE;
		set s = s||&apos;		ELSE&apos;||NEWLINE;
		set s = s||&apos;			SET result = &apos;&apos;30000&apos;&apos;;&apos;||NEWLINE;
		set s = s||&apos;			SET errorID = CURRENT_EXCEPTION.ID;&apos;||NEWLINE;
		set s = s||&apos;			SET errorName = CURRENT_EXCEPTION.NAME;&apos;||NEWLINE;
		set s = s||&apos;			SET errorMessage = CURRENT_EXCEPTION.TRACE;&apos;||NEWLINE;
		set s = s||&apos;			SET errorTrace = CURRENT_EXCEPTION.TRACE;&apos;||NEWLINE;
		set s = s||&apos;			CALL &apos;||utilitiesRootPath||&apos;/log/logDebugMessage(moduleName, debugException, LogIdentifier||&apos;&apos;::&apos;&apos;||errorTrace);&apos;||NEWLINE;
		set s = s||&apos;			ROLLBACK;&apos;||NEWLINE;
		set s = s||&apos;	END;&apos;||NEWLINE;
		set s = s||&apos;END IF; --IF (executeProcedureCode = defaultValues.&quot;ON&quot;) THEN&apos;||NEWLINE;
		set s = s||&apos;END&apos;||NEWLINE;

		-----------------------------------------------------------------------------------------
		-- Update the &quot;save_$viewname with the generated SQL script
		-----------------------------------------------------------------------------------------
		if (s IS NOT NULL AND LENGTH(&apos;|&apos;||s||&apos;|&apos;) &gt; 2) then
			call /shared/ASAssets/Utilities/repository/updateSqlScript(fullResourcePath,s,success,createResponse,faultResponse);
		else
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Cannot update resource because the script text is empty.&apos;);
			end if;
			set status = &apos;ERROR&apos;;
		end if;
	else
		if (overwrite = 0) then
			raise ex value &apos;Cannot create resource because it already exists and overwrite=0.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;);
		end if;
		if (overwrite = 1) then
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;SKIPPING:  Cannot create resource because it already exists.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;));
			end if;
			set status = &apos;SKIPPED&apos;;
		end if;
	end if;

/****************************************************************************
*
*	Generate a test harness for the create procedure
*
*****************************************************************************/
	-----------------------------------------------------------------------------------------
	-- Template for the &quot;test_save_$viewname SQL script
	-----------------------------------------------------------------------------------------
/*
PROCEDURE test_save_Customers(
)
BEGIN
	DECLARE inVector 	VECTOR (/shared/CUD_Prototype/constants/TypeDefinitions.customers_Type) DEFAULT VECTOR[(null)];
	DECLARE msgVector	VECTOR(/shared/BestPractices/Procedures/TypeDefinitions.crudMessageType);
	DECLARE i			INTEGER DEFAULT 1;
	DECLARE pk1			DOUBLE;

	DECLARE numInserts 	INTEGER DEFAULT 2; -- number of times through the loop to generate
	DECLARE testNoPK	INTEGER DEFAULT 1; -- when the loop counter(i) reaches this number it will not assign a PK.  Test the message that is generated.

	WHILE (i &lt;= numInserts) DO
		IF (i = testNoPK) THEN
			set pk1 = null;
		ELSE
			call /shared/CUD_Prototype/L4_Physical_Layer/L4_2_Physial_Metadata/Seq/getUniqueID(pk1);
		END IF;
		call print(&apos;pk1=&apos;||NVL(pk1,&apos;null&apos;));
		set inVector[i].customerID = pk1;
		set inVector[i].CompanyName = &apos;New Company&apos;||i;
		set inVector[i].ContactFirstName = &apos;&apos;;
		set inVector[i].ContactLastName = &apos;&apos;;
		set inVector[i].BillingAddress = &apos;&apos;;
		set inVector[i].City = &apos;&apos;;
		set inVector[i].StateOrProvince = &apos;&apos;;
		set inVector[i].PostalCode = &apos;&apos;;
		set inVector[i].CountryRegion = &apos;&apos;;
		set inVector[i].ContactTitle = &apos;&apos;;
		set inVector[i].PhoneNumber = &apos;&apos;;
		set inVector[i].FaxNumber = &apos;&apos;;
		set inVector = EXTEND(inVector,1);
		set i = i + 1;
	END WHILE;
	set inVector = TRUNCATE(inVector,1);
	call /shared/CUD_Prototype/L1_Mapping_Layer/L1_1_Client_Services/CRUD/&quot;Create&quot;/create_customers(inVector,msgVector);

	-- Process the message vector
	set i = 1;
	WHILE (i &lt;= CARDINALITY(msgVector)) DO
		call print(&apos;RESULTS:  success=&apos;||msgVector[i].success||&apos;  type=&apos;||msgVector[i].messageType||&apos;  Message=&apos;||msgVector[i].message);
		set i = i + 1;
	END WHILE;
END
*/
	-----------------------------------------------------------------------------------------
	-- Create the &quot;test_save_$viewname SQL procedure resource if it does not exist
	-----------------------------------------------------------------------------------------
	set fullResourcePath = REPLACE(crudVector[1].procedurePath ||&apos;/test/test_&apos;||crudVector[1].procedureName,&apos;//&apos;,&apos;/&apos;);
	if (debug = &apos;Y&apos;) then
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;fullResourcePath=&apos;||fullResourcePath);
	end if;

	set resourceExists = false;
	call /lib/resource/ResourceExists(fullResourcePath, &apos;PROCEDURE&apos;,null,resourceExists);
	if (not resourceExists) then
		call /shared/ASAssets/Utilities/repository/createResource(crudVector[1].procedurePath ||&apos;/test&apos;,&apos;test_&apos;||crudVector[1].procedureName,&apos;PROCEDURE&apos;,&apos;SQL_SCRIPT_PROCEDURE&apos;,success,createResponse,faultResponse);
	else
		set resourceExists = true;
	end if;

	if (not resourceExists or (resourceExists and overwrite = 2)) then
		-----------------------------------------------------------------------------------------
		-- Build the &quot;test_save_$viewname SQL script
		-----------------------------------------------------------------------------------------

		set s = &apos;&apos;;
		set s = s||&apos;PROCEDURE test_&apos;||crudVector[1].procedureName||&apos;(&apos;||NEWLINE;
		set s = s||&apos;	-- primary key variables&apos;||NEWLINE;
		set i = 1;
		WHILE (i &lt;= CARDINALITY(pkList)) DO
			set s = s||&apos;	OUT &apos;||RPAD(pkList[i].colName,padAmount,padChar)||pkList[i].colType||&apos;,&apos;||NEWLINE;
			set i = i + 1;
		END WHILE;
		set s = s||&apos;	-- standard OUT variables&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;result&apos;,padAmount,padChar)||&apos;VARCHAR,&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;errorID&apos;,padAmount,padChar)||&apos;INTEGER,&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;errorName&apos;,padAmount,padChar)||&apos;LONGVARCHAR,&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;errorMessage&apos;,padAmount,padChar)||&apos;LONGVARCHAR,&apos;||NEWLINE;
		set s = s||&apos;	OUT &apos;||RPAD(&apos;errorTrace&apos;,padAmount,padChar)||&apos;LONGVARCHAR&apos;||NEWLINE;
		set s = s||&apos;)&apos;||NEWLINE;
		set s = s||&apos;BEGIN&apos;||NEWLINE;
		set s = s||&apos;	DECLARE operation		CHAR(1); --C=Create, U=update, D=Delete&apos;||NEWLINE;
		set s = s||&apos;	DECLARE explicit		BIT; 	 -- 1=update all fields as is even if null.  0=only update non null fields.&apos;||NEWLINE;
		set s = s||&apos;	DECLARE inVector		VECTOR (&apos;||typedefprocpath||&apos;/&apos;||typedefprocname||&apos;.&apos;||crudVector[1].viewname||&apos;_Type) DEFAULT VECTOR[(null)];&apos;||NEWLINE;
		set s = s||&apos;	DECLARE prefix			VARCHAR DEFAULT &apos;&apos;&apos;&apos;;&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	-- Modify primary key values as needed.&apos;||NEWLINE;
		set s = s||setDefaultPK;
		set s = s||NEWLINE;
		set s = s||&apos;	-- Modify operation as needed to test the various operations (C=Create, U=update, D=Delete).&apos;||NEWLINE;
		set s = s||&apos;	set operation = &apos;&apos;C&apos;&apos;;&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	-- Modify explicit as needed to test the various null behavior for updates.&apos;||NEWLINE;
		set s = s||&apos;	set explicit = 0;&apos;||NEWLINE;
		set s = s||NEWLINE;
		set s = s||&apos;	CASE operation&apos;||NEWLINE;
		set s = s||&apos;		WHEN &apos;&apos;C&apos;&apos; THEN set prefix = &apos;&apos;Create &apos;&apos;;&apos;||NEWLINE;
		set s = s||&apos;		WHEN &apos;&apos;U&apos;&apos; THEN set prefix = &apos;&apos;Update &apos;&apos;;&apos;||NEWLINE;
		set s = s||&apos;		ELSE&apos;||NEWLINE;
		set s = s||&apos;	END CASE;&apos;||NEWLINE;
		set i = 1;
		set j = 1;
		WHILE (i &lt;= CARDINALITY(columnList)) DO
			call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/isPrimaryKey(columnList[i].colName,pkList,pkFound);
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);
			-- Add formatting to retrieve by primary key
			IF (pkFound = 1) THEN 
				set s = s||&apos;	call print(&apos;&apos;&apos;||word||&apos; PK=&apos;&apos;||&apos;||&apos;NVL(CAST(&apos;||word||&apos; AS LONGVARCHAR),&apos;&apos;null&apos;&apos;));&apos;||NEWLINE;
				set s = s||&apos;	set inVector[1].&apos;||word||&apos; = &apos;||word||&apos;;&apos;||NEWLINE;
				set j = j + 1;
			ELSE -- Only add a format procedure when the column is not a primary key.
				call /shared/ASAssets/BestPractices_v81/Procedures/crudProcedures/getDefaultTestValues(columnList[i].colType,&apos;&apos;,defaultTestValue);
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;colName=&apos;||word||&apos;   columnType=&apos;||columnList[i].colType || &apos;   DefaultValue=&apos;||defaultTestValue);
				IF (POSITION(&apos;VARCHAR&apos; IN columnList[i].colType) &gt; 0) THEN
					set s = s||&apos;	set inVector[1].&apos;||word||&apos; = prefix||&apos;||defaultTestValue||&apos;;&apos;||NEWLINE;
				ELSE
					set s = s||&apos;	set inVector[1].&apos;||word||&apos; = &apos;||defaultTestValue||&apos;;&apos;||NEWLINE;
				END IF;
			END IF;
			set i = i + 1;
		END WHILE;
		set s = s||NEWLINE;
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(REPLACE(crudVector[1].procedurePath ||&apos;/&apos;||crudVector[1].procedureName,&apos;//&apos;,&apos;/&apos;), null, resourcePathReserved);
		set s = s||&apos;	call &apos;||resourcePathReserved||&apos;(&apos;||NEWLINE;
		set s = s||&apos;		operation,	-- IN&apos;||NEWLINE;
		set s = s||&apos;		explicit,	-- IN&apos;||NEWLINE;
		set i = 1;
		set j = 1;
		WHILE (i &lt;= CARDINALITY(columnList)) DO
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnList[i].colName, null, word);
			set s = s||&apos;		inVector[1].&apos;||word||&apos;,	-- IN&apos;||NEWLINE;
			set i = i + 1;
		END WHILE;
		set i = 1;
		WHILE (i &lt;= CARDINALITY(pkList)) DO
			set s = s||&apos;		&apos;||pkList[i].colName||&apos;,	-- OUT&apos;||NEWLINE;
			set i = i + 1;
		END WHILE;
		set s = s||&apos;		result,	-- OUT&apos;||NEWLINE;
		set s = s||&apos;		errorID,	-- OUT&apos;||NEWLINE;
		set s = s||&apos;		errorName,	-- OUT&apos;||NEWLINE;
		set s = s||&apos;		errorMessage,	-- OUT&apos;||NEWLINE;
		set s = s||&apos;		errorTrace	-- OUT&apos;||NEWLINE;
		set s = s||&apos;	);&apos;||NEWLINE;
		set s = s||&apos;END&apos;||NEWLINE;
		-----------------------------------------------------------------------------------------
		-- Update the &quot;test_save_$viewname with the generated SQL script
		-----------------------------------------------------------------------------------------
		if (s IS NOT NULL AND LENGTH(&apos;|&apos;||s||&apos;|&apos;) &gt; 2) then
			call /shared/ASAssets/Utilities/repository/updateSqlScript(fullResourcePath,s,success,createResponse,faultResponse);
		else
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Cannot update resource because the script text is empty.&apos;);
			end if;
		end if;
	else
		if (overwrite = 0) then
			raise ex value &apos;Cannot create resource because it already exists and overwrite=0.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;);
		end if;
		if (overwrite = 1) then
			if (debug = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;SKIPPING:  Cannot create resource because it already exists.  path=&apos;||NVL(fullResourcePath,&apos;null&apos;));
			end if;
		end if;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="checkDuplicateColumn" path="/shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inColumnListStr" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inNewColumnListStr" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inColumnAliasOrName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="columnListStrOut" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="columnAliasOrName" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="dropColumn" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* checkDuplicateColumn:
	-- Composite Best Practices --
	Check the list of column aliases for duplicates and append a numerical value based on how many duplicates are found.
	The original alias is always returned if no duplicated is found.  The first duuplicate is appended with 1. 
	The second duplicated is appended with 2 and so on.
 
	Input:
		columnListStr		LONGVARCHAR 	- Initially it is blank.  Each time through the list the following format is appended: col1|col2|
		newColumnListStr	LONGVARCHAR,	- Provides a listing of all new/derived column aliases. Format: alias1|alias2|	Example: a1|a2|
		columnAliasOrName	VARCHAR			- Logical column alias or physical column name. (logical alias is passed in by precedence first if present followed by column name)
	Output:
		columnListStrOut	LONGVARCHAR		- The ongoing column string with the input columnName or columnAlias.
												Example: a|a1|
		columnAliasOut		VARCHAR			- The column alias to use with an appended numerical value if required to insure all are unique
		dropColumn			BIT				- 1=true=drop the duplicate column, 0=false=don&apos;t drop the column

	Exceptions:  

	Modified Date:	Modified By:		CSW Version:	Reason:
	10/03/2013		Mike Tinius			6.1.0			Created new for B.P. 8.0.  Needed a way to handle the use case where the physical layer contains duplicate column names.
	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE checkDuplicateColumn(
	IN inColumnListStr		LONGVARCHAR,	-- Format: co1|col2|  Example: a|a1| 
	IN inNewColumnListStr	LONGVARCHAR,	-- Format: 	alias1|alias2|		 Example: a1|a2|
	IN inColumnAliasOrName	VARCHAR,		-- Logical column alias or physical column name. (logical alias is passed in by precedence first if present followed by column name)
	OUT columnListStrOut	LONGVARCHAR,	-- Output of the columnListStr with non-duplicated columns appended to the list
	OUT columnAliasOrName	VARCHAR,		-- The new logical column alias with a number appended if necessary to make the column unique
	OUT dropColumn			BIT				-- 1=true=drop the duplicate column, 0=false=don&apos;t drop the column
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;checkDuplicateColumn&apos;;
	DECLARE debug				CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE i					INTEGER DEFAULT 1;
	DECLARE pos					INTEGER;
	DECLARE colNum				INTEGER DEFAULT 0;
	DECLARE colNumDup			INTEGER;
	DECLARE colAliasName		VARCHAR;
	DECLARE colNumOut			INTEGER DEFAULT 0;
	DECLARE columnListStr		LONGVARCHAR DEFAULT inColumnListStr;
	DECLARE newColumnListStr	LONGVARCHAR DEFAULT inNewColumnListStr;
	DECLARE columnExists		BIT;

/*###############################################################
 IN: columnListStr=[col1|col2|]
 IN: newColumnListStr=[baseDN1|relativeDN1|]
 IN: columnName=[col3]  columnAlias=[col3]
 OUT: columnAliasOut=[baseDN]  colAliasEmpty=false
dropColumn=1 colNum=1 columnAliasOut[baseDN1] colName[baseDN] = colAlias[baseDN]
OUT: columnListStr=[col1|col2|col3|]
###############################################################*/
	if (debug = &apos;Y&apos;) then
		call print(moduleName||&apos; : ###############################################################&apos;);
		call print(moduleName||&apos; : IN: inColumnListStr=[&apos;||NVL(inColumnListStr,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; : IN: inNewColumnListStr=[&apos;||NVL(inNewColumnListStr,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; : IN: inColumnAliasOrName=[&apos;||NVL(inColumnAliasOrName,&apos;null&apos;)||&apos;]&apos;);
	end if;

	-- Initialize drop column to 0=false
	set dropColumn = 0;
	if (SUBSTR(inColumnAliasOrName,1,1) = &apos;&quot;&apos; and SUBSTR(inColumnAliasOrName, LENGTH(inColumnAliasOrName),1) = &apos;&quot;&apos;) then
		set columnAliasOrName = SUBSTR(inColumnAliasOrName,2,LENGTH(inColumnAliasOrName)-2);
	else 
		set columnAliasOrName = inColumnAliasOrName;
	end if;

	if (LENGTH(newColumnListStr) &gt; 0 AND SUBSTRING(newColumnListStr, LENGTH(newColumnListStr), 1) != &apos;|&apos;) then
		set newColumnListStr = newColumnListStr || &apos;|&apos;;
	end if;
	if (debug = &apos;Y&apos;) then
		call print(moduleName||&apos; : MOD: columnListStr=[&apos;||NVL(columnListStr,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; : MOD: newColumnListStr=[&apos;||NVL(newColumnListStr,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; : MOD: columnAliasOrName=[&apos;||NVL(columnAliasOrName,&apos;null&apos;)||&apos;]&apos;);
	end if;

	-- Determine if the column alias or name exists in the list.  Format: a|a1|
	if (columnListStr is not null and length(columnListStr) &gt; 0 and INSTR(&apos;|&apos;||columnListStr, &apos;|&apos;||columnAliasOrName||&apos;|&apos;) &gt; 0) then

		-- Since the columnAliasOrName was found in the columnListStr, iterate through the list
		--	to determine what field position it was found in.  Use that column number as a qualifier appended
		--	to the end of the columnAliasOrName name to make it unique.  Then search for that name in the 
		--	list.  Keep doing this until a unique identifier is created.
		columnListLoop:
		for s as 
			select * from /shared/ASAssets/Utilities/string/extractDelimitedText(columnListStr,&apos;|&apos;,0,0,0,1,0) 
				where object is not null and length(object) &gt; 0
		do
			set colNum = colNum + 1;
			set colAliasName = s.object;
			if (debug = &apos;Y&apos;) then
				call print(moduleName||&apos; : 1. colNum=&apos;||colNum||&apos; colAliasName=[&apos;||colAliasName||&apos;]&apos;);
			end if;

			if (columnAliasOrName = colAliasName) then
				set colNumDup = colNum;
				checkDuplicateColumnExists_1:
				while (true) DO
					set colNumOut = colNumDup + 1;
					-- Append a column number to the end of the column name to insure it is unique
					set columnAliasOrName = colAliasName||CAST(colNumOut AS VARCHAR);

					-- Search for the new column alias with an appended column number in the original columns lise
					set columnExists = 0;
					set colNumDup = 0;
					checkDuplicateColumnExists_2:
					for d as 
						select * from /shared/ASAssets/Utilities/string/extractDelimitedText(inColumnListStr,&apos;|&apos;,0,0,0,1,0) 
							where object is not null and length(object) &gt; 0
					do
						set colNumDup = colNumDup + 1;
						-- The column was found so leave this loop
						if (columnAliasOrName = d.object) then
							set columnExists = 1;
							leave checkDuplicateColumnExists_2;
						end if;
					end for;
					-- If no column was found then we are done otherwise, increment the column number and try again.
					if (columnExists = 0) then
						leave checkDuplicateColumnExists_1;
					end if;
				end while;
			end if;

			-- Check to see if the new column alias has already been accounted for by the new columns from the spreadsheet.
			if (newColumnListStr is not null and length(newColumnListStr) &gt; 0 and INSTR(&apos;|&apos;||newColumnListStr, &apos;|&apos;||columnAliasOrName||&apos;|&apos;) &gt; 0) then
				set dropColumn = 1;
				if (debug = &apos;Y&apos;) then
					call print(moduleName||&apos; : 2. dropColumn=&apos;||NVL(cast(dropColumn as varchar),&apos;null&apos;));
				end if;
				leave columnListLoop;
			end if;
		end for;
	end if;

	-- Depending on whether the column is being dropped or not, set the columnListStrOut variable
	if (dropColumn = 0 and columnAliasOrName is not null and length(trim(columnAliasOrName)) &gt; 0) then
		-- When not dropping the column, append the new column alias or name and the column count to the column list
		set columnListStrOut = NVL(inColumnListStr,&apos;null&apos;)||columnAliasOrName||&apos;|&apos;;
	else
		-- When dropping the column, just return the original column list
		set columnListStrOut = NVL(inColumnListStr,&apos;null&apos;);
	end if;
	if (debug = &apos;Y&apos;) then
		call print(moduleName||&apos; : OUT: dropColumn=&apos;||dropColumn||&apos;  colAliasName[&apos;||NVL(colAliasName,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; : OUT: columnListStr=[&apos;||NVL(columnListStrOut,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; : ###############################################################&apos;);
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">1380773659390</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573155473170</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">aiuhmb0</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/147</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/72</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/73</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/92</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/74</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/75</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/165</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/164</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/90</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/91</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/110</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/163</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getNameGenerated" path="/shared/ASAssets/BestPractices_v81/Procedures/generateName/getNameGenerated" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inContainer" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inResourceName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="caseRule" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="separator" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="useAliasRule" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="generationScriptsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateName/applyWordRule" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="caseRule" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="useAliasRule" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="basePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug3" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="word" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getNameGenerated:
	-- Composite Best Practices --
	Return the results for the generated name based on case and aliasing rules.
 
	Input:
			-- the container for the word
		inContainer

			-- the word to apply the rules 
		inResourceName 

			-- 	Assumption:  The original column name has to have separators (_) for this to work properly.
			--		     If the original word has no separators then the case rule gets applied to the single word
			--	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
			--	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
			--	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
			--	U=UPPER_CASE - All word parts are UPPER case with separtors retained
			--	l=lower_case - All word parts are lower case with separators retained
			--	O=Original_case - The word is not changed at all -- just pass it through as is
		caseRule - (used when generateMode=&apos;G&apos;) 

			-- separator (used when generateMode=&apos;G&apos;)
			--     1 character value such as _ or -.  Spaces are not allowed in column names.
			--	Example MY_COLUMN_NAME or MY-COLUMN-NAME
			-- for example: &apos;_&apos;	 	
		separator 

			-- 1=true (use alias rule), 0=false (do not use alias rule)
			-- useAliasRule (used when generateMode=&apos;G&apos;)
			-- 	When generating the abstract name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
			--	  to match a word part against the Alias table.  For exmaple:
			--		word part=ds		table alias=DS		table rule=DataSource
			--	0=DO NOT perform alias rule lookup at all.  Word Part is passed through
			--		result=ds
			--     	1=Use alias rule and MATCH CASE exactly
			--		result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
			--	2=Use alias rule and DO NOT MATCH CASE
			--		result=DataSource (UPPER(&apos;ds&apos;) = &apos;DS&apos;, therefore DataSource is returned
		useAliasRule 

			-- the path to where the scripts are located
			-- e.g. /shared/BestPractices/DataAbstractionSample/&quot;_generationScripts&quot;/Configure
		generationScriptsPath 

			-- Y=print debug, N=don&apos;t print debug	
		debug 
	Output:
		result - the result is the generated name with the case and aliasing rules applied
			Values: any text value
		status - the status of the result
			-- GENERATED - generated the column name based on rules supplied
			-- UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	06/15/2010		Mike Tinius			5.2.0			Created new
	06/24/2013		Mike Tinius			6.0.0			7.2: Multiple instances of Best Practices supported

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getNameGenerated(
		-- the container for the word
	IN	inContainer				VARCHAR,

		-- the word to apply the rules 
	IN	inResourceName			VARCHAR,

		-- 	Assumption:  The original column name has to have separators (_) for this to work properly.
		--		     If the original word has no separators then the case rule gets applied to the single word
		--	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
		--	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
		--	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
		--	U=UPPER_CASE - All word parts are UPPER case with separtors retained
		--	l=lower_case - All word parts are lower case with separators retained
		--	O=Original_case - The word is not changed at all -- just pass it through as is
	IN  caseRule				CHAR(1),

		-- separator (used when generateMode=&apos;G&apos;)
		--     1 character value such as _ or -.  Spaces are not allowed in column names.
		--	Example MY_COLUMN_NAME or MY-COLUMN-NAME
		-- for example: &apos;_&apos;	 	
	IN  separator				CHAR(1),

		-- 1=true (use alias rule), 0=false (do not use alias rule)
		-- useAliasRule (used when generateMode=&apos;G&apos;)
		-- 	When generating the abstract name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
		--	  to match a word part against the Alias table.  For exmaple:
		--		word part=ds		table alias=DS		table rule=DataSource
		--	0=DO NOT perform alias rule lookup at all.  Word Part is passed through
		--		result=ds
		--     	1=Use alias rule and MATCH CASE exactly
		--		result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
		--	2=Use alias rule and DO NOT MATCH CASE
		--		result=DataSource (UPPER(&apos;ds&apos;) = &apos;DS&apos;, therefore DataSource is returned
	IN  useAliasRule			SMALLINT,

		-- the path to where the scripts are located
		-- e.g. /shared/BestPractices/DataAbstractionSample/&quot;_generationScripts&quot;/Configure
	IN 	generationScriptsPath 	VARCHAR(4000),

		-- Y=print debug, N=don&apos;t print debug	
	IN  debug					CHAR(1),

	OUT result					VARCHAR,
	OUT	status					VARCHAR
		-- GENERATED - generated the column name based on rules supplied
		-- UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
)
BEGIN
	DECLARE indent			VARCHAR DEFAULT &apos;    &apos;;
	DECLARE moduleName		VARCHAR DEFAULT indent||&apos;getNameGenerated&apos;;

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;inContainer=[&apos;||inContainer||&apos;]  inResourceName=[&apos;||inResourceName||&apos;]&apos;);
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;caseRule=[&apos;||caseRule||&apos;]  separator=[&apos;||separator||&apos;]  useAliasRule=[&apos;||useAliasRule||&apos;]  generationScriptsPath=[&apos;||generationScriptsPath||&apos;]&apos;);
	END IF;

	-- Apply the word rules
	CALL /shared/ASAssets/BestPractices_v81/Procedures/generateName/applyWordRule(caseRule,separator,useAliasRule,generationScriptsPath,debug,inResourceName,result);

	IF (debug = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;result=[&apos;||result||&apos;]&apos;);
	END IF;
	SET status = &apos;GENERATED&apos;;
	IF (result IS NULL OR LENGTH(result) = 0) THEN
		SET result = inResourceName;
		SET status = &apos;UNCHANGED&apos;;
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600960227</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="applyWordRule" path="/shared/ASAssets/BestPractices_v81/Procedures/generateName/applyWordRule" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="caseRule" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="separator" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="useAliasRule" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="basePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="debug3" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="word" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateName/applyAliasRule" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="useAliasRule" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="word" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="basePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="debug3" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="alias" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateName/applyCaseRule" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="caseType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="word" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug3" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* applyWordRule:
	-- Composite Best Practices --
	Apply the rules for parsing a word into its word parts and applying various rules for case and aliasing.
 
	Input:
			-- 	Assumption:  The original column name has to have separators (_) for this to work properly.
			--		     If the original word has no separators then the case rule gets applied to the single word
			--	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
			--	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
			--	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
			--	U=UPPER_CASE - All word parts are UPPER case with separtors retained
			--	l=lower_case - All word parts are lower case with separators retained
			--	O=Original_case - The word is not changed at all -- just pass it through as is
		caseRule - (used when generateMode=&apos;G&apos;) 

			-- separator (used when generateMode=&apos;G&apos;)
			--     1 character value such as _ or -.  Spaces are not allowed in column names.
			--	Example MY_COLUMN_NAME or MY-COLUMN-NAME	 	
		separator -- for example: &apos;_&apos;

			-- useAliasRule (used when generateMode=&apos;G&apos;)
			-- 	When generating the abstract name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
			--	  to match a word part against the Alias table.  For exmaple:
			--		word part=ds		table alias=DS		table rule=DataSource
			--	0=DO NOT perform alias rule lookup at all.  Word Part is passed through
			--		result=ds
			--     	1=Use alias rule and MATCH CASE exactly
			--		result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
			--	2=Use alias rule and DO NOT MATCH CASE
			--		result=DataSource (UPPER(&apos;ds&apos;) = &apos;DS&apos;, therefore DataSource is returned
		useAliasRule -- 1=true (use alias rule), 0=false (do not use alias rule)

			-- the base path is the base CIS path to where AliasNameRuleSet() is located.
		basePath

			-- Y=print debug, N=don&apos;t print debug	
		debug3

			-- the word to apply the rules 
		word
	Output:
		result - the result of applying the various rules on a word

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	06/15/2010		Mike Tinius			5.2.0			Created new
	06/24/2013		Mike Tinius			6.0.0			7.2: Multiple instances of Best Practices supported
	03/14/2014		Mike Tinius			6.2.5			Check for double quotes around word, remove for parsing.
	03/02/2018		Mike Tinius			7.0.5			Replaced parseWord with extractDelimitedText
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE applyWordRule(
		-- caseRule (used when generateMode=&apos;G&apos;) 
		-- 	Assumption:  The original column name has to have separators (_) for this to work properly.
		--		     If the original word has no separators then the case rule gets applied to the single word
		--	j=javaCase - 1st word part is lower case, following word parts are 1st is letter is upper and remaining word part is lower with no separators
		--	C=CamelCase - 1st letter of each word part is upper case and remaining word part is lower with no separators
		--	T=Title_Case - 1st letter of each word part is upper case and remaining word part is lower with separators retained
		--	U=UPPER_CASE - All word parts are UPPER case with separtors retained
		--	l=lower_case - All word parts are lower case with separators retained
		--	O=Original_case - The word is not changed at all -- just pass it through as is
	IN	caseRule		VARCHAR, 

		-- separator (used when generateMode=&apos;G&apos;)
		--     1 character value such as _ or -.  Spaces are not allowed in column names.
		--	Example MY_COLUMN_NAME or MY-COLUMN-NAME	 	
	IN	separator		VARCHAR,   -- for example: &apos;_&apos;

		-- useAliasRule (used when generateMode=&apos;G&apos;)
		-- 	When generating the abstract name from the data source, use the &quot;AliasNameRuleSet&quot; as a lookup procedure
		--	  to match a word part against the Alias table.  For exmaple:
		--		word part=ds		table alias=DS		table rule=DataSource
		--	0=DO NOT perform alias rule lookup at all.  Word Part is passed through
		--		result=ds
		--     	1=Use alias rule and MATCH CASE exactly
		--		result=ds (the original word part &apos;ds&apos; is returned as no match is found becuase &apos;ds&apos; is not equal to &apos;DS&apos;
		--	2=Use alias rule and DO NOT MATCH CASE
		--		result=DataSource (UPPER(&apos;ds&apos;) = &apos;DS&apos;, therefore DataSource is returned
	IN	useAliasRule	SMALLINT,  -- 1=true (use alias rule), 0=false (do not use alias rule)

		-- the base path is the base CIS path to where AliasNameRuleSet() is located.
		-- /shared/BestPractices/DataAbstractionSample/&quot;_generationScripts&quot;/Configure
	IN	basePath		LONGVARCHAR,

		-- Y=print debug, N=don&apos;t print debug	
	IN	debug3			CHAR(1),

		-- the word to apply the rules 
	IN 	word			VARCHAR,
	OUT result			LONGVARCHAR
)
BEGIN
	DECLARE indent			VARCHAR DEFAULT &apos;      &apos;;
	DECLARE moduleName		VARCHAR DEFAULT indent||&apos;applyWordRule&apos;;
	DECLARE	tempWord		LONGVARCHAR;
	DECLARE caseType		VARCHAR;		-- L=lower, U=UPPER, C=Camel, O=Original (default)
	DECLARE part			LONGVARCHAR;
	DECLARE i				INTEGER DEFAULT 1;
	DECLARE alias			VARCHAR;
	DECLARE basePath_		LONGVARCHAR DEFAULT basePath;
	DECLARE wordPart		LONGVARCHAR;

	SET tempWord = word;
	IF (tempWord is not null AND SUBSTRING(tempWord,1,1) = &apos;&quot;&apos; AND SUBSTRING(tempWord,LENGTH(tempWord),1) = &apos;&quot;&apos;) THEN
		set tempWord = SUBSTRING(tempWord,2,LENGTH(tempWord)-2);
	END IF;
	IF (debug3 = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;tempWord=[&apos;||NVL(tempWord,&apos;null&apos;)||&apos;]&apos;);
	END IF;

	SET result = &apos;&apos;;
	FOR r AS SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(tempWord,separator,0,0,0,0,0) DO
		SET wordPart = r.object;
		-- Determine the caseType to use for the first word part
		IF (i = 1) THEN
		    CASE UPPER(caseRule)
			WHEN &apos;J&apos; THEN 
				SET caseType = &apos;L&apos;;
			WHEN &apos;C&apos; THEN 
				SET caseType = &apos;C&apos;;
			WHEN &apos;T&apos; THEN 
				SET caseType = &apos;C&apos;;
			WHEN &apos;U&apos; THEN 
				SET caseType = &apos;U&apos;;
			WHEN &apos;L&apos; THEN 
				SET caseType = &apos;L&apos;;
			WHEN &apos;O&apos; THEN 
				SET caseType = &apos;O&apos;;
			ELSE 
				SET caseType = &apos;O&apos;;
		    END CASE;			
		ELSE
		-- Determine the caseType to use for the remaining word parts
		    CASE UPPER(caseRule)
			WHEN &apos;J&apos; THEN 
				SET caseType = &apos;C&apos;;
			WHEN &apos;C&apos; THEN 
				SET caseType = &apos;C&apos;;
			WHEN &apos;T&apos; THEN 
				SET caseType = &apos;C&apos;;
			WHEN &apos;U&apos; THEN 
				SET caseType = &apos;U&apos;;
			WHEN &apos;L&apos; THEN 
				SET caseType = &apos;L&apos;;
			WHEN &apos;O&apos; THEN 
				SET caseType = &apos;O&apos;;
			ELSE 
				SET caseType = &apos;O&apos;;
		    END CASE;
		END IF;

		IF (useAliasRule = 0) THEN
			CALL /shared/ASAssets/BestPractices_v81/Procedures/generateName/applyCaseRule(caseType, wordPart, debug3, part);
		ELSE
			CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(basePath_, null, basePath_);
			CALL /shared/ASAssets/BestPractices_v81/Procedures/generateName/applyAliasRule(useAliasRule, wordPart, basePath_, debug3, alias);
			CALL /shared/ASAssets/BestPractices_v81/Procedures/generateName/applyCaseRule(caseType, alias, debug3, part);
		END IF;

		IF (i = 1) THEN 
		    SET result = result || part;
		ELSE
		    CASE UPPER(caseRule)
			WHEN &apos;J&apos; THEN 
				SET result = result || part;
			WHEN &apos;C&apos; THEN 
				SET result = result || part;
			WHEN &apos;T&apos; THEN 
				SET result = result || separator || part;
			WHEN &apos;U&apos; THEN 
				SET result = result || separator || part;
			WHEN &apos;L&apos; THEN 
				SET result = result || separator || part;
			WHEN &apos;O&apos; THEN 
				SET result = result || separator || part;
			ELSE 
				SET result = result || separator || part;
		    END CASE;
		END IF;
		SET i = i + 1;
		IF (debug3 = &apos;Y&apos;) THEN
			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;wordPart=[&apos;||part || &apos;]   result=[&apos;||result||&apos;]&apos;);
		END IF;
	END FOR;
	IF (debug3 = &apos;Y&apos;) THEN
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;result=[&apos;||result||&apos;]&apos;);
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600783568</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="generateViewsLoop" path="/shared/ASAssets/BestPractices_v81/Procedures/archive/generateViewsLoop" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="generateType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="copyAnnotation" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="copyPrivilegeMode" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="generateUnsupportedColumnType" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="ConfigParamsVector" direction="IN" nullable="true">
      <datatype name="ConfigParamsVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="ConfigParamsType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="ConfigParamsType" type="TREE" refId="1">
            <element name="generateMode">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="outputMode">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="generateViews">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="resourceCaseRule">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="columnCaseRule">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="separator">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="useAliasRule">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="resourcePrefix">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceSuffix">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="generateWithSourceColumn">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="generateCast">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="generateIndexes">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="debug">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="debug2">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="debug3">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="basePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="scriptsPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="padAmount">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="startingFolderVector" direction="IN" nullable="true">
      <datatype name="startingFolderVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="startingFolderExtendedType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="startingFolderExtendedType" type="TREE" refId="1">
            <element name="groupId">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="process">
              <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
            </element>
            <element name="layerType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="pathDerivation">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="sourceFolderPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="targetFolderPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="derivedFilterPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typeDefProcPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="typeDefProcName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="exactMatch" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="excludeDsPathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inProjectFolderName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="newColumnList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="generateViewsRow" type="TABLE" refId="1">
        <element name="datasourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="projectFolderName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="greatGrandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="grandParentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="containerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="columnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalColumnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalColumnType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="logicalStatus">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="containerPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="duration">
          <datatype name="IntervalDay" type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/webservices/system/admin/resource/operations/updateResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="updateResources" direction="IN">
        <datatype name="updateResources" extendedName="{http://www.compositesw.com/services/system/admin/resource}updateResources" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}updateResources" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}updateResources">
          <schemaDatatype>
            <datatype name="updateResources" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="updateResourcesRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="2">
              <element name="resources" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="resourceList" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="3">
                  <element name="resource" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                    <datatype name="resource" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="4">
                      <element name="name" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="resourceType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="subtype" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="resourceSubType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="id" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="changeId" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="int" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="long" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                      </element>
                      <element name="version" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="introspectState" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="introspectState" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="ownerDomain" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="ownerName" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="impactLevel" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="impactLevel" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="impactMessage" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="enabled" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                      <element name="lockState" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="lockState" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="5">
                          <element name="lockOwnerDomain" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="lockOwnerName" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="lockCreateTime" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="dateTime" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATETIME"/>
                          </element>
                          <element name="lockParentPath" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                        </datatype>
                      </element>
                      <element name="hints" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="6">
                          <element name="hint" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                            <datatype name="attribute" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="7">
                              <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                                <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeTypeValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="8">
                                  <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                    <datatype name="attributeTypeValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="9">
                                      <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                                        <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                      </element>
                                      <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                      </element>
                                      <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <reference refId="8"/>
                                      </element>
                                      <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeTypeValueMap" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="10">
                                          <element name="entry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                            <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="11">
                                              <element name="key" namespace="http://www.compositesw.com/services/system/util/common">
                                                <reference refId="9"/>
                                              </element>
                                              <element name="value" namespace="http://www.compositesw.com/services/system/util/common">
                                                <reference refId="9"/>
                                              </element>
                                            </datatype>
                                          </element>
                                        </datatype>
                                      </element>
                                      <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeSimpleValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="12">
                                          <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                            <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                          </element>
                                        </datatype>
                                      </element>
                                    </datatype>
                                  </element>
                                </datatype>
                              </element>
                              <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <reference refId="10"/>
                              </element>
                              <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <reference refId="12"/>
                              </element>
                              <element name="unset" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                              </element>
                            </datatype>
                          </element>
                        </datatype>
                      </element>
                      <element name="annotation" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="attributes" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="attributeList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="13">
                          <element name="attribute" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                            <reference refId="7"/>
                          </element>
                        </datatype>
                      </element>
                    </datatype>
                  </element>
                </datatype>
              </element>
              <element name="detail" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="detailLevel" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="updateResourcesResponse" direction="OUT">
        <datatype name="updateResourcesResponse" extendedName="{http://www.compositesw.com/services/system/admin/resource}updateResourcesResponse" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}updateResourcesResponse" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}updateResourcesResponse">
          <schemaDatatype>
            <datatype name="updateResourcesResponse" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="updateResourcesResponse" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="14">
              <element name="resources" namespace="http://www.compositesw.com/services/system/admin/resource">
                <reference refId="3"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="fault" direction="OUT">
        <datatype name="fault" extendedName="{http://www.compositesw.com/services/system/util/common}fault" namespace="http://www.compositesw.com/services/system/util/common" referenceDefinitionSet="/services/webservices/system/util/common/operations/CommonSchema" referenceType="{http://www.compositesw.com/services/system/util/common}fault" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/util/common}fault">
          <schemaDatatype>
            <datatype name="fault" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="fault" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="ELEMENT_DECL" type="TREE" refId="15">
              <element name="errorEntry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                <datatype name="messageEntry" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="16">
                  <element name="code" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="message" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="detail" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="severity" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="messageSeverity" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/archive/getName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inLogicalID" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inContainerList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inProjectFolderName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGreatGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inContainerName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inResourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="applyReservedWordList" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="ConfigParamsVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="ConfigParamsType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="ConfigParamsType" type="TREE" refId="2">
              <element name="generateMode">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="outputMode">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="generateViews">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="resourceCaseRule">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="columnCaseRule">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="separator">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="useAliasRule">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="resourcePrefix">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceSuffix">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="generateWithSourceColumn">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="generateCast">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="generateIndexes">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="debug">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="debug2">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="debug3">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="basePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="scriptsPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="padAmount">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="containerList" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="logicalName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="logicalType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="compositeTransformation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="annotation" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="status" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/archive/isDerivedPathMatch" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="exactMatch" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="derivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="sourcepath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inColumnListStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inNewColumnListStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inColumnAliasOrName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="columnListStrOut" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="columnAliasOrName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="dropColumn" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateLink" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="publishToFolder" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="copyAnnotation" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDataSourceName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheStorageDataSourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="datasourceName" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourcePath" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/getDefaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="scriptsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="defaultValuesVector" direction="OUT">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="defaultValuesType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="defaultValuesType" type="TREE" refId="2">
              <element name="bestPracticesVersion">
                <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
              </element>
              <element name="basePath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="scriptsPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="configureScriptsPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="constantsScriptsPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="generationScriptsPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="compositeDatabasePath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="applicationPublishedPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="applicationServicesPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="applicationViewsPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="applicationViewsSubFolder">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="crudPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="typeDefinitionPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="typeDefinitionProcName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="businessBusinessPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="businessLogicalPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="physicalFormattingPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="physicalFormattingTransformationPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="physicalViewsPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="physicalMetadataPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="genUniqueIDPath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="debugTime">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/isUnsupportedColumnType" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="columnType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="isUnsupported" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inReplaceStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outReplaceStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/retrieveName/retrieveNewColumnList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inProjectFolderName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGreatGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGrandParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inParentName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inContainerName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="resultCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="datasourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="projectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="greatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="grandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="containerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="physicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="physicalType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourceNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="logicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="logicalType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="32767"/>
          </element>
          <element name="logicalTransformation">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="physicalNameEncoded">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inStringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="num" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inWord" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCopyPrivilegeEntries" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFoldersPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cursorNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="columnBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="paramDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE_SQLINDEXES" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="sqlIndexName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexUnique">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlIndexColName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexColOrder">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getDependentResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="configured">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="cachePolicy">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageDataSourcePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageTargetName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storagePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="refreshMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="scheduleMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="startTime">
            <datatype type="DATETIME"/>
          </element>
          <element name="fromTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="endTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="recurringDay">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="interval">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="period">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="count">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="isCluster">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="expirationPeriod">
            <datatype type="INTEGER"/>
          </element>
          <element name="clearRule">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="allOrNothing">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="incremental">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="storageBucketMode">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketCatalog">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketSchema">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketPrefix">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketNumBuckets">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="storageDropCreateIdx">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="firstRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="secondRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateImpactedResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getDelimitedOccurrence" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* generateViews: 
	-- Composite Best Practices --
	This is the main procedure used for generating any layer of views from data sources or other view layers including
		&quot;Physical Views&quot;, &quot;Formatting Views&quot;, &quot;Logical Views&quot;, and  &quot;Client Views&quot;

	Whether you have 10&apos;s, 100&apos;s or 1000&apos;s of relational tables that you want to map into a canonical
	format, this auto-generation utility will aid in the mapping of data abstraction layers to the 
	physical tables.
	
	1) Edit the /&lt;project-name&gt;/generationScripts/ConfigureParams and ConfigureStartingFolders file to set up the processing
		startingFolderVector - 
			defines which data source folders to process, 
			where the views get generated, 
			and whether the sub-folders are derived from the source or defined absolutely

	2) Execute the top level procedure which is:
		/&lt;project-name&gt;/generationScripts/generatePhysicalViews
		/&lt;project-name&gt;/generationScripts/generateFormattingViews
	3) Refresh Studio to see the Views that were generated

	Cautions:
	   CAUTION(1): Overlapping sourceFolderPath definitions will result in duplicated views being produced
		Take the 2 source folder paths expressed below.  The 2nd one is a sub-directory of the first one.
		This will result in the same source folders being processed twice which generates the same mapping views
		but in different target folders.
	    (1,&apos;PV&apos;,&apos;D&apos;,&apos;/shared/DataAbstractSample/PhysicalLayer&apos;,		null, &apos;/shared/DataAbstractSample/FormattingLayer&apos;),
	    (1,&apos;PV&apos;,&apos;D&apos;,&apos;/shared/DataAbstractSample/PhysicalLayer/ORDERS&apos;,	null, &apos;/shared/DataAbstractSample/FormattingLayer/Orders&apos;)

	    CAUTION(2): Source Folder Path definitions are case sensitive and must match the actual source path that you
		want to introspect to create mapping views from.

	    CAUTION(3): Only relational sources are supported at this time.

	Input:
		overwrite 
			-- allows user to decide whether they want to overwrite an existing view or not.
			-- 0=false=do not overwrite the composite published database resource.  If the resource exists, raise an exception.
			-- 1=true=do overwrite the composite published database resource if it exists.
		copyAnnotation 
			-- allows user to decide whether they want to copy annotations or not form both resource and columns.
			-- 0=false=do not copy the annotation from the target resource
			-- 1=true=do copy the annotation from the target resource
		copyPrivilegeMode
			-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
			-- null (default) - do not set any privileges at all
			-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
			-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
		generateUnsupportedColumnType
			-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite at &apos;OTHER&apos;.
			-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
			-- 1 - generate columns where the column type = &apos;OTHER&apos;
		newColumnList
			--(used when generateMode=&apos;G&apos;)
			-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
			-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3

		ConfigParamsVector - The vector of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
		startingFolderVector - The vector of staring folders including source, target and derived filter path
		inProjectFolderName 		VARCHAR,
			-- the name of the project folder (defaultValue.basePath)(projectName)
	Output:
		-- View Generation results
			generateViewsRow - 	CURSOR (
		 		datasourceName			VARCHAR(255), 
				projectFolderName		VARCHAR(255), 
				greatGrandParentName	VARCHAR(255), 
				grandParentName			VARCHAR(255), 
				parentName				VARCHAR(255),
		        containerName 			VARCHAR(255), 
		        containerType 			VARCHAR(255), - the resource type of the container resource (i.e. TABLE)
		        columnName 				VARCHAR(255), - the name of the original column within the source resource.
		        logicalColumnName 		VARCHAR(255), - the name of the target column that will be created.
        		logicalColumnType 		VARCHAR(255), - the type of the target column that will be created.
		        logicalStatus 			VARCHAR(4000), - the status for the usage of this column
 						-- on input, when generateMode = &apos;G&apos; possible values are:
						-- 		GENERATED - generated the column name based on rules supplied
						-- 		UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
						-- on input, when generateMode = &apos;R&apos; possible values are:
						-- 		FOUND - found when it finds a match to physical name in the spreadsheet
						-- 		UNCHANGED - remains unchanged when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=1
						-- 		DROPPED - gets dropped from the list when it cannot match to the physical resourceName and the ConfigureParams.generateWithSourceColumn=0
       			containerPath 			VARCHAR(4000) - the full path to the container resource.
				duration				INTERVAL HOUR TO SECOND
			)
			Values: example:
parentName,	containerName,	containerType,	columnName,			logicalColumnName,	logicalColumnType,logicalStatus,containerPath
----------	---------------	---------------	-------------------	-------------------	---------------	---------------	---------------------------------
[NULL],		CISORADEMO,		TABLE,			CUSTOMERS,			Customers,			TABLE,			FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		INTEGER,		CUSTOMER_ID,		CustomerId,			INTEGER,		FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(50),	COMPANY_NAME,		CompanyName,		VARCHAR(50),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(30),	CONTACT_FIRST_NAME,	ContactFirstName,	VARCHAR(30),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(50),	CONTACT_LAST_NAME,	ContactLastName,	VARCHAR(50),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(255),	BILLING_ADDRESS,	BillingAddress,		VARCHAR(255),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(50),	CITY,				City,				VARCHAR(50),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(20),	STATE_OR_PROVINCE,	StateOrProvince,	VARCHAR(20),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(20),	POSTAL_CODE,		PostalCode,			VARCHAR(20),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(50),	COUNTRY_REGION,		CountryRegion,		VARCHAR(50),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(50),	CONTACT_TITLE,		ContactTitle,		VARCHAR(50),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(30),	PHONE_NUMBER,		PhoneNumber,		VARCHAR(30),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		VARCHAR(30),	FAX_NUMBER,			FaxNumber,			VARCHAR(30),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		TIMESTAMP,		MOD_DT,				ModifiedDate,		TIMESTAMP,		FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	CUSTOMERS,		TIMESTAMP,		CAST(CURRENT_DATE() AS DATE) AS,CurrentDate,DATE,		FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
[NULL],		CISORADEMO,		TABLE,			EMPLOYEES,			Employees,			TABLE,			FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	EMPLOYEES,		INTEGER,		EMPLOYEE_ID,		EmployeeId,			INTEGER,		FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	EMPLOYEES,		VARCHAR(50),	FIRST_NAME,			FirstName,			VARCHAR(50),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	EMPLOYEES,		VARCHAR(50),	LAST_NAME,			LastName,			VARCHAR(50),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	EMPLOYEES,		VARCHAR(50),	TITLE,				Title,				VARCHAR(50),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	EMPLOYEES,		VARCHAR(30),	EXTENSION,			Extension,			VARCHAR(30),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	EMPLOYEES,		VARCHAR(30),	WORK_PHONE,			WorkPhone,			VARCHAR(30),	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO
CISORADEMO,	EMPLOYEES,		TIMESTAMP,		MOD_DT,				ModifiedDate,			TIMESTAMP,	FOUND,			/shared/BestPractices/DataAbstractionSample/Physical/Formatting/CISORADEMO

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	09/30/2012		Mike Tinius			5.2.0			Created new
	04/22/2013		Mike Tinius			5.2.0			Added logicalType for Best Pracices 7.1
	05/02/2013		Mike Tinius			5.2.0			Updated for Best Practices 7.1 - added overwrite, copyAnnotation, updatePrivilegesRecursively, copyPrivilegeMode, publishToFolder, targetResource
	07/31/2013		Mike Tinius			6.0.0			B.P. 7.3: Upgrade utilities.  Fix generateViewsLoop performance issue by only invoking updateImpactedResources when a view is created.
	10/28/2013		Mike Tinius			6.2.2			B.P. 8.0: Added inProjectFolderName to the input parameters
	08/08/2014		Mike Tinius			6.2.6			B.P. 8.1.3: Added check for dependency views in target path.  Don&apos;t generate when 0 or 1.  Changed default overwrite=1 instead of 2.
	08/08/2014		Mike Tinius			6.2.5			B.P. 8.1.3: Modified ability generate cast statements under various conditions when generateMode=G or R and generateCast=0-5.
			Added generateCast=2,3,4,5 allowing for &quot;NO&quot; CAST around index columns and adding a CAST display column for index columns.
			--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
			-- 	1=Generate the CAST statement around the column
			--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
			--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; column for each index column.  (No CAST o nindex columns)
			--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
			--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; column for each primary key index column.  (No CAST on primary key index columns)
	09/21/2015		Mike Tinius			7.0.x			B.P. 8.1.7: Added generateViews=2 for a select * projection.  Requires Utilities_2015Q3
	08/31/2016		Mike Tinius			7.0.x			B.P. 8.1.7.3: Increased generation efficiency when generateMode=2 (SELECT *) mode.  Don&apos;t evaluate all of the columns.
	04/22/2017		Mike Tinius			7.0.x			B.P. 8.1.8: Added call to createAllFoldersPrivileges for a published resource which creates the catalogs and schema folders as needed.
	01/24/2019		Mike Tinius			8.0.0			B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
														B.P. 2019.1: Added support for Changed to make logicalID = &apos;F&apos; for folder so you can distinguish in getName how to apply prefix/suffix rules for T=table and C=columns.
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.
																	   Modified call from copyResourcesPrivileges to copyResourcesPrivilegesV2 to remove VECTOR usage

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE generateViewsLoop(
	IN generateType					VARCHAR,-- VIEW, LINK
	IN overwrite					INTEGER,
		-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
		-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
		-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
	IN copyAnnotation				BIT,	
		-- 0=false do not copy annotation
		-- 1=true copy source annotation to target, 
	IN copyPrivilegeMode			BIT,
		-- flag indicating the mode in which to copy privileges.  Privileges are only copied from the parent when creating new resources including folders.
		-- null (default) - do not set any privileges at all
		-- 0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
		-- 1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
	IN generateUnsupportedColumnType BIT,
		-- flag indicating whether to ignore or generate unsupported column types.  For example in Oracle an SDO spatial type gets imported into Composite as &apos;OTHER&apos;.
		-- 0/null (default) - ignore column type = &apos;OTHER&apos; and do not generate that column
		-- 1 - generate columns where the column type = &apos;OTHER&apos;
	IN ConfigParamsVector			VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.ConfigParamsType),
	IN startingFolderVector			VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.startingFolderExtendedType),
	IN exactMatch					SMALLINT,
		-- 0=fuzzy match - sourcePath + derivedFilterPath must simply be contained within resourcePath
		-- 1=exact match - sourcePath + derivedFilterPath must match exactly in resourcePath
	IN excludeDsPathsList			LONGVARCHAR,
		-- comma separated list of resource paths or partials paths to exclude.  This may be useful when a data source has been moved and it&apos;s index or foreign keys
		--	are pointing to another data source that does not exist anymore.  It may be necessary to exclude that path or paths.  If an exception is thrown during 
		--	execution, try excluding those paths.
		--	Values: /shared/MyPath/Physical/Metadata/MyDatasource
	IN inProjectFolderName 			VARCHAR,
		-- the name of the project folder (defaultValue.basePath)(projectName)
	IN newColumnList				LONGVARCHAR, --(used when generateMode=&apos;G&apos;)
		-- A formatted list of new columns to add to the end of the view.  The column will not be added if it already exists.
		-- The format is as follows:  column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
    OUT result PIPE 				/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.generateViewsRow
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos; &apos;||&apos;generateViewsLoop&apos;;
	DECLARE debug					CHAR(1) DEFAULT ConfigParamsVector[1].debug;
	DECLARE debug2					CHAR(1) DEFAULT ConfigParamsVector[1].debug2; 
	DECLARE debug3					CHAR(1) DEFAULT ConfigParamsVector[1].debug3; 
	DECLARE debugTime				CHAR(1);
	DECLARE Empty					INTEGER DEFAULT 1;
	DECLARE notEmpty				INTEGER DEFAULT 0;
	DECLARE sfNum,idx				INTEGER;
	DECLARE i,k, pos				INTEGER;
	DECLARE colNum					INTEGER;
	DECLARE sourceFolderPath		VARCHAR(4000);
	DECLARE targetFolderPath		VARCHAR(4000);
	DECLARE targetResourcePath		VARCHAR(4000);
	DECLARE targetResourceType		VARCHAR;
	DECLARE targetResourceName		VARCHAR;
	DECLARE	resourcePath			VARCHAR(4000);
	DECLARE resourcePathReserved	VARCHAR(4000);
	DECLARE resourceType			VARCHAR;
	DECLARE childResCursor			CURSOR /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.childResourceType;
	DECLARE resultCursor			CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.generateViewsRow;
	DECLARE defaultValuesVector		VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.defaultValuesType);
	DECLARE newColumnListCursor		CURSOR /shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.CommonModelType;
	DECLARE containerList			LONGVARCHAR;
	DECLARE datasourceNameList		LONGVARCHAR;
	DECLARE datasourcePathList		LONGVARCHAR;
	DECLARE greatGrandParentName	VARCHAR;
	DECLARE grandParentName			VARCHAR;
	DECLARE parentName				VARCHAR;
	DECLARE containerName			VARCHAR;
	DECLARE resourceName			VARCHAR;
	DECLARE containerType			VARCHAR;
	DECLARE igreatGrandParentName	VARCHAR;
	DECLARE igrandParentName		VARCHAR;
	DECLARE iparentName				VARCHAR;
	DECLARE icontainerName			VARCHAR;
	DECLARE logicalType				VARCHAR;
	DECLARE logicalStatus			VARCHAR(4000);
	DECLARE LOGICAL_STATUS_MAX_LEN	INTEGER DEFAULT 1024; -- This is the length of the above logicalStatus definition.
	DECLARE transformResourceName	LONGVARCHAR;
	DECLARE transformResourceNameOrig LONGVARCHAR;
	DECLARE annotation				LONGVARCHAR;
	DECLARE targetPathMatch			BOOLEAN DEFAULT false;
	DECLARE namespaces				VARCHAR(4000);
	DECLARE xpath					VARCHAR(4000);
	DECLARE xmlOut					XML;
	DECLARE success					INTEGER;
	DECLARE skipIfExists			BIT;
	DECLARE isDerivedMatch			INTEGER;
	DECLARE childResCursorProcessed boolean;
	DECLARE ex						EXCEPTION;
	DECLARE dependentResourceList	LONGVARCHAR;
	DECLARE resourceExists			BOOLEAN;
	DECLARE message					LONGVARCHAR;
 	DECLARE impactMessage			LONGVARCHAR;
	DECLARE derivedFilterPath		LONGVARCHAR;
		-- The path is derived by concatenating the partial filter path with the source path of the designated layer type.
		-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
		--    defined in configureStartingFolders per the layerType and groupId combination.
		--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionSample/L1_Mapping_Layer/Client_Views
		--        The derivedFilterPath list=Orders_Closed,/Orders/Customers,Orders/Product
		--        Even though there are several other views in the /Orders folder under the Client_Views only the ones specified
		--	      will be generated to the Client_Published.  Views directly under the source path do not require any qualifying path except the view name.
		--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
		-- If null, generate views from all source folders as directed by the &quot;configure starting folders&quot; and the designated layer type.

/**********************************
 * DECALRE from generateViewsCommon
 **********************************/
	DECLARE generateMode			CHAR(1);-- &apos;G&apos;=Generate the resource name, &apos;R&apos;=Retrieve the resource name  (resources include PATH names, VIEW names AND COLUMN names)
	DECLARE outputMode				CHAR(1);-- &apos;A&apos;=Return All Columns, &apos;U&apos;=Return ONLY Unchanged columns that were NOT found.
	DECLARE generateIndexes			SMALLINT;
	DECLARE generateCast			SMALLINT;
			--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
			-- 	1=Generate the CAST statement around the column
			--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
			--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; column for each index column.  (No CAST o nindex columns)
			--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
			--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; column for each primary key index column.  (No CAST on primary key index columns)
	DECLARE generateViews			SMALLINT;
			--     0=Do not generate - (browse only) print out what will happen but don&apos;t perform the generation
			--     1=Do generate [DEFAULT] - Perform the VIEW Generation with a column projection, 
			--     2= Do generate          - Perform the VIEW Generation with a select * projection, 
	DECLARE padAmount				INTEGER;
	DECLARE padChar					CHAR(1) DEFAULT &apos; &apos;;
	-- These fields are for general processing
	DECLARE childRes				/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.childResourceType;
	DECLARE CR						CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.CR;
	DECLARE LF						CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.LF;
	DECLARE TAB						CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.TAB;
	DECLARE NEWLINE					VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.newline;
	DECLARE selectScript			LONGVARCHAR;
	DECLARE fromScript				LONGVARCHAR;
	DECLARE defaultVariableScript	LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE procInputParamsScript	LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE reservedResourceName	VARCHAR;
	DECLARE columnName				VARCHAR(4000);
	DECLARE columnName2				VARCHAR(4000);
	DECLARE columnType				VARCHAR;
	DECLARE logicalID				CHAR(1); -- C=column, T=table [alleviates confusion between the same physical name being a column or table.
	DECLARE logicalColumnName		VARCHAR;
	DECLARE logicalColumnNameOrig	VARCHAR;
	DECLARE logicalSuffixName		VARCHAR DEFAULT &apos;_display&apos;;
	DECLARE checkDupColumnOrAlias	VARCHAR;
	DECLARE	containerPath			VARCHAR(4000);
	DECLARE createInput				LONGVARCHAR;
	DECLARE createInputBody			LONGVARCHAR;
	DECLARE createInputBegin		LONGVARCHAR;
	DECLARE createInputEnd			LONGVARCHAR;
	DECLARE createInputColumns		LONGVARCHAR;
	DECLARE createInputIndexes		LONGVARCHAR;
	DECLARE logicalSqlIndexColName	VARCHAR;
	DECLARE indexColumnList			LONGVARCHAR;
	DECLARE uniqueIndex				VARCHAR;
	DECLARE lastIndexName			VARCHAR;
	DECLARE indexType				VARCHAR;
	DECLARE indexColPos				INTEGER;
	DECLARE createResponse 			XML;
	DECLARE faultResponse			XML;
	DECLARE continueLoop			BOOLEAN;
	DECLARE lastChar				CHAR(1);
	DECLARE columnAnnotation		LONGVARCHAR;
	DECLARE viewAnnotation			LONGVARCHAR;
	DECLARE spreadsheetAnnotation	LONGVARCHAR;
	DECLARE isUnsupportedColumnType INTEGER;
	DECLARE	word					VARCHAR;
	DECLARE columnListStr			LONGVARCHAR;
	DECLARE newColumnListStr		LONGVARCHAR;
	DECLARE newColumnName			VARCHAR;
	DECLARE newColumnType			VARCHAR;
	DECLARE newColumnValue			LONGVARCHAR;
	DECLARE newColumnTransformation	LONGVARCHAR;
	DECLARE dropColumn				BIT;
	DECLARE applyReservedWordList	BIT;	-- 1=true, apply the reserved word list to the output, 0=false, do not apply reserved word list
	DECLARE pcFunctionList			LONGVARCHAR;--Parse Column Function List
	DECLARE pcColumnList			LONGVARCHAR;--Parse Column Column List
	DECLARE pcRecurseDepth			INTEGER;	--Parse Column Recurse Depth
	DECLARE generationStartTime		TIMESTAMP; 	-- The time processing starts for this generation invocation
	DECLARE createResourceStartTime	TIMESTAMP;  -- The time processing starts for creating/updating a view resource
	DECLARE impactedStartTime		TIMESTAMP;  -- The time processing starts for updating impacted resources
	DECLARE viewStartTime			TIMESTAMP;	-- The time processing starts for a view
	DECLARE columnStartTime			TIMESTAMP;	-- The time the processing starts for a column
	DECLARE tempStartTime			TIMESTAMP;	-- The time the processing starts for a temporary time
	DECLARE duration				INTERVAL HOUR to SECOND;
	DECLARE colDuration				INTERVAL HOUR TO SECOND;
	-- flag indicating whether to update the children of the given resources or not.
	-- 		0 (false) or null - only update the given resource and not the children.
	-- 		1 (true) - update children recursively
	DECLARE updatePrivilegesRecursively	BIT DEFAULT 0;
	-- copyPrivilegeEntry - an XML representation of source and destination resources
	DECLARE copyPrivilegeEntry		LONGVARCHAR;
	-- Ignore any resources that do not exist
	-- 		1 = Bypass the processing of that resource.
	-- 		0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
	DECLARE inIgnoreResourceDoesNotExist	INTEGER DEFAULT 1;	
	-- Variables for resolveTargetFolders
	DECLARE pathDerivationFlag		BOOLEAN;
	DECLARE remainResourceName		VARCHAR;
	DECLARE remainFolderPath		VARCHAR(4000);
	DECLARE derivedFolderPath 		VARCHAR(4000);
	DECLARE folderLogicalName		VARCHAR;
	DECLARE folderLogicalType		VARCHAR;
	DECLARE	folderTransformation 	LONGVARCHAR;
	DECLARE folderAnnotation		LONGVARCHAR;
	DECLARE folderLogicalStatus		VARCHAR(4000);
	DECLARE fgreatGrandParentName	VARCHAR;
	DECLARE fgrandParentName		VARCHAR;
	DECLARE fparentName				VARCHAR;
	DECLARE fcontainerName			VARCHAR;
	DECLARE fresourceName			VARCHAR;
	DECLARE numOccurrences			INTEGER;
	DECLARE cacheStorageDataSourcePath 	VARCHAR(4000);
	DECLARE cacheStoragePath 		VARCHAR(4000);

/**************************
 * BEGIN CODE
 *************************/
	SET generationStartTime = CURRENT_TIMESTAMP;

	-- Set default configuration parameters	
	call /shared/ASAssets/BestPractices_v81/Procedures/getDefaultValues(ConfigParamsVector[1].scriptsPath, defaultValuesVector);
	SET generateViews = ConfigParamsVector[1].generateViews;
	SET generateMode = UPPER(ConfigParamsVector[1].generateMode);
	SET outputMode = SUBSTRING(UPPER(ConfigParamsVector[1].outputMode),1,1);
	SET generateCast = ConfigParamsVector[1].generateCast;
	SET generateIndexes = ConfigParamsVector[1].generateIndexes;
	SET padAmount = ConfigParamsVector[1].padAmount;
	SET debugTime = defaultValuesVector[1].debugTime;

	SET createInputEnd =	&apos;			&lt;/resource:sqlIndexes&gt;&apos;||NEWLINE||
							&apos;		&lt;/resource:resource&gt;&apos;||NEWLINE||
							&apos;	&lt;/resource:resources&gt;&apos;||NEWLINE||
							&apos;	&lt;resource:detail&gt;FULL&lt;/resource:detail&gt;&apos;||NEWLINE||
							&apos;&lt;/resource:updateResources&gt;&apos;;

/* ------------------------------------------------------------------------
 * Begin the processing loop
 * ------------------------------------------------------------------------*/
	SET sfNum = 1;
	StartingFolderLoop:
	WHILE (sfNum &lt;= CARDINALITY(startingFolderVector)) DO
		IF (startingFolderVector[sfNum].process = 1 and startingFolderVector[sfNum].sourceFolderPath IS NOT NULL AND LENGTH(&apos;|&apos;||startingFolderVector[sfNum].sourceFolderPath||&apos;|&apos;) &gt; 2) THEN
--		IF (startingFolderVector[sfNum].process = 1 and isEmpty(startingFolderVector[sfNum].sourceFolderPath) = notEmpty) THEN
		  set sourceFolderPath = startingFolderVector[sfNum].sourceFolderPath;
		  set targetFolderPath = startingFolderVector[sfNum].targetFolderPath;
		  set derivedFilterPath = startingFolderVector[sfNum].derivedFilterPath;

		  if (debug = &apos;Y&apos;) then
		  	CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; SOURCE FOLDER=&apos;||NVL(sourceFolderPath,&apos;null&apos;));
		  	CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos; TARGET FOLDER=&apos;||NVL(targetFolderPath,&apos;null&apos;));
		 	CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;DERIVED FILTER=&apos;||NVL(derivedFilterPath,&apos;null&apos;));
		  	CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;&apos;);
		  end if;

		  -- Get the specific resource type for the target resource
		  set resourceType = null;
		  FOR resource AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(sourceFolderPath, resourceType) DO
			set resourceType = resource.&quot;type&quot;;
		  END FOR;

		  IF (resourceType is not null) THEN

			/************************************************************************
			 * Get the Resource List from the SOURCE folder
			 ************************************************************************/
			FOR list AS 
				SELECT name, resPath, resType, subType 
				FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(sourceFolderPath, resourceType) 
			DO
/* getResourceTreeList returns:	 TYPE resourceTreeType ROW (name VARCHAR, resPath pathType, resType VARCHAR, subType VARCHAR);
name: 			resPath:													resType:	subType:
INVENTORY		/shared/ViewGenerator/PhysicalLayer/INVENTORY				CONTAINER	FOLDER_CONTAINER
ds_inventory	/shared/ViewGenerator/PhysicalLayer/INVENTORY/ds_inventory 	DATA_SOURCE	RELATIONAL_DATA_SOURCE
ORDERS			/shared/ViewGenerator/PhysicalLayer/ORDERS					CONTAINER	FOLDER_CONTAINER
ds_orders		/shared/ViewGenerator/PhysicalLayer/ORDERS/ds_orders		DATA_SOURCE	RELATIONAL_DATA_SOURCE
*/	
				-- Only process rows that come back from the recursive resource tree list that are actually Data Sources
				-- Folders will be derived because the full path is provided to the resource
				-- Allow TYPE=PROCEDURE and SUB_TYPE=STREAM_TRANSFORM_PROCEDURE
				IF 	(list.resType = &apos;TABLE&apos; OR list.resType = &apos;PROCEDURE&apos;) THEN

					if (debug = &apos;Y&apos;) then
						CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;BEGIN: ========================================================================================&apos;);
					end if;
					-- Determine if the source path is a match to the derivedFilterPath
					call /shared/ASAssets/BestPractices_v81/Procedures/archive/isDerivedPathMatch(debug, exactMatch, derivedFilterPath, sourceFolderPath, list.resPath, isDerivedMatch);
					if (isDerivedMatch  = 1) then
						-- Start the time for the resource
						SET viewStartTime = CURRENT_TIMESTAMP;

						-- Set the containerType
						SET containerType = list.resType;

						/**************************************************************************************************************
						 * 1. Get the Data Source for the resource
						 *    If the Formatting layer points to the Metadata table then the path of the metadata table is returned
						 *      and used to compare with the data source location.  This is required in order to establish the container
						 *      lineage.  The container lineage is used to generate the spreadsheet.
						 *    When the resource path lineage is 1 to 1 like in the Physical layer subfolders Formatting or Physical
						 *      then the datasourcePathList will contain only 1 path.  This is the expectation.  However, if this
						 *      procedure is run against top level views such as those in the Application or Business layers, then the
						 *      results may yield multiple paths as there may be many views to many data sources.
						 **************************************************************************************************************/
						-- If the view is cached, then get the storage data source path
						set cacheStorageDataSourcePath = null;
						set cacheStoragePath = null;
						FOR cc AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceCacheConfigCursor(list.resPath, list.resType) DO
							set cacheStorageDataSourcePath = cc.storageDataSourcePath;
							set cacheStoragePath = cc.storagePath;
						END FOR;

						-- Get the data source name for this resource. There can be a list of data sources
						call /shared/ASAssets/BestPractices_v81/Procedures/getDataSourceName(list.resPath, list.resType, cacheStorageDataSourcePath, excludeDsPathsList, 1, inIgnoreResourceDoesNotExist, debug2, datasourceNameList, datasourcePathList);
						-- Apply double quotes around data source path list when there is more than one path present in the list
						IF (POSITION(&apos;,&apos; IN datasourceNameList) &gt; 0) THEN
							set datasourceNameList = &apos;&quot;&apos;||datasourceNameList||&apos;&quot;&apos;;
						ELSE
							/*****
							 * Extract the remaining source path when the path matches the physical data source location.  The remaining path will be the datasource + children resources.
							 *	This scenario is only true for the Formatting sub-layer when it point directly to the Metadata sub-layer or when the Physical sub-layer points to the Metadata sub-layer.
							 *	All other layers will simply extract based on the folder paths as is.  The Common Model Spreadsheets need to be composed with this in mind since they
							 * 	can contain entries for both Formatting and other layers.  In the example below, the Formating sub-layer is the target layer and the source sub-layer is the
							 * 	Metadata sub-layer.  Therefore, the generateViewsLoop will iterate over the Metadata sub-layer as per the groupId definition and provide a list of children
							 *	tables or procedures.   The getDataSourceName which was executed previously determines the lineage to the Composite data source resource which is used for
							 *	the comparison and extraction of remaining path.  The steps are provided below with example output.
							 *	
							 *	Example Source Path:
							 *		resourcePath=/shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/cisSServerDemoDS/SServerDemoCat/dbo/Customers
							 *
							 *	Example Physical Metadata path:
							 *		datasourcePathList=/shared/ASAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/cisSServerDemoDS
							 *		datasourceNameList=cisSServerDemoDS
							 *		
							 * 		1) RegexPosition - Find the position of the last &apos;/&apos; in the actual data source path and return that position.  
							 *			RegexPosition(datasourcePathList, &apos;\/&apos;, -1))
							 *			e.g. 92 - position of the path just before the data source name
							 *		2) SUBSTRING - Extract the beginning of the data source path just before the data source name. 
							 *			SUBSTRING(datasourcePathList, 1, &lt;RegexPosition_Result&gt;)
							 *			e.g. /shared/aSAssets/BestPractices_v81/DataAbstractionSample/Physical/Metadata/SQLServerSource/
							 *		3) REPLACE - Extract the remaining path by setting the source string part that matches the data source path to a blank.  If it does not match it does not get replaced.
							 *			REPLACE(list.resPath, &lt;SUBSTRING_Result&gt;, &apos;&apos;)
							 *			e.g. cisSServerDemoDS/SServerDemoCat/dbo/Customers - remaining string
							 *		3) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve containerName which is he second occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
							 *			e.g. containerName=dbo
							 *		4) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve parentName which is he third occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
							 *			e.g. parentName=SServerDemoCat
							 *		5) getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0) - Retrieve grandParentName which is he fourth occurrence in the remaining path using the &apos;/&apos; delimiter traversing from the right (end) 
							 *			e.g. grandParentName=cisSServerDemoDS
							******/
--call print(&apos;Extracted_datasourcePathList=&apos;||SUBSTRING(datasourcePathList, 1, RegexPosition(datasourcePathList, &apos;\/&apos;, -1)));
							call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(list.resPath, &apos;F&apos;, resourcePathReserved);
							call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(datasourcePathList, &apos;\/&apos;, -1, pos);
							set resourcePath = REPLACE(resourcePathReserved, SUBSTRING(datasourcePathList, 1, pos), &apos;&apos;);
--call print(&apos;Extracted_resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
							call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 2, 0, containerName);
							call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 3, 0, parentName);
							call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(resourcePath, &apos;R&apos;, &apos;/&apos;, 4, 0, grandParentName);
							set greatGrandParentName = 	&apos;&apos;; -- always initialized to blank for the first row which is the resource row.
							if (containerName is null) then set containerName = &apos;&apos;; end if;
							if (parentName is null) then set parentName = &apos;&apos;;  end if;
							if (grandParentName is null) then set grandParentName = &apos;&apos;;  end if;
						END IF;
--set debug=&apos;Y&apos;;
						if (debug = &apos;Y&apos;) then
							-- Display debug results
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):____sourceFolderPath=&apos;||NVL(sourceFolderPath,&apos;null&apos;));
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):___derivedFilterPath=&apos;||NVL(derivedFilterPath,&apos;null&apos;));
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourcePath=&apos;||list.resPath);	
				   			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__datasourcePathList=&apos;||NVL(datasourcePathList,&apos;null&apos;));	
				   			CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__datasourceNameList=&apos;||NVL(datasourceNameList,&apos;null&apos;));	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH): inProjectFolderName=&apos;||NVL(inProjectFolderName,&apos;null&apos;));	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):greatGrandParentName=&apos;||NVL(greatGrandParentName,&apos;null&apos;));	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_____grandParentName=&apos;||NVL(grandParentName,&apos;null&apos;));	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):__________parentName=&apos;||NVL(parentName,&apos;null&apos;));	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_______containerName=&apos;||NVL(containerName,&apos;null&apos;));	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_______containerType=&apos;||NVL(containerType,&apos;null&apos;));	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourceName=&apos;||list.name);	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):________resourceType=&apos;||list.resType);	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):____________sub_type=&apos;||list.subType);	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;------------------------------------------------------------------------------------------------------&apos;);
						end if;
--set debug=&apos;N&apos;;
						-- Apply reserved list to path
						call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(list.resPath, &apos;F&apos;, resourcePath);

						-- Provides the ability to return metadata on Composite Views (a.k.a. resource type = TABLE).
						IF (list.resType = &apos;TABLE&apos;) THEN
							/* 2016-08-31 mtinius: 
									When generatMode=2 (SELECT *) mode, it is not necessary to select all of the columns except for
									the first null row which provides the TABLE information.   It will be more efficient especially
									with very wide TABLES upwords of 1000+ columns.   CIS will automatically refresh the COLUMN information
									by virtue of the SELECT * statement.										
							*/
							IF (generateViews = 2) THEN
								if (debug = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_EXEC. SELECT * MODE:    list.resType=[&apos;||list.resType||&apos;]  resourcePath=[&apos;||resourcePath||&apos;]&apos;);
								end if;
								-- When generateViews=2 (SELECT *) behavior, then there is no need to retrieve all of the columns 
								--		except for the first null row indicating that the table exists.
								OPEN childResCursor FOR 
									SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
									FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, list.resType)
									WHERE columnName IS NULL;
							ELSE -- Default behavior 
								if (debug = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;   (MATCH):_EXEC. REGULAR MODE:    list.resType=[&apos;||list.resType||&apos;]  resourcePath=[&apos;||resourcePath||&apos;]&apos;);
								end if;
								-- This is the default behavior to select all of the COLUMN rows.
								OPEN childResCursor FOR 
									SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
									FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, list.resType);
							END IF;
/* 								Important Note:  The FIRST ROW FOR a TABLE returns a NULL IN the columnName.  
									This IS used TO determine the start OF a new TABLE.  Don&apos;t change the XSLT -- getResourceResponseXSLT_SQL_TABLE
								   getResourceResponseXSLT_SQL_TABLE returns the following:
									select--&gt; resourceName: RDS_T_FGRT
									select--&gt; resourcePath: /shared/DeutscheBank/Central/RDS3/L4_Physical_Layer/L4_1_Physical_Views/dbInstrument/RDS/RDS_T_FGRT
									select--&gt; resourceType: TABLE
											  subtype: 		SQL_TABLE
											  enabled: 		1
									select--&gt; annotation: 	this is a view comment
											  tableType: 	VIEW
											  sqlText: 		[NULL]
									select--&gt; columnName: 	FGRT_TYP
									select--&gt; columnType: 	VARCHAR(20)
*/
						END IF;

						-- Provides the ability to return metadata on Composite XSLT Procedures (a.k.a. resource type = PROCEDURE).
						IF (list.resType = &apos;PROCEDURE&apos;) THEN
							-- The procedure must return a cursor and it must be the first cursor only
							OPEN childResCursor FOR 
								SELECT resourceName, resourcePath, resourceType, columnName, columnType, annotation
								FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, list.resType, 1)
								WHERE paramDirection = &apos;OUT&apos;;
/* 								Important Note:  The FIRST ROW FOR a TABLE returns a NULL IN the columnName.  
									This IS used TO determine the start OF a new TABLE.  Don&apos;t change the XSLT -- getResourceResponseXSLT_SQL_TABLE
								   getResourceResponseXSLT_SQL_TABLE returns the following:
									select--&gt; resourceName: RDS_T_FGRT
									select--&gt; resourcePath: /shared/DeutscheBank/Central/RDS3/L4_Physical_Layer/L4_1_Physical_Views/dbInstrument/RDS/RDS_T_FGRT
									select--&gt; resourceType: TABLE
									  		  subtype: 		SQL_TABLE
									  		  enabled: 		1
									select--&gt; annotation: 	this is a procedure comment
											  tableType: 	VIEW
											  sqlText: 		[NULL]
									select--&gt; columnName: 	FGRT_TYP
									select--&gt; columnType: 	VARCHAR(20)
*/
						END IF;

						-- Initialize the variables for each loop through a resource
						SET skipIfExists = 0;
						SET columnListStr = &apos;&apos;;
						SET newColumnListStr = &apos;&apos;;
						SET defaultVariableScript = &apos;&apos;;
						SET procInputParamsScript = &apos;&apos;;
						SET childResCursorProcessed = false;
						SET createInputIndexes = &apos;&apos;;
						SET createInputColumns = &apos;&apos;;
						SET lastIndexName = &apos;&apos;;
						SET greatGrandParentName = 	&apos;&apos;; -- always initialized to blank for the first row which is the resource row.
						SET selectScript = &apos;&apos;; 					-- Reset the SQL Script to collect a new set of fields for a new SQL Table View
						SET indexColumnList = &apos; &apos;; -- this needs to start with a space
						if (debug2 = &apos;Y&apos;) then
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;------------------------&apos;);	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos; child resource:&apos;);	
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2, &apos;------------------------&apos;);	
						end if;

						/***********************************************
						 * Loop through the source resource column list
						 ***********************************************/
						childResLoop:
						FOR childRes AS childResCursor DO	  
							SET columnStartTime = CURRENT_TIMESTAMP;
							set childResCursorProcessed = true;
							-- Retrieve the resource row attributes
							set resourceName = childRes.resourceName;
							set resourcePath = childRes.resourcePath;
							set resourceType = childRes.resourceType;
							set columnName = childRes.columnName;
							set columnType = childRes.columnType;
							SET annotation = childRes.annotation;

							-- Print out the resource column
							if (debug2 = &apos;Y&apos;) then
								CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;[childRes] resourceName=&apos;||NVL(resourceName,&apos;null&apos;)||
									&apos;  Type=&apos;||NVL(resourceType,&apos;null&apos;)||&apos;  Column=[&apos;||NVL(columnName,&apos;null&apos;)||&apos;]&apos;);
							end if;

							/*********************************************************************************
							 *********************************************************************************
							 *
							 * First row of cursor is always null indicating start of the resource attributes
							 *
							 *********************************************************************************
							 *********************************************************************************/
							-- Collect the entire list of columns before generating this view
							--    1st row of the TABLE or PROCEDURE
							IF (columnName IS NULL OR columnType = &apos;CURSOR&apos;) THEN 
								set colNum = 0;

								/*****************************************
								 * Get Logical Name of View or Procedure
								 *****************************************/
								-- Logical VIEW/TABLE name is retrieved by the container and source (resource) name
/**********************
 * GETNAME()
 **********************/
								set logicalID = &apos;T&apos;; -- Retrieve table information
								set containerList = NULL;
								set applyReservedWordList = 0;	-- 1=true, apply the reserved word list to the output, 0=false, do not apply reserved word list
								CALL  /shared/ASAssets/BestPractices_v81/Procedures/archive/getName(logicalID, containerList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, resourceName,  null, applyReservedWordList, ConfigParamsVector, containerList, targetResourceName, targetResourceType, transformResourceName, spreadsheetAnnotation, logicalStatus); 
								if (debug3 = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;******getName()******: VIEW:    logicalID=&apos;||logicalID||&apos;  logicalStatus=&apos;||NVL(logicalStatus,&apos;null&apos;)||&apos;  greatGrandParentName=&apos;||NVL(greatGrandParentName,&apos;null&apos;)||&apos;  grandParentName=&apos;||NVL(grandParentName,&apos;null&apos;)||&apos;  parentName=&apos;||NVL(parentName,&apos;null&apos;)||&apos; containerName=&apos;||NVL(containerName,&apos;null&apos;)||&apos;  resourceName=&apos;||NVL(resourceName,&apos;null&apos;)||&apos;  targetResourceName=&apos;||NVL(targetResourceName,&apos;null&apos;)||&apos;  spreadsheetAnnotation=&apos;||NVL(annotation,&apos;null&apos;));
								end if;

								/**************************************************************************************
								 * Resolve the target folder path based on the path derivation of absolute or derived
								 **************************************************************************************
								 *		pathDerivation - the path derivation is either absolute or derived
								 *			Values: &apos;A&apos; or &apos;D&apos;
								 *				&apos;A&apos;=Absolute path as described by targetFolderPath, 
								 *				&apos;D&apos;=(Default setting) Derived from the targetFolderPath + adding on the remaining path from the actual resource after subtracting the sourceFolderPath.
								 *				Example:
								 *	 				sourceFolderPath     = /shared/examples
								 *			 		actual resource path = /shared/examples/ds_orders/customers
								 *			 		targetFolderPath   = /shared/examples/TargetLayer
								 *
								 *				subtract the sourceFolderPath(/shared/examples) from the actual resource path 
								 *				(/shared/examples/ds_orders/customers) to get the derived remaining folder (ds_orders/customers). 
								 *				Apply naming convention rules on each folder part to derive the canonical names for the folders such as (/DataSourceOrders/Customers).
								 *				Take the targetFolderPath (/shared/examples/TargetLayer) and concatenate the remaining folder to arrive at the 
								 *				final dervied target folder (/shared/examples/TargetLayer/DataSourceOrders/Customers)
								 *		resultTargetFolderPath - the resulting target folder path
 								 *		examples:
								 *			when pathDerivation = &apos;A&apos;, 
								 *				result=/shared/ViewGenerator/FormattingLayer
								 *			when pathDerivation = &apos;D&apos; and useAliasRule=1  and caseRule=&apos;C&apos;
								 *				result=/shared/ViewGenerator/FormattingLayer/Inventory/DsInventory
								 *			when pathDerivation = &apos;D&apos; and useAliasRule=0 and caseRule=&apos;O&apos;
								 *				result=/shared/ViewGenerator/FormattingLayer/INVENTORY/ds_inventory
								 *			when pathDerivation = &apos;D&apos; and useAliasRule=1 and caseRule=&apos;O&apos;
								 *				result=/shared/ViewGenerator/FormattingLayer/INVENTORY/ds_inventory
								 ***********************************************************************/
								-- Determine whether the pathDerivation is &apos;A&apos; absolute and based on targetFolderPath only or
								-- it should be &apos;D&apos; derived from targetFolderPath and the actual resource folder.  The default is to derive it.
								SET pathDerivationFlag = TRUE;
								IF (UPPER(startingFolderVector[sfNum].pathDerivation) = &apos;A&apos;) THEN
									SET pathDerivationFlag = FALSE;
								END IF;
								-- Start by setting the result to be the default Target Folder Path as is.
								SET targetFolderPath = startingFolderVector[sfNum].targetFolderPath;

								-- Insure that the Source Folder Path is wholly contained within the Resource Path
								-- It should be because the original acquisition of resources was based on the Source Folder Path
								-- If not, then the result is already set with the Target Folder Path
								IF (POSITION(startingFolderVector[sfNum].sourceFolderPath IN resourcePath) &gt; 0 AND pathDerivationFlag) THEN
									if (debug3 = &apos;Y&apos;) then
										CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: targetFolderPath=&apos;||NVL(targetFolderPath,&apos;null&apos;));
										CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: pathDerivation=&apos;||NVL(startingFolderVector[sfNum].pathDerivation,&apos;null&apos;)||&apos;  pathDerivationFlag=&apos;|| CAST(pathDerivationFlag AS VARCHAR(255)) );
									end if;

									-- Retrieve the non-matching, end portion of the Resource Path
									-- Get the canonical name for each portion of this folder path
									-- Add it on to the end of the Target Folder Path that was passed into this procedure
									CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, remainResourceName, remainFolderPath);
									call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, 2, 0, fcontainerName);
									call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, 3, 0, fparentName);
									call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, 4, 0, fgrandParentName);
									call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, 5, 0, fgreatGrandParentName);
									SET remainFolderPath = SUBSTRING(remainFolderPath,LENGTH(startingFolderVector[sfNum].sourceFolderPath)+1,LENGTH(remainFolderPath));
									if (debug3 = &apos;Y&apos;) then
										CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: remainFolderPath=&apos;||remainFolderPath);
									end if;

									-- Determine the depth of the remaining folder path so that it can be iterated from back to front
									call /shared/ASAssets/BestPractices_v81/Procedures/sqlParser/utility/numOccurrences(&apos;/&apos;, remainFolderPath, numOccurrences);
									/**************************************************************
									 * Loop through the remaining folder path and apply &quot;getName&quot;
									 *   to resolve any alias, case rules when generateMode=&quot;G&quot;
									 *   or spreadsheet lookup rules when generateMode=&quot;R&quot;
									 *************************************************************/
									SET derivedFolderPath = &apos;&apos;;
									SET i = 1;
									WHILE (i &lt;= numOccurrences) DO
										-- Work through the folders in reverse
										call /shared/ASAssets/Utilities/string/getDelimitedOccurrence(remainFolderPath, &apos;R&apos;, &apos;/&apos;, i, 0, fresourceName);
/**********************
 * GETNAME()
 **********************/
										-- 1/24/19 mtinius: Changed to make logicalID = &apos;F&apos; for folder so you can distinguish in getName how to apply prefix/suffix rules for T=table and C=columns.
										set logicalID = &apos;F&apos;; -- Retrieve table information
										SET applyReservedWordList = 0;
										CALL /shared/ASAssets/BestPractices_v81/Procedures/archive/getName(logicalID, containerList, inProjectFolderName, fgreatGrandParentName, fgrandParentName, fparentName, fcontainerName, fresourceName, null, applyReservedWordList, ConfigParamsVector, containerList, folderLogicalName, folderLogicalType, folderTransformation, folderAnnotation, folderLogicalStatus);
										if (debug3 = &apos;Y&apos;) then
											CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;******getName()******: FOLDER:    logicalID=&apos;||logicalID||&apos;  logicalStatus=&apos;||NVL(folderLogicalStatus,&apos;null&apos;)||&apos;  greatGrandParentName=&apos;||NVL(fgreatGrandParentName,&apos;null&apos;)||&apos;  grandParentName=&apos;||NVL(fgrandParentName,&apos;null&apos;)||&apos;  parentName=&apos;||NVL(fparentName,&apos;null&apos;)||&apos; containerName=&apos;||NVL(fcontainerName,&apos;null&apos;)||&apos;  resourceName=&apos;||NVL(fresourceName,&apos;null&apos;)||&apos;  logicalName=&apos;||NVL(folderLogicalName,&apos;null&apos;)||&apos;  logicalType=&apos;||NVL(folderLogicalType,&apos;null&apos;));
										end if;

										IF (folderLogicalName IS NOT NULL AND LENGTH(folderLogicalName) &gt; 0) THEN
											SET derivedFolderPath = &apos;/&apos;||NVL(folderLogicalName,&apos;null&apos;)||derivedFolderPath;
										END IF;
										if (debug3 = &apos;Y&apos;) then
											CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: derivedFolderPath=&apos;||NVL(derivedFolderPath,&apos;null&apos;));
										end if;
										-- Shift the resources in the remaining path is traversed so that the lookup can find the resource when generateMode=&quot;R&quot;
										set fgreatGrandParentName = fgrandParentName;
										set fgrandParentName = fparentName;
										set fparentName = fcontainerName;
										set fcontainerName = fresourceName;
										SET i = i + 1;
									END WHILE;
									-- Make sure there is only a single separator
									SET targetFolderPath = targetFolderPath || derivedFolderPath;	
								END IF;
								if (debug3 = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;resolveTargetFolders:: Resolved Target Folder Path=&apos;||targetFolderPath);
								end if;

								-- set the target resource path
								set targetResourcePath = targetFolderPath||&apos;/&apos;||targetResourceName;
							/*****************************
							 * End Resolve Target Folders
							 *****************************/

								/**************************************************************
								 * Determine resource type (either LINK or TABLE (VIEW))
								 *************************************************************/
								if (generateType = &apos;LINK&apos;) then
									set targetResourceType = &apos;LINK&apos;;	-- Composite link from a published data service to a resource in /shared folder structure.
								else
									set targetResourceType = &apos;TABLE&apos;;	-- Composite table/view type of resource found in /shared folder structure.
								end if;

								/**************************************************************
								 * Determine overwrite
								 **************************************************************
								 *  Throw an error when (overwrite = 0 or 1) and resource exists
								 *    0=&quot;FAIL_IF_EXISTS&quot;
								 *    1=&quot;SKIP_IF_EXISTS&quot;
								 *************************************************************/
								-- Determine if the resource exists
								call /lib/resource/ResourceExists(targetResourcePath, targetResourceType, null, resourceExists);
								-- 2014-08-04: mtinius - added check to see if a dependent resource already exists in the target namespace.
								set dependentResourceList = &apos;&apos;;
    							FOR dep AS 
									SELECT * FROM /shared/ASAssets/Utilities/repository/getDependentResourcesCursor(resourcePath, resourceType) 
									WHERE REPLACE(resourcePath, &apos;/&apos;||resourceName, &apos;&apos;) = targetFolderPath
								DO
									set dependentResourceList = dependentResourceList || dep.resourcePath ||&apos;,&apos;;
								END FOR;

								-- When overwrite = 0 or 1 and a resource dependent exists or the actual resource exists determine
								IF ((overwrite = 0 or overwrite = 1) and (LENGTH(dependentResourceList) &gt; 0 OR resourceExists)) THEN    
									set message = &apos;&apos;;	
									if (LENGTH(dependentResourceList) &gt; 0) then
										set message = &apos;Dependent resource exists: &apos;||NVL(dependentResourceList,&apos;null&apos;);
									end if;
									if (resourceExists) then
										if (LENGTH(message) &gt; 0) then
											set message = message || &apos;  &apos;;
										end if;
										set message = message || &apos;Target resource exists.&apos;;
									end if;
									if (LENGTH(message) &gt; 0) then
										set message = message || &apos;  &apos;;
									end if;
									set message = message || &apos;targetResourcePath=&apos;||NVL(targetResourcePath,&apos;null&apos;);

									-- Determine whether to throw an exception or deliver a SKIPPED: message with qualifier message text.
									if (overwrite = 0) then
										raise ex value &apos;Operation not permitted.  Overwrite=0 (false). &apos;||message;
									else
										set skipIfExists = 1;
										set logicalStatus = SUBSTRING(&apos;SKIPPED: &apos;||NVL(message,&apos;null&apos;),1,LOGICAL_STATUS_MAX_LEN);
									end if;
								END IF;

								/**************************************************************
								 * Determine if any more procesing should be done
								 *************************************************************/
								if (skipIfExists = 1) then
									/**************************************************************
									 * INSERT: Return the resource information with status
									 *************************************************************/
									set duration = CURRENT_TIMESTAMP - viewStartTime;
									if (debugTime = &apos;Y&apos;) then
										CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=0,   RES: view init duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
									end if;
									if (debug3 = &apos;Y&apos;) then
										CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;Leaving childResLoop=&apos;||NVL(logicalStatus,&apos;null&apos;));
									end if;

									INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, containerType, resourceName, targetResourceName, targetResourceType, logicalStatus, targetFolderPath, duration);
									-- Leave the childResLoop as it is not necessary to loop through all of the child columns
									leave childResLoop;
								end if;

								/**************************************************************
								 * LINK: Process the generateLink
								 *************************************************************/
								BEGIN INDEPENDENT TRANSACTION
									-- If generating a link do the following
									if (generateType = &apos;LINK&apos;) then
										if (skipIfExists = 0) then
											-- Create all non-existent folders and copy the privileges from the parent of the targetFolderPath
											-- Be sure and update the folders recursively for privileges
											CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(targetFolderPath, 1, copyPrivilegeMode, success, faultResponse); -- Generate all necessary folders

											call /shared/ASAssets/BestPractices_v81/Procedures/generateLink(resourcePath, resourceType, targetFolderPath, resourceName, overwrite, copyAnnotation, copyPrivilegeMode, success);
											if (success = 0) then
												raise ex value &apos;The link was unable to be created for resourcePath=[&apos;||NVL(resourcePath,&apos;null&apos;)||&apos;]  resourceType=[&apos;||NVL(resourceType,&apos;null&apos;)||&apos;]  targetFolderPath=[&apos;||NVL(targetFolderPath,&apos;null&apos;)||&apos;]&apos;;
											end if;
										end if;
										/**************************************************************
										 * INSERT: Return the resource information with status
										 *************************************************************/
										set duration = CURRENT_TIMESTAMP - viewStartTime;
										if (debugTime = &apos;Y&apos;) then
											CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=0,   RES: view init duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
										end if;

										INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, containerType, resourceName, targetResourceName, targetResourceType, logicalStatus, targetFolderPath, duration);
										-- Leave the childResLoop as it is not necessary to loop through all of the child columns
										leave childResLoop;
									end if;
								EXCEPTION
									ELSE
									raise ex value CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
								END;

/**************************************
 * CODE BEGIN from generateViewsCommon
 **************************************/
							/**************************************************************
							 * TABLE: Process the generateViews
							 *************************************************************/

								/*******************************************************************
								 * Process annotations
								 *******************************************************************/
								-- Determine whether to copy the annotation or not.  Set to empty if user decides not to copy the annotation
								set viewAnnotation = annotation;
								if (copyAnnotation = 0) then
									set viewAnnotation = &apos;&apos;;
								else
									-- if the spreadsheet annotation is not empty then use it, otherwise use the annotation passed in from the resource
									if (spreadsheetAnnotation IS NOT NULL AND LENGTH(&apos;|&apos;||spreadsheetAnnotation||&apos;|&apos;) &gt; 2) then  --notEmpty
--									if (isEmpty(spreadsheetAnnotation) = notEmpty) then
										set viewAnnotation = spreadsheetAnnotation;
									end if;
								end if;
--								call print(&apos;copyAnnotation=&apos;||NVL(copyAnnotation,&apos;null&apos;));
--								call print(&apos;viewAnnotation=&apos;||CAST(XMLTEXT(NVL(viewAnnotation,&apos;null&apos;)) AS LONGVARCHAR));
--								call print(&apos;spreadsheetAnnotation=&apos;||CAST(XMLTEXT(NVL(spreadsheetAnnotation,&apos;null&apos;)) AS LONGVARCHAR));

								/*********************************************
								 * Generate XML input begin for updateResources
								 *********************************************/
								set createInputBegin =
								&apos;&lt;?xml version=&quot;1.0&quot;?&gt;&apos;||NEWLINE||
								&apos;&lt;resource:updateResources xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot;&gt;&apos;||NEWLINE||
								&apos;   &lt;resource:resources&gt;&apos;||NEWLINE||
								&apos;	&lt;resource:resource xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:type=&quot;resource:tableResource&quot;&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:name&gt;&apos;||CAST(XMLTEXT(targetResourceName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:path&gt;&apos;||CAST(XMLTEXT(targetResourcePath) AS LONGVARCHAR)||&apos;&lt;/resource:path&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:type&gt;TABLE&lt;/resource:type&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:subtype&gt;SQL_TABLE&lt;/resource:subtype&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:ownerDomain&gt;composite&lt;/resource:ownerDomain&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:ownerName&gt;admin&lt;/resource:ownerName&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:impactLevel&gt;NONE&lt;/resource:impactLevel&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:enabled&gt;true&lt;/resource:enabled&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(NVL(viewAnnotation,&apos;null&apos;)) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
								&apos;		&lt;resource:columns&gt;&apos;||NEWLINE;

								/*******************************************************************
								 * SOURCE=TABLE
								 * Generate from clause for the target view.
								 *******************************************************************/
								if (resourceType = &apos;TABLE&apos;) then
									-- Put quotes around &quot;_folder&quot; or &quot;1_folder&quot; but in a way that it is not hard-coded if _ or 0-9 exists in the first charcater of the folder name
									-- Put quotes around a folder portion if it contains &apos;.&apos;,&apos;-&apos; or contains any composite reserved words (see Reference Manual: Consolodated List of Reserved Words)
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(resourceName, null, word);

									-- Generate the from clause
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(resourcePath, &apos;F&apos;, resourcePathReserved);
									SET fromScript = &apos;FROM&apos;|| NEWLINE || TAB || resourcePathReserved || &apos; &apos; || word;
								end if;

								/*******************************************************************
								 * SOURCE=PROCEDURE
								 * Generate view declaration statements and procedure parameters.
								 * Generate from clause for the target view.
								 *******************************************************************/
								if (resourceType = &apos;PROCEDURE&apos;) then
									FOR r as 
										SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, resourceType, 1) 
										WHERE paramDirection = &apos;IN&apos;
									DO
										/* Example of default variable input for a view
											{DECLARE decl_productFilter		VARCHAR DEFAULT null} input_productFilter,
											{DECLARE decl_productIDFilter	BIGINT DEFAULT null} input_productIDFilter,
											{DECLARE decl_unitPriceFilter	DECIMAL(32,6) DEFAULT null} input_unitPriceFilter,
											{DECLARE decl_OrdersRequest 	XML DEFAULT null} input_OrdersRequest,
											{DECLARE decl_inputXML			XML DEFAULT null} input_inputXML,

										  Example of procedure input parameters in a view:
											.../ds_XML/productCatalog_Transformation_input(decl_productFilter, decl_productIDFilter, decl_unitPriceFilter, decl_OrdersRequest, decl_inputXML) productCatalog_Transformation_input
										*/
										-- Add to the list of procedure input parameters
										if (LENGTH(procInputParamsScript) &gt; 0) then
											set procInputParamsScript = procInputParamsScript ||&apos;, &apos;;
										end if;
										set procInputParamsScript = procInputParamsScript ||&apos;decl_&apos;||r.columnName;

										-- Add to the list of default view declaration statements
										-- NOTE:  For xmlType, the columnType for &quot;TYPED&quot; xml variables will contain the following as an example:
										--		/shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
										--      However, Composite does not support this xml definition for Views.  It only supports it for procedures.  
										-- 		Therefore, the columnBaseType of XML must be used for these definitions.
										if (r.dataType = &apos;xmlType&apos;) then
											set defaultVariableScript = defaultVariableScript ||NEWLINE || TAB ||&apos;{DECLARE &apos;||&apos;decl_&apos;||r.columnName||&apos; &apos;||r.columnBaseType||&apos; DEFAULT null} input_&apos;||r.columnName||&apos;,&apos;;
										else
											set defaultVariableScript = defaultVariableScript ||NEWLINE || TAB ||&apos;{DECLARE &apos;||&apos;decl_&apos;||r.columnName||&apos; &apos;||r.columnType||&apos; DEFAULT null} input_&apos;||r.columnName||&apos;,&apos;;
										end if;
									END FOR;
									-- Put quotes around &quot;_folder&quot; or &quot;1_folder&quot; but in a way that it is not hard-coded if _ or 0-9 exists in the first charcater of the folder name
									-- Put quotes around a folder portion if it contains &apos;.&apos;,&apos;-&apos; or contains any composite reserved words (see Reference Manual: Consolodated List of Reserved Words)
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(resourceName, null, word);

									-- Generate the from clause
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(resourcePath, &apos;F&apos;, resourcePathReserved);
									SET fromScript = &apos;FROM&apos;|| NEWLINE || TAB || resourcePathReserved || &apos;(&apos;||procInputParamsScript||&apos;) &apos; || word;
								end if;

								-- Extract any indexes from the source table or view
								--call print(&apos;INDEX: table resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
								set idx = 0;
								FOR r AS 
									SELECT * 
									FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE_SQLINDEXES(resourcePath, resourceType)
								DO
									-- Add the COLUMN_NAME{INDEX_TYPE} to the index column list if it does not exist
									if (POSITION(r.sqlIndexColName||&apos;{&apos; IN indexColumnList) = 0) then
										set indexColumnList = indexColumnList || r.sqlIndexColName || &apos;{&apos;||r.sqlIndexType||&apos;} &apos;;
									else
										-- Get the INDEX_TYPE for the existing COLUMN_NAME
										call /shared/ASAssets/Utilities/string/extractBiDelimitedText(indexColumnList, r.sqlIndexColName, &apos;{&apos;, &apos;}&apos;, 1, 1, 1, indexType);
										-- There should only be one reference to a column across all indexes and the reference should indicate when it is a PRIMARY_KEY vs. OTHER
										--   Replace the COLUMN_NAME{INDEX_TYPE} in the index column list when the INDEX_TYPE != PRIMARY_KEY
										if (indexType != &apos;PRIMARY_KEY&apos; and r.sqlIndexType = &apos;PRIMARY_KEY&apos;) then
											set indexColumnList = REPLACE(indexColumnList, r.sqlIndexColName || &apos;{&apos;||indexType||&apos;} &apos;, r.sqlIndexColName || &apos;{&apos;||r.sqlIndexType||&apos;} &apos;);
										end if;
									end if;

									/*********************************************
									 * Generate Indexes for the target view
									 *********************************************/
									if (generateIndexes = 1) then
--										call print(&apos;INDEX:    resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
										-- Shift the resources in preparation for column processing for index columns
										set igreatGrandParentName = grandParentName;
										set igrandParentName = parentName;
										set iparentName = containerName;
										set icontainerName = resourceName;

										-- Retrieve the logical index column name (logicalSqlIndexColName) from r.sqlIndexColName
/**********************
 * GETNAME()
 **********************/
										set logicalID = &apos;C&apos;; -- Retrieve column information
										SET applyReservedWordList = 0;
										CALL  /shared/ASAssets/BestPractices_v81/Procedures/archive/getName(logicalID, containerList, inProjectFolderName, greatGrandParentName, igrandParentName, iparentName, icontainerName, r.sqlIndexColName,  null, applyReservedWordList, ConfigParamsVector, containerList, logicalSqlIndexColName, logicalType, transformResourceName, spreadsheetAnnotation, logicalStatus); 
										if (debug3 = &apos;Y&apos;) then
											CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;******getName()******: INDEX:    logicalID=&apos;||logicalID||&apos;  logicalStatus=&apos;||NVL(logicalStatus,&apos;null&apos;)||&apos;  greatGrandParentName=&apos;||NVL(greatGrandParentName,&apos;null&apos;)||&apos;  grandParentName=&apos;||NVL(grandParentName,&apos;null&apos;)||&apos;  parentName=&apos;||NVL(parentName,&apos;null&apos;)||&apos; containerName=&apos;||NVL(containerName,&apos;null&apos;)||&apos;  resourceName/r.sqlIndexColName=&apos;||NVL(r.sqlIndexColName,&apos;null&apos;)||&apos;  logicalSqlIndexColName=&apos;||NVL(logicalSqlIndexColName,&apos;null&apos;));
										end if;

										-- Perform additional processing if the logical status of the resource is not &apos;DROPPED&apos;
										-- 		Note: There are no annotations for indexes.
										IF (logicalStatus &lt;&gt; &apos;DROPPED&apos;) THEN 
											IF (r.sqlIndexName != lastIndexName) then
												-- Close out the previous index XML
												IF (idx &gt; 0) THEN
													set createInputIndexes = createInputIndexes ||
													&apos;					&lt;/resource:columns&gt;&apos;||NEWLINE||
													&apos;				&lt;/resource:index&gt;&apos;||NEWLINE;
												END IF;

												-- Determine whether it is unique or not
												IF (r.sqlIndexUnique = 1) THEN 					
													set uniqueIndex = &apos;true&apos;;
												ELSE
													set uniqueIndex = &apos;false&apos;;
												END IF;

												-- Start the index text
												set createInputIndexes = createInputIndexes || 
										&apos;				&lt;resource:index&gt;&apos;||NEWLINE||
										&apos;					&lt;resource:name&gt;&apos;||CAST(XMLTEXT(r.sqlIndexName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE||
										&apos;					&lt;resource:type&gt;&apos;||CAST(XMLTEXT(r.sqlIndexType) AS LONGVARCHAR)||&apos;&lt;/resource:type&gt;&apos;||NEWLINE||
										&apos;					&lt;resource:unique&gt;&apos;||CAST(XMLTEXT(uniqueIndex) AS LONGVARCHAR)||&apos;&lt;/resource:unique&gt;&apos;||NEWLINE||
										&apos;					&lt;resource:columns&gt;&apos;||NEWLINE;
												set idx = 1;
											ELSE
												set idx = idx + 1;
											END IF;

											-- Set the columns
											set createInputIndexes = createInputIndexes ||
										&apos;						&lt;column&gt;&apos;||NEWLINE||
										&apos;							&lt;resource:name&gt;&apos;||CAST(XMLTEXT(logicalSqlIndexColName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE||
										&apos;							&lt;resource:order&gt;&apos;||CAST(XMLTEXT(r.sqlIndexColOrder) AS LONGVARCHAR)||&apos;&lt;/resource:order&gt;&apos;||NEWLINE||
										&apos;						&lt;/column&gt;&apos;||NEWLINE;
											set lastIndexName = r.sqlIndexName;
										END IF;
									END IF;
								END FOR;

								-- Close out the index XML
								IF (generateIndexes = 1 and idx &gt; 0) THEN
									set createInputIndexes = createInputIndexes ||
									&apos;					&lt;/resource:columns&gt;&apos;||NEWLINE||
									&apos;				&lt;/resource:index&gt;&apos;||NEWLINE;
								END IF;
								set idx = 0; -- reinitialize idx back to 0
								--call print(&apos;createInputIndexes=&apos;||NVL(createInputIndexes,&apos;null&apos;));

								/**************************************************************************
								 * If Retrieval is on, get the list of &quot;NEW&quot; columns from the spreadsheet
								 **************************************************************************/
								-- Retrieve the new columns at the beginning of the view in preparation for checking for duplicates as the columns are processed.
								IF (generateMode = &apos;R&apos;) THEN
									-- Perform the shift of columns within the context of invoking retrieveNewColumnList: inProjectFolderName, greatGrandParentName, grandParentName, parentName,    containerName, debug3, newColumnListCursor
									call /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/retrieveNewColumnList(inProjectFolderName, grandParentName,      parentName,      containerName, resourceName,  debug3, newColumnListCursor);
									/*	OUT resultCursor	CURSOR (
										datasourceName 			VARCHAR(255), 
										projectFolderName 		VARCHAR(255), 
										greatGrandParentName 	VARCHAR(255), 
										grandParentName 		VARCHAR(255), 
										parentName 				VARCHAR(255), 
										containerName 			VARCHAR(255), 
										resourceName 			VARCHAR(255),
										resourceNum				INTEGER, 
										logicalName 			VARCHAR(255), 		
										logicalType 			VARCHAR(255), 		
										annotation 				VARCHAR(32767), 	
										compositeTransformation VARCHAR(32767),		
										resourceNameEncoded		VARCHAR(255)    )
									*/
									FOR newColumn AS newColumnListCursor DO
										set newColumnListStr = newColumnListStr || NVL(newColumn.logicalName,&apos;null&apos;)||&apos;|&apos;;
									END FOR;
								END IF;

								/**************************************************************
								 * INSERT: Return the resource information with status
								 *************************************************************/
								set duration = CURRENT_TIMESTAMP - viewStartTime;
								if (debugTime = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=0,   RES: view init duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
								end if;

								INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, containerType, resourceName, targetResourceName, targetResourceType, logicalStatus, targetFolderPath, duration);

								/************************************************************
								 * Shift the resources in preparation for column processing
								 ************************************************************/
								set greatGrandParentName = grandParentName;
								set grandParentName = parentName;
								set parentName = containerName;
								set containerName = resourceName;

								SET duration = CURRENT_TIMESTAMP - columnStartTime;
								if (debugTime = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;         first row duration=&apos;||cast(duration as varchar));
								end if;

	/*********************************************************************************
	 *********************************************************************************
	 *
	 * COLUMN PROCESSING:  Subsequent row of the TABLE or PROCEDURE with the column list
	 *
	 *********************************************************************************
	 *********************************************************************************/
							ELSE
								set colNum = colNum + 1;

								-- Set the containerType
								SET containerType = list.resType;

								set tempStartTime = CURRENT_TIMESTAMP;
								-- Unique name is retrieved by the container and source (resource) name
/**********************
 * GETNAME()
 **********************/
								set logicalID = &apos;C&apos;; -- Retrieve column information
								SET applyReservedWordList = 1;
								CALL  /shared/ASAssets/BestPractices_v81/Procedures/archive/getName(logicalID, containerList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName,  columnName, columnType, applyReservedWordList, ConfigParamsVector, containerList, logicalColumnName, logicalType, transformResourceName, spreadsheetAnnotation, logicalStatus);
								if (debug3 = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;******getName()******: COLUMNS:    logicalID=&apos;||logicalID||&apos;  logicalStatus=&apos;||NVL(logicalStatus,&apos;null&apos;)||&apos;  greatGrandParentName=&apos;||NVL(greatGrandParentName,&apos;null&apos;)||&apos;  grandParentName=&apos;||NVL(grandParentName,&apos;null&apos;)||&apos;  parentName=&apos;||NVL(parentName,&apos;null&apos;)||&apos; containerName=&apos;||NVL(containerName,&apos;null&apos;)||&apos;  columnName=&apos;||NVL(columnName,&apos;null&apos;)||&apos;  logicalColumnName=&apos;||NVL(logicalColumnName,&apos;null&apos;));
								end if;
								SET duration = CURRENT_TIMESTAMP - tempStartTime;
								if (debugTime = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;         getName duration=&apos;||cast(duration as varchar)||&apos;  logicalColumnName=&apos;||NVL(logicalColumnName,&apos;null&apos;));
								end if;

								-- 2014-08-04 mtinius: 
								--    When generate mode is G or R and the column is contained within an index then don&apos;t create a CAST() transformation because this will affect push-down query performance.
								set transformResourceNameOrig = null;
								set indexColPos = POSITION(&apos; &apos;||columnName||&apos;{&apos; IN indexColumnList);
								if ((generateMode = &apos;G&apos; or generateMode = &apos;R&apos;)
									and generateCast &gt;= 2	-- see comments below for values
									and indexColPos &gt; 0) 	-- the column name was found in the index list
								then
									--	0=Do not generate CAST statement.  Pass through column as is.  Default behavior.
									-- 	1=Generate the CAST statement around the column
									--	2-Generate the CAST statement around the non-index columns only (No CAST on index columns)
									--	3-Generate the CAST statement around the non-index columns only and generate a &quot;display&quot; CAST column for each index column.  (No CAST o nindex columns)
									--	4-Generate the CAST statement around the non-index columns and non-primary key index columns only (No CAST on primary key index columns)
									--	5-Generate the CAST statement around the non-index columns and non-primary key index columns only and generate a &quot;display&quot; CAST column for each primary key index column.  (No CAST on primary key index columns)
									call /shared/ASAssets/Utilities/string/extractBiDelimitedText(indexColumnList, columnName, &apos;{&apos;, &apos;}&apos;, 1, 1, 1, indexType);
									--call print(&apos;columnName=&apos;||columnName||&apos;  indexType=&apos;||indexType||&apos;  indexColumnList=&apos;||indexColumnList);
									set indexType = NVL(indexType, &apos; &apos;); -- this is just a safeguard to protect against null
									-- This saves the original transformation so it can be used for a CAST on the &quot;display&quot; column
									if (generateCast = 3 or (generateCast = 5 and indexType = &apos;PRIMARY_KEY&apos;)) then
										set transformResourceNameOrig = transformResourceName;
									end if;
									-- This insures that there is no CAST statement applied in these scenarios
									if (generateCast = 2 or generateCast = 3 or (generateCast = 4 and indexType = &apos;PRIMARY_KEY&apos;) or (generateCast = 5 and indexType = &apos;PRIMARY_KEY&apos;)) then
										set transformResourceName = &apos;&apos;;
									end if;
									--call print(&apos;transformResourceNameOrig=&apos;||NVL(transformResourceNameOrig,&apos;null&apos;)||&apos;  indexType=&apos;||indexType||&apos;   indexColumnList=&apos;||indexColumnList);
								end if;

								-- Determine whether to copy the annotation or not.  Set to empty if user decides not to copy the annotation
								set columnAnnotation = annotation;
								if (copyAnnotation = 0) then
									set columnAnnotation = &apos;&apos;;
								else
									-- if the spreadsheet annotation is not empty then use it, otherwise use the annotation passed in from the resource
									if (spreadsheetAnnotation IS NOT NULL AND LENGTH(&apos;|&apos;||spreadsheetAnnotation||&apos;|&apos;) &gt; 2) then  --notEmpty
--									if (isEmpty(spreadsheetAnnotation) = notEmpty) then
										set columnAnnotation = spreadsheetAnnotation;
									end if;
								end if;
								--call print(&apos;columnAnnotation=&apos;||CAST(XMLTEXT(NVL(columnAnnotation,&apos;null&apos;)) AS LONGVARCHAR));
								--call print(&apos;spreadsheetAnnotation=&apos;||CAST(XMLTEXT(NVL(spreadsheetAnnotation,&apos;null&apos;)) AS LONGVARCHAR));

								-- If the logicalType is empty use the physical column type otherwise use the logical type.
								if (logicalType IS NULL OR LENGTH(&apos;|&apos;||logicalType||&apos;|&apos;) = 2) then  --Empty
--								if (isEmpty(logicalType) = Empty) then
									set logicalType = columnType;
								end if;
								call /shared/ASAssets/BestPractices_v81/Procedures/isUnsupportedColumnType(logicalType, isUnsupportedColumnType);
								if ((generateUnsupportedColumnType is null or generateUnsupportedColumnType = 0) and isUnsupportedColumnType = 1) then
									set logicalStatus = &apos;DROPPED&apos;;
								end if;

								-- Add the column to the list as long as it is not reported as [DROPPED]				
								IF (logicalStatus &lt;&gt; &apos;DROPPED&apos;) THEN 
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(resourceName, null, reservedResourceName);
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(columnName, null, columnName2);

									-- Check for a transformation else just add the column
									IF (POSITION(&apos;?&apos; IN transformResourceName) &gt; 0) THEN
										SET transformResourceName = REPLACE(transformResourceName, &apos;?&apos;, reservedResourceName ||&apos;.&apos;|| columnName2);
									ELSE
										SET transformResourceName = reservedResourceName ||&apos;.&apos;|| columnName2;
									END IF;
									-- Format the SELECT statement so that each column is on it&apos;s own line
									set logicalColumnNameOrig = logicalColumnName;

									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalColumnName, null, logicalColumnName);
									-- Check Duplicate Column Alias or Name
									--     mtinius: 2013/10/03
									--     Determine if a column alias or column name is a duplicate from the source.
									--     Take into account the possibility that the spreadsheet may contain an alias that already resolve the duplicate name.
									--     Append a sequential numerical value to the end of the alias &quot;logicalColumnName&quot; that is returned.
--call print(&apos;&apos;);
--call print(&apos;Retrieve Existing Column List: &apos;);
--call print(&apos;checkDuplicateColumn IN: columnListStr=&apos;||columnListStr);
--call print(&apos;checkDuplicateColumn IN: newColumnListStr=&apos;||NVL(newColumnListStr,&apos;null&apos;));
--call print(&apos;checkDuplicateColumn IN: columnName2=&apos;||columnName2);
--call print(&apos;checkDuplicateColumn IN: logicalColumnName=&apos;||logicalColumnName);
									-- A column alias was found so use it as the column alias to return
									if (logicalColumnName is not null and LENGTH(logicalColumnName) &gt; 0) then
										set checkDupColumnOrAlias = logicalColumnName;
									else
										-- otherwise the column alias was not found so the column name should be set as the alias to be returned
										set checkDupColumnOrAlias = columnName2;
									end if;
									call /shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn(columnListStr, newColumnListStr, checkDupColumnOrAlias, columnListStr, logicalColumnName, dropColumn);
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalColumnName, null, logicalColumnName);
--call print(&apos;checkDuplicateColumn OUT: columnListStr=&apos;||columnListStr);
--call print(&apos;checkDuplicateColumn OUT: logicalColumnName=&apos;||logicalColumnName);

									IF (dropColumn = 0) THEN
									/***********************************************
									 * Compose the SQL Script and Column List
									 ***********************************************/
										-- Append the column to the SQL Script
										SET selectScript = selectScript||TAB|| transformResourceName ||&apos; &apos;|| logicalColumnName ||&apos;,&apos;||NEWLINE;
										set createInputColumns = createInputColumns ||
											&apos;				&lt;resource:column&gt;&apos;||NEWLINE||
											&apos;					&lt;resource:name&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalColumnName,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE;

										if (logicalType IS NOT NULL AND LENGTH(&apos;|&apos;||logicalType||&apos;|&apos;) &gt; 2) then  --notEmpty
--										if (isEmpty(logicalType) = notEmpty) then
											set createInputColumns = createInputColumns ||
											&apos;					&lt;resource:dataType&gt;&apos;||NEWLINE||
											&apos;						&lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||NEWLINE||
											&apos;							&lt;common:definition&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalType,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||NEWLINE||
											&apos;						&lt;/common:sqlType&gt;&apos;||NEWLINE||
											&apos;					&lt;/resource:dataType&gt;&apos;||NEWLINE;
										end if;
										set createInputColumns = createInputColumns ||
											&apos;					&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(columnAnnotation,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
											&apos;				&lt;/resource:column&gt;&apos;||NEWLINE;

										-- 2014-08-04 mtinius: 
										--		Added features for generateCast=3 and 5 to create a display column with original casting for the column that had an index
										if ((generateMode = &apos;G&apos; or generateMode = &apos;R&apos;)		-- Perform this operation for either &quot;G&quot;enerating views or &quot;R&quot;etrieving views
											and (generateCast = 3 or generateCast = 5)		-- 3=generate a display column for all indexes, 5=generate a display column for PK indexes only
											and indexColPos &gt; 0								-- the columnName was found in the indexColumnList
											and transformResourceNameOrig is not null)  	-- only generate a display column when the original column transformation was saved
										then 	-- &apos;G&apos; or &apos;R&apos; and column is an index
											-- Check for a transformation else just add the column
											IF (POSITION(&apos;?&apos; IN transformResourceNameOrig) &gt; 0) THEN
												SET transformResourceNameOrig = REPLACE(transformResourceNameOrig, &apos;?&apos;, reservedResourceName ||&apos;.&apos;|| columnName2);
											ELSE
												SET transformResourceNameOrig = reservedResourceName ||&apos;.&apos;|| columnName2;
											END IF;

											-- Format the SELECT statement so that each column is on it&apos;s own line
											call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalColumnNameOrig || logicalSuffixName, null, logicalColumnNameOrig);

											SET selectScript = selectScript||TAB|| transformResourceNameOrig ||&apos; &apos;|| logicalColumnNameOrig ||&apos;,&apos;||NEWLINE;
											set createInputColumns = createInputColumns ||
												&apos;				&lt;resource:column&gt;&apos;||NEWLINE||
												&apos;					&lt;resource:name&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalColumnNameOrig,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE;

											if (logicalType IS NOT NULL AND LENGTH(&apos;|&apos;||logicalType||&apos;|&apos;) &gt; 2) then  --notEmpty
--											if (isEmpty(logicalType) = notEmpty) then
												set createInputColumns = createInputColumns ||
												&apos;					&lt;resource:dataType&gt;&apos;||NEWLINE||
												&apos;						&lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||NEWLINE||
												&apos;							&lt;common:definition&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalType,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||NEWLINE||
												&apos;						&lt;/common:sqlType&gt;&apos;||NEWLINE||
												&apos;					&lt;/resource:dataType&gt;&apos;||NEWLINE;
											end if;
											set createInputColumns = createInputColumns ||
												&apos;					&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(columnAnnotation,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
												&apos;				&lt;/resource:column&gt;&apos;||NEWLINE;
										end if;
									ELSE
										set logicalStatus = &apos;DROPPED&apos;;
									END IF; -- IF (dropColumn=0) THEN
								END IF; -- IF (logicalStatus &lt;&gt; &apos;DROPPED&apos;) THEN 

								/****************************************************
								 * INSERT: Return the column information with status
								 ****************************************************/
								set duration = CURRENT_TIMESTAMP - viewStartTime;
								set colDuration = CURRENT_TIMESTAMP - columnStartTime;
								-- Report on all columns and their possible status [GENERATED, FOUND, UNCHANGED, DROPPED]
								IF (outputMode = &apos;A&apos;) THEN
			--------- INSERT ---------
									INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnType, columnName, logicalColumnName, logicalType, logicalStatus, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);

									-- 2014-08-04 mtinius: Create a display column with original casting for the column that had an index
									if ((generateMode = &apos;G&apos; or generateMode = &apos;R&apos;)		-- Perform this operation for either &quot;G&quot;enerating views or &quot;R&quot;etrieving views
										and (generateCast = 3 or generateCast = 5)		-- 3=generate a display column for all indexes, 5=generate a display column for PK indexes only
										and indexColPos &gt; 0								-- the columnName was found in the indexColumnList
										and transformResourceNameOrig is not null)  	-- only generate a display column when the original column transformation was saved
									then 	-- &apos;G&apos; or &apos;R&apos; and column is an index
			--------- INSERT ---------
										INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnType, columnName, logicalColumnNameOrig, logicalType, logicalStatus, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);
									end if;
								ELSE -- otherwise only report on columns when their status is [UNCHANGED or DROPPED]
									IF (outputMode = &apos;U&apos; AND (logicalStatus = &apos;UNCHANGED&apos; OR logicalStatus = &apos;DROPPED&apos;)) THEN
			--------- INSERT ---------
										INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnType, columnName, logicalColumnName, logicalType, logicalStatus, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);
									END IF;
								END IF;
								if (debug3 = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, RPAD(&apos;RESOURCE=[&apos;||resourceName||&apos;]&apos;,padAmount,padChar) ||&apos;  &apos;||RPAD(&apos;COLUMN=[&apos;||columnName||&apos;]&apos;,padAmount,padChar) || RPAD(&apos;  LOGICAL=[&apos;||logicalColumnName||&apos;]&apos;,padAmount,padChar) || logicalStatus);
								end if;
								if (debugTime = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=&apos;||colNum||&apos;, EXIST: incremental duration=&apos;||cast(duration as varchar)||&apos;  colDuration=&apos;||cast(colDuration as varchar)||&apos;  resourceName=&apos;||columnName);
								end if;
/**********************************
 * CODE END from generateViewsCommon
 **********************************/
							END IF;   	    
						END FOR;

	/*********************************************************************************
	 *********************************************************************************
	 *
	 * Create the target folders and view
	 *
	 *********************************************************************************
	 *********************************************************************************/
						BEGIN INDEPENDENT TRANSACTION
						if (childResCursorProcessed and generateType = &apos;VIEW&apos;) then
/**************************************
 * CODE BEGIN from generateViewsCommon
 **************************************/ 

							/**************************************************************************
							 * If Retrieval is on, generate the list of &quot;NEW&quot; columns from the newColumnList variable
							 **************************************************************************/
							/* 2019-01-24 mtinius: 
									Add new columns from the newColumnList variables.  Extract from the format below:
									Format: column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3									
							*/
							-- Add New Columns to the end of the View. 
							IF (generateMode = &apos;G&apos; AND newColumnList IS NOT NULL AND LENGTH(TRIM(newColumnList)) &gt; 0) THEN
								FOR c AS
									SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(newColumnList,&apos;//&apos;,0,0,0,1,0) 
										WHERE object IS NOT NULL AND length(object) &gt; 0
								DO
									-- Set the start time for the column
									set columnStartTime = CURRENT_TIMESTAMP;
									-- Increment the column number
									set colNum = colNum + 1;
									SET newColumnName = null;
									SET newColumnType = null;
									SET newColumnValue = null;
									SET k = 0;
									FOR item AS
										SELECT * FROM /shared/ASAssets/Utilities/string/extractDelimitedText(c.object,&apos;&amp;&amp;&apos;,0,0,0,1,0) 
											WHERE object IS NOT NULL AND length(object) &gt; 0
									DO
										SET k = k + 1;
										CASE 
											WHEN k = 1 THEN set newColumnName = item.object;
											WHEN k = 2 THEN set newColumnType = item.object;
											WHEN k = 3 THEN set newColumnValue = item.object;
										END CASE;
									END FOR;
									IF (newColumnName IS NOT NULL AND newColumnType IS NOT NULL AND newColumnValue IS NOT NULL) THEN
										IF ((INSTR(UPPER(newColumnType), &apos;CHAR&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;TIMESTAMP&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;DATE&apos;) &gt; 0 OR INSTR(UPPER(newColumnType), &apos;TIME&apos;) &gt; 0) AND
											(UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_TIMESTAMP&apos; AND UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_DATE&apos; AND UPPER(newColumnValue) &lt;&gt; &apos;CURRENT_TIME&apos;)) THEN
											SET newColumnTransformation = &apos;CAST(&apos;&apos;&apos;||newColumnValue||&apos;&apos;&apos; AS &apos;||newColumnType||&apos;)&apos;;
										ELSE
											SET newColumnTransformation = &apos;CAST(&apos;||newColumnValue||&apos; AS &apos;||newColumnType||&apos;)&apos;;
										END IF;
	
										-- Determine if the LogicalName column is a duplicate and add a sequence number to it if it is.
										call /shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn(columnListStr, null, newColumnName, columnListStr, newColumnName, dropColumn);
										call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(newColumnName, null, newColumnName);
										--call print(&apos;columnListStr=&apos;||columnListStr);

										-- Format the SELECT statement so that each column is on it&apos;s own line
										SET selectScript = selectScript||TAB|| newColumnTransformation ||&apos; &apos;|| newColumnName ||&apos;,&apos;||NEWLINE;	
										SET columnAnnotation = &apos;&apos;;
	
										IF (dropColumn = 0) THEN									
											set createInputColumns = createInputColumns ||
												&apos;				&lt;resource:column&gt;&apos;||NEWLINE||
												&apos;					&lt;resource:name&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(newColumnName,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE;
		
											if (newColumnType IS NOT NULL AND LENGTH(&apos;|&apos;||newColumnType||&apos;|&apos;) &gt; 2) then  --notEmpty
--											if (isEmpty(newColumnType) = notEmpty) then
												set createInputColumns = createInputColumns ||
												&apos;					&lt;resource:dataType&gt;&apos;||NEWLINE||
												&apos;						&lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||NEWLINE||
												&apos;							&lt;common:definition&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(newColumnType,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||NEWLINE||
												&apos;						&lt;/common:sqlType&gt;&apos;||NEWLINE||
												&apos;					&lt;/resource:dataType&gt;&apos;||NEWLINE;
											end if;
											set createInputColumns = createInputColumns ||
												&apos;					&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(columnAnnotation,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
												&apos;				&lt;/resource:column&gt;&apos;||NEWLINE;

											-- Report on all new columns with a status of [FOUND]
											set duration = CURRENT_TIMESTAMP - viewStartTime;
											set colDuration = CURRENT_TIMESTAMP - columnStartTime;
											if (debugTime = &apos;Y&apos;) then
												CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=&apos;||colNum||&apos;,   NEW: incremental duration=&apos;||cast(duration as varchar)||&apos;  colDuration=&apos;||cast(colDuration as varchar)||&apos;  resourceName=&apos;||logicalColumnName);
											end if;
											IF (outputMode = &apos;A&apos;) THEN
								--------- INSERT ---------
												INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, &apos;&apos;, newColumnTransformation, newColumnName, newColumnType, &apos;GENERATED&apos;, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);
											END IF;
										END IF; -- IF (dropColumn = 0) THEN
									END IF; -- IF (newColumnName IS NOT NULL AND newColumnType IS NOT NULL AND newColumnValue IS NOT NULL) THEN
								END FOR; -- FOR c AS
							END IF; -- IF (generateMode = &apos;G&apos; AND newColumnList IS NOT NULL AND LENGTH(TRIM(newColumnList)) &gt; 0) THEN


							/**************************************************************************
							 * If Retrieval is on, get the list of &quot;NEW&quot; columns from the spreadsheet
							 **************************************************************************/
							/* 2016-08-31 mtinius: 
									Retrieval of spreadsheet columns is not required when generateViews=2
									since there is no projection of columns when doing SELECT * mode.
									Added &quot;AND generateViews = 1&quot; to the IF THEN statement.									
							*/
							IF (generateMode = &apos;R&apos; AND generateViews = 1) THEN
								call /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/retrieveNewColumnList(inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, debug3, newColumnListCursor);
								FOR newColumn AS newColumnListCursor DO
									/*	OUT resultCursor	CURSOR (
										datasourceName 			VARCHAR(255), 
										projectFolderName 		VARCHAR(255), 
										greatGrandParentName 	VARCHAR(255), 
										grandParentName 		VARCHAR(255), 
										parentName 				VARCHAR(255), 
										containerName 			VARCHAR(255), 
										resourceName 			VARCHAR(255),
										resourceNum				INTEGER, 
										logicalName 			VARCHAR(255), 		x
										logicalType 			VARCHAR(255), 		x
										annotation 				VARCHAR(32767), 	x
										logicalTransformation 	VARCHAR(32767),		x
										resourceNameEncoded		VARCHAR(255)    )
									*/
									-- Set the start time for the column
									set columnStartTime = CURRENT_TIMESTAMP;
									-- Increment the column number
									set colNum = colNum + 1;
 									-- Replace symbols on the annotation
									CALL /shared/ASAssets/BestPractices_v81/Procedures/retrieveName/replaceSymbol(&apos;F&apos;, newColumn.annotation, spreadsheetAnnotation);
									-- Apply the reserved word to the logical column name
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(newColumn.logicalName, null, logicalColumnName);

									-- mtinius: 2013/10/03
									-- Determine if a column alias or column name is a duplicate.
									-- Append a sequential numerical value to the end of the alias &quot;logicalColumnName&quot; that is returned.
--call print(&apos;&apos;);
--call print(&apos;Retrieve New Column List: &apos;);
--call print(&apos;checkDuplicateColumn IN: columnListStr=&apos;||columnListStr);
--call print(&apos;checkDuplicateColumn IN: logicalColumnName=&apos;||logicalColumnName);
									call /shared/ASAssets/BestPractices_v81/Procedures/checkDuplicateColumn(columnListStr, null, logicalColumnName, columnListStr, logicalColumnName, dropColumn);
									call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToWord(logicalColumnName, null, logicalColumnName);
--call print(&apos;checkDuplicateColumn OUT: columnListStr=&apos;||columnListStr);
--call print(&apos;checkDuplicateColumn OUT: logicalColumnName=&apos;||logicalColumnName);

									-- Format the SELECT statement so that each column is on it&apos;s own line
									SET selectScript = selectScript||TAB|| newColumn.logicalTransformation ||&apos; &apos;|| logicalColumnName ||&apos;,&apos;||NEWLINE;	

									-- Determine whether to copy the annotation or not.  Set to empty if user decides not to copy the annotation
									set columnAnnotation = spreadsheetAnnotation;
									if (copyAnnotation = 0) then
										set columnAnnotation = &apos;&apos;;
									end if;
									--call print(&apos;columnAnnotation=&apos;||CAST(XMLTEXT(NVL(columnAnnotation,&apos;null&apos;)) AS LONGVARCHAR));
									--call print(&apos;spreadsheetAnnotation=&apos;||CAST(XMLTEXT(NVL(spreadsheetAnnotation,&apos;null&apos;)) AS LONGVARCHAR));

									set createInputColumns = createInputColumns ||
										&apos;				&lt;resource:column&gt;&apos;||NEWLINE||
										&apos;					&lt;resource:name&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(logicalColumnName,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||NEWLINE;

									if (logicalType IS NOT NULL AND LENGTH(&apos;|&apos;||logicalType||&apos;|&apos;) &gt; 2) then  --notEmpty
--									if (isEmpty(logicalType) = notEmpty) then
										set createInputColumns = createInputColumns ||
										&apos;					&lt;resource:dataType&gt;&apos;||NEWLINE||
										&apos;						&lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||NEWLINE||
										&apos;							&lt;common:definition&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(newColumn.logicalType,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||NEWLINE||
										&apos;						&lt;/common:sqlType&gt;&apos;||NEWLINE||
										&apos;					&lt;/resource:dataType&gt;&apos;||NEWLINE;
									end if;
									set createInputColumns = createInputColumns ||
										&apos;					&lt;resource:annotation&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(columnAnnotation,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/resource:annotation&gt;&apos;||NEWLINE||
										&apos;				&lt;/resource:column&gt;&apos;||NEWLINE;


									if (debug3 = &apos;Y&apos;) then
										CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, 
											RPAD(&apos;RESOURCE=[&apos;|| NVL(containerName,&apos;null&apos;)||&apos;]&apos;,padAmount,padChar) ||&apos;  &apos;||
											RPAD(&apos;COLUMN=[&apos;||NVL(newColumn.logicalTransformation,&apos;null&apos;)||&apos;]&apos;,padAmount,padChar) || &apos;  &apos;||
											RPAD(&apos;LOGICAL COL=[&apos;||NVL(logicalColumnName,&apos;null&apos;)||&apos;]&apos;,padAmount,padChar) || 
											RPAD(&apos;LOGICAL TYPE=[&apos;||NVL(newColumn.logicalType,&apos;null&apos;)||&apos;]&apos;,padAmount,padChar) || 
											&apos;STATUS=[&apos;||NVL(logicalStatus,&apos;null&apos;)||&apos;]&apos;);
									end if;
									-- Report on all new columns with a status of [FOUND]
									set duration = CURRENT_TIMESTAMP - viewStartTime;
									set colDuration = CURRENT_TIMESTAMP - columnStartTime;
									if (debugTime = &apos;Y&apos;) then
										CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;row=&apos;||colNum||&apos;,   NEW: incremental duration=&apos;||cast(duration as varchar)||&apos;  colDuration=&apos;||cast(colDuration as varchar)||&apos;  resourceName=&apos;||logicalColumnName);
									end if;
									IF (outputMode = &apos;A&apos;) THEN
						--------- INSERT ---------
										INSERT INTO result VALUES(datasourceNameList, inProjectFolderName, greatGrandParentName, grandParentName, parentName, containerName, columnType, newColumn.logicalTransformation, logicalColumnName, newColumn.logicalType, &apos;FOUND&apos;, targetFolderPath||&apos;/&apos;||NVL(containerName,&apos;null&apos;), duration);
									END IF;
								END FOR;    
							END IF;

							/* 2016-08-31 mtinius: 
									Moved his block of code to occur outside the LENGTH(selectScript) so that generateViews=2
									mode is forced to override the selectScript and perform the resource creation.										
							*/
							-- Update the SQL Table View with the corresponding View SQL to map to the physical Table
							--     1=[default] Do generate - Perform the VIEW Generation with a column projection, 
							--     2=          Do generate - Perform the VIEW Generation with a select * projection, 
							IF (generateViews = 1 AND LENGTH(selectScript) &gt; 0) THEN
								-- remove the last comma in the string
								SET continueLoop = true;
								WHILE (continueLoop) DO
									SET selectScript = TRIM(selectScript);
									SET lastChar = SUBSTRING(selectScript,LENGTH(selectScript),1);
									IF (lastChar = LF OR lastChar = CR OR lastChar = &apos;,&apos;) THEN 
										SET selectScript = SUBSTRING(selectScript,1,LENGTH(selectScript)-1);
									ELSE
										SET continueLoop = false;
									END IF;
								END WHILE;
								SET selectScript = &apos;SELECT &apos;|| defaultVariableScript || NEWLINE || TAB || selectScript || &apos; &apos; || NEWLINE || fromScript;
							END IF;
							IF (generateViews = 2) THEN
								SET selectScript = &apos;SELECT * &apos; || NEWLINE || fromScript;
							END IF;

							-- Make sure there is something to select before creating the view
							SET createResourceStartTime = CURRENT_TIMESTAMP;
							IF (LENGTH(selectScript) &gt; 0) THEN
								if (debug2 = &apos;Y&apos;) then
									-- Log all of the interesting variables
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;targetResourcePath=&apos;||targetResourcePath);
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;  targetFolderPath=&apos;||targetFolderPath);
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;targetResourceName=&apos;||targetResourceName);
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;       logicalType=TABLE&apos;);
								end if;
								if (debug3 = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;  selectScript SQL=&apos;||REPLACE(selectScript, CHR(10), &apos; &apos;));
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;    viewAnnotation=&apos;||TRIM(NVL(viewAnnotation,&apos; &apos;)));
								end if;

/* 2016-08-31 mtinius: commented out - moved block of code up
								-- remove the last comma in the string
								SET continueLoop = true;
								WHILE (continueLoop) DO
									SET selectScript = TRIM(selectScript);
									SET lastChar = SUBSTRING(selectScript,LENGTH(selectScript),1);
									IF (lastChar = LF OR lastChar = CR OR lastChar = &apos;,&apos;) THEN 
										SET selectScript = SUBSTRING(selectScript,1,LENGTH(selectScript)-1);
									ELSE
										SET continueLoop = false;
									END IF;
								END WHILE;
*/
								-- Generate the views
								IF (generateViews &gt;= 1) THEN
									-- Create all non-existent folders and copy the privileges from the parent of the targetFolderPath
									-- Be sure and update the folders recursively for privileges
									CALL /shared/ASAssets/Utilities/repository/createAllFoldersPrivileges(targetFolderPath, 1, copyPrivilegeMode, success, faultResponse); -- Generate all necessary folders

									-- Create the resource if it does not exist
									call /lib/resource/ResourceExists(targetResourcePath, &apos;TABLE&apos;, null, resourceExists);
									--call print(&apos;targetResourcePath=&apos;||targetResourcePath||&apos;  resourceExists=&apos;||resourceExists);
									IF (NOT resourceExists) THEN	
										-- Create a new SQL Table View in the folder
										CALL /shared/ASAssets/Utilities/repository/createResource(targetFolderPath, targetResourceName, &apos;TABLE&apos;, &apos;SQL_TABLE&apos;, success, createResponse, faultResponse); 
/* 2016-08-31 mtinius: commented out
										-- Update the SQL Table View with the corresponding View SQL to map to the physical Table
										--     1=[default] Do generate - Perform the VIEW Generation with a column projection, 
										--     2=          Do generate - Perform the VIEW Generation with a select * projection, 
										IF (generateViews = 1) THEN
											SET selectScript = &apos;SELECT &apos;|| defaultVariableScript || NEWLINE || TAB || selectScript || &apos; &apos; || NEWLINE || fromScript;
										END IF;
										IF (generateViews = 2) THEN
											SET selectScript = &apos;SELECT * &apos; || NEWLINE || fromScript;
										END IF;
										CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;selectScript SQL=&apos;||selectScript);
*/
										-- Create the XML input for the SQL Script body
										SET createInputBody = 
										&apos;			&lt;/resource:columns&gt;&apos;||NEWLINE||
										&apos;			&lt;resource:tableType&gt;VIEW&lt;/resource:tableType&gt;&apos;||NEWLINE||
										&apos;			&lt;resource:explicitlyDesigned&gt;false&lt;/resource:explicitlyDesigned&gt;&apos;||NEWLINE||
										&apos;			&lt;resource:sqlText&gt;&apos;||CAST(XMLTEXT(selectScript) AS LONGVARCHAR)||&apos;&lt;/resource:sqlText&gt;&apos;||NEWLINE||
										&apos;			&lt;resource:sqlIndexes&gt;&apos;||NEWLINE;

/*
call print(&apos;createInputBegin=&apos;||NVL(createInputBegin,&apos;null&apos;));
call print(&apos;createInputColumns=&apos;||NVL(createInputColumns,&apos;null&apos;));
call print(&apos;createInputBody=&apos;||NVL(createInputBody,&apos;null&apos;));
call print(&apos;createInputIndexes=&apos;||NVL(createInputIndexes,&apos;null&apos;));
call print(&apos;createInputEnd=&apos;||NVL(createInputEnd,&apos;null&apos;));
*/
										-- Create the XML input for the SQL Script body
										SET createInput = createInputBegin || createInputColumns || createInputBody || createInputIndexes || createInputEnd;
--set debug3 = &apos;Y&apos;;
										if (debug3 = &apos;Y&apos;) then
											call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;CREATE RESOURCE:&apos;||CHR(10)||createInput);
										end if;

										--Replace XML carriage return/line feed with a space
										IF (POSITION(&apos;&amp;#xd;&apos; IN createInput) &gt; 0 or POSITION(&apos;&amp;#xD&apos; IN createInput) &gt; 0) then
											--call print(&apos;********************* FOUND: XML Carriage Return representation.&apos;);
											set createInput = TRIM(REPLACE(REPLACE(createInput,&apos;&amp;#xd;&apos;,&apos; &apos;),&apos;&amp;#xD;&apos;,&apos; &apos;)); -- XML Carriage Return representation
										END IF;
										IF (POSITION(&apos;&amp;#xa;&apos; IN createInput) &gt; 0 or POSITION(&apos;&amp;#xA&apos; IN createInput) &gt; 0) then
											--call print(&apos;********************* FOUND: XML Line Feed representation.&apos;);
											set createInput = TRIM(REPLACE(REPLACE(createInput,&apos;&amp;#xa;&apos;,&apos; &apos;),&apos;&amp;#xA;&apos;,&apos; &apos;)); -- XML Line Feed representation
										END IF;

										/***************************
										 * updateResources
										 ***************************/
										call /services/webservices/system/admin/resource/operations/updateResources(createInput, createResponse, faultResponse);
										if (faultResponse is not null) then
											raise ex value CAST(faultResponse AS LONGVARCHAR);
										end if;

										-- Update the resource privileges
										if (updatePrivilegesRecursively is not null and copyPrivilegeMode is not null and copyPrivilegeMode = 1) then
											set copyPrivilegeEntry = 
												&apos;  &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
												&apos;    &lt;resource:srcResource&gt;&apos;||CHR(10)||
												&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetFolderPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
												&apos;      &lt;resource:type&gt;CONTAINER&lt;/resource:type&gt;&apos;||CHR(10)||
												&apos;    &lt;/resource:srcResource&gt;&apos;||CHR(10)||
												&apos;    &lt;resource:dstResource&gt;&apos;||CHR(10)||
												&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetResourcePath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
												&apos;      &lt;resource:type&gt;TABLE&lt;/resource:type&gt;&apos;||CHR(10)||
												&apos;    &lt;/resource:dstResource&gt;&apos;||CHR(10)||
												&apos;  &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
												&apos;&apos;;

											-- Invoke the copyResourcesPrivileges procedure
											call /shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2(
													updatePrivilegesRecursively, copyPrivilegeMode, copyPrivilegeEntry, success, faultResponse);
											if (faultResponse is not null) then
												raise ex value CAST(faultResponse AS LONGVARCHAR);
											end if;
										end if;
									ELSE
										-- 0=&quot;FAIL_IF_EXISTS&quot;=do not overwrite the resource.  If the resource exists, raise an exception.
										IF (overwrite = 0) THEN
											raise ex value &apos;Operation not permitted.  Overwrite=0 (false) and the resource exists: &apos;||targetResourcePath;
										END IF;
										-- 1=&quot;SKIP_IF_EXISTS&quot;=skip the resource if it exists and continue processing
										IF (overwrite = 1) THEN
											-- DO NOTHING, JUST KEEP PROCESSING
										END IF;
										-- 2=&quot;OVERWRITE_IF_EXISTS&quot;=do overwrite the resource if it exists.
										IF (overwrite = 2) THEN
/* 2016-08-31 mtinius: commented out
											-- Update the SQL Table View with the corresponding View SQL to map to the physical Table
											IF (generateViews = 1) THEN
												SET selectScript = &apos;SELECT &apos;|| defaultVariableScript || NEWLINE || TAB || selectScript || &apos; &apos; || NEWLINE || fromScript;
											END IF;
											IF (generateViews = 2) THEN
												SET selectScript = &apos;SELECT * &apos; || NEWLINE || fromScript;
											END IF;
											CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;  selectScript SQL=&apos;||selectScript);
											CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;targetResourcePath=&apos;||targetResourcePath);
											CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;    viewAnnotation=&apos;||viewAnnotation);
*/

											set createInputBody = 
										&apos;			&lt;/resource:columns&gt;&apos;||NEWLINE||
										&apos;			&lt;resource:tableType&gt;VIEW&lt;/resource:tableType&gt;&apos;||NEWLINE||
										&apos;			&lt;resource:explicitlyDesigned&gt;false&lt;/resource:explicitlyDesigned&gt;&apos;||NEWLINE||
										&apos;			&lt;resource:sqlText&gt;&apos;||CAST(XMLTEXT(selectScript) AS LONGVARCHAR)||&apos;&lt;/resource:sqlText&gt;&apos;||NEWLINE||
										&apos;			&lt;resource:sqlIndexes&gt;&apos;||NEWLINE;

											SET createInput = createInputBegin || createInputColumns || createInputBody || createInputIndexes || createInputEnd;
--set debug3 = &apos;Y&apos;;
											if (debug3 = &apos;Y&apos;) then
												call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;UPDATE RESOURCE:&apos;||CHR(10)||createInput);
											end if;
--set debug3 = &apos;N&apos;;
											--Replace XML carriage return/line feed with a space
											IF (POSITION(&apos;&amp;#xd;&apos; IN createInput) &gt; 0 or POSITION(&apos;&amp;#xD&apos; IN createInput) &gt; 0) then
												--call print(&apos;********************* FOUND: XML Carriage Return representation.&apos;);
												set createInput = TRIM(REPLACE(REPLACE(createInput,&apos;&amp;#xd;&apos;,&apos; &apos;),&apos;&amp;#xD;&apos;,&apos; &apos;)); -- XML Carriage Return representation
											END IF;
											IF (POSITION(&apos;&amp;#xa;&apos; IN createInput) &gt; 0 or POSITION(&apos;&amp;#xA&apos; IN createInput) &gt; 0) then
												--call print(&apos;********************* FOUND: XML Line Feed representation.&apos;);
												set createInput = TRIM(REPLACE(REPLACE(createInput,&apos;&amp;#xa;&apos;,&apos; &apos;),&apos;&amp;#xA;&apos;,&apos; &apos;)); -- XML Line Feed representation
											END IF;

										/***************************
										 * updateResources
										 ***************************/
											call /services/webservices/system/admin/resource/operations/updateResources(createInput, createResponse, faultResponse);
											if (faultResponse is not null) then
												raise ex value CAST(faultResponse AS LONGVARCHAR);
											end if;

											-- Update the resource privileges
											if (updatePrivilegesRecursively is not null and copyPrivilegeMode is not null and copyPrivilegeMode = 1) then
											set copyPrivilegeEntry = 
												&apos;  &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
												&apos;    &lt;resource:srcResource&gt;&apos;||CHR(10)||
												&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetFolderPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
												&apos;      &lt;resource:type&gt;CONTAINER&lt;/resource:type&gt;&apos;||CHR(10)||
												&apos;    &lt;/resource:srcResource&gt;&apos;||CHR(10)||
												&apos;    &lt;resource:dstResource&gt;&apos;||CHR(10)||
												&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetResourcePath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
												&apos;      &lt;resource:type&gt;TABLE&lt;/resource:type&gt;&apos;||CHR(10)||
												&apos;    &lt;/resource:dstResource&gt;&apos;||CHR(10)||
												&apos;  &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
												&apos;&apos;;

												-- Invoke the copyResourcesPrivileges procedure
												call /shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2(
														updatePrivilegesRecursively, copyPrivilegeMode, copyPrivilegeEntry, success, faultResponse);
												if (faultResponse is not null) then
													raise ex value CAST(faultResponse AS LONGVARCHAR);
												end if;
											end if;
										END IF;
									END IF;
								ELSE -- otherwise just report on what would happen if you were generating the views
									if (debug3 = &apos;Y&apos;) then
										call /lib/resource/ResourceExists(targetFolderPath, &apos;CONTAINER&apos;, null, resourceExists);
										IF (resourceExists) THEN
											if (debug3 = &apos;Y&apos;) then
												CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;CREATE Target Folders=&apos;||targetFolderPath);
											end if;
										END IF;
										call /lib/resource/ResourceExists(targetResourcePath, &apos;TABLE&apos;, null, resourceExists);
										IF (resourceExists) THEN
											if (debug3 = &apos;Y&apos;) then
												CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;CREATE SQL TABLE=&apos;||targetResourceName);
											end if;
										ELSE
											if (debug3 = &apos;Y&apos;) then
												CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3,&apos;UPDATE SQL TABLE=&apos;||targetResourceName);
											end if;
										END IF;
									end if;
								END IF;
							ELSE
								if (debug2 = &apos;Y&apos;) then
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;The following resource will **NOT** be created due to all columns DROPPED.&apos;);	
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;targetResourcePath=&apos;||targetResourcePath);
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;  targetFolderPath=&apos;||targetFolderPath);
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;targetResourceName=&apos;||targetResourceName);
									CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug2,&apos;       logicalType=TABLE&apos;);
								end if;
							END IF;
							SET duration = CURRENT_TIMESTAMP - createResourceStartTime;
							if (debugTime = &apos;Y&apos;) then
								CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;create/update resource duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
							end if;
/**********************************
 * CODE END from generateViewsCommon
 **********************************/
						END IF;
						EXCEPTION
							ELSE
							raise ex value CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
						END;


						/****************************************************************************************
						 * Determine if the target resource that was just created is impacted and try to fix it.
						 ***************************************************************************************/
						BEGIN INDEPENDENT TRANSACTION
							SET impactedStartTime = CURRENT_TIMESTAMP;
							IF (childResCursorProcessed and targetResourcePath is not null) THEN
								call /shared/ASAssets/Utilities/repository/updateImpactedResource(debug2, targetResourcePath, targetResourceType, success, impactMessage);
								if (success = 0 and impactMessage is not null) then
									raise ex value impactMessage;
								end if;
							END IF; 
							SET duration = CURRENT_TIMESTAMP - impactedStartTime;
							if (debugTime = &apos;Y&apos;) then
								CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;update impacted resource duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
							end if;
						EXCEPTION
							ELSE
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug,&apos;ERROR updateImpactedResource:  &apos;||NVL(CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR),&apos;null&apos;));
						END;

						set duration = CURRENT_TIMESTAMP - columnStartTime;
						if (debugTime = &apos;Y&apos;) then
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;retrieve new rows duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name);
						end if;

						set duration = CURRENT_TIMESTAMP - viewStartTime;
						if (debugTime = &apos;Y&apos;) then
							CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime, &apos;overall view processing duration=&apos;||cast(duration as varchar)||&apos;  resourceName=&apos;||list.name||NEWLINE);
						end if;
					END IF; -- IF (isDerivedPathMatch() = 1)
				END IF; --IF (list.resType = &apos;TABLE&apos; or list.resType = &apos;PROCEDURE&apos;) THEN
			END FOR; -- FOR list AS  
		  END IF; -- if (resourceType is not null) THEN
		END IF;-- IF (startingFolderVector[sfNum].process = 1) THEN
		SET sfNum = sfNum + 1;
	END WHILE;

	set duration = CURRENT_TIMESTAMP - generationStartTime;
	if (debugTime = &apos;Y&apos;) then
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debugTime,&apos;View Generation Complete: duration=&apos;||cast(duration as varchar));
	end if;

	INSERT INTO result VALUES(&apos;View Generation Complete&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, duration);
	if (debug = &apos;Y&apos;) then
		CALL /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;---VIEW GENERATION IS COMPLETE---&apos;);	
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564517386919</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:5:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:6:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
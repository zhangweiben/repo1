<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="generateDatasourceListCSV_orig" path="/shared/ASAssets/BestPractices_v81/Procedures/archive/generateDatasourceListCSV_orig" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="csvFullPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="bufferSize" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="generateHeader" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="generateLogicalNames" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="targetResource" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="groupIds" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="derivedFilterPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="ConfigParamsVector" direction="IN" nullable="true">
      <datatype name="ConfigParamsVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="ConfigParamsType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="ConfigParamsType" type="TREE" refId="1">
            <element name="generateMode">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="outputMode">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="generateViews">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="resourceCaseRule">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="columnCaseRule">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="separator">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="useAliasRule">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="resourcePrefix">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourceSuffix">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="generateWithSourceColumn">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="generateCast">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="generateIndexes">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
            <element name="debug">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="debug2">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="debug3">
              <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
            </element>
            <element name="basePath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="scriptsPath">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="padAmount">
              <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sourceResource" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="generateLogicalNames" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="layerType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inGroupIds" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inDerivedFilterPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="startingFolderVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="startingFolderExtendedType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="startingFolderExtendedType" type="TREE" refId="2">
              <element name="groupId">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="process">
                <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
              <element name="layerType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="pathDerivation">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="sourceFolderPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="targetFolderPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="derivedFilterPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typeDefProcPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="typeDefProcName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="ConfigParamsVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="ConfigParamsType" referenceDefinitionSet="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" referenceType="ConfigParamsType" type="TREE" refId="3">
              <element name="generateMode">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="outputMode">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="generateViews">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="resourceCaseRule">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="columnCaseRule">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="separator">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="useAliasRule">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="resourcePrefix">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourceSuffix">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="generateWithSourceColumn">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="generateCast">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="generateIndexes">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
              <element name="debug">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="debug2">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="debug3">
                <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
              </element>
              <element name="basePath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="scriptsPath">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="padAmount">
                <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="4">
          <element name="DataSource">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ProjectFolderName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GreatGrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GrandParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ParentName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ContainerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="PhysicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="NativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="LogicalTransformation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="LogicalDefinition">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="LogicalPath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="Duration">
            <datatype type="INTERVAL_DAY" intervalMode="INTERVAL_HOUR_TO_SECOND" intervalPrecision="2" fractionalSecondPrecision="6"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="filePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="append" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="fileContent" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/escapeCSV" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="qualifier" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="outStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* generateDatasourceListCSV:
	-- Composite Best Practices --
	Output to a CSV file the data source structure an any given layer designated by the layerType parameter 
	or target folder name.

	Input:
		csvFullPath	- full server path to write out the CSV file
		bufferSize 	- number of rows to buffer
		generateHeader - generate the header or not
			-- 0 (FALSE) - do not generate the header
			-- 1 (TRUE) - do generate the header
  		generateLogicalNames - generate the logical names choice
			-- 0 (FALSE) - generate datasource list only with no logical names, 
    		-- 1 (TRUE) - generate datasource list with logical names
	 	targetResource
			-- The target folder in CIS to begin searching for views to generate the view list or
			-- a target view (exact path) to generate for.
			-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath

 		-- If inTargetFolder is blank, then layerType, inGroupIds must be set with derivedFilterPath being optional
 		layerType - the designator for the layer in which to generate from
			-- PM=Physical Metadata - generateDatasourceList physical metadata tables
			-- FV=Formatting Views 	- generateDatasourceList formatting views
			-- BV=Business Views 	- generateDatasourceList business views (only single source)
			-- LV=Logical Views 	- generateDatasourceList logical views (only single source)
			-- CV=Client Views 		- generateDatasourceList client views (only single source)
				-- CP=Client Published 	- generateDatasourceList client published views (only single source)
		inGroupIds - This is a comma separate list group ids to process. 
			-- This is a filter that allows the user to only generate for a specific group or list of groups
			--   found in the /generationScripts/Configure/ConfigureStartingFolders.
			--   Pass in null to select all groupIds.
		derivedFilterPath	LONGVARCHAR, 
			-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
			-- The path is derived by concatenating the partial filter path with the target path of the designated layer type.
			-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The target path is
			--    defined in configureStartingFolders per the layerType and groupId combination.
			--   e.g. layerType=PV and targetFolderPath=/shared/BestPractices/DataAbstractionSample/L1_Physical_Layer/Physical_Views
			--        The derivedFilterPath list=CUSTOMERS,EMPLOYEES
			--        Even though there are several other views in the /CISORADEMO folder under the Physical_Views only the ones specified
			--	      will be generated.  Views directly under the target path do not require any qualifying path except the view name.
			--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
			-- Correlate the groupId position with the derivedFilterPath position
			--		derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
			--                         |                     |
			--                         v                     v
			--		          groupId=ds_inventory.tutorial,ds_orders.tutorial
			-- If null, generate views from all target folders as directed by the &quot;configure starting folders&quot; and the designated layer type.
		ConfigParamsVector - The vector of configuration parameters.  A full description can be found in /generationScripts/Configure/ConfigureParams
	Output:
		A CSV file is output in the location specified by csvFullPath.  The output format is a comma separate file in this format:
			CommonModelV2Row ROW (
				&quot;Data Source&quot; 				VARCHAR(255), -- The name of the data source in composite (data lineage-used resources)
--[NOT CURRENTLY IMPLEMENTED] Published					VARCHAR(255), -- Indicates whether this element is published in composite (data lineage-dependent resources)
				&quot;Parent Name&quot; 				VARCHAR(255), -- The name of the parent container - parent to the parent (a.k.a. grand parent)
				&quot;Container Name&quot; 			VARCHAR(255), -- The name of the container - parent to the resource
				&quot;Physical Name&quot;				VARCHAR(255), -- The physical column name (a.k.a. source column name)
				&quot;Physical Type&quot;				VARCHAR(255), -- The physical type (a.k.a. source column native type)
				&quot;Logical Name&quot;				VARCHAR(255), -- The logical column name (a.k.a. table/view alias)
				&quot;Logical Type&quot; 				VARCHAR(255), -- The logical column type
				&quot;Logial Transformation&quot;		LONGVARCHAR,  -- The logical column transformation excluding outer cast statement
				&quot;Logical Definition&quot;		LONGVARCHAR,  -- The logical resource definition (a.k.a. view/table/column annotation)
				&quot;Logical Path&quot;				LONGVARCHAR   -- The logical Path (this is not dumped to the spreadsheet)
			)

	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	03/15/2013		Mike Tinius			5.2.0			created new for modifications for Best Practices 7.0
	05/22/2013		Mike Tinius			6.0.0			Modified for Best Practices 7.1
	07/31/2013		Mike Tinius			6.0.0			B.P. 7.3: Fixed issue with generating when there is a header.
	01/24/2019		Mike Tinius			8.0.0			B.P. 2019.1: Added the ability to handle columnCaseRule, resourcePrefix, resourceSuffix and newColumnList for generateMode=&apos;G&apos;. 
															newColumnList Format: column1&amp;&amp;type1&amp;&amp;value1//column2&amp;&amp;type2&amp;&amp;value2//column3&amp;&amp;type3&amp;&amp;value3
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE generateDatasourceListCSV_orig(
	IN csvFullPath			LONGVARCHAR,	-- full server path to write out the CSV file
	IN bufferSize			INTEGER, 		-- number of rows to buffer
	IN generateHeader		BIT,			-- generate the header or not
		-- 0 (FALSE) - do not generate the header
		-- 1 (TRUE) - do generate the header
   	IN generateLogicalNames	BIT, 			
		-- 0 (FALSE) - generate datasource list only with no logical names, 
    	-- 1 (TRUE) - generate datasource list with logical names
	IN targetResource		LONGVARCHAR,
		-- The target folder in CIS to begin searching for views to generate the view list or
		-- a target view (exact path) to generate for.
		-- If this is set it supercedes layerType, inGroupIDs and derivedFilterPath

	-- If inTargetFolder is blank, then layerType, inGroupIds must be set with derivedFilterPath being optional
   	IN layerType			VARCHAR,
		-- PM=Physical Metadata - generateDatasourceList physical metadata tables
		-- FV=Formatting Views 	- generateDatasourceList formatting views
		-- BV=Business Views 	- generateDatasourceList business views (only single source)
		-- LV=Logical Views 	- generateDatasourceList logical views (only single source)
		-- CV=Client Views 		- generateDatasourceList client views (only single source)
		-- CP=Client Published 	- generateDatasourceList client published views (only single source)
	IN groupIds				LONGVARCHAR, 
		-- This is a comma separate list group ids to process. 
		-- This is a filter that allows the user to only generate for a specific group or list of groups
		--   found in the /generationScripts/Configure/ConfigureStartingFolders.
		--   Pass in null to select all groupIds.
	IN derivedFilterPath	LONGVARCHAR, 
		-- The list &quot;derivedFilterPath&quot; is a comma-separated list of resources and may be used with either generateToFolder (option 1) to groupId (option 2) 
		-- The path is derived by concatenating the partial filter path with the source path of the designated layer type.
		-- The layerType and the groupId are used to filter the rows from the configureStartingFolders.  The source path is
		--    defined in configureStartingFolders per the layerType and groupId combination.
		--   e.g. layerType=CP and sourceFolderPath=/shared/BestPractices/DataAbstractionSample/L1_Mapping_Layer/Client_Views
		--        The derivedFilterPath list=Orders_Closed,/Orders/Customers,Orders/Product
		--        Even though there are several other views in the /Orders folder under the Client_Views only the ones specified
		--	      will be generated to the Client_Published.  Views directly under the source path do not require any qualifying path except the view name.
		--        Lastly, a leading &apos;/&apos; is not required but may be present if desired.
		-- Correlate the groupId position with the derivedFilterPath position
		--		derivedFilterPath=&quot;customers,orders&quot;,shippingmethods
		--                         |                     |
		--                         v                     v
		--		          groupId=ds_inventory.tutorial,ds_orders.tutorial
		-- If null, generate views from all source folders as directed by the &quot;configure starting folders&quot; and the designated layer type.
	IN ConfigParamsVector	VECTOR(/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.ConfigParamsType)
)
BEGIN
	DECLARE generateViewsWrapper INTEGER DEFAULT 1;
	DECLARE TAB					CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.TAB;
	DECLARE CR					CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.CR;
	DECLARE LF					CHAR(1) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.LF;
	DECLARE empty				INTEGER DEFAULT 1;
	DECLARE bufferCount 		INTEGER DEFAULT bufferSize;
	DECLARE rowCount			INTEGER DEFAULT 0;
	DECLARE append				INTEGER DEFAULT 0;
	DECLARE sep					VARCHAR DEFAULT &apos;,&apos;;
	DECLARE qualifier			VARCHAR DEFAULT &apos;&quot;&apos;;
	DECLARE eol					VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.eol;
	DECLARE dataRow				LONGVARCHAR;
	DECLARE escapedRow			LONGVARCHAR;
	DECLARE messageRow			LONGVARCHAR DEFAULT null;
	DECLARE typeLen				INTEGER DEFAULT 5; -- The length the substring for the resource type
	DECLARE LogicalDefinition 	LONGVARCHAR;
	DECLARE padChar				CHAR(1) DEFAULT &apos;_&apos;;
	DECLARE headerCount			INTEGER DEFAULT 0;
	DECLARE resourceCount		INTEGER DEFAULT 0;
	DECLARE totalColumnCount	INTEGER DEFAULT 0;
	DECLARE viewColumnCount		INTEGER DEFAULT 0;
	DECLARE startTime			TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE groupStartTime		TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE endTime				TIMESTAMP;
	DECLARE duration			INTERVAL DAY to SECOND;
	DECLARE rollingDuration		INTERVAL DAY to SECOND;
	DECLARE totalDuration		INTERVAL DAY to SECOND;
	DECLARE hours				INTEGER;
	DECLARE minutes				INTEGER;
	DECLARE seconds				DECIMAL(32,1);
	DECLARE header				LONGVARCHAR DEFAULT
	 &apos;Data Source,Project Folder Name,Great Grand Parent,Grand Parent,Parent Name,Container Name,Physical Name,Physical Type,Logical Name,Logical Type,Logical Transformation,Logical Definition&apos;;
--[NOT CURRENTLY IMPLEMENTED] &quot;Published&quot; --&gt; &apos;Data Source,Published,Parent Name,Container Name,Physical Name,Physical Type,Logical Name,Logical Type,Logial Transformation,Logical Definition&apos;;
	-- Write out the header forcing a new file to be created each time
	if (generateHeader is not null and generateHeader = 1) then
--		call print(&apos;creating header&apos;);
		set dataRow = header;
		set rowCount = rowCount + 1;
		set bufferCount = bufferCount - 1;
		set headerCount = headerCount + 1;
	else
		set dataRow = null;
	end if;

	if (messageRow is null) then
		-- First time through so print out header
		call print(RPAD(&apos;TYPE&apos;,typeLen,padChar)||&apos; &apos;||&apos;___#RES &apos;||&apos;#COLS &apos;||&apos;_#TCOLS &apos;||&apos;Duration &apos;||RPAD(&apos;ProjectFolderName&apos;,30,padChar)||&apos; &apos;||RPAD(&apos;GreatGrandParentName&apos;,22,padChar)||&apos; &apos;||RPAD(&apos;GrandParentName&apos;,40,padChar)||&apos; &apos;||RPAD(&apos;ParentName&apos;,40,padChar)||&apos; &apos;||RPAD(&apos;ContainerName&apos;,30,padChar)||&apos; &apos;||RPAD(&apos;PhysicalName&apos;,40,padChar)||&apos; &apos;||&apos;LogicalName&apos;);
	end if;

	-- Loop through the output records
    for r as 
        SELECT 
			DataSource,
			ProjectFolderName,
--[NOT CURRENTLY IMPLEMENTED] Published,
			GreatGrandParentName,
			GrandParentName,
			ParentName,
			ContainerName,
			PhysicalName,
			NativeType,
			LogicalName,
			LogicalType,
			LogicalTransformation,
			LogicalDefinition,
			Duration
        FROM /shared/ASAssets/BestPractices_v81/Procedures/generateDatasourceList(targetResource, generateLogicalNames, layerType, groupIds, derivedFilterPath, null, ConfigParamsVector)
		WHERE DataSource != &apos;FINISHED&apos;
	do
		if (bufferCount = 0) then
			call /shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii(csvFullPath, append, dataRow);
			set endTime = CURRENT_TIMESTAMP;
			set duration = endTime - groupStartTime;
			set totalDuration = endTime - startTime;
			call print(&apos;rows=&apos;||rowCount||&apos; = (header=&apos;||headerCount||&apos; + resources=&apos;||resourceCount||&apos; + columns=&apos;||totalColumnCount||&apos;)   append=&apos;||append||&apos;   buffered group duration=&apos;||cast(duration as varchar)||&apos;   total duration=&apos;||cast(totalDuration as varchar));
			set groupStartTime = CURRENT_TIMESTAMP;
			set bufferCount = bufferSize;
			set dataRow = &apos;&apos;;
			set append = 1;
		else
			if (dataRow is null) then
				set dataRow = &apos;&apos;;
			else
				set dataRow = dataRow || eol;
			end if;
		end if;

		if (generateViewsWrapper &gt;= 1) then
			-- Print out the resource information
			if (r.NativeType = &apos;TABLE&apos; or r.NativeType = &apos;PROCEDURE&apos;) then
				if (messageRow is not null) then
					set hours = EXTRACT(HOUR FROM rollingDuration);
					set minutes = EXTRACT(MINUTE FROM rollingDuration) + hours * 60;
					set seconds = ROUND(EXTRACT(SECOND FROM rollingDuration),1);
					set messageRow = REPLACE(messageRow, &apos;:XXXXX:&apos;, LPAD(viewColumnCount,5,padChar));
					set messageRow = REPLACE(messageRow, &apos;:YYYYYYY:&apos;, LPAD(totalColumnCount,7,padChar));
					set messageRow = REPLACE(messageRow, &apos;:ZZZZZZZZ:&apos;, LPAD(minutes,3,&apos;0&apos;)||&apos;:&apos;||LPAD(seconds,4,&apos;0&apos;));
					call print(messageRow);
					set messageRow = null;
					set viewColumnCount = 0;
				end if;
				set resourceCount = resourceCount + 1;
				set messageRow = 
					RPAD(SUBSTRING(r.NativeType,1,typeLen),						typeLen,padChar)||&apos; &apos;||
					LPAD(cast(resourceCount as varchar),						7,padChar)||&apos; &apos;||
					&apos;:XXXXX: &apos;||	 	-- column count placeholder
					&apos;:YYYYYYY: &apos;||	 	-- total column count placeholder
					&apos;:ZZZZZZZZ: &apos;;	-- view duration placeholder
				if (r.ProjectFolderName IS NULL OR LENGTH(&apos;|&apos;||r.ProjectFolderName||&apos;|&apos;) = 2) then  --empty
--				if (isEmpty(r.ProjectFolderName) = empty) then
					set messageRow = messageRow || RPAD(padChar,				30,padChar)||&apos; &apos;;
				else
					set messageRow = messageRow || RPAD(r.ProjectFolderName,	30,padChar)||&apos; &apos;;
				end if;
				if (r.GreatGrandParentName IS NULL OR LENGTH(&apos;|&apos;||r.GreatGrandParentName||&apos;|&apos;) = 2) then  --empty
--				if (isEmpty(r.GreatGrandParentName) = empty) then
					set messageRow = messageRow || RPAD(padChar,				22,padChar)||&apos; &apos;;
				else
					set messageRow = messageRow || RPAD(r.GreatGrandParentName,	22,padChar)||&apos; &apos;;
				end if;
				if (r.GrandParentName IS NULL OR LENGTH(&apos;|&apos;||r.GrandParentName||&apos;|&apos;) = 2) then  --empty
--				if (isEmpty(r.GrandParentName) = empty) then
					set messageRow = messageRow || RPAD(padChar,				40,padChar)||&apos; &apos;;
				else
					set messageRow = messageRow || RPAD(r.GrandParentName,		40,padChar)||&apos; &apos;;
				end if;
				if (r.ParentName IS NULL OR LENGTH(&apos;|&apos;||r.ParentName||&apos;|&apos;) = 2) then  --empty
--				if (isEmpty(r.ParentName) = empty) then
					set messageRow = messageRow || RPAD(padChar,				40,padChar)||&apos; &apos;;
				else
					set messageRow = messageRow || RPAD(r.ParentName,			40,padChar)||&apos; &apos;;
				end if;
				if (r.ContainerName IS NULL OR LENGTH(&apos;|&apos;||r.ContainerName||&apos;|&apos;) = 2) then  --empty
--				if (isEmpty(r.ContainerName) = empty) then
					set messageRow = messageRow || RPAD(padChar,				30,padChar)||&apos; &apos;;
				else
					set messageRow = messageRow || RPAD(r.ContainerName,		30,padChar)||&apos; &apos;;
				end if;
				if (r.PhysicalName IS NULL OR LENGTH(&apos;|&apos;||r.PhysicalName||&apos;|&apos;) = 2) then  --empty
--				if (isEmpty(r.PhysicalName) = empty) then
					set messageRow = messageRow || RPAD(padChar,				40,padChar)||&apos; &apos;;
				else
					set messageRow = messageRow || RPAD(r.PhysicalName,			40,padChar)||&apos; &apos;;
				end if;
				set messageRow = messageRow || NVL(r.LogicalName,&apos; &apos;);
			else
				set totalColumnCount = totalColumnCount + 1;	-- Count the total number of columns oveall
				set viewColumnCount = viewColumnCount + 1;		-- Count the number of columns in the view
			end if;
		end if;

		set bufferCount = bufferCount - 1;
		set rowCount = rowCount + 1;
	
		--Replace tab with a &lt;TAB&gt; symbol
		set LogicalDefinition = TRIM(REPLACE(r.LogicalDefinition,TAB,&apos;&lt;TAB&gt;&apos;)); -- Tab
		--Replace carriage return/line feed with a &lt;CR&gt;&lt;LF&gt; symbol
		set LogicalDefinition = TRIM(REPLACE(LogicalDefinition,CR,&apos;&lt;CR&gt;&apos;)); -- Carriage return
		set LogicalDefinition = TRIM(REPLACE(LogicalDefinition,LF,&apos;&lt;LF&gt;&apos;)); -- Line Feed

		--Replace XML carriage return/line feed with a &lt;CR&gt;&lt;LF&gt; symbol
		set LogicalDefinition = TRIM(REPLACE(REPLACE(LogicalDefinition,&apos;&amp;#xd;&apos;,&apos; &apos;),&apos;&amp;#xD;&apos;,&apos;&lt;CR&gt;&apos;)); -- XML Carriage Return representation
		set LogicalDefinition = TRIM(REPLACE(REPLACE(LogicalDefinition,&apos;&amp;#xa;&apos;,&apos; &apos;),&apos;&amp;#xA;&apos;,&apos;&lt;LF&gt;&apos;)); -- XML Line Feed representation

		-- Add to the dataRow buffer
		call /shared/ASAssets/Utilities/string/escapeCSV(r.DataSource,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.ProjectFolderName,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

--[NOT CURRENTLY IMPLEMENTED] TRIM(NVL(escapeCSV(r.Published,sep,qualifier),&apos;  &apos;))||sep||
		--call /shared/ASAssets/Utilities/string/escapeCSV(r.Published,sep,qualifier, escapedRow);
		--set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.GreatGrandParentName,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.GrandParentName,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.ParentName,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.ContainerName,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.PhysicalName,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.NativeType,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.LogicalName,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.LogicalType,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(r.LogicalTransformation,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		call /shared/ASAssets/Utilities/string/escapeCSV(LogicalDefinition,sep,qualifier, escapedRow);
		set dataRow = dataRow || TRIM(NVL(escapedRow,&apos;  &apos;))||sep;

		-- This is a rolling duration for a view.  The column row for a view contains the total processing duration for that view.
		set rollingDuration = r.Duration; 
	end for;

	-- Print out the final TABLE or PROCEDURE message
	if (messageRow is not null) then
		set hours = EXTRACT(HOUR FROM rollingDuration);
		set minutes = EXTRACT(MINUTE FROM rollingDuration) + hours * 60;
		set seconds = ROUND(EXTRACT(SECOND FROM rollingDuration),1);
		set messageRow = REPLACE(messageRow, &apos;:XXXXX:&apos;, LPAD(viewColumnCount,5,padChar));
		set messageRow = REPLACE(messageRow, &apos;:YYYYYYY:&apos;, LPAD(totalColumnCount,7,padChar));
		set messageRow = REPLACE(messageRow, &apos;:ZZZZZZZZ:&apos;, LPAD(minutes,3,&apos;0&apos;)||&apos;:&apos;||LPAD(seconds,4,&apos;0&apos;));
		call print(messageRow);
	end if;
	-- Write out the final part of the buffer
	if (dataRow is not null) then
		call /shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii(csvFullPath, append, dataRow);
		set endTime = CURRENT_TIMESTAMP;
		set duration = endTime - groupStartTime;
		set totalDuration = endTime - startTime;
		call print(&apos;rows=&apos;||rowCount||&apos; = (header=&apos;||headerCount||&apos; + resources=&apos;||resourceCount||&apos; + columns=&apos;||totalColumnCount||&apos;)   append=&apos;||append||&apos;   buffered group duration=&apos;||cast(duration as varchar)||&apos;   total duration=&apos;||cast(totalDuration as varchar));
	end if;

	call print(&apos;&apos;);
	call print(&apos;rows=&apos;||rowCount||&apos; = (header=&apos;||headerCount||&apos; + resources=&apos;||resourceCount||&apos; + columns=&apos;||totalColumnCount||&apos;)&apos;);
	call print(&apos;&apos;);
	set endTime = CURRENT_TIMESTAMP;
	set totalDuration = endTime - startTime;
	call print(&apos;Start Time=&apos;||startTime);
	call print(&apos;  End Time=&apos;||endTime);
	call print(&apos;  Duration=&apos;||cast(totalDuration as varchar));
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564662969208</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:8:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/236</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/368</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/364</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/367</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/369</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/374</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/356</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/213</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/373</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/372</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/185</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
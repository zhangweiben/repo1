<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="moveProject" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/moveProject" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="oldProjectPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="oldScriptsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="newProjectPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="newScriptsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="generateTestFolder" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="updateScriptText" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="message" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/MoveResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="targetContainerPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="newName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/RenameResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="newName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/upgradeUpdateTriggerResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="upgradeVectorRow" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="upgradeType" type="TREE" refId="2">
              <element name="bestPracticesVersionFrom">
                <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
              </element>
              <element name="bestPracticesVersionTo">
                <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
              </element>
              <element name="resourceAction">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="resourcePath">
                <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
              </element>
              <element name="resourceType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="srcResource">
                <datatype name="srcResource" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="resourceType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="resourceType" type="TREE" refId="3">
                      <element name="path">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="type">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="dstResource">
                <datatype name="dstResource" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <reference refId="3"/>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="updateStruct">
                <datatype name="updateStruct" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="updateType" type="TREE" refId="4">
                      <element name="updateAction">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="occurrence">
                        <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                      </element>
                      <element name="numLines">
                        <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                      </element>
                      <element name="keyTextVerify">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="searchText">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="replaceText">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/conversions/convertBoolean" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/getUtilitiesVersion" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="version" direction="OUT">
        <datatype type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="targetFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFolders" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getScriptText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlTable" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="inScripttext" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* moveProject:

	This procedure is used to rename an existing project and correctly update all of the necessary project paths
		including the following:
			/shared/&lt;project&gt;/_scripts/Constants/defaultValues.basePath
			/shared/&lt;project&gt;/_scripts/Documentation/documentationTrigger.*
			/shared/&lt;project&gt;/_scripts/Generate/generate*
			All project resources are automatically rebound to the new path.
			The text for view (SQL_TABLE) and procedure (SQL_SCRIPT_PROCEDURE) resources are searched for text containing
				the old path and replaced with the new path and then updated in the repository.

	If the project path already exists, this procedure will not copy over it.   You must delete it
	first before running this procedure again.  

	Input: 
		debug - Y=debug, N=do not debug

		oldProjectPath - the full project path to the older project
			e.g. /shared/PROJECT1

		oldScriptsPath - the full path to the old project scripts folder.  
			e.g. /shared/PROJECT1/_scripts

		newProjectPath - the full project path to the new project
			e.g. /shared/PROJECT2

		newScriptsPath	- the full path to a project scripts.  
			e.g. /shared/PROJECT2/_scripts

			If it already exists in the old folder, it is retained and not generated.
			1=generate Test folder, 
			0 or null=do not generate Test folder (default)
		generateTestFolder - determine whether to generate the Test folder or not.  

			1=modify the VIEW or PROCEDURE script text and replace old paths with new paths in the text. 
			0 or null=do not modify the VIEW or PROCEDURE script text (default)
		updateScriptText - determine whether the VIEW or PROCEDURE text should be modified

			1=overwrite the project
			0=do not overwrite the project
		overwrite

	Output:
		message - a resulting message 
		(you must click refresh upon completion for Studio to recognize changes to the new project)

	Exceptions:  ex

	Modified Date:	Modified By:		CSW Version:	Reason:
	04/15/2013		Mike Tinius			5.2.0			Created new
	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE moveProject(
		-- Y=debug, N=do not debug
	IN debug				CHAR(1),

		-- the full path to the old project including the project name
	IN oldProjectPath		VARCHAR(4000),

		-- the full path to the old project scripts folder.  e.g. /shared/PROJECT1/_scripts
	IN oldScriptsPath		VARCHAR(4000),

		-- the full path to the new project including the project name
	IN newProjectPath		VARCHAR(4000),

		-- the full path to a new project scripts.  e.g. /shared/PROJECT2/_scripts
	IN newScriptsPath		VARCHAR(4000),

		-- 1=generate test folder, 0 or null (default)=do not generate test folder
		-- 1=generate Test folder, 
		-- 0 or null=do not generate Test folder
	IN generateTestFolder	BIT,
	
		-- determine whether the VIEW or PROCEDURE text should be modified
		-- 1=modify the VIEW or PROCEDURE scrpt text and replace old paths with new paths in the text. 
		-- 0 or null=do not modify the VIEW or PROCEDURE script text
	IN updateScriptText 	BIT,			

		-- determine whether to overwrite the taget project path or not
		-- 1=overwrite the target project
		-- 0 or null=do not overwrite the target project
	IN overwrite			BIT,			

	OUT message				LONGVARCHAR
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;moveProject&apos;;
	DECLARE overwrite_				BIT DEFAULT NVL(overwrite,0);
	DECLARE success					BIT; -- true(1) or false(0)
	DECLARE faultResponse 			XML;
	DECLARE createResponse 			XML;
	DECLARE result					VARCHAR(255);
	DECLARE resultMessage			VARCHAR(4096);
	DECLARE bestPracticesRootPath	VARCHAR(4096) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.bestPracticesRootPath;
	DECLARE utilitiesRootPath		VARCHAR(4096) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.utilitiesRootPath;
	DECLARE templatePath			VARCHAR(4096) DEFAULT bestPracticesRootPath||&apos;/DataAbstraction_GENERIC_Template&apos;;
	DECLARE docDriverPath 			VARCHAR(4096) DEFAULT utilitiesRootPath||&apos;/documentation/getDocumentationDriver&apos;;
	DECLARE docRootPath				VARCHAR(4096) DEFAULT  /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.docDefaultRootPath;
	DECLARE targetContainerPath 	VARCHAR(4096);
	DECLARE newName					VARCHAR;
	DECLARE resourcePath			VARCHAR(4096);
	DECLARE rebindPath				VARCHAR(4096);
	DECLARE scriptText				LONGVARCHAR;
	DECLARE procedureParams			LONGVARCHAR;
	DECLARE sleep					INTEGER DEFAULT 5;
	DECLARE sleepCount				INTEGER DEFAULT 1;
	DECLARE maxSleepCount			INTEGER DEFAULT 5;
	DECLARE version					DOUBLE;
	DECLARE minVersion				DOUBLE DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.minVersion;
	DECLARE ex						EXCEPTION;
	DECLARE curs					CURSOR(basePath VARCHAR(4000));
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE resourcePathList 		LONGVARCHAR;
	DECLARE upgradeVectorRow 		/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.upgradeVector;
	DECLARE oldProjectNameReserved	VARCHAR;
	DECLARE oldResourcePath			VARCHAR(4096);
	DECLARE oldResourceType			VARCHAR;
	DECLARE oldProjectPathReserved	VARCHAR(4096);
	DECLARE oldPublishedProjectPath	VARCHAR;
	DECLARE newResourcePath			VARCHAR(4096);
	DECLARE newProjectPathReserved	VARCHAR(4096);
	DECLARE newProjectNameReserved	VARCHAR;
	DECLARE newPublishedProjectPath	VARCHAR;
	DECLARE newPublishedProjectName	VARCHAR;
	DECLARE resourcePathReserved	VARCHAR(4096);
	DECLARE resourceExists			BOOLEAN;
	DECLARE responseBoolean			VARCHAR;

	/***************************************************************
	 * Make sure the Utilities are up to date
	 ***************************************************************/
	call /shared/ASAssets/Utilities/getUtilitiesVersion(version);
	if (version &lt;  minVersion) then
		raise ex value &apos;Utilities &apos;||minVersion||&apos; or higher is required&apos;;
	end if;
	
	/***************************************************************
	 * Don&apos;t continue if the old project does not exist
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		call /lib/resource/ResourceExists(oldProjectPath, &apos;CONTAINER&apos;, null, resourceExists);
		if (NOT resourceExists) then
			raise ex value &apos;Resource does not exist for path=&apos;||oldProjectPath;	
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Don&apos;t allow a null or blank project
	 ***************************************************************/
	if (newProjectPath IS NULL OR LENGTH(&apos;|&apos;||newProjectPath||&apos;|&apos;) = 2) then
		raise ex value &apos;The new project path cannot be null or empty.  Please provide a path.&apos;;
	end if;
	if (newScriptsPath IS NULL OR LENGTH(&apos;|&apos;||newScriptsPath||&apos;|&apos;) = 2) then
		raise ex value &apos;The new scripts path cannot be null or empty.  Please provide a path.&apos;;
	end if;

	/***************************************************************
	 * Don&apos;t allow a path that does not start with /
	 ***************************************************************/
	if (SUBSTRING(newProjectPath, 1, 1) != &apos;/&apos;) then
		raise ex value &apos;The parameter newProjectName must start with a /.  Resource path=&apos;||newProjectPath;
	end if;

	/***************************************************************
	 * Don&apos;t overwrite the project if it already exists
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		call /lib/resource/ResourceExists(newProjectPath, &apos;CONTAINER&apos;, null, resourceExists);
		if (resourceExists and overwrite_ = 0) then
			raise ex value &apos;Resource already exists.  Delete it first and try again or set overwrite=1. Resource path=&apos;||newProjectPath;
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	-- Apply reserved word list to old path
	call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(oldProjectPath, null, oldProjectPathReserved);
	set oldResourcePath = REPLACE(oldProjectPath,&apos;&quot;&apos;,&apos;&apos;);
	-- Get the old project name
	call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(oldProjectPathReserved, &apos;E&apos;, oldProjectNameReserved, resourcePath);
	-- Apply reserved word list to new path
	call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(newProjectPath, null, newProjectPathReserved);
	set newResourcePath = REPLACE(newProjectPath,&apos;&quot;&apos;,&apos;&apos;);
	-- Get the new project name
	call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(newProjectPathReserved, &apos;E&apos;, newProjectNameReserved, resourcePath);

	-- Get the old published project path from the defaultValues
	call /shared/ASAssets/Utilities/string/getConstantV2(oldScriptsPath||&apos;/Constants/defaultValues&apos;, &apos;compositeDatabasePath_&apos;, 1, oldPublishedProjectPath);
	set oldPublishedProjectPath = REPLACE(oldPublishedProjectPath, &apos;&quot;&apos;, &apos;&apos;);

	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldProjectPath=&apos;||NVL(oldProjectPath,&apos;null&apos;));
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldResourcePath=&apos;||NVL(oldResourcePath,&apos;null&apos;));
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldProjectPathReserved=&apos;||NVL(oldProjectPathReserved,&apos;null&apos;));
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldProjectNameReserved=&apos;||NVL(oldProjectNameReserved,&apos;null&apos;));
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;oldPublishedProjectPath=&apos;||NVL(oldPublishedProjectPath,&apos;null&apos;));

	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;newProjectPath=&apos;||NVL(newProjectPath,&apos;null&apos;));
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;newResourcePath=&apos;||NVL(newResourcePath,&apos;null&apos;));
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;newProjectNameReserved=&apos;||NVL(newProjectNameReserved,&apos;null&apos;));
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;newProjectPathReserved=&apos;||NVL(newProjectPathReserved,&apos;null&apos;));

	/***************************************************************
	 * Create all of the folders in the target path
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;createAllFolders: resourcePath=&apos;||newResourcePath);
		call /shared/ASAssets/Utilities/repository/createAllFolders(newResourcePath,success,faultResponse);
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Rename the old project to new project folder
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;moveResource: oldProjectPath=&apos;||oldResourcePath || &apos;  newProjectPath=&apos;||newResourcePath);
		-- Extract the folder container and the new folder name
		call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(newResourcePath,&apos;E&apos;,newName,targetContainerPath);
		-- Move the old path to the new path
		call /shared/ASAssets/Utilities/conversions/convertBoolean(CAST(overwrite_ AS VARCHAR), responseBoolean);
		call /lib/resource/MoveResource(oldResourcePath, &apos;CONTAINER&apos;, targetContainerPath, newName, responseBoolean);
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Update project basePath in /Constants/defaultValues
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		-- Get the defaultValues procedure script text 
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(newScriptsPath||&apos;/Constants/defaultValues&apos;, null, resourcePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Update defaultValues -- getScriptText: resourcePath=&apos;||resourcePath);
		call /shared/ASAssets/Utilities/repository/getScriptText(resourcePath,&apos;PROCEDURE&apos;,&apos;SQL_SCRIPT_PROCEDURE&apos;,scriptText);

		-- Replace the basePath with the actual path
		set scriptText = REPLACE(scriptText, oldProjectPathReserved, newProjectPathReserved);
		--call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, scriptText);

		-- Replace the old database path &quot;/services/databases/&lt;oldProjectName&gt;&quot; with the &quot;/services/databases/&lt;newProjectName&gt;&quot; path
		set scriptText = REPLACE(scriptText, &apos;/services/databases/&apos;||oldProjectNameReserved, &apos;/services/databases/&apos;||newProjectNameReserved);

		-- Update the defaultValue procedure with the new script text
		call /shared/ASAssets/Utilities/repository/updateSqlScript(resourcePath,scriptText,success,createResponse,faultResponse);
		if (faultResponse IS NOT NULL or success = 0) then
			raise ex value cast(faultResponse as longvarchar);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Update Documentation trigger parameter paths
	 ***************************************************************/

	BEGIN INDEPENDENT TRANSACTION
		-- UpdateTrigger PROJECT_PATH/_scripts/Documentation
		set upgradeVectorRow = VECTOR[
			(8.0, 8.0, &apos;updateTrigger&apos;, null, null, null,

			VECTOR[(newScriptsPath||&apos;/Documentation&apos;,&apos;CONTAINER&apos;)],
			VECTOR[	--updateAction,	occur,numLines,	keyTextVerify,													searchText,														replaceText
				  (&apos;replaceParam&apos;,	0,	0,			newResourcePath||&apos;/&apos;,											oldResourcePath||&apos;/&apos;,											newResourcePath||&apos;/&apos;)
				 ,(&apos;replaceParam&apos;,	0,	0,			newProjectPathReserved||&apos;/&apos;,									oldProjectPathReserved||&apos;/&apos;,									newProjectPathReserved||&apos;/&apos;)
				 ,(&apos;replaceParam&apos;,	0,	0,			REPLACE(newProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;)||&apos;/&apos;,					REPLACE(oldProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;)||&apos;/&apos;,					REPLACE(newProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;)||&apos;/&apos;)
				 ,(&apos;replaceParam&apos;,	0,	0,			&apos;/services/databases/&apos;||REPLACE(newProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;),	&apos;/services/databases/&apos;||REPLACE(oldProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;),&apos;/services/databases/&apos;||REPLACE(newProjectNameReserved,&apos;&quot;&apos;,&apos;&apos;))
				 ,(&apos;replaceParam&apos;,	0,	0,			docRootPath||&apos;/&apos;||newProjectNameReserved||&apos;/&apos;,					docRootPath||&apos;/&apos;||oldProjectNameReserved||&apos;/&apos;,					docRootPath||&apos;/&apos;||newProjectNameReserved||&apos;/&apos;) 
				]) ];

		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:    Execute resourceAction[1]=updateTrigger   dstResource=&apos;||NVL(upgradeVectorRow[1].dstResource[1].&quot;path&quot;,&apos;null&apos;));
		call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/upgradeUpdateTriggerResource(debug,upgradeVectorRow,success);
		IF (success = 0) then
			raise ex value &apos;Update trigger failed.&apos;;
		END IF;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Verify basePath has been updated
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		-- Perform verifications on base path
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(newScriptsPath, null, resourcePathReserved);
		set sqlStatement = &apos;SELECT * from &apos;|| resourcePathReserved||&apos;/Constants/getBasePath()&apos;;

		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    sqlStatement=&apos;||sqlStatement);
		open curs for sqlStatement;
		fetch curs into resourcePath;
		close curs;
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(resourcePath, null, resourcePathReserved);
		if (resourcePathReserved != newProjectPathReserved) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath and newProjectPath DO NOT MATCH.&apos;);
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath=&apos;||resourcePathReserved);
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    newProjectPath=&apos;||newProjectPathReserved);
			raise ex value &apos;The base path from getBasePath()=[&apos;||resourcePathReserved||&apos;] is not equal to the newProjectPath=[&apos;||newProjectPathReserved||&apos;]&apos;;
		else
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath and newProjectPath MATCH.&apos;);
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath=&apos;||resourcePathReserved);
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    newProjectPath=&apos;||newProjectPathReserved);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Verify rebind paths have been updated
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		-- Verify rebind worked correctly
		for r as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(newProjectPath, &apos;CONTAINER&apos;) do
			if (r.resType != &apos;CONTAINER&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;    INSPECTED: &apos;||r.resPath);
				for u as select * from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(r.resPath, r.resType) do
					if (POSITION(oldProjectPath||&apos;/&apos; IN u.resourcePath||&apos;/&apos;) &gt; 0) then
						if (resourcePathList is null) then
							set resourcePathList = &apos;&apos;;
						else
							set resourcePathList = resourcePathList || &apos;, &apos;;
						end if;
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;        used path [not rebound]=&apos;||u.resourcePath); 
						set resourcePathList = resourcePathList || u.resourcePath;
					end if;
				end for;
			end if;
		end for;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		if (resourcePathList is not null) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    resourcePathList not rebound=[&apos;||NVL(resourcePathList,&apos;null&apos;)||&apos;]&apos;);
			raise ex value &apos;The following resources were not rebound: &apos;||resourcePathList;
		else
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    all resources successfully rebound.&apos;);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;


	/***************************************************************
	 * Generate the Test folder if the user requested it
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		if (generateTestFolder is not null and generateTestFolder = 1) then
			call /lib/resource/ResourceExists(newProjectPath||&apos;/Test&apos;, &apos;CONTAINER&apos;, null, resourceExists);
			if (NOT resourceExists) then
				-- Copy the Application directory to Test
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Application folder=[&apos;||NVL(templatePath||&apos;/Test/Application&apos;,&apos;null&apos;)||&apos;]&apos;);
				call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Application&apos;, newProjectPath||&apos;/Test/Application&apos;, success, faultResponse);
				if (faultResponse is not null) then
					raise ex value cast(faultResponse as longvarchar);
				end if;

				-- Copy the Business directory to Test
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Business folder=[&apos;||NVL(templatePath||&apos;/Test/Business&apos;,&apos;null&apos;)||&apos;]&apos;);
				call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Business&apos;, newProjectPath||&apos;/Test/Business&apos;, success, faultResponse);
				if (faultResponse is not null) then
					raise ex value cast(faultResponse as longvarchar);
				end if;

				-- Copy the Physical directory to Test
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Physical folder=[&apos;||NVL(templatePath||&apos;/Test/Physical&apos;,&apos;null&apos;)||&apos;]&apos;);
				call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Physical&apos;, newProjectPath||&apos;/Test/Physical&apos;, success, faultResponse);
				if (faultResponse is not null) then
					raise ex value cast(faultResponse as longvarchar);
				end if;
			else
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:    Resource already exists=[&apos;||NVL(newProjectPath||&apos;/Test&apos;,&apos;null&apos;)||&apos;]&apos;);
			end if;
		else
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:    User chose not to create a Test folder.&apos;);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Update old paths found in TABLE and SQL_SCRPT_PROCEDURE script &quot;text&quot; 
	 ***************************************************************/

	  if (updateScriptText is not null and updateScriptText = 1) then
		BEGIN INDEPENDENT TRANSACTION
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;update Text:   view(table),procedure   newProjectPath=&apos;||newProjectPath);
			-- Get the list of resources
			for r as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(newProjectPath, &apos;CONTAINER&apos;) do

				if (r.resType = &apos;TABLE&apos; and r.subtype =&apos;SQL_TABLE&apos;) then
					-- Get procedure script text 
					call /shared/ASAssets/Utilities/repository/getScriptText(r.resPath,r.resType,r.subtype,scriptText);

					if (POSITION(oldProjectPathReserved||&apos;/&apos; IN scriptText) &gt; 0) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;      UPDATED: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
						-- Replace the basePath with the actual path
						set scriptText = REPLACE(scriptText, oldProjectPathReserved, newProjectPathReserved);
							-- Update the table text
						call /shared/ASAssets/Utilities/repository/updateSqlTable(r.resPath,scriptText,success,createResponse,faultResponse);
						if (faultResponse is not null) then
							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;        ERROR: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
							raise ex value cast(faultResponse as longvarchar);
						end if;
					else
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;    INSPECTED: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
					end if;

				end if;
				if (r.resType = &apos;PROCEDURE&apos; and r.subtype = &apos;SQL_SCRIPT_PROCEDURE&apos;) then
					-- Get procedure script text 
					call /shared/ASAssets/Utilities/repository/getScriptText(r.resPath,r.resType,r.subtype,scriptText);

					if (POSITION(oldProjectPathReserved||&apos;/&apos; IN scriptText) &gt; 0) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;      UPDATED: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
						-- Replace the basePath with the actual path
						set scriptText = REPLACE(scriptText, oldProjectPathReserved, newProjectPathReserved);

						-- Update the script text
						call /shared/ASAssets/Utilities/repository/updateSqlScript(r.resPath,scriptText,success,createResponse,faultResponse);
						if (faultResponse is not null) then
							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;        ERROR: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
							raise ex value cast(faultResponse as longvarchar);
						end if;
					else
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;    INSPECTED: &apos;||LPAD(&apos;[&apos;||r.resType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||r.subtype||&apos;]&apos;,22,&apos; &apos;)||&apos; resourcePath=&apos;||r.resPath);
					end if;
				end if;
			end for;
		EXCEPTION
			ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
		END;

		BEGIN INDEPENDENT TRANSACTION
				-- Get the old published resource type
				for t as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(oldPublishedProjectPath, null) do
					set oldResourceType = t.&quot;type&quot;;
				end for;
		EXCEPTION
			ELSE
				set message = cast(CURRENT_EXCEPTION.TRACE as longvarchar);
				if (INSTR(message, &apos;does not exist&apos;) = 0) THEN
					raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
				else
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Resource DOES NOT EXIST:  oldResourceType=&apos;||NVL(oldResourceType,&apos;null&apos;)||
						&apos;   oldPublishedProjectPath=&apos;||NVL(oldPublishedProjectPath,&apos;null&apos;));
				end if;
		END;

		BEGIN INDEPENDENT TRANSACTION
			-- Get the new published project path from the defaultValues
			call /shared/ASAssets/Utilities/string/getConstantV2(newScriptsPath||&apos;/Constants/defaultValues&apos;, &apos;compositeDatabasePath_&apos;, 1, newPublishedProjectPath);
			set newPublishedProjectPath = REPLACE(newPublishedProjectPath, &apos;&quot;&apos;, &apos;&apos;);
			-- Get the new published project name
			call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(newPublishedProjectPath, &apos;E&apos;, newPublishedProjectName, resourcePath);

			if (oldResourceType is not null and oldPublishedProjectPath is not null and newPublishedProjectName is not null) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;rename published resource:  oldPublishedProjectPath=&apos;||NVL(oldPublishedProjectPath,&apos;null&apos;)||
							&apos;   newPublishedProjectName=&apos;||NVL(newPublishedProjectName,&apos;null&apos;));


				-- Rename the old published resource to the new published name
				call /lib/resource/RenameResource(oldPublishedProjectPath, oldResourceType, newPublishedProjectName);
			else
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;unable to rename published resource:  oldResourceType=&apos;||NVL(oldResourceType,&apos;null&apos;)||
					&apos;   oldPublishedProjectPath=&apos;||NVL(oldPublishedProjectPath,&apos;null&apos;)||
					&apos;   newPublishedProjectName=&apos;||NVL(newPublishedProjectName,&apos;null&apos;));
			end if;
		EXCEPTION
			ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
		END;

	  end if;

	/***************************************************************
	 * Destroy the old resource if it still exists
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		call /lib/resource/ResourceExists(oldProjectPath, &apos;CONTAINER&apos;, null, resourceExists);
		if (resourceExists) then
			-- Destroy the resource
			call /shared/ASAssets/Utilities/repository/destroyResource(oldProjectPath, NULL, &apos;CONTAINER&apos;, success, createResponse, faultResponse);

			if (faultResponse is not null) then
				raise ex value cast(faultResponse as longvarchar);
			end if;
			set message = &apos;OLD Project [&apos;||NVL(oldProjectPath,&apos;null&apos;)||&apos;] successfully destroyed.&apos;;
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
		else
			set message = &apos;OLD Project [&apos;||NVL(oldProjectPath,&apos;null&apos;)||&apos;] does not exist.&apos;;
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	set message = &apos;Project [&apos;||NVL(newProjectPath,&apos;null&apos;)||&apos;] successfully configured.  Click the refresh button in Studio.&apos;;
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600444846</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="generateConfigureStartingFoldersSection" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/generateConfigureStartingFoldersSection" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="inRemainderPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="physicalPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="physicalType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGroupId" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="inGroupPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="procSection" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* generateConfigureStartingFoldersSection:

	This procedure is used to generate the section text for each data source and transformation for ConfigureStartingFolders().

	Input: 
		inRemainderPath - the remainderPath resource path
		physicalPath - the base location of the physical metadata folder
		physicalType - provides a way to determine what path the physical metadata is coming from
			&apos;PM&apos;  = use physicalMetadataPath
			&apos;PFT&apos; = use physicalFormattingTransformationPath
		inGroupId - the section group identifier
		inGroupPath	- the section group path
		groupId - the section group identifier
	Output:
		procSection - the procedure section text

	Exceptions:  N/A

	Modified Date:	Modified By:		CSW Version:	Reason:
	04/15/2013		Mike Tinius			5.2.0			Created new
	11/24/2014		Mike Tinius			6.2.6			8.1.5:  1) Added check for groupId or groupPath with single quotes in them and escape them.
																2) Modified CT_FOLDER (Crud Target) to use the groupPath so that there is a unique path for each data source in the target CRUD folder.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE generateConfigureStartingFoldersSection(
		IN inRemainderPath		VARCHAR(4096), 	-- the remainderPath resource path
		IN physicalPath			VARCHAR(4096),  -- the base location of the physical metadata folder
		IN physicalType			VARCHAR, 		-- provides a way to determine what path the physical metadata is coming from
		IN inGroupId			VARCHAR(4096),  -- the section group identifier
		IN inGroupPath			VARCHAR(4096),	-- the section group path
		OUT procSection			LONGVARCHAR
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;generateConfigureStartingFoldersSection&apos;;
	DECLARE physicalTypeSource	VARCHAR DEFAULT &apos;physicalMetadataPath&apos;;
	DECLARE remainderPath		VARCHAR(4096) DEFAULT inRemainderPath;
	DECLARE groupId				VARCHAR(4096) DEFAULT inGroupId;
	DECLARE groupPath			VARCHAR(4096) DEFAULT inGroupPath;

	call print(moduleName||&apos; : INPUT:&apos;);
	call print(moduleName||&apos; :    inRemainderPath=[&apos;||NVL(inRemainderPath,&apos;null&apos;)||&apos;]&apos;);
	call print(moduleName||&apos; :    physicalPath=[&apos;||NVL(physicalPath,&apos;null&apos;)||&apos;]&apos;);
	call print(moduleName||&apos; :    physicalType=[&apos;||NVL(physicalType,&apos;null&apos;)||&apos;]&apos;);
	call print(moduleName||&apos; :    inGroupId=[&apos;||NVL(inGroupId,&apos;null&apos;)||&apos;]&apos;);
	call print(moduleName||&apos; :    inGroupPath=[&apos;||NVL(inGroupPath,&apos;null&apos;)||&apos;]&apos;);

	if (INSTR(remainderPath, &apos;&apos;&apos;&apos;) &gt; 0) then
		set remainderPath = REPLACE(remainderPath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
	end if;
	if (INSTR(groupId, &apos;&apos;&apos;&apos;) &gt; 0) then
		set groupId = REPLACE(groupId, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
	end if;
	if (INSTR(groupPath, &apos;&apos;&apos;&apos;) &gt; 0) then
		set groupPath = REPLACE(groupPath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
	end if;

	-- physicalMetadataPath
	if (physicalType = &apos;PM&apos;) then
		set physicalTypeSource = &apos;physicalMetadataPath&apos;;
	end if;
	-- physicalFormattingTransformationPath
	if (physicalType = &apos;PFT&apos;) then
		set physicalTypeSource = &apos;physicalFormattingTransformationPath&apos;;
	end if;

	-- Add the data source to the ConfigureStarting Folders
	if (groupId IS NOT NULL AND LENGTH(&apos;|&apos;||groupId||&apos;|&apos;) &gt; 2) then  --notEmpty
		set procSection = &apos;
---------------------------------------------------------------------
-- SECTION: &apos;||groupId||&apos; DATA SOURCE GENERATION FOLDERS
----------------------------------------------------------------------
-- This example shows how to specify the Physical Metadata CIS datasource path for Oracle.
-- Specify the full path all the way down to the Oracle Schema user folder.  This is the folder just above the tables.
-- Comment out or removing SET and INSERT statements that are not needed.
set groupId = &apos;&apos;&apos;||NVL(groupId,&apos;null&apos;)||&apos;&apos;&apos;;
SET PM_FOLDER=&apos;||REPLACE(NVL(physicalTypeSource,&apos;null&apos;)||&apos;||&apos;&apos;/&apos;||NVL(remainderPath,&apos;null&apos;), &apos;//&apos;, &apos;/&apos;)  ||&apos;&apos;&apos;;
SET PV_FOLDER=physicalViewsPath||&apos;&apos;/&apos;||NVL(groupPath,&apos;null&apos;)||&apos;&apos;&apos;;
SET FV_FOLDER=physicalFormattingPath||&apos;&apos;/&apos;||NVL(groupPath,&apos;null&apos;)||&apos;&apos;&apos;;
SET LV_FOLDER=businessLogicalPath||&apos;&apos;/&apos;||NVL(groupPath,&apos;null&apos;)||&apos;&apos;&apos;;
SET BV_FOLDER=businessBusinessPath||&apos;&apos;/&apos;||NVL(groupPath,&apos;null&apos;)||&apos;&apos;&apos;;
SET CV_FOLDER=applicationViewsPath||&apos;&apos;/&apos;||NVL(groupPath,&apos;null&apos;)||&apos;&apos;&apos;;
SET CP_FOLDER=applicationPublishedPath||&apos;&apos;/&apos;||NVL(groupPath,&apos;null&apos;)||&apos;&apos;&apos;;
SET DB_FOLDER=compositeDatabasePath||&apos;&apos;/&apos;||NVL(groupPath,&apos;null&apos;)||&apos;&apos;&apos;;
SET CR_FOLDER=PV_FOLDER; -- CRUD source folder is set to Physical Views
SET CT_FOLDER=crudPath||&apos;&apos;/&apos;||NVL(groupPath,&apos;null&apos;)||&apos;&apos;&apos;; -- CRUD target folder is set to ProjectFolder/Application/Services/&quot;crudpath&quot;/&quot;groupPath&quot;

-- Generate Published Database
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;DB&apos;&apos;,&apos;&apos;A&apos;&apos;,CP_FOLDER,DB_FOLDER);

-- Generate Physical_Metadata source path specified
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;PM&apos;&apos;,&apos;&apos;A&apos;&apos;,physicalMetadataPath,PM_FOLDER);

-- Generate Formatting_Views from the Physical_Metadata source path specified
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;FV&apos;&apos;,&apos;&apos;A&apos;&apos;,PM_FOLDER,FV_FOLDER);

-- Generate Logical_Views from the Formatting_Views source path specified
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;LV&apos;&apos;,&apos;&apos;A&apos;&apos;,FV_FOLDER,LV_FOLDER);

-- Generate Business_Views from the Logical_Views source path specified
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;BV&apos;&apos;,&apos;&apos;A&apos;&apos;,LV_FOLDER,BV_FOLDER);

-- Generate Client_Views from the Business_Views source path specified
--   Path introspection is recursive starting at a base folder.  
--   When you want to generate views from multiple folders in a hierarchy, provide the least common denominator folder 
--   as the base path and set the path derivation mode=&apos;&apos;D&apos;&apos; for derived which will traverse all sub-folders during generation. 
--   When using &apos;&apos;D&apos;&apos;, Consider using base paths for source and target so directories are emulated exactly.
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;CV&apos;&apos;,&apos;&apos;D&apos;&apos;,BV_FOLDER,CV_FOLDER);

-- Generate Client_Published from the Client_Views source path specified 
--   Path introspection is recursive starting at a base folder.  
--   When you want to generate views from multiple folders in a hierarchy, provide the least common denominator folder 
--   as the base path and set the path derivation mode=&apos;&apos;D&apos;&apos; for derived which will traverse all sub-folders during generation. 
--   When using &apos;&apos;D&apos;&apos;, Consider using base paths for source and target so directories are emulated exactly.
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;CP&apos;&apos;,&apos;&apos;D&apos;&apos;,CV_FOLDER,CP_FOLDER);

-- Generate CRUD operations from the CRUD source folder by designating it as the target folder.
-- By generating from the Physical_Views it will insure that no new or derived columns are propagated.
-- It is not permitted to perform a CRUD operation against a view with any derived columns present.
--DEPRECATED: Generate Physical_Views from the Physical_Metadata source path specified
INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;PV&apos;&apos;,&apos;&apos;A&apos;&apos;,PM_FOLDER,PV_FOLDER);

INSERT INTO StartingFolderPipe VALUES (groupId,1,&apos;&apos;CR&apos;&apos;,&apos;&apos;A&apos;&apos;,CR_FOLDER,CT_FOLDER);


&apos;;
		call print(moduleName||&apos; : OUTPUT:&apos;);
		call print(moduleName||&apos; :    procSection=[&apos;||NVL(procSection,&apos;null&apos;)||&apos;]&apos;);

	end if;
END
</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573160027349</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">7/56</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/58</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/143</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/57</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/142</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/59</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/61</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/60</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
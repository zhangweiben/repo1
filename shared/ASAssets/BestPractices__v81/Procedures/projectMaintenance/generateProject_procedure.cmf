<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="generateProject" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/generateProject" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="projectPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="scriptsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="generateTestFolder" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="message" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/MoveResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="targetContainerPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="newName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
      <element name="overwrite" direction="IN">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/rebindGenerationScripts" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="startingResourceFolder" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="rebindOldFolder" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="rebindNewFolder" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resultMessage" direction="OUT">
        <datatype type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/getUtilitiesVersion" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="version" direction="OUT">
        <datatype type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/copyResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="targetFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFolders" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getScriptText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getUsedResourcesCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="usedResCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateTrigger" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="enabled" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="conditionType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="actionType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="triggerAttrVect" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="TriggerType" type="TREE" refId="2">
              <element name="trName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="trValue">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="attributeVect" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="AttributeType" type="TREE" refId="3">
              <element name="attrName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrValue">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="4"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="4"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* generateProject:

	This procedure is used to copy the DataAbstraction_GENERIC_Template to your named project path.
	If the project path already exists, this procedure will not copy over it.   You must delete it
	first before running this procedure again.  

	This procedure is used to configure a new project with the correct paths

	Input: 
		debug - Y=debug, N=do not debug

		projectPath - the full project path
			e.g. /shared/PROJECT1

		scriptsPath	- the full path to the new project scripts folder.  
			e.g. /shared/PROJECT1/_scripts

			1=generate Test folder, 
			0 or null=do not generate Test folder (default)
		generateTestFolder - determine whether to generate the Test folder or not

			1=overwrite the project
			0=do not overwrite the project
		overwrite
	Output:
		message - a resulting message 
		(you must click refresh upon completion for Studio to recognize changes to the new project)

	Exceptions:  ex

	Modified Date:	Modified By:		CSW Version:	Reason:
	04/15/2013		Mike Tinius			5.2.0			Created new
	11/26/2014		Mike Tinius			6.2.6			B.P. 8.1.5: Added a REPLACE in defaultValues section: 
																	set scriptText = REPLACE(scriptText, &apos;8.1;&apos;, CAST(bestPracticesVersionDefault AS VARCHAR)||&apos;;&apos;);
	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	04/15/2019		Mike Tinius			7.0.8			B.P. 2019.200: Added scriptsPath for flexibility of the location of the _scripts folder.
																	   Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE generateProject(
		-- Y=debug, N=do not debug
	IN debug				CHAR(1),	

		-- the full path to a project including the project name
	IN projectPath			VARCHAR(4000), 

		-- the full path to the new project scripts folder.  e.g. /shared/PROJECT1/_scripts
	IN scriptsPath			VARCHAR(4000),

		-- 1=generate test folder, 0 or null (default)=do not generate test folder
	IN generateTestFolder	BIT,

		-- determine whether to overwrite the taget project path or not
		-- 1=overwrite the target project
		-- 0 or null=do not overwrite the target project
	IN overwrite			BIT,

	OUT message				LONGVARCHAR
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;generateProject&apos;;
	DECLARE overwrite_				BIT DEFAULT NVL(overwrite,0);
	DECLARE success					BIT; -- true(1) or false(0)
	DECLARE faultResponse 			XML;
	DECLARE createResponse 			XML;
	DECLARE result					VARCHAR(255);
	DECLARE resultMessage			VARCHAR(4000);
	DECLARE bestPracticesRootPath	VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.bestPracticesRootPath;
	DECLARE utilitiesRootPath		VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.utilitiesRootPath;
	DECLARE templatePath			VARCHAR(4000) DEFAULT bestPracticesRootPath||&apos;/DataAbstraction_GENERIC_Template&apos;;
	DECLARE templateScriptsPath		VARCHAR(4000) DEFAULT templatePath||&apos;/_scripts&apos;;
	DECLARE docDriverPath 			VARCHAR(4000);
	DECLARE docRootPath				VARCHAR(4000) DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.docDefaultRootPath;
	DECLARE bestPracticesVersionDefault DOUBLE DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.bestPracticesVersion;
	DECLARE derivedScriptPath 		VARCHAR(4096);
	DECLARE projectPathReserved		VARCHAR(4096);
	DECLARE scriptsPathReserved		VARCHAR(4096);
	DECLARE projectName				VARCHAR;
	DECLARE projectNameReserved		VARCHAR;
	DECLARE resourcePath			VARCHAR(4000);
	DECLARE scriptText				LONGVARCHAR;
	DECLARE procedureParams			LONGVARCHAR;
	DECLARE sleep					INTEGER DEFAULT 5;
	DECLARE sleepCount				INTEGER DEFAULT 1;
	DECLARE maxSleepCount			INTEGER DEFAULT 5;
	DECLARE version					DOUBLE;
	DECLARE minVersion				DOUBLE DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.minVersion;
	DECLARE ex						EXCEPTION;
	DECLARE curs					CURSOR(basePath VARCHAR(4000));
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE resourcePathList 		LONGVARCHAR;
	DECLARE triggerAttrVect			VECTOR(/shared/ASAssets/Utilities/repository/updateTrigger.TriggerType);
	DECLARE resourceExists			BOOLEAN;

	-- Apply reserved path to project path destination
	call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(projectPath, null, projectPathReserved);
	-- Apply reserved path to scripts path desitnation
	call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(scriptsPath, null, scriptsPathReserved);
	-- Get the project name
	call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(projectPathReserved, &apos;E&apos;, projectNameReserved, resourcePath);
	-- Get the project name
	call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(projectPath, &apos;E&apos;, projectName, resourcePath);

	/***************************************************************
	 * Make sure the Utilities are up to date
	 ***************************************************************/
	call /shared/ASAssets/Utilities/getUtilitiesVersion(version);
	if (version &lt;  minVersion) then
		raise ex value &apos;Utilities &apos;||minVersion||&apos; or higher is required&apos;;
	end if;
	
	/***************************************************************
	 * Don&apos;t overwrite the project if it already exists unless overwrite=1
	 ***************************************************************/
	call /lib/resource/ResourceExists(projectPath, &apos;CONTAINER&apos;, null, resourceExists);
	if (resourceExists and overwrite_ = 0) then
		raise ex value &apos;Resource already exists.  Delete it first and try again. Resource path=&apos;||projectPath;
	end if;

	/***************************************************************
	 * Destroy the new resource if it exists when overwrite = 1
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		call /lib/resource/ResourceExists(projectPath, &apos;CONTAINER&apos;, null, resourceExists);
		if (resourceExists and overwrite_ = 1) then
			-- Destroy the resource
			call /shared/ASAssets/Utilities/repository/destroyResource(projectPath,null,&apos;CONTAINER&apos;,success,createResponse,faultResponse);

			if (faultResponse is not null) then
				raise ex value cast(faultResponse as longvarchar);
			end if;
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Copy DataAbstraction_GENERIC_Template to new project folder
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;copyResources: templatePath=&apos;||templatePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;copyResources: projectPath=&apos;||projectPath);
		-- Copy the Data Abtraction Generic Template
		call /shared/ASAssets/Utilities/repository/copyResources(templatePath, projectPath, success, faultResponse);
		if (faultResponse is not null) then
			raise ex value cast(faultResponse as longvarchar);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Move the template /_scripts to scriptsPath
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		-- Generate the target folders
		call /shared/ASAssets/Utilities/repository/createAllFolders(scriptsPath, success, faultResponse);
		if (faultResponse is not null) then
			raise ex value cast(faultResponse as longvarchar);
		end if;
		-- Get the scripts path and name
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;moveResources: projectPath=&apos;||projectPath||&apos;/_scripts&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;moveResources: scriptsPath=&apos;||scriptsPath);

		call /lib/resource/ResourceExists(scriptsPath||&apos;/_Custom&apos;,&apos;CONTAINER&apos;,null,resourceExists);
		IF (NOT resourceExists) THEN
			call /lib/resource/MoveResource(projectPath||&apos;/_scripts/_Custom&apos;, 		&apos;CONTAINER&apos;, scriptsPath, &apos;_Custom&apos;, true);
		END IF;
		call /lib/resource/ResourceExists(scriptsPath||&apos;/Configure&apos;,&apos;CONTAINER&apos;,null,resourceExists);
		IF (NOT resourceExists) THEN
			call /lib/resource/MoveResource(projectPath||&apos;/_scripts/Configure&apos;, 	&apos;CONTAINER&apos;, scriptsPath, &apos;Configure&apos;, true);
		END IF;
		call /lib/resource/ResourceExists(scriptsPath||&apos;/Constants&apos;,&apos;CONTAINER&apos;,null,resourceExists);
		IF (NOT resourceExists) THEN
			call /lib/resource/MoveResource(projectPath||&apos;/_scripts/Constants&apos;, 	&apos;CONTAINER&apos;, scriptsPath, &apos;Constants&apos;, true);
		END IF;
		call /lib/resource/ResourceExists(scriptsPath||&apos;/Display&apos;,&apos;CONTAINER&apos;,null,resourceExists);
		IF (NOT resourceExists) THEN
			call /lib/resource/MoveResource(projectPath||&apos;/_scripts/Display&apos;, 		&apos;CONTAINER&apos;, scriptsPath, &apos;Display&apos;, true);
		END IF;
		call /lib/resource/ResourceExists(scriptsPath||&apos;/Documentation&apos;,&apos;CONTAINER&apos;,null,resourceExists);
		IF (NOT resourceExists) THEN
			call /lib/resource/MoveResource(projectPath||&apos;/_scripts/Documentation&apos;, &apos;CONTAINER&apos;, scriptsPath, &apos;Documentation&apos;, true);
		END IF;
		call /lib/resource/ResourceExists(scriptsPath||&apos;/Generate&apos;,&apos;CONTAINER&apos;,null,resourceExists);
		IF (NOT resourceExists) THEN
			call /lib/resource/MoveResource(projectPath||&apos;/_scripts/Generate&apos;, 		&apos;CONTAINER&apos;, scriptsPath, &apos;Generate&apos;, true);
		END IF;
		call /lib/resource/ResourceExists(scriptsPath||&apos;/Rebind&apos;,&apos;CONTAINER&apos;,null,resourceExists);
		IF (NOT resourceExists) THEN
			call /lib/resource/MoveResource(projectPath||&apos;/_scripts/Rebind&apos;, 		&apos;CONTAINER&apos;, scriptsPath, &apos;Rebind&apos;, true);
		END IF;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Update project basePath in /Constants/defaultValues
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		-- Get the defaultValues procedure script text 
		set resourcePath = scriptsPath||&apos;/Constants/defaultValues&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;getScriptText: resourcePath=&apos;||resourcePath);
		call /shared/ASAssets/Utilities/repository/getScriptText(resourcePath,&apos;PROCEDURE&apos;,&apos;SQL_SCRIPT_PROCEDURE&apos;,scriptText);

		-- Replace the version number
		set scriptText = REPLACE(scriptText, &apos;8.1;&apos;, CAST(bestPracticesVersionDefault AS VARCHAR)||&apos;;&apos;);

		-- Replace the basePath with the reserved project path
		set scriptText = REPLACE(scriptText, templatePath, projectPathReserved);

		-- Replace the scriptsPath with the derived path in this text: REPLACE(basePath||&apos;/&quot;_scripts&quot;&apos;,&apos;//&apos;,&apos;/&apos;);
		set derivedScriptPath = REPLACE(scriptsPath, projectPath, &apos;&apos;);
		call  /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(derivedScriptPath, null, derivedScriptPath);
		set scriptText = REPLACE(scriptText, &apos;/&quot;_scripts&quot;&apos;, derivedScriptPath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;getScriptText: derivedScriptPath=&apos;||derivedScriptPath);

		-- Replace the default database path &quot;/services/databases/DataAbstraction_GENERIC_Template&quot; with the &quot;/services/databases/&lt;project_name&gt;&quot; path
		set scriptText = REPLACE(scriptText, &apos;/services/databases/DataAbstraction_GENERIC_Template&apos;, &apos;/services/databases/&apos;||projectNameReserved);

		-- Update the defaultValue procedure with the new script text
		call /shared/ASAssets/Utilities/repository/updateSqlScript(resourcePath,scriptText,success,createResponse,faultResponse);
		if (faultResponse is not null) then
			raise ex value cast(faultResponse as longvarchar);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Rebind all procedures found in /_scripts directory
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		-- Rebind the generation scripts &quot;/_scripts/Constants&quot; path
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;rebindGenerationScripts: startingPath=&apos;||scriptsPath); --/shared/TEST1/_scripts
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;rebindGenerationScripts:   rebindFrom=&apos;||templateScriptsPath); -- /shared/BestPractices/DataAbstraction_GENERIC_Template/_scripts
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;rebindGenerationScripts:     rebindTo=&apos;||scriptsPath); -- /shared/TEST1/_scripts
		call /shared/ASAssets/BestPractices_v81/Procedures/rebindGenerationScripts(debug, scriptsPath, templateScriptsPath, scriptsPath, result, resultMessage);
		if (faultResponse is not null) then
			raise ex value cast(resultMessage as longvarchar);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Update Documentation trigger parameter paths
	 ***************************************************************/
	-- Set the documentation driver
	set docDriverPath = scriptsPath||&apos;/Documentation/documentationDriverWrapper&apos;;

	BEGIN INDEPENDENT TRANSACTION
		-- Update Documentation Trigger for documentationTrigger_Application_Client_Published
		set resourcePath = scriptsPath||&apos;/Documentation/documentationTrigger_Application_Published&apos;;
		set procedureParams = &apos;&apos;&apos;applicationPublishedPath_&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;doc_BestPractices_Application_Published.txt&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:    resourcePath=&apos;||resourcePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:   docDriverPath=&apos;||docDriverPath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger: procedureParams=&apos;||procedureParams);
		-- Set up the trigger vector to be passed into updateTrigger()
		SET triggerAttrVect = VECTOR[
			(&apos;procedurePath&apos;, 			docDriverPath),
			(&apos;procedureParams&apos;, 		procedureParams),
			(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
			(&apos;maxEventsQueued&apos;, 		&apos;1&apos;)
		];

		-- Update the trigger
		CALL /shared/ASAssets/Utilities/repository/updateTrigger(
				resourcePath, 			-- fullResourcePath
				0, 						-- enabled
				&apos;TIMER&apos;, 				-- conditionType
				&apos;PROCEDURE&apos;, 			-- actionType,
				triggerAttrVect,
				NULL, 					-- attributeVect,		
				success,
				createResponse,
				faultResponse
			);

		-- Update Documentation Trigger for documentationTrigger_Application_Client_Services
		set resourcePath = scriptsPath||&apos;/Documentation/documentationTrigger_Application_Services&apos;;
		set procedureParams = &apos;&apos;&apos;applicationServicesPath_&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;doc_BestPractices_Application_Services.txt&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:    resourcePath=&apos;||resourcePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:   docDriverPath=&apos;||docDriverPath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger: procedureParams=&apos;||procedureParams);
		-- Set up the trigger vector to be passed into updateTrigger()
		SET triggerAttrVect = VECTOR[
			(&apos;procedurePath&apos;, 			docDriverPath),
			(&apos;procedureParams&apos;, 		procedureParams),
			(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
			(&apos;maxEventsQueued&apos;, 		&apos;1&apos;)
		];

		-- Update the trigger
		CALL /shared/ASAssets/Utilities/repository/updateTrigger(
				resourcePath, 			-- fullResourcePath
				0, 						-- enabled
				&apos;TIMER&apos;, 				-- conditionType
				&apos;PROCEDURE&apos;, 			-- actionType,
				triggerAttrVect,
				NULL, 					-- attributeVect,		
				success,
				createResponse,
				faultResponse
			);

		-- Update Documentation Trigger for documentationTrigger_Application_Client_Views
		set resourcePath = scriptsPath||&apos;/Documentation/documentationTrigger_Application_Views&apos;;
		set procedureParams = &apos;&apos;&apos;applicationViewsPath_&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;doc_BestPractices_Application_Views.txt&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:    resourcePath=&apos;||resourcePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:   docDriverPath=&apos;||docDriverPath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger: procedureParams=&apos;||procedureParams);
		-- Set up the trigger vector to be passed into updateTrigger()
		SET triggerAttrVect = VECTOR[
			(&apos;procedurePath&apos;, 			docDriverPath),
			(&apos;procedureParams&apos;, 		procedureParams),
			(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
			(&apos;maxEventsQueued&apos;, 		&apos;1&apos;)
		];

		-- Update the trigger
		CALL /shared/ASAssets/Utilities/repository/updateTrigger(
				resourcePath, 			-- fullResourcePath
				0, 						-- enabled
				&apos;TIMER&apos;, 				-- conditionType
				&apos;PROCEDURE&apos;, 			-- actionType,
				triggerAttrVect,
				NULL, 					-- attributeVect,		
				success,
				createResponse,
				faultResponse
			);

		-- Update Documentation Trigger for documentationTrigger_Business_Business_Views
		set resourcePath = scriptsPath||&apos;/Documentation/documentationTrigger_Business_Business&apos;;
		set procedureParams = &apos;&apos;&apos;businessBusinessPath_&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;doc_BestPractices_Business_Business.txt&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:    resourcePath=&apos;||resourcePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:   docDriverPath=&apos;||docDriverPath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger: procedureParams=&apos;||procedureParams);
		-- Set up the trigger vector to be passed into updateTrigger()
		SET triggerAttrVect = VECTOR[
			(&apos;procedurePath&apos;, 			docDriverPath),
			(&apos;procedureParams&apos;, 		procedureParams),
			(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
			(&apos;maxEventsQueued&apos;, 		&apos;1&apos;)
		];

		-- Update the trigger
		CALL /shared/ASAssets/Utilities/repository/updateTrigger(
				resourcePath, 			-- fullResourcePath
				0, 						-- enabled
				&apos;TIMER&apos;, 				-- conditionType
				&apos;PROCEDURE&apos;, 			-- actionType,
				triggerAttrVect,
				NULL, 					-- attributeVect,		
				success,
				createResponse,
				faultResponse
			);

		-- Update Documentation Trigger for documentationTrigger_Business_Logical_Views
		set resourcePath = scriptsPath||&apos;/Documentation/documentationTrigger_Business_Logical&apos;;
		set procedureParams = &apos;&apos;&apos;businessLogicalPath_&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;doc_BestPractices_Business_Logical.txt&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:    resourcePath=&apos;||resourcePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:   docDriverPath=&apos;||docDriverPath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger: procedureParams=&apos;||procedureParams);
		-- Set up the trigger vector to be passed into updateTrigger()
		SET triggerAttrVect = VECTOR[
			(&apos;procedurePath&apos;, 			docDriverPath),
			(&apos;procedureParams&apos;, 		procedureParams),
			(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
			(&apos;maxEventsQueued&apos;, 		&apos;1&apos;)
		];

		-- Update the trigger
		CALL /shared/ASAssets/Utilities/repository/updateTrigger(
				resourcePath, 			-- fullResourcePath
				0, 						-- enabled
				&apos;TIMER&apos;, 				-- conditionType
				&apos;PROCEDURE&apos;, 			-- actionType,
				triggerAttrVect,
				NULL, 					-- attributeVect,		
				success,
				createResponse,
				faultResponse
			);

		-- Update Documentation Trigger for documentationTrigger_DATABASE
		set resourcePath = scriptsPath||&apos;/Documentation/documentationTrigger_DATABASE&apos;;
		set procedureParams = &apos;&apos;&apos;compositeDatabasePath_&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;doc_BestPractices_DATABASE.txt&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:    resourcePath=&apos;||resourcePath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger:   docDriverPath=&apos;||docDriverPath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger: procedureParams=&apos;||procedureParams);
		-- Set up the trigger vector to be passed into updateTrigger()
		SET triggerAttrVect = VECTOR[
			(&apos;procedurePath&apos;, 			docDriverPath),
			(&apos;procedureParams&apos;, 		procedureParams),
			(&apos;procedureExhaustCursors&apos;, &apos;0&apos;),
			(&apos;maxEventsQueued&apos;, 		&apos;1&apos;)
		];

		-- Update the trigger
		CALL /shared/ASAssets/Utilities/repository/updateTrigger(
				resourcePath, 			-- fullResourcePath
				0, 						-- enabled
				&apos;TIMER&apos;, 				-- conditionType
				&apos;PROCEDURE&apos;, 			-- actionType,
				triggerAttrVect,
				NULL, 					-- attributeVect,		
				success,
				createResponse,
				faultResponse
			);

	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;


	/***************************************************************
	 * Verify basePath has been updated
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		-- Perform verifications on base path
		set sqlStatement = &apos;SELECT * from &apos;|| scriptsPathReserved||&apos;/Constants/getBasePath()&apos;;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    sqlStatement=&apos;||sqlStatement);
		open curs for sqlStatement;
		fetch curs into resourcePath;
		close curs;
		if (resourcePath != projectPathReserved) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath and projectPath DO NOT MATCH.&apos;);
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath=&apos;||NVL(resourcePath,&apos;null&apos;));
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    projectPath=&apos;||projectPathReserved);
			raise ex value &apos;The base path from getBasePath()=[&apos;||NVL(resourcePath,&apos;null&apos;)||&apos;] is not equal to the projectPath=[&apos;||projectPathReserved||&apos;]&apos;;
		else
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath and projectPath MATCH.&apos;);
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:        basePath=&apos;||NVL(resourcePath,&apos;null&apos;));
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    projectPath=&apos;||projectPathReserved);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Verify rebind paths have been updated
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
		-- Verify rebind worked correctly
		for r as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(projectPath, &apos;CONTAINER&apos;) do
			if (r.resType != &apos;CONTAINER&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;    INSPECTED: &apos;||r.resPath);
				for u as select * from /shared/ASAssets/Utilities/repository/getUsedResourcesCursor(r.resPath, r.resType) do
					if (POSITION(templatePath||&apos;/&apos; IN u.resourcePath||&apos;/&apos;) &gt; 0) then
						if (resourcePathList is null) then
							set resourcePathList = &apos;&apos;;
						else
							set resourcePathList = resourcePathList || &apos;, &apos;;
						end if;
						set resourcePathList = resourcePathList || u.resourcePath;
					end if;
				end for;
			end if;
		end for;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;&apos;);
		if (resourcePathList is not null) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    resourcePathList not rebound=[&apos;||NVL(resourcePathList,&apos;null&apos;)||&apos;]&apos;);
			raise ex value &apos;The following resources were not rebound: &apos;||resourcePathList;
		else
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;verify:    all resources successfully rebound.&apos;);
		end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	/***************************************************************
	 * Generate the Test folder if the user requested it
	 ***************************************************************/
	BEGIN INDEPENDENT TRANSACTION
	if (generateTestFolder is not null and generateTestFolder = 1) then
		call /lib/resource/ResourceExists(projectPath||&apos;/Test&apos;, &apos;CONTAINER&apos;, null, resourceExists);
		if (NOT resourceExists) then
				-- Copy the Application directory to Test
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Application folder=[&apos;||NVL(projectPath||&apos;/Test/Application&apos;,&apos;null&apos;)||&apos;]&apos;);
				call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Application&apos;, projectPath||&apos;/Test/Application&apos;, success, faultResponse);
				if (faultResponse is not null) then
					raise ex value cast(faultResponse as longvarchar);
				end if;

				-- Copy the Business directory to Test
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Business folder=[&apos;||NVL(projectPath||&apos;/Test/Business&apos;,&apos;null&apos;)||&apos;]&apos;);
				call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Business&apos;, projectPath||&apos;/Test/Business&apos;, success, faultResponse);
				if (faultResponse is not null) then
					raise ex value cast(faultResponse as longvarchar);
				end if;

				-- Copy the Physical directory to Test
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:      Copy Physical folder=[&apos;||NVL(projectPath||&apos;/Test/Physical&apos;,&apos;null&apos;)||&apos;]&apos;);
				call /shared/ASAssets/Utilities/repository/copyResources(templatePath||&apos;/Physical&apos;, projectPath||&apos;/Test/Physical&apos;, success, faultResponse);
				if (faultResponse is not null) then
					raise ex value cast(faultResponse as longvarchar);
				end if;
		else
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:    Resource already exists=[&apos;||NVL(projectPath||&apos;/Test&apos;,&apos;null&apos;)||&apos;]&apos;);
		end if;
	else
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;generateTest:    User chose not to create a Test folder.&apos;);
	end if;
	EXCEPTION
		ELSE raise ex value cast(CURRENT_EXCEPTION.TRACE as longvarchar);
	END;

	set message = &apos;Project [&apos;||NVL(projectPath,&apos;null&apos;)||&apos;] successfully configured.  Click the refresh button in Studio.&apos;;
	call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564600547051</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
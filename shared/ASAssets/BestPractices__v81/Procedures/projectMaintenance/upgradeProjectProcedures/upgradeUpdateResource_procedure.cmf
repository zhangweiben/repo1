<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="upgradeUpdateResource" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/upgradeUpdateResource" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="upgradeVectorRow" direction="IN" nullable="true">
      <datatype name="upgradeVector" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="upgradeType" type="TREE" refId="1">
            <element name="bestPracticesVersionFrom">
              <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
            </element>
            <element name="bestPracticesVersionTo">
              <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
            </element>
            <element name="resourceAction">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="resourcePath">
              <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
            </element>
            <element name="resourceType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="srcResource">
              <datatype name="srcResource" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="resourceType" referenceDefinitionSet="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" referenceType="resourceType" type="TREE" refId="2">
                    <element name="path">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="dstResource">
              <datatype name="dstResource" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <reference refId="2"/>
                </itemDatatype>
              </datatype>
            </element>
            <element name="updateStruct">
              <datatype name="updateStruct" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="updateType" type="TREE" refId="3">
                    <element name="updateAction">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="occurrence">
                      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                    </element>
                    <element name="numLines">
                      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                    </element>
                    <element name="keyTextVerify">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="searchText">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="replaceText">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSearchText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inScriptText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inSearchText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="numOccurrences" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/modifyConstant" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantsValue" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/getValueFromXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="namespaces" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXpath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inXml" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	upgradeUpdateResource:

	This procedure is invoked by &quot;upgradeProject&quot; when the resource action=&quot;update&quot;.  This procedure updates a resource
		from a destination path and type.  This procedure uses the &quot;updateStruct&quot; vector to provide additional direction
		when updating procedure script text in place such as &quot;replace&quot;, &quot;replaceBefore&quot;, or &quot;replaceAfter&quot;.

	Input: 
		debug - &apos;Y&apos;=debug, &apos;N&apos;=do not debug
		upgradeVectorRow - This is a single row from the upgradeVector which is defined below
	Output:
		success - 1=success, 0=fail
	Exceptions: ex - throw an exception upon error

	-----------------------------------------------------------------------------
	The following defines the structures that are used for upgrading a project:
	-----------------------------------------------------------------------------
	DECLARE PUBLIC TYPE upgradeType ROW(
		bestPracticesVersion	DOUBLE,					-- version of the best practices where the change is being applied
		resourceAction			VARCHAR					-- action to take on the resource: 
														--		     copy - copy srcResource to dstResource.  srcResource and dstResource required.  updateStruct is null.
														--	                if resource type is CONTAINER then copy all resources
														--	                if resource type is not CONTAINER then copy specific resource
														--		copyLeave - copy srcResource to _Copy_#.  srcResource is required.  dstResource and updateStruct are null.
														--	                Creates a copy of a resource and leaves the original in place. 
														--	                The copy detects other copies an increments the number as needed in the format of _Copy_#
														--	   copyRename - copy srcResource to _Copy_#.  srcResource is required.  dstResource and updateStruct are null.
														--	                Creates a copy of a resource and renames the original to it.  The original is no longer present.
														--	                The copy detects other copies an increments the number as needed in the format of _Copy_#
														--	 copyChildren - copy the children of srcResource to dstResource.  srcResource and dstResource required.  updateStruct is null.
														--	                Only copying from CONTAINER to CONTAINER is allowed.
														--		   update - update dstResource using updateStruct.  srcResource is null.
														--  updateTrigger - update all trigger resources found starting at dstResource using updateStruct.  srcResource is null.
														--					 dstResource can be a single trigger or folder of triggers.
														--	   updateCrud - update CRUD resources specified by dstResource using updateStruct.  srcResource is null.
														--		   delete - delete dstResource.  srcResource and updateStruct are null.
														--		     move - move srcResource to dstResource.  updateStruct is null.
														--     moveCustom - move all custom scripts from srcResource folder to the specified dstResource folder. updateStruct is null.
														--                  a custom resource is determined by finding a resource in dstResource that is not in the DataAbstraction_GENERIC_Template.
														--         rebind - rebind srcResource to dstResource using startingFolder.  updateStruct is null.
		resourcePath			VARCHAR(4000),			-- resource path of the resource or starting folder to be used with rebind action otherwise null.
		resourceType			VARCHAR,				-- resource type of the resource to be used with rebind action otherwise null.
		srcResource				VECTOR(resourceType), 	-- source reource is always a vector of 1
		srcResource				VECTOR(resourceType), 	-- source reource is always a vector of 1
		dstResource				VECTOR(resourceType),	-- destination resource may be an unbounded vector
		updateStruct			VECTOR(updateType),		-- this structure is used when the resourceAction=update otherwise null
	);
	DECLARE PUBLIC TYPE resourceType 	ROW(
		&quot;path&quot;		TypeDefinitions.pathType,	-- Path to resource
		&quot;type&quot;		VARCHAR(255)				-- Resoruce type
	);
	DECLARE PUBLIC TYPE updateType ROW(
		updateAction			VARCHAR,			-- update Action: 			replace, replaceBefore, replaceAfter [all actions are performed on a given resource]
													-- updateTrigger Action: 	replacePath, replaceParam, fixParam [All actions are performed on a given trigger resource]
		occurrence				INTEGER,			-- The occurrence of the searchText to act upon.  0=take action on all occurrences
		numLines				INTEGER,			-- If updateAction=replaceBefore or replaceAfter, then then perform that action by searching
													--   for the number of lines CHR(10) either before or after and placing the text at that location.
		keyTextVerify			VARCHAR,			-- This is short unique text from the replaceText variable that allows the code to verify if the replace has already been done.
		searchText				LONGVARCHAR,		-- The text to search for.  
													-- If multiple occurrences are found the action may be taken according to the defined occurrence.
													-- If the searchText is not found then no action is taken.
		replaceText				LONGVARCHAR			-- The text to replace given the update action.
	);

	Modified Date:	Modified By:		CSW Version:	Reason:
	05/14/2010		Mike Tinius			6.0.0			Created new
	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	03/14/2019		Mike Tinius			7.0.8			B.P. 2019.102: Removed projectPath as it was not referenced in the code.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE upgradeUpdateResource(	
	IN debug				CHAR(1),	
	-- This is a single row from the upgradeVector	
	IN	upgradeVectorRow 	/shared/ASAssets/BestPractices_v81/Procedures/TypeDefinitions.upgradeVector, 
	OUT success				INTEGER
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;upgradeUpdateResource&apos;;
	DECLARE debug2				CHAR(1) DEFAULT &apos;N&apos;; -- second level of debug
	DECLARE debug3				CHAR(1) DEFAULT &apos;N&apos;; -- third level of debug
	DECLARE dstPath				VARCHAR(4000);
	DECLARE dstType				VARCHAR;
	DECLARE subtype				VARCHAR;
	DECLARE i,j,k				INTEGER DEFAULT 1;
	DECLARE pos,len, numLinePos INTEGER;
	DECLARE delimiter 			VARCHAR DEFAULT CHR(10);
	DECLARE createResponse 		XML;
	DECLARE faultResponse		XML;
	DECLARE prependMessage		VARCHAR(4000);
	DECLARE updateAction		VARCHAR;
	DECLARE numLines			INTEGER;
	DECLARE occurrence			INTEGER;
	DECLARE numOccurrence		INTEGER;
	DECLARE allOccurrences		BOOLEAN;
	DECLARE keyTextVerify		VARCHAR(4000);
	DECLARE searchTextVerifyCount INTEGER;
	DECLARE searchText			LONGVARCHAR;
	DECLARE replaceText			LONGVARCHAR;
	DECLARE scriptText			LONGVARCHAR;
	DECLARE textBefore			LONGVARCHAR;
	DECLARE textAfter			LONGVARCHAR;
	DECLARE namespaces			VARCHAR(305) DEFAULT &apos;xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot; xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&apos;;
	DECLARE resourceExists 		BOOLEAN;
	DECLARE xmlOut				XML;
	DECLARE xpath				VARCHAR(4000);
	DECLARE message				LONGVARCHAR;
	DECLARE replacedText		BOOLEAN;
	DECLARE displayText			LONGVARCHAR;
	DECLARE displayLen			INTEGER DEFAULT 150;
	DECLARE eol					VARCHAR DEFAULT chr(10);
	DECLARE ex					EXCEPTION;

	/***************************************************************
	 * Loop through the vector.  The dstResource vector is the only
	 *    vector that matters when deleting a target destination resource. 
	 ***************************************************************/
	WHILE (i &lt;= CARDINALITY(upgradeVectorRow[1].dstResource)) DO

		-- Make sure the dstResource is not null
		if (upgradeVectorRow[1].dstResource is null) then
			raise ex value moduleName||&apos;:  UPDATE ACTION: The dstResource[&apos;||i||&apos;] vector may not be null.&apos;;
		end if;

		-- Get the destination path information
		set dstPath = upgradeVectorRow[1].dstResource[i].&quot;path&quot;;
		set dstType = upgradeVectorRow[1].dstResource[i].&quot;type&quot;;

		-- Validate that the destination information is not empty
		if ( (dstPath IS NULL OR LENGTH(&apos;|&apos;||dstPath||&apos;|&apos;) = 2) or  --Empty
			 (dstType IS NULL OR LENGTH(&apos;|&apos;||dstType||&apos;|&apos;) = 2) ) then  --Empty
			raise ex value moduleName||&apos;:  UPDATE ACTION: The following dstResource[&apos;||i||&apos;] vector entries may be null or empty: dstPath, dstType&apos;;
		end if;

		-- Verify the source path exists.
		call /lib/resource/ResourceExists(dstPath, dstType, null, resourceExists);
		if (NOT resourceExists) then
			raise ex value moduleName||&apos;:  UPDATE ACTION:  The dstResource[&apos;||i||&apos;] vector entry path does not exist=&apos;||NVL(dstPath,&apos;null&apos;);
		end if;

		set prependMessage = moduleName||&apos;:  UPDATE ACTION: Error with vector entry[&apos;||i||&apos;].  Error=&apos;;

		BEGIN INDEPENDENT TRANSACTION
			-- Retrieve the resource XML
			call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(dstPath, dstType, xmlOut);
		EXCEPTION
			ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
		END;

		set xpath = &apos;/resource:getResourceResponse/resource:resources/resource:resource/resource:subtype&apos;;
		call /shared/ASAssets/Utilities/&quot;xml&quot;/getValueFromXML(debug2, namespaces, xpath, CAST(xmlOut as LONGVARCHAR), subtype);

/*
		updateAction			VARCHAR,			-- Update Action: replace, replaceBefore, replaceAfter
		occurrence				INTEGER,			-- The occurrence of the searchText to act upon.  0=take action on all occurrences
		numLines				INTEGER,			-- If updateAction=replaceBefore or replaceAfter, then then perform that action by searching
													--   for the number of lines CHR(10) either before or after and placing the text at that location.
		searchText				LONGVARCHAR,		-- The text to search for.  
													-- If multiple occurrences are found the action may be taken according to the defined occurrence.
													-- If the searchText is not found then no action is taken.
		replaceText				LONGVARCHAR			-- The text to replace given the update action.

	,(&apos;replaceAfter&apos;,1,&apos;OUT generationScriptsPath_					VARCHAR(4000),&apos;,eol||&apos;	-- Database Layer&apos;||eol||&apos;	OUT compositeDatabasePath_					VARCHAR(4000),&apos;||eol)
	,(&apos;replaceBefore&apos;,1,&apos;-- Identifies the base path where the Best Practices scripts live&apos;,eol||&apos;	-- This is the version of the Best Practices in this project&apos;||eol||&apos;	DECLARE PUBLIC bestPracticesVersion	CONSTANT VARCHAR 			DEFAULT &apos;&apos;7.1&apos;&apos;;&apos;||eol)
*/
		if (dstType = &apos;PROCEDURE&apos; and subtype = &apos;SQL_SCRIPT_PROCEDURE&apos;) then
			-- Get procedure script text 
			set xpath = &apos;/resource:getResourceResponse/resource:resources/resource:resource/resource:scriptText&apos;;
			call /shared/ASAssets/Utilities/&quot;xml&quot;/getValueFromXML(debug2, namespaces, xpath, CAST(xmlOut as LONGVARCHAR), scriptText);

			set replacedText = false;

			-- Loop through all of the modifications before updating
			set j = 1;
			WHILE (j &lt;= CARDINALITY(upgradeVectorRow[1].updateStruct)) DO

				set updateAction = upgradeVectorRow[1].updateStruct[j].updateAction;
				set numLines = upgradeVectorRow[1].updateStruct[j].numLines;
				set occurrence = upgradeVectorRow[1].updateStruct[j].occurrence;
				if (occurrence is null) then
					raise ex value moduleName||&apos;:  The upgradeVectorRow[1].updateStruct[&apos;||j||&apos;].occurrence may not be null.&apos;;
				end if;
				set keyTextVerify = upgradeVectorRow[1].updateStruct[j].keyTextVerify;
				set searchText = upgradeVectorRow[1].updateStruct[j].searchText;
				set replaceText = upgradeVectorRow[1].updateStruct[j].replaceText;

				-- Verify if the target already contains the replacement text by checking the key text verify string against the script text
				call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences(debug, scriptText, searchText, searchTextVerifyCount);
--				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
--				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  searchText:&apos;||NVL(searchText,&apos;null&apos;));
--				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  searchTextVerifyCount:&apos;||NVL(cast(searchTextVerifyCount as varchar),&apos;null&apos;));
--				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  occurrence:&apos;||NVL(cast(occurrence as varchar),&apos;null&apos;));

				-- If the search text exists then continue
				if (searchTextVerifyCount &gt; 0) then

					set displayText = substring(searchText,1,displayLen);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  updateAction=&apos;||NVL(updateAction,&apos;null&apos;)||&apos;         searchText=&apos;||NVL(displayText,&apos;null&apos;));

					-- Modify a constant
					if (UPPER(updateAction) = UPPER(&apos;modifyConstant&apos;)) then
						BEGIN INDEPENDENT TRANSACTION
							call /shared/ASAssets/Utilities/string/modifyConstant(dstPath, keyTextVerify, replaceText);
							set replacedText = true;
						EXCEPTION
							ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
						END;

						-- Re-read the sqlscript text for the modify procedure.
						BEGIN INDEPENDENT TRANSACTION
							-- Retrieve the resource XML
							call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(dstPath, dstType, xmlOut);
							-- Get procedure script text 
							set xpath = &apos;/resource:getResourceResponse/resource:resources/resource:resource/resource:scriptText&apos;;
							call /shared/ASAssets/Utilities/&quot;xml&quot;/getValueFromXML(debug2, namespaces, xpath, CAST(xmlOut as LONGVARCHAR), scriptText);
						EXCEPTION
							ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
						END;

					-- Replace the search text
					elseif (UPPER(updateAction) = UPPER(&apos;replace&apos;)) then
						-- Escape any regex search characters
						call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText(searchText,searchText);

						set displayText = substring(searchText,1,displayLen);
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  updateAction=&apos;||NVL(updateAction,&apos;null&apos;)||&apos;  escape searchText=&apos;||NVL(displayText,&apos;null&apos;));
						set displayText = substring(replaceText,1,displayLen);
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  updateAction=&apos;||NVL(updateAction,&apos;null&apos;)||&apos;        replaceText=&apos;||NVL(displayText,&apos;null&apos;));

						-- Perform the regex replace
						call /shared/ASAssets/Utilities/string/TextUtils/RegexReplace(scriptText, searchText, NVL(replaceText,&apos;null&apos;), occurrence, scriptText);
						set replacedText = true;
--						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  searchText:&apos;||NVL(searchText,&apos;null&apos;));
--						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  replaceText:&apos;||NVL(replaceText,&apos;null&apos;));
--						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  scriptText:&apos;||eol||scriptText);
					else
						if (occurrence &gt; 0) then
							set numOccurrence = 1; -- set the loop control to 1 to only go through once
							set allOccurrences = false;
						else
							-- set the loop control to go through all occurrences
							call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/getNumOccurrences(debug, scriptText, searchText, numOccurrence);
							set occurrence = 0;
							set allOccurrences = true;
						end if;

						-- Loop through the occurrences
						set k = 1;
						WHILE (k &lt;= numOccurrence) DO
--							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ###############################################################################################&apos;);
							if (allOccurrences) then
								set occurrence = occurrence + 1;
							end if;
							-- Escape any regex search characters
							call /shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/escapeSearchText(searchText,searchText);
							-- Get the position of the search Text in the script text based on the occurrence wanted
							call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(scriptText,searchText,occurrence,pos);

							-- Process it if a position was found
							if (pos &gt; 0) then

								-- Replace before the search text
								if (UPPER(updateAction) = UPPER(&apos;replaceBefore&apos;)) then
									-- Extract the text before the text found position
									set textBefore = SUBSTRING(scriptText,1,pos-1);

									-- Get the position of the number of lines before
									if (numLines is null or numLines = 0) then
										set numLinePos = 0;
									else
										call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(textBefore,delimiter,0 - numLines, numLinePos);
									end if;
/*
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  occurrence=&apos;||occurrence);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  len=&apos;||len);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  pos=&apos;||pos);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  numLinePos=&apos;||numLinePos);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  textBefore&apos;||eol||textBefore);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
*/
									if (numLinePos &gt; 0) then
										-- Insert the replace text within the text before using numLinePos
										set textBefore = SUBSTRING(textBefore,1,numLinePos)||NVL(replaceText,&apos;null&apos;)||SUBSTRING(textBefore,numLinePos,LENGTH(textBefore));
									else
										-- Insert the replace text after the extracted text Before
										set textBefore = textBefore||NVL(replaceText,&apos;null&apos;);
									end if;
									set scriptText = textBefore||SUBSTRING(scriptText,pos,LENGTH(scriptText));
									set replacedText = true;

--									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  scriptText:&apos;||eol||scriptText);
								end if;

								-- Replace after the search text
								if (UPPER(updateAction) = UPPER(&apos;replaceAfter&apos;)) then
									set len = LENGTH(searchText);
									-- Extract the text after the text found position
									set textAfter = SUBSTRING(scriptText,pos+len,LENGTH(scriptText));
									-- Get the position of the number of lines after
									if (numLines is null or numLines = 0) then
										set numLinePos = 0;
									else
										call /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(textAfter,delimiter,numLines,numLinePos);
									end if;
/*
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  occurrence=&apos;||occurrence);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  len=&apos;||len);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  pos=&apos;||pos);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  numLinePos=&apos;||numLinePos);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  textAfter&apos;||eol||textAfter);
									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ------------------------------------------------------------------&apos;);
*/
									if (numLinePos &gt; 0) then
										-- Insert the replace text within the text after the numLinePos and before the remaining text
										set textAfter = SUBSTRING(textAfter,1,numLinePos)||NVL(replaceText,&apos;null&apos;)||SUBSTRING(textAfter,numLinePos+1,LENGTH(textAfter));
									else
										-- Insert the replace text before the extracted text After
										set textAfter = NVL(replaceText,&apos;null&apos;)||textAfter;
									end if;
									set scriptText = SUBSTRING(scriptText,1,pos+len-1)||textAfter;
									set replacedText = true;
		
---									call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  scriptText:&apos;||eol||scriptText);
								end if;
							end if;

--							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug3, &apos;:  ###############################################################################################&apos;);
							set k = k + 1;
						END WHILE;
					end if;

				else
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;:  updateAction=&apos;||updateAction||&apos;  keyTextVerify=[&apos;||NVL(keyTextVerify,&apos;null&apos;)||&apos;]   Key text already exists.&apos;);
				end if;

				-- If there were modifications made then update the sql script
				if (replacedText) then
					set message = &apos;      UPDATED: updateAction=&apos;||RPAD(updateAction,14,&apos; &apos;)||LPAD(&apos;[&apos;||dstType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||dstPath;
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);

					if (UPPER(updateAction) &lt;&gt; UPPER(&apos;modifyConstant&apos;)) then
						BEGIN INDEPENDENT TRANSACTION
							-- Update the script text
							call /shared/ASAssets/Utilities/repository/updateSqlScript(dstPath,scriptText,success,createResponse,faultResponse);		

							if (faultResponse is not null or success = 0) then
								set message = &apos;        ERROR: updateAction=&apos;||RPAD(updateAction,14,&apos; &apos;)||LPAD(&apos;[&apos;||dstType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||dstPath;
								call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
								raise ex value moduleName||&apos;:  &apos;||cast(faultResponse as longvarchar);
							end if;
						EXCEPTION
							ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
						END;
					end if;
				else
					set message = &apos;    INSPECTED: updateAction=&apos;||RPAD(updateAction,14,&apos; &apos;)||LPAD(&apos;[&apos;||dstType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; dstPath=&apos;||dstPath;
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
				end if;

				set j = j + 1;
			END WHILE;

		end if;

		set i = i + 1;
	END WHILE;
	SET success = 1;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573161757946</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
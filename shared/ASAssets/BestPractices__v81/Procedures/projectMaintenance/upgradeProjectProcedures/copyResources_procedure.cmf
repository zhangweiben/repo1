<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="copyResources" path="/shared/ASAssets/BestPractices_v81/Procedures/projectMaintenance/upgradeProjectProcedures/copyResources" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>copyResources:
	-- CIS Repository Helper Procedure --
	This is a procedure is used to copy all of the CIS resources from a source folder to a target folder.
	If the target folder does not exist, this procedure will create it and then copy the source folder resources.
 
	Input:
		sourceFolderPath - CIS source folder path.  Folder must exist.
			Values: e.g. /shared/Utilities
		targetFolderPath - CIS target folder path.  Gets created if it does not exist
			Values: e.g. /shared/tmp
	Output:
		success	- true(1) or false(0)
		faultResponse - null if succesful otherwise contains a fault resposne.
			Values: Fault Resposne XML value
	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	08/02/2010		Mike Tinius			5.1.0			Created new
	10/25/2012		Calvin Goodrich		5.2.0			Updated to pass resource type to getResourceListRecursive
	08/01/2013		Mike Tinius			6.1.0			Updated resourceList to use RepositoryDefinitionsRecursive.resourceTreeType

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="sourceFolderPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="targetFolderPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="copyMode" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="faultResponse" direction="OUT" nullable="true">
      <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/CopyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="targetContainerPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="newName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
      <element name="copyMode" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="CopyMode" type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createAllFolders" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/createFolder" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="sourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* copyResources:
	-- CIS Repository Helper Procedure --
	This is a procedure is used to copy all of the CIS resources from a source folder to a target folder.
	If the target folder does not exist, this procedure will create it and then copy the source folder resources.
 
	Input:
		sourceFolderPath - CIS source folder path.  Folder must exist.
			Values: e.g. /shared/ASAssets/Utilities
		targetFolderPath - CIS target folder path.  Gets created if it does not exist
			Values: e.g. /shared/tmp
		copyMode
			* ALTER_NAME_IF_EXISTS - If a resource of the same name and type of the source resource already 
				 exists in the target container, then avoid conflicts by automatically generating a new name.  
				 Names are generated by appending a number to the end of the provided name.
			* FAIL_IF_EXISTS - Fail if a resource of the same name and type of the source resource already 
				 exists in the target container.  The resource will not be copied if this occurs.
			* OVERWRITE_MERGE_IF_EXISTS - If a resource of the same name and type of the source resource 
				 already exists in the target container, then overwrite the resource in the target container.  
				 If the source resource is a container, then merge the contents of the source container with
				 the corresponding resource in the target.  All resources in the source container will 
				 overwrite those in the target, but existing resources in the target that are not overwritten 
				 will remain unaltered.
			* OVERWRITE_REPLACE_IF_EXISTS - If a resource of the same name and type of the source resource 
				 already exists in the target container, then overwrite the resource in the target container.  
				 If the source resource is a container, then replace the container within the target container 
				 with the source container.  This is equivalent to deleting the container in the target before 
				 copying the source.
			* MERGE_IF_NOT_EXISTS - If a resource of the same name and type of the source resource already exists
				 in the target container, then DO NOT merge it.  Only copy the resource to the target container
				 if it does not exist in the target container.  If the source resource is a container, then
				 only merge resources that do not exist in the target container.
	Output:
		success	- true(1) or false(0)
		faultResponse - null if succesful otherwise contains a fault resposne.
			Values: Fault Resposne XML value
	Exceptions:  none

	Modified Date:	Modified By:		CSW Version:	Reason:
	08/02/2010		Mike Tinius			5.1.0			Created new
	10/25/2012		Calvin Goodrich		5.2.0			Updated to pass resource type to getResourceListRecursive
	08/01/2013		Mike Tinius			6.1.0			Updated resourceList to use RepositoryDefinitionsRecursive.resourceTreeType
	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE copyResources(
	IN sourceFolderPath 	VARCHAR(4000),
	IN targetFolderPath		VARCHAR(4000),
	IN copyMode				VARCHAR, -- [
	OUT success				BIT, -- true(1) or false(0)
	OUT faultResponse 		XML
)
BEGIN
    DECLARE PROC_NAME           CONSTANT VARCHAR DEFAULT &apos;repository/copyResources&apos;;
	DECLARE copyMode_			VARCHAR DEFAULT NVL(copyMode, &apos;OVERWRITE_REPLACE_IF_EXISTS&apos;);
	DECLARE debug				CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE resourceList 		CURSOR /shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.resourceTreeType;
	DECLARE resourceName 		varchar;
	DECLARE resourceFolderPath	VARCHAR(4000);
	DECLARE resourcePath		VARCHAR(4000);
	DECLARE resourceExists 		BOOLEAN;
	DECLARE createInput 		varchar(8128);
	DECLARE createResponse 		XML;
	DECLARE childResourceList	/lib/util/System.Text DEFAULT &apos;&apos;;
	DECLARE ex					EXCEPTION;

    set success = 1;
    -- If the source folders exists then start copying
	call /lib/resource/ResourceExists(sourceFolderPath,&apos;CONTAINER&apos;, null, resourceExists);
	if (resourceExists) then

 		BEGIN INDEPENDENT TRANSACTION
			-- Insure that the base target folder has been created
			call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;----------------------------------------------------&apos;);
			call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;Target Folder Path: &apos;||targetFolderPath);
			call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;----------------------------------------------------&apos;);
			call /shared/ASAssets/Utilities/repository/createAllFolders(targetFolderPath, success, faultResponse);

			-- Next get a list of Folder Resources in the &apos;Source&apos; directory structure
			open resourceList for 
				select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(sourceFolderPath, &apos;CONTAINER&apos;)
				where subType = &apos;FOLDER_CONTAINER&apos;;
			-- Traverse the source structure and duplicate that structure in the &apos;Target&apos; folder
			for resource as resourceList do
				call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;FOLDER SOURCE: &apos;||resource.resPath);
				set resourceFolderPath = REPLACE(resource.resPath, sourceFolderPath, targetFolderPath);
				call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;FOLDER TARGET: &apos;||resourceFolderPath);
				if (resource.subType = &apos;FOLDER_CONTAINER&apos;) then
					-- If the target folder does not exist then create else
					call /lib/resource/ResourceExists(resourceFolderPath,&apos;CONTAINER&apos;, null, resourceExists);
					if (NOT resourceExists) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;CREATE FOLDER: &apos;||resourceFolderPath);
						call /shared/ASAssets/Utilities/repository/createFolder(resourceFolderPath, success, faultResponse);
					end if;
				end if;
			end for;
		EXCEPTION
			ELSE raise ex value PROC_NAME||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
		END;

		BEGIN INDEPENDENT TRANSACTION

		-- Then copy the resources
			open resourceList for 
				select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(sourceFolderPath, &apos;CONTAINER&apos;)
				where subType &lt;&gt; &apos;FOLDER_CONTAINER&apos;;
			set resourcePath = null;

			myloop:
			for resource as resourceList do
				-- If the resource is a Data Source then it is not permitted to copy its children.
				-- Get the list of all the children to verify against.
				if (resource.resType = &apos;DATA_SOURCE&apos;) then
					set childResourceList = &apos;&apos;;
					for r as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(resource.resPath, &apos;DATA_SOURCE&apos;) do
						set childResourceList = childResourceList || r.resPath||&apos;;&apos;;
					end for;
				end if;
	
				-- Check the current resource path against the last known data source child resource list.
				-- If the resource is in the data source child list then skip copying it by iterating back to the top of the loop.
				set resourcePath = resource.resPath ||&apos;;&apos;;
				if (POSITION(resourcePath IN childResourceList) &gt; 0) then
					iterate myloop;
				end if;

				-- The resource is not a child of a data source so go ahead and copy it to the target path.
				set resourceFolderPath = REPLACE(resource.resPath, sourceFolderPath, targetFolderPath);
				if (resource.subType &lt;&gt; &apos;FOLDER_CONTAINER&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;******************************************&apos;);
					call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;      COPY MODE: &apos;||copyMode_);
					call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;SOURCE RES TYPE: &apos;||resource.resType);
					call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;SOURCE SUB TYPE: &apos;||resource.subType);
					call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;    COPY SOURCE: &apos;||resource.resPath);
					call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourceFolderPath, &apos;E&apos;, resourceName, resourceFolderPath);
					call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;    COPY TARGET: &apos;||resourceFolderPath || &apos;/&apos;|| resourceName);

					if (copyMode_ = &apos;MERGE_IF_NOT_EXISTS&apos;) then
						-- If the target folder does not exist then create else
						call /lib/resource/ResourceExists(resourceFolderPath || &apos;/&apos;|| resourceName, resource.resType, null, resourceExists);
						if (NOT resourceExists) then
							call /lib/resource/CopyResource(resource.resPath, resource.resType, resourceFolderPath, resourceName, &apos;OVERWRITE_MERGE_IF_EXISTS&apos;);
							call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;MERGE SUCCESSFUL: &apos;||resourceFolderPath || &apos;/&apos;|| resourceName);
						else
							call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos; RESOURCE EXISTS: &apos;||resourceFolderPath || &apos;/&apos;|| resourceName);
						end if;
					else
						call /lib/resource/CopyResource(resource.resPath, resource.resType, resourceFolderPath, resourceName, copyMode_);
						call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;COPY SUCCESSFUL: &apos;||resourceFolderPath || &apos;/&apos;|| resourceName);
					end if;

					call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;******************************************&apos;);				
				end if;
			end for;
		EXCEPTION
			ELSE raise ex value PROC_NAME||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
		END;
    else
		call /shared/ASAssets/Utilities/log/logDebugMessage(PROC_NAME, debug, &apos;Source folder does not exist:  &apos;||sourceFolderPath);
		set success = 0;
    end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573161757946</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
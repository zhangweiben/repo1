<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getSQLPrivileges" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Environment_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Project" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="SubProject" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Sheet_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Resource_Path" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Resource_Type" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Name_" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Name_Type" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Domain_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="sqlStatement" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="fromClause" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="2048"/>
    </parameter>
    <parameter name="whereClause" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="scriptType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptMapping" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	Modified Date:	Modified By:		CSW Version:	Reason:
	05/16/2017		Mike Tinius			7.0.5			Adapted for Data Abstraction Best Practices.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getSQLPrivileges(
	IN datasource		VARCHAR(255),	-- REQUIRED FILTER: EXCEL or DB_[LLE,PROD], The source of the privileges
    IN Environment_Name VARCHAR(255), 	-- REQUIRED FILTER: The Composite server environment in which to get/update privileges for: [DEV, TEST, UAT, PROD]
	IN Organization		VARCHAR(255),	-- OPTIONAL FILTER: The name of the organization such as IM or SS
	IN Project			VARCHAR(255),	-- OPTIONAL FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given project.
	IN SubProject		VARCHAR(255),	-- OPTIONAL FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the sub-projects will be updated.
    IN Sheet_Name 		VARCHAR(255), 	-- OPTIONAL FILTER: The name of the Excel spreadsheet in which to get/update privileges from: [Privileges_initialize, Privileges_shared, Privileges_databases, Privileges_webservices]
    IN Resource_Path 	LONGVARCHAR,	-- OPTIONAL FILTER: The resource path in which to get/update privileges.  It may contain a wildcard &quot;%&quot;.  It may be a comma-separated list of paths.
										--	 IMPORTANT: If columns or paths contain commas they must be encoded with the value &quot;_002C&quot; prior to be passed into this procedure.
										--				This procedure will decode each path from &quot;_002C&quot; to &quot;,&quot; before search for privileges.
	IN Resource_Type 	VARCHAR(255),	-- OPTIONAL FILTER: The resource type in which to get/update privileges.  It is always upper case. 
										--  This will only be used when no &quot;Resource_Path&quot; or a single &quot;Resource_Path&quot; is provided.  
										--  It is not used when a list of &quot;Resource_Path&quot; entries are provided.
										--	E.g. DATA_SOURCE - a published datasource or physical metadata datasource.
										--		 CONTAINER - a folder path, a catalog or schema path.
										--		 COLUMN - a column from a table
										--		 LINK - a published table or procedure.  If it resides in the path /services and points to a TABLE or PROCEDURE then it is a LINK.
										--		 TABLE - a view in the /shared path.
										--		 PROCEDURE a procedure in the /shared path.
    IN Name_ 			VARCHAR(255), 	-- OPTIONAL FILTER: The user/group name in which to get/update privileges.
    IN Name_Type		VARCHAR(255), 	-- OPTIONAL FILTER: Valid values are USER or GROUP
    IN Domain_Name 		VARCHAR(255), 	-- OPTIONAL FILTER: The domain name in which to get/update privileges.
	IN debug			CHAR(1),		-- OPTIONAL: Y=debug on, N=debug off
    OUT sqlStatement	LONGVARCHAR,
	OUT fromClause		VARCHAR(2048),
	OUT whereClause		LONGVARCHAR
    )
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;getSQLPrivileges&apos;;
	DECLARE scriptPath				VARCHAR(4000);
	DECLARE i,j						INTEGER DEFAULT 0;
	DECLARE message					LONGVARCHAR;
	DECLARE resPath					LONGVARCHAR;
	DECLARE ex						EXCEPTION;
	DECLARE pos1,pos2				INTEGER;
	DECLARE object					LONGVARCHAR;
	DECLARE moreToDo1				BOOLEAN;
	DECLARE objectList1				LONGVARCHAR;
	DECLARE expression1				VARCHAR;
	DECLARE explen1					INTEGER;

	-- Get the datasource to script mapping.  Pass in the datasource type and return the path the view or script
	--   that connects to the specific spreadsheet or database.
	CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;P&apos;, datasource, scriptPath);
	set fromClause = &apos;FROM &apos; ||scriptPath;
	set sqlStatement = &apos;SELECT * &apos;||fromClause || CHR(10);

	if (Environment_Name is not null and LENGTH(TRIM(Environment_Name)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		end if;
		set whereClause = whereClause || &apos;ENVIRONMENT_NAME IS NOT NULL
           AND PROJECT_NAME IS NOT NULL
           AND ENVIRONMENT_NAME = &apos;&apos;&apos; || TRIM(Environment_Name) || &apos;&apos;&apos; &apos;;
	end if;
	if (Organization is not null and LENGTH(TRIM(Organization)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		else
			set whereClause = whereClause || &apos;
           AND &apos;;
		end if;
		set whereClause = whereClause || &apos;ORGANIZATION_NAME = &apos;&apos;&apos; || TRIM(Organization) || &apos;&apos;&apos; &apos;;
	end if;
	if (Project is not null and LENGTH(TRIM(Project)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		else
			set whereClause = whereClause || &apos;
           AND &apos;;
		end if;
		set whereClause = whereClause || &apos;PROJECT_NAME = &apos;&apos;&apos; || TRIM(Project) || &apos;&apos;&apos; &apos;;
	end if;
	if (SubProject is not null and LENGTH(TRIM(SubProject)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		else
			set whereClause = whereClause || &apos;
           AND &apos;;
		end if;
		set whereClause = whereClause || &apos;SUBPROJECT_NAME = &apos;&apos;&apos; || TRIM(SubProject) || &apos;&apos;&apos; &apos;;
	end if;
	if (Sheet_Name is not null and LENGTH(TRIM(Sheet_Name)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		else
			set whereClause = whereClause || &apos;
           AND &apos;;
		end if;
		set whereClause = whereClause || &apos;UPPER(sheetName) like &apos;&apos;%&apos; || UPPER(TRIM(Sheet_Name)) || &apos;%&apos;&apos; &apos;;
	end if;
	if (Resource_Path is not null and LENGTH(TRIM(Resource_Path)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE (&apos;;
		else
			set whereClause = whereClause || &apos;
           AND (&apos;;
		end if;

		set i = 0;
		-- Extract the object from the object list
		SET objectList1 = Resource_Path;
		SET expression1 = &apos;,&apos;;
		SET explen1 = length(expression1);
		SET moreToDo1 = true;
		SET j = 0;
		WHILE (moreToDo1) DO
			-- Extract the source column type
			set j = j + 1;
			SET object = null;
			IF (j = 1) THEN
				SET pos1 = INSTR(objectList1, expression1, 1, j);
				IF (pos1 &gt; 0) THEN
					SET object = SUBSTRING(objectList1, 1, pos1-1);
				ELSE
					IF (LENGTH(TRIM(objectList1)) &gt; 0) THEN
						SET object = objectList1;
					END IF;
					SET moreToDo1 = false;
				END IF;
			ELSE
				SET pos1 = INSTR(objectList1, expression1, 1, j-1);
				SET pos2 = INSTR(objectList1, expression1, 1, j);
				IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
					SET object = SUBSTRING(objectList1, pos1+explen1, pos2-pos1-explen1);
				ELSEIF (pos1 &gt; 0 and pos2 = 0) THEN
					SET object = SUBSTRING(objectList1, pos1+explen1);
					SET moreToDo1 = false;
				END IF;
			END IF;
			SET object = REPLACE(TRIM(object), &apos;_002C&apos;, &apos;,&apos;) ;
			IF (object IS NOT NULL and LENGTH(TRIM(object)) &gt; 0) then
				set resPath = object;

				if (i &gt; 0) then
					set whereClause = whereClause || &apos;
           OR &apos;;	
				end if;
				if (POSITION(&apos;%&apos; IN resPath) &gt; 0) then
					set whereClause = whereClause || &apos;RESOURCE_PATH like &apos;&apos;&apos; || TRIM(resPath) || &apos;&apos;&apos; &apos;;
				else
					set whereClause = whereClause || &apos;RESOURCE_PATH = &apos;&apos;&apos; || TRIM(resPath) || &apos;&apos;&apos; &apos;;
				end if;
			set i = i + 1;
			END IF;
		END WHILE;

		set whereClause = whereClause || &apos;)&apos;;
	end if;
	if (i &lt;= 1 and Resource_Type is not null and LENGTH(TRIM(Resource_Type)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		else
			set whereClause = whereClause || &apos;
           AND &apos;;
		end if;
		set whereClause = whereClause || &apos;RESOURCE_TYPE = &apos;&apos;&apos; || TRIM(Resource_Type) || &apos;&apos;&apos; &apos;;
	end if;
	if (Name_ is not null and LENGTH(TRIM(Name_)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		else
			set whereClause = whereClause || &apos;
           AND &apos;;
		end if;
		if (Domain_Name is not null and LENGTH(Domain_Name) &gt; 0 and LOWER(Domain_Name) = &apos;composite&apos;) then
			set whereClause = whereClause || &apos;NAME = &apos;&apos;&apos; || TRIM(LOWER(Name_)) || &apos;&apos;&apos; &apos;;
		else
			set whereClause = whereClause || &apos;NAME = &apos;&apos;&apos; || TRIM(Name_) || &apos;&apos;&apos; &apos;;
		end if;
	end if;
	if (Name_Type is not null and LENGTH(TRIM(Name_Type)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		else
			set whereClause = whereClause || &apos;
           AND &apos;;
		end if;
		if (Domain_Name is not null and LENGTH(Domain_Name) &gt; 0 and LOWER(Domain_Name) = &apos;composite&apos;) then
			set whereClause = whereClause || &apos;NAME_TYPE = &apos;&apos;&apos; || TRIM(Name_Type) || &apos;&apos;&apos; &apos;;
		else
			set whereClause = whereClause || &apos;NAME_TYPE = &apos;&apos;&apos; || TRIM(Name_Type) || &apos;&apos;&apos; &apos;;
		end if;
	end if;
	if (Domain_Name is not null and LENGTH(TRIM(Domain_Name)) &gt; 0) then
		if (whereClause is null) then
			set whereClause = &apos;	WHERE &apos;;
		else
			set whereClause = whereClause || &apos;
           AND &apos;;
		end if;
		if (LOWER(Domain_Name) = &apos;composite&apos;) then
			set whereClause = whereClause || &apos;DOMAIN_NAME = &apos;&apos;&apos; || TRIM(LOWER(Domain_Name)) || &apos;&apos;&apos; &apos;;
		else
			set whereClause = whereClause || &apos;DOMAIN_NAME = &apos;&apos;&apos; || TRIM(Domain_Name) || &apos;&apos;&apos; &apos;;
		end if;
	end if;

	if (whereClause is not null) then
		set sqlStatement = sqlStatement || whereClause;
		set whereClause = TRIM(whereClause);
	end if;

	set sqlStatement = sqlStatement || &apos;
    ORDER BY ORGANIZATION_NAME, sheetName, ENVIRONMENT_NAME, PROJECT_NAME, RESOURCE_PATH, ORDER_PRECEDENCE, RECURSE_CHILD DESC, REVOKE_ALL DESC&apos;;

END</attribute>
  <attribute name="creationDate" type="LONG">1387113466371</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="transactionCached" type="STRING">false</attribute>
</metadata>
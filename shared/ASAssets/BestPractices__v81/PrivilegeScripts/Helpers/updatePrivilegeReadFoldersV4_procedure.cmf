<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="updatePrivilegeReadFoldersV4" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updatePrivilegeReadFoldersV4" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="bypassErrors" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="envType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="preview" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="debug1ReadOnly" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1Console" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inDebug1CISLog" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="debug2Modified" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inModuleName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="logOutput" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="privReadStr1" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="privReadStr2" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="privReadAppliedStr1" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="privReadAppliedStr2" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="printConsole" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="printLog" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inLogOutput" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="addLogOutput" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outLogOutput" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getResourcePrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="nameTypeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="domainFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="privilegeEntryType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includeNameEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="includeNameLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeNameNotEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="excludeNameNotLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="includePrivsEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includePrivsLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePrivsNotEqualFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePrivsNotLikeFilter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="includeColumnPrivs" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="path">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nameType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="domain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="privs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="combinedPrivs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="inheritedPrivs">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="p_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="p_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="c_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_N">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_R">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_W">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_E">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_S">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_U">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_I">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_D">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="i_G">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesV4" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inDebugConsole" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inDebugCISLog" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="owner" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="ownerDomain" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="recurse" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="recurseDependencies" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="recurseDependents" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="privilegeStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="logOutput" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* updatePrivilegeReadFolders:  

	This procedure is used to update the READ only privilege to the ancestor container paths.
	
	Input:
		bypassErrors				CHAR(1),	-- Bypass errors.  Throw exception when paths not found.
												-- N/Null (default) Do not bypass errors.
												-- Y=bypass resource not found errors but report them.
		envType						VARCHAR,	-- The environment type such as [DEV, UAT, PROD]
		preview						CHAR(1),	-- If preview=Y then no updating will be done otherwise preview=N will execute updates.
		debug1ReadOnly				CHAR(1),	-- N/Null (default)=No debug, Y=Debug read only.  Determines whether to capture any debug output and return it in logOutput.
		inDebug1Console				CHAR(1), 	-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
		inDebug1CISLog				CHAR(1), 	-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
		debug2Modified				CHAR(1),	-- Y=debug on, N=debug off.  2nd level debug (deep debug).  usually turned off.
		inModuleName				VARCHAR,	-- The module name from the invoking procedure which is used to calculate the output log length so the module names match up in output lentgth.
		logOutput					LONGVARCHAR,-- the appended log output value.  Will only be set if inDebug=Y
		-- The string used to track the list of paths to set READ privilege.
		privReadStr1				LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
		privReadStr2				LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
		-- The string used to track the list of READ-only privileges that have been applied privileges.
		privReadAppliedStr1			LONGVARCHAR--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
		privReadAppliedStr2			LONGVARCHAR--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
	Output:
		logOutput					LONGVARCHAR,-- the appended log output value.  Will only be set if inDebug=Y
		-- The string used to track the list of paths to set READ privilege.
		privReadStr1				LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
		privReadStr2				LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
		-- The string used to track the list of READ-only privileges that have been applied privileges.
		privReadAppliedStr1			LONGVARCHAR--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
		privReadAppliedStr2			LONGVARCHAR--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
	Exceptions:  none

	Modified Date: 	Modified By:		CSW Version:	Reason:
	10/28/2014		Mike Tinius			6.2.6			Added new.
	11/17/2014		Mike Tinius			6.2.6			Modified the logging to be selective about output to logOutput variable, console or CIS log.
	07/15/2016		Mike Tinius			7.0.3			Removed use of vectors to improve performance and reduce memory leak issues.
	05/16/2017		Mike Tinius			7.0.5			Adapted for Data Abstraction Best Practices.
	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE updatePrivilegeReadFoldersV4(
	IN bypassErrors					CHAR(1),	-- Bypass errors.  Throw exception when paths not found.
												-- N/Null (default) Do not bypass errors.
												-- Y=bypass resource not found errors but report them.
	IN envType						VARCHAR,	-- The environment type such as [DEV, UAT, PROD]
	IN preview						CHAR(1),	-- If preview=Y then no updating will be done otherwise preview=N will execute updates.
	IN debug1ReadOnly				CHAR(1),	-- N/Null (default)=No debug, Y=Debug read only.  Determines whether to capture any debug output and return it in logOutput.
	IN inDebug1Console				CHAR(1), 	-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
	IN inDebug1CISLog				CHAR(1), 	-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
	IN debug2Modified				CHAR(1),	-- Y=debug on, N=debug off.  2nd level debug (deep debug).  usually turned off.
	IN inModuleName					VARCHAR,	-- The module name from the invoking procedure which is used to calculate the output log length so the module names match up in output lentgth.
	INOUT logOutput					LONGVARCHAR,-- the appended log output value.  Will only be set if inDebug=Y
	-- The string used to track the list of paths to set READ privilege.
	INOUT privReadStr1				LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
	INOUT privReadStr2				LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
	-- The string used to track the list of READ-only privileges that have been applied privileges.
	INOUT privReadAppliedStr1		LONGVARCHAR,--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
	INOUT privReadAppliedStr2		LONGVARCHAR --Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|[repeat format]
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;updatePrivilegeReadFoldersV4&apos;;
	DECLARE debug1Console			CHAR(1) DEFAULT NVL(UPPER(inDebug1Console),&apos;N&apos;);
	DECLARE debug1CISLog			CHAR(1) DEFAULT NVL(UPPER(inDebug1CISLog),&apos;N&apos;);
	DECLARE localDebug				CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE ex						EXCEPTION;
	DECLARE newline					VARCHAR DEFAULT CHR(10);
	DECLARE result					LONGVARCHAR;
	DECLARE READ_SET				BOOLEAN;
	DECLARE rowString				LONGVARCHAR;
	DECLARE status					VARCHAR;
	DECLARE numPrivs				INTEGER;
	DECLARE numRows					INTEGER;
	DECLARE privReadStr				LONGVARCHAR;--Format: &quot;Resource Path&quot;::&quot;Resource Type&quot;::Name::&quot;Name Type&quot;::&quot;Domain&quot;::privilege::Owner::&quot;Owner Domain&quot;::&quot;Recurse Dependencies&quot;::&quot;Recurse Dependents&quot;::Recurse::mode|
	DECLARE privReadPathStr			LONGVARCHAR;
	DECLARE privRowFound			BOOLEAN;
	DECLARE LONGVARCHARlen			INTEGER DEFAULT 2147483647;
	DECLARE message					VARCHAR(4000);
	DECLARE actualPrivilegeList		VARCHAR;
	DECLARE displayPrivilegeList	VARCHAR;
	DECLARE displayActualPrivilegeList VARCHAR;
	DECLARE setPrivilegeList		VARCHAR;
	DECLARE displaySetPrivilegeList	VARCHAR;
	DECLARE TYPE privRowType		ROW (
		resourcePath				LONGVARCHAR,
		resourceType				VARCHAR,
		name						VARCHAR,
		nameType					VARCHAR,
		domainName					VARCHAR,
		privilegeList				VARCHAR,
		owner						VARCHAR,
		ownerDomain					VARCHAR,
		recurseDependencies			BIT,
		recurseDependents			BIT,
		recurseChild				BIT,
		mode						VARCHAR
	);
	DECLARE privRec 				privRowType;
	DECLARE prevPrivRec 			privRowType;
	DECLARE privilegeStr			LONGVARCHAR;
	DECLARE privRow					LONGVARCHAR;
	DECLARE privItem				LONGVARCHAR;
	DECLARE recurseDependencies		VARCHAR;
	DECLARE recurseDependents		VARCHAR;
	DECLARE recurseChild			VARCHAR;
	DECLARE j,k						INTEGER;
	DECLARE start2					INTEGER;
	DECLARE pos1,pos2,lastpos1		INTEGER;
	DECLARE object					LONGVARCHAR;
	DECLARE moreToDo1,moreToDo2		BOOLEAN;
	DECLARE objectList1,objectList2	LONGVARCHAR;
	DECLARE expression1,expression2	VARCHAR;
	DECLARE explen1,explen2,poslen	INTEGER;

	-- Initialize logOutput
	IF (logOutput IS NULL) THEN
		set logOutput = &apos;&apos;;
	END IF;

	-- Initialize moduleName with leading pad characters to make it even with the invoking procedure
	SET pos1 = LENGTH(inModuleName) - LENGTH(moduleName);
	IF (pos1 &lt; 0) THEN
		set pos1 = 0;
	END IF;
	SET pos1 = pos1 + LENGTH(moduleName);
	SET moduleName = LPAD(moduleName, pos1, &apos;_&apos;);

	-- Initialize the previous already applied privilege string
	IF (privReadAppliedStr1 IS NULL) THEN
		SET privReadAppliedStr1 = &apos;&apos;;
	END IF;
	IF (privReadAppliedStr2 IS NULL) THEN
		SET privReadAppliedStr2 = &apos;&apos;;
	END IF;
	-- Initialize previous priv record
	SET prevPrivRec.resourcePath = null;
	SET prevPrivRec.resourceType = null;
	SET prevPrivRec.owner = &apos;&apos;;
	SET prevPrivRec.ownerDomain = &apos;&apos;;

	IF (privReadStr1 IS NOT NULL AND LENGTH(privReadStr1) &gt; 0) THEN

	IF (debug2Modified = &apos;Y&apos;) THEN
		call print(moduleName||&apos; : BEGIN: LENGTH(privReadStr1)=&apos;||LENGTH(privReadStr1)||&apos;  LENGTH(privReadStr2)=&apos;||LENGTH(privReadStr2));
		call print(moduleName||&apos; : BEGIN: LENGTH(privReadAppliedStr1)=&apos;||LENGTH(privReadAppliedStr1)|| &apos;  LENGTH(privReadAppliedStr2)=&apos;||LENGTH(privReadAppliedStr2));
	END IF;

		SET numPrivs = 0;
		SET numRows = 0;

		-- Each privilege row is separated by a pipe &apos;|&apos;.  Process each row by sort them by path which is the first element in the row.
		FOR readList AS 
				SELECT privRow FROM (
					SELECT object privRow
						FROM /shared/ASAssets/Utilities/string/extractDelimitedText(privReadStr1,&apos;|&apos;,0,0,0,1,0)
						WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
					UNION
					SELECT object privRow
						FROM /shared/ASAssets/Utilities/string/extractDelimitedText(privReadStr2,&apos;|&apos;,0,0,0,1,0)
						WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
					UNION
					SELECT &apos;/zzzz::END::all::GROUP::composite::NONE::::::0::0::0::OVERWRITE_APPEND&apos; privRow FROM /services/databases/system/DUAL
				) a
				ORDER BY privRow
		DO
			SET privRow = readList.privRow;
			SET numRows = numRows + 1;
			-- Process the current row and split out the columns within the double colon &apos;::&apos; separated list.
			-- Extract the object from the object list
			SET objectList2 = privRow;
			SET expression2 = &apos;::&apos;;
			SET moreToDo2 = true;
			SET explen2 = length(expression2);
			SET start2 = 1;
			SET lastpos1 = 0;
			SET k = 0;
			WHILE (moreToDo2) DO
				set k = k + 1;
				SET object = null;
				IF (k = 1) THEN
					SET pos1 = INSTR(objectList2, expression2, start2, 1);
					--call print(&apos;&quot;privRow&quot; start2=&apos;||start2||&apos;  pos1=&apos;||pos1||&apos;  pos1-1=&apos;||CAST(pos1-1 AS VARCHAR));
					IF (pos1 &gt; 0) THEN
						SET poslen = pos1-1;
						IF (poslen &lt; 0) THEN
							SET poslen = 0;
						END IF;
						SET object = SUBSTRING(objectList2, 1, poslen);
					ELSE
						IF (LENGTH(TRIM(objectList2)) &gt; 0) THEN
							SET object = objectList2;
						END IF;
						SET moreToDo2 = false;
					END IF;
					SET lastpos1 = pos1;
					SET start2 = lastpos1+explen2;
				ELSE
					SET pos2 = INSTR(objectList2, expression2, start2, 1);
					--call print(&apos;&quot;privRow&quot; start2=&apos;||start2||&apos;  lastpos1=&apos;||lastpos1||&apos;  pos2=&apos;||pos2||&apos;  explen2=&apos;||explen2||&apos;  pos2-lastpos1-explen2=&apos;||CAST(pos2-lastpos1-explen2 AS VARCHAR));
					IF (lastpos1 &gt; 0 and pos2 &gt; 0) THEN
						SET poslen = pos2-lastpos1-explen2;
						IF (poslen &lt; 0) THEN
							SET poslen = 0;
						END IF;
						SET object = SUBSTRING(objectList2, lastpos1+explen2, poslen);
					ELSEIF (lastpos1 &gt; 0 and pos2 = 0) THEN
						SET object = SUBSTRING(objectList2, lastpos1+explen2);
						SET moreToDo2 = false;
					END IF;
					SET lastpos1 = pos2;
					SET start2 = lastpos1+explen2;
				END IF;
				SET object = TRIM(object);
				--CALL print(&apos;priv k=&apos;||k||&apos;  object=[&apos;||TRIM(NVL(object,&apos;  &apos;))||&apos;]&apos;);
				set privItem = object;

				-- parse out the columns within the row.
				CASE 
					WHEN k = 1  THEN SET privRec.resourcePath = TRIM(NVL(privItem,&apos;  &apos;));
					WHEN k = 2  THEN SET privRec.resourceType = TRIM(NVL(privItem,&apos;  &apos;));
					WHEN k = 3  THEN SET privRec.name = TRIM(NVL(privItem,&apos;  &apos;));
					WHEN k = 4  THEN SET privRec.nameType = TRIM(NVL(privItem,&apos;  &apos;));
					WHEN k = 5  THEN SET privRec.domainName = TRIM(NVL(privItem,&apos;  &apos;));
					WHEN k = 6  THEN SET privRec.privilegeList = TRIM(NVL(privItem,&apos;  &apos;));
					WHEN k = 7  THEN SET privRec.owner = TRIM(NVL(privItem,&apos;  &apos;));
					WHEN k = 8  THEN SET privRec.ownerDomain = TRIM(NVL(privItem,&apos;  &apos;));
					WHEN k = 9  THEN SET privRec.recurseDependencies = privItem;
					WHEN k = 10 THEN SET privRec.recurseDependents = privItem;
					WHEN k = 11 THEN SET privRec.recurseChild = privItem;
					WHEN k = 12 THEN SET privRec.mode = TRIM(NVL(privItem,&apos;  &apos;));
					ELSE
				END CASE;
			END WHILE;

			-- Set the privilege list for display purposes
			SET displayPrivilegeList = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(privRec.privilegeList,&apos;NONE&apos;,&apos;N&apos;),&apos;READ&apos;,&apos;R&apos;),&apos;WRITE&apos;,&apos;W&apos;),&apos;SELECT&apos;,&apos;S&apos;),&apos;EXECUTE&apos;,&apos;E&apos;),&apos;INSERT&apos;,&apos;I&apos;),&apos;UPDATE&apos;,&apos;U&apos;),&apos;DELETE&apos;,&apos;D&apos;),&apos;GRANT&apos;,&apos;G&apos;);

			IF (UPPER(debug2Modified) = &apos;Y&apos;) THEN
				IF (privRec.resourceType != &apos;END&apos;) THEN
					CALL PRINT(moduleName||&apos; : row=&apos;||cast(numRows as varchar)||&apos;  privRow=&apos;||privRow);
					set message = &apos;PRIV_ROW=[&apos;||TRIM(NVL(privRow,&apos;  &apos;))||&apos;]&apos; || newline
										  || &apos;prevResourcePath=[&apos;||TRIM(NVL(prevPrivRec.resourcePath,&apos;  &apos;))||&apos;]_____prevResourceType=[&apos;||TRIM(NVL(prevPrivRec.resourceType,&apos;  &apos;)) ||&apos;]&apos;|| newline
										  || &apos;____resourcePath=[&apos;||    TRIM(NVL(privRec.resourcePath,&apos;  &apos;))||&apos;]_________resourceType=[&apos;||TRIM(NVL(privRec.resourceType,&apos;  &apos;))||&apos;]&apos;
										  || &apos;  name=[&apos;||TRIM(NVL(privRec.name,&apos;  &apos;))||&apos;]  nameType=[&apos;||TRIM(NVL(privRec.nameType,&apos;  &apos;))||&apos;]&apos;
										  || &apos;  privilegeList=[&apos;||displayPrivilegeList||&apos;]|&apos;|| newline;
					call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
				ELSE
					CALL PRINT(moduleName||&apos; : LAST RECORD FOUND: row=&apos;||cast(numRows as varchar)||&apos;  privRow=&apos;||privRow);
				END IF;
			END IF;

			/******************************
			 * UPDATE BATCH PRIVILEGES
			 ******************************/
			-- Determine if the current record &quot;privRec&quot; is different than the previous record &quot;prevPrivRec&quot; and apply privileges if it is.
			IF (prevPrivRec.resourcePath is not null and prevPrivRec.resourceType is not null and privRec.resourcePath is not null and privRec.resourceType is not null
					and (prevPrivRec.resourcePath != privRec.resourcePath or prevPrivRec.resourceType != privRec.resourceType) ) 
			THEN
				IF (debug2Modified = &apos;Y&apos;) THEN
					call print(moduleName||&apos; : BEGIN PROCESSING FOR UPDATE. PATH HAS CHANGED.  path=&apos;||prevPrivRec.resourcePath);
				END IF;

				BEGIN INDEPENDENT TRANSACTION
					IF (privilegeStr IS NOT NULL AND LENGTH(TRIM(privilegeStr)) &gt; 0) THEN
						IF (preview = &apos;N&apos;) THEN

							-- Debug message indicating the batch of privileges was committed
							IF (debug1ReadOnly = &apos;Y&apos;) THEN
								set message = &apos;COMMIT BATCH: Change in: &apos;;
								if (prevPrivRec.resourcePath != privRec.resourcePath) then
									set message = message || &apos;&quot;Resource Path&quot; &apos;;
								elseif (prevPrivRec.resourceType != privRec.resourceType) then
									set message = message || &apos;&quot;Resource Type&quot; &apos;;
								end if;
								set message = message || &apos;|&apos; || newline;
								call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
							END IF;

							BEGIN
								-- Invoke the update resource privileges admin api
								call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/updateResourcePrivilegesV4(
									debug2Modified,
									debug1Console,
									debug1CISLog,
									prevPrivRec.owner,
									prevPrivRec.ownerDomain,
									prevPrivRec.resourcePath,
									prevPrivRec.resourceType,
									prevPrivRec.recurseChild,
									prevPrivRec.recurseDependencies,
									prevPrivRec.recurseDependents,
									prevPrivRec.mode,
									privilegeStr,
									logOutput,
									result
								);
							EXCEPTION
								ELSE
									set result = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
							END;

							if (result is not null) then
								set result = REPLACE(REPLACE(result, CHR(10), &apos; &apos;),CHR(13),&apos; &apos;);
								-- Remove all CR, LF and double spaces
								WHILE (POSITION(&apos;  &apos; IN result) &gt; 0) DO
									set result = REPLACE(result, &apos;  &apos;, &apos; &apos;);
								END WHILE;
								if (bypassErrors = &apos;Y&apos; and POSITION(&apos;does not exist&apos; IN result) &gt; 0) THEN
									IF (debug1ReadOnly = &apos;Y&apos;) THEN
										set message = &apos;Status=SKIPPED: [BYPASS **ERROR**] REVOKE ALL :: RESOURCE PATH NOT FOUND [&apos;||TRIM(NVL(prevPrivRec.resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(prevPrivRec.resourcePath,&apos;  &apos;))||&apos;]&apos;||&apos;|&apos;||newline;
										call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput);
									end if;
								else
									raise ex value result || newline || &apos;ROW: &apos;||TRIM(NVL(rowString,&apos;  &apos;));
								end if;
							end if;
						END IF;

						-- Initialize privilege string
						set privilegeStr = NULL;
					ELSE
						IF (UPPER(debug2Modified) = &apos;Y&apos;) THEN
							call print(moduleName||&apos; : No Read Privileges to apply for resource=[&apos;||TRIM(NVL(prevPrivRec.resourcePath,&apos;  &apos;))||&apos;]&apos;);
						END IF;
					END IF;
				EXCEPTION
					ELSE
						RAISE;
				END;
			END IF;

			/********************************************
			 * PROCESSING BEGINS HERE
			 ********************************************/
			IF (LENGTH(privRec.resourcePath) &gt; 0 AND LENGTH(privRec.resourceType) &gt; 0) THEN

				/***************************************************
				 * FOR THE CURRENT RECORD (privRec=privReadStr1 or 2), 
				 *   SEARCH FOR EQUIVLENT RECORD IN privReadAppliedStr1.
				 * IF FOUND, EXTRACT PRIVILEGES FOR DISPLAY.
				 ***************************************************/
				-- Initialize string for actual privileges
				set displayActualPrivilegeList = &apos;&apos;;
				-- Search for this current unique entry in the &quot;privilege read applied&quot; list.  (Already applied list.)
				SET privReadStr = TRIM(NVL(privRec.resourcePath,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.resourceType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.name,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.nameType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.domainName,&apos;  &apos;))||&apos;::&apos;;
				SET privRowFound = FALSE;
				SET pos1 = POSITION(privReadStr IN privReadAppliedStr1);
				IF (localDebug = &apos;Y&apos;) THEN
					call print(moduleName||&apos; : privReadAppliedStr1=[&apos;||TRIM(NVL(privReadAppliedStr1,&apos;  &apos;))||&apos;]&apos;);
					call print(moduleName||&apos; : pos1=&apos;||TRIM(NVL(cast(pos1 as varchar),&apos;  &apos;))||&apos;  privReadStr=&apos;||TRIM(NVL(privReadStr,&apos;  &apos;)));
				END IF;
				IF (pos1 &gt; 0) THEN
					SET pos2 = INSTR(privReadAppliedStr1, &apos;|&apos;, pos1);
					-- Local Debug
					IF (localDebug = &apos;Y&apos;) THEN
						call print(moduleName||&apos; : pos1=&apos;||pos1||&apos; pos2=&apos;||pos2||&apos;  LENGTH(privReadStr)=&apos;||LENGTH(privReadStr));
						call print(moduleName||&apos; : pos1 + LENGTH(privReadStr) + 2=&apos;||cast(pos1 + LENGTH(privReadStr) + 2 as varchar));
						call print(moduleName||&apos; : pos2 - pos1 - LENGTH(privReadStr) - 2=&apos;||cast(pos2 - pos1 - LENGTH(privReadStr) - 2 as varchar));
					END IF;
					SET displayActualPrivilegeList = SUBSTRING(privReadAppliedStr1, pos1 + LENGTH(privReadStr) + 2, pos2 - pos1 - LENGTH(privReadStr) - 2);
					SET privRowFound = TRUE;
					IF (UPPER(debug2Modified) = &apos;Y&apos; OR localDebug = &apos;Y&apos;) THEN
						call print(moduleName||&apos; : Privilege row found.  row=&apos;||TRIM(NVL(privReadStr,&apos;  &apos;))||&apos; displayActualPrivilegeList=&apos;||displayActualPrivilegeList);
					END IF;
				ELSE
					SET pos1 = POSITION(privReadStr IN privReadAppliedStr2);
					IF (pos1 &gt; 0) THEN
						SET pos2 = INSTR(privReadAppliedStr2, &apos;|&apos;, pos1);
						IF (localDebug = &apos;Y&apos;) THEN
							call print(moduleName||&apos; : pos1=&apos;||pos1||&apos; pos2=&apos;||pos2||&apos;  LENGTH(privReadStr)=&apos;||LENGTH(privReadStr));
							call print(moduleName||&apos; : pos1 + LENGTH(privReadStr) + 2=&apos;||cast(pos1 + LENGTH(privReadStr) + 2 as varchar));
							call print(moduleName||&apos; : pos2 - pos1 - LENGTH(privReadStr) - 2=&apos;||cast(pos2 - pos1 - LENGTH(privReadStr) - 2 as varchar));
						END IF;
						SET displayActualPrivilegeList = SUBSTRING(privReadAppliedStr2, pos1 + LENGTH(privReadStr) + 2, pos2 - pos1 - LENGTH(privReadStr) - 2);
						SET privRowFound = TRUE;
						IF (UPPER(debug2Modified) = &apos;Y&apos; OR localDebug = &apos;Y&apos;) THEN
							call print(moduleName||&apos; : Privilege row found.  row=&apos;||TRIM(NVL(privReadStr,&apos;  &apos;))||&apos; displayActualPrivilegeList=&apos;||displayActualPrivilegeList);
						END IF;
					END IF;
				END IF;

				-- Local Debug
				IF (localDebug = &apos;Y&apos;) THEN
					call print(moduleName||&apos; : privRowFound=&apos;||cast(privRowFound as varchar));
				END IF;

				IF (privRec.resourceType != &apos;END&apos;) THEN
					IF (NOT privRowFound) THEN
						BEGIN INDEPENDENT TRANSACTION
						-- Initialize string for actual privileges
						SET actualPrivilegeList = &apos;&apos;;
						SET displayActualPrivilegeList = &apos;&apos;;
						SET setPrivilegeList = &apos;&apos;;
						-- Look up the actual privilege on the CONTAINER to see if it already is set for READ
						SET READ_SET = false;
						FOR actual AS 
							-- 2016-07-11 (mtinius): Created a new procedure to allow passing in the new privilegeEntryType=privs so that the sorting is only done on explicit privileges and not combinedPrivs.
							--		This eliminates all of the inherited privileges which we don&apos;t care about.   This equates to fewer privilege rows to loop through. 
							SELECT * FROM /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getResourcePrivileges(
									privRec.resourcePath, privRec.resourceType, privRec.nameType, privRec.domainName, &apos;privs&apos;, privRec.name, null, null, null, null, null, &apos;NONE&apos;, null, null, debug2Modified)
						DO
							-- These are the actual privileges from the resource in Composite
							if (actual.p_R is not null and actual.p_R=1) then 	
								set actualPrivilegeList = actualPrivilegeList || &apos;READ &apos;; 	
								set displayActualPrivilegeList = displayActualPrivilegeList || &apos;R &apos;; 	
								-- If the path has READ set then consider this CONTAINER as &quot;Already Set&quot;.
								SET READ_SET = true;
							end if;
							if (actual.p_W is not null and actual.p_W=1) then 	
								set actualPrivilegeList = actualPrivilegeList || &apos;WRITE &apos;;  
								set displayActualPrivilegeList = displayActualPrivilegeList || &apos;W &apos;; 	
							end if;
							if (actual.p_E is not null and actual.p_E=1) then 	
								set actualPrivilegeList = actualPrivilegeList || &apos;EXECUTE &apos;;  
								set displayActualPrivilegeList = displayActualPrivilegeList || &apos;E &apos;; 	
							end if;
							if (actual.p_S is not null and actual.p_S=1) then 	
								set actualPrivilegeList = actualPrivilegeList || &apos;SELECT &apos;;  
								set displayActualPrivilegeList = displayActualPrivilegeList || &apos;S &apos;; 	
							end if;
							if (actual.p_U is not null and actual.p_U=1) then 	
								set actualPrivilegeList = actualPrivilegeList || &apos;UPDATE &apos;;  
								set displayActualPrivilegeList = displayActualPrivilegeList || &apos;U &apos;; 	
							end if;
							if (actual.p_I is not null and actual.p_I=1) then 	
								set actualPrivilegeList = actualPrivilegeList || &apos;INSERT &apos;;  
								set displayActualPrivilegeList = displayActualPrivilegeList || &apos;I &apos;; 	
							end if;
							if (actual.p_D is not null and actual.p_D=1) then 	
								set actualPrivilegeList = actualPrivilegeList || &apos;DELETE &apos;;  
								set displayActualPrivilegeList = displayActualPrivilegeList || &apos;D &apos;; 	
							end if;
							if (actual.p_G is not null and actual.p_G=1) then 	
								set actualPrivilegeList = actualPrivilegeList || &apos;GRANT &apos;;  
								set displayActualPrivilegeList = displayActualPrivilegeList || &apos;G &apos;; 	
							end if;
							-- Trim the spaces before and after the list
							set actualPrivilegeList = TRIM(actualPrivilegeList);
							set displayActualPrivilegeList = TRIM(displayActualPrivilegeList);

							-- Local Debug
							IF (debug2Modified = &apos;Y&apos;) THEN
								CALL PRINT(moduleName||&apos; :       EVALUATE READ: Actual:[&apos;||actualPrivilegeList||&apos;]  &apos;|| TRIM(NVL(privRec.resourcePath,&apos;  &apos;))||&apos;::&apos;||privRec.resourceType||&apos;::&apos;||TRIM(NVL(privRec.name,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.nameType,&apos;  &apos;))||&apos;::&apos;||TRIM(NVL(privRec.domainName,&apos;  &apos;)));
							END IF;
						END FOR;
						END; -- BEGIN INDEPENDENT TRANSACTION

						IF (LENGTH(actualPrivilegeList) = 0) THEN
							SET actualPrivilegeList = &apos;NONE&apos;;
							SET displayActualPrivilegeList = &apos;N&apos;;
						END IF;

						-- Add the row to the privilege string since it was not found in the &quot;privilege read applied&quot; list.  (Already applied list.)
						-- Only add the name triplet into the string if this resource path needs to be set
						IF (READ_SET) THEN
							SET status = &apos;SKIPPED [Already Set]:     &apos;||RPAD(&apos;Actual:[&apos;||displayActualPrivilegeList||&apos;]&apos;,24,&apos; &apos;);

							-- 07/11/2016 mtinius - added code to log the fact that a privilege was skipped because it is set and should not be applied again.
							IF ( (LENGTH(TRIM(privReadAppliedStr1)) = 0 AND LENGTH(TRIM(privReadAppliedStr2)) = 0) OR 
								 (POSITION(privReadStr IN privReadAppliedStr1) = 0 AND POSITION(privReadStr IN privReadAppliedStr2) = 0)) THEN
								IF (LENGTH(privReadAppliedStr1) + LENGTH(privReadStr||&apos;::&apos;||displayActualPrivilegeList||&apos;|&apos;) &lt; LONGVARCHARlen) THEN
										SET privReadAppliedStr1 = privReadAppliedStr1 || privReadStr || &apos;::&apos; || displayActualPrivilegeList || &apos;|&apos;;
									IF (debug2Modified = &apos;Y&apos;) THEN
										CALL PRINT(moduleName||&apos; : pos1=&apos;||cast(pos1 as varchar)||&apos; Added path to privReadAppliedStr1=&apos;||privReadAppliedStr1);
									END IF;
								ELSEIF (LENGTH(privReadAppliedStr2) + LENGTH(privReadStr||&apos;::&apos;||displayActualPrivilegeList||&apos;|&apos;) &lt; LONGVARCHARlen) THEN
										SET privReadAppliedStr2 = privReadAppliedStr2 || privReadStr || &apos;::&apos; || displayActualPrivilegeList || &apos;|&apos;;
									IF (debug2Modified = &apos;Y&apos;) THEN
										CALL PRINT(moduleName||&apos; : pos1=&apos;||cast(pos1 as varchar)||&apos; Added path to privReadAppliedStr2=&apos;||privReadAppliedStr2);
									END IF;
								ELSE
									RAISE ex VALUE &apos;The length of &quot;privReadAppliedStr1&quot; and &quot;privReadAppliedStr2&quot; has been exceeded.&apos;;
								END IF;
							END IF;
							-- Local Debug
							IF (localDebug = &apos;Y&apos;) THEN
								call print(moduleName||&apos; : MID: LENGTH(privReadAppliedStr1)=&apos;||LENGTH(privReadAppliedStr1)|| &apos;  LENGTH(privReadAppliedStr2)=&apos;||LENGTH(privReadAppliedStr2));
							END IF;
						-- READ is not set on this resource
						ELSE 
							SET numPrivs = numPrivs + 1;
							-- Check for NONE
							IF (actualPrivilegeList = &apos;NONE&apos;) THEN
								SET setPrivilegeList = &apos;READ&apos;;
							ELSE
								-- Prepend READ mode to the privilege lists.  This is used to retain the actual privileges for the folder
								SET setPrivilegeList = &apos;READ &apos;|| actualPrivilegeList;
							END IF;
							-- Set status and display variables
							SET displaySetPrivilegeList = TRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(setPrivilegeList,&apos;NONE&apos;,&apos;N&apos;),&apos;READ&apos;,&apos;R&apos;),&apos;WRITE&apos;,&apos;W&apos;),&apos;SELECT&apos;,&apos;S&apos;),&apos;EXECUTE&apos;,&apos;E&apos;),&apos;INSERT&apos;,&apos;I&apos;),&apos;UPDATE&apos;,&apos;U&apos;),&apos;DELETE&apos;,&apos;D&apos;),&apos;GRANT&apos;,&apos;G&apos;));
							SET status = &apos;APPLIED [Read-only]:       &apos;||RPAD(&apos;Actual:[&apos;||displayActualPrivilegeList||&apos;]&apos;,24,&apos; &apos;)||RPAD(&apos;Set:[&apos;||displaySetPrivilegeList||&apos;]&apos;,22,&apos; &apos;);
							-- Initialize the string
							IF (privilegeStr IS NULL) THEN
								SET privilegeStr = &apos;&apos;;
							END IF;

							-- Set the privilege string for updating the privileges
							SET privilegeStr = privilegeStr || TRIM(NVL(privRec.domainName,&apos;  &apos;)) || &apos;::&apos; || TRIM(NVL(privRec.name,&apos;  &apos;)) ||&apos;::&apos;
															|| TRIM(NVL(privRec.nameType,&apos;  &apos;)) ||&apos;::&apos;|| TRIM(NVL(setPrivilegeList,&apos;  &apos;)) || &apos;|&apos;;
							IF (UPPER(debug2Modified) = &apos;Y&apos;) THEN
								CALL PRINT(moduleName||&apos; : Added privilege row.   num rows=&apos;||numPrivs);
							END IF;

							-- Set the privilegeReadApplied string to track what has been applied.
							IF ( (LENGTH(TRIM(privReadAppliedStr1)) = 0 AND LENGTH(TRIM(privReadAppliedStr2)) = 0) OR 
								 (POSITION(privReadStr IN privReadAppliedStr1) = 0 AND POSITION(privReadStr IN privReadAppliedStr2) = 0)) THEN
								IF (LENGTH(privReadAppliedStr1) + LENGTH(privReadStr||&apos;::&apos;||displaySetPrivilegeList||&apos;|&apos;) &lt; LONGVARCHARlen) THEN
										SET privReadAppliedStr1 = privReadAppliedStr1 || privReadStr || &apos;::&apos; || displaySetPrivilegeList || &apos;|&apos;;
									IF (debug2Modified = &apos;Y&apos;) THEN
										CALL PRINT(moduleName||&apos; : pos1=&apos;||cast(pos1 as varchar)||&apos; Added path to privReadAppliedStr1=&apos;||privReadAppliedStr1);
									END IF;
								ELSEIF (LENGTH(privReadAppliedStr2) + LENGTH(privReadStr||&apos;::&apos;||displaySetPrivilegeList||&apos;|&apos;) &lt; LONGVARCHARlen) THEN
										SET privReadAppliedStr2 = privReadAppliedStr2 || privReadStr || &apos;::&apos; || displaySetPrivilegeList || &apos;|&apos;;
									IF (debug2Modified = &apos;Y&apos;) THEN
										CALL PRINT(moduleName||&apos; : pos1=&apos;||cast(pos1 as varchar)||&apos; Added path to privReadAppliedStr2=&apos;||privReadAppliedStr2);
									END IF;
								ELSE
									RAISE ex VALUE &apos;The length of &quot;privReadAppliedStr1&quot; and &quot;privReadAppliedStr2&quot; has been exceeded.&apos;;
								END IF;
							END IF;
						END IF;
					ELSE
						SET status = &apos;SKIPPED [Already Applied]: &apos;||RPAD(&apos;Actual:[&apos;||displayActualPrivilegeList||&apos;]&apos;,24,&apos; &apos;);
					END IF;
					/******************************
					 * Set Debug Information
					 ******************************/
					-- Create the row string to display as long as it is not the last control record that starts with resourcePath=/zzzz and resourceType=END
					IF (debug1ReadOnly = &apos;Y&apos;) THEN
						-- Convert privRec.recurseDependencies to Y or N
						set recurseDependencies = CAST(privRec.recurseDependencies AS VARCHAR);
						if (recurseDependencies is null) then
							set recurseDependencies = &apos;N&apos;;
						else
							if ( (POSITION(&apos;Y&apos; IN recurseDependencies) &gt; 0) or (POSITION(&apos;T&apos; IN recurseDependencies) &gt; 0) ) then
								set recurseDependencies = &apos;Y&apos;;
							else
								if ( (POSITION(&apos;N&apos; IN recurseDependencies) &gt; 0) or (POSITION(&apos;F&apos; IN recurseDependencies) &gt; 0) ) then
									set recurseDependencies = &apos;N&apos;;
								else
									if (POSITION(&apos;1&apos; IN recurseDependencies) &gt; 0)  then
										set recurseDependencies = &apos;Y&apos;;
									else
										if (POSITION(&apos;0&apos; IN recurseDependencies) &gt; 0)  then
											set recurseDependencies = &apos;N&apos;;
										end if;
									end if;
								end if;
							end if;
						end if;
						-- Convert privRec.recurseDependents to Y or N
						set recurseDependents = CAST(privRec.recurseDependents AS VARCHAR);
						if (recurseDependents is null) then
							set recurseDependents = &apos;N&apos;;
						else
							if ( (POSITION(&apos;Y&apos; IN recurseDependents) &gt; 0) or (POSITION(&apos;T&apos; IN recurseDependents) &gt; 0) ) then
								set recurseDependents = &apos;Y&apos;;
							else
								if ( (POSITION(&apos;N&apos; IN recurseDependents) &gt; 0) or (POSITION(&apos;F&apos; IN recurseDependents) &gt; 0) ) then
									set recurseDependents = &apos;N&apos;;
								else
									if (POSITION(&apos;1&apos; IN recurseDependents) &gt; 0)  then
										set recurseDependents = &apos;Y&apos;;
									else
										if (POSITION(&apos;0&apos; IN recurseDependents) &gt; 0)  then
											set recurseDependents = &apos;N&apos;;
										end if;
									end if;
								end if;
							end if;
						end if;
						-- Convert privRec.recurseChild to Y or N
						set recurseChild = CAST(privRec.recurseChild AS VARCHAR);
						if (recurseChild is null) then
							set recurseChild = &apos;N&apos;;
						else
							if ( (POSITION(&apos;Y&apos; IN recurseChild) &gt; 0) or (POSITION(&apos;T&apos; IN recurseChild) &gt; 0) ) then
								set recurseChild = &apos;Y&apos;;
							else
								if ( (POSITION(&apos;N&apos; IN recurseChild) &gt; 0) or (POSITION(&apos;F&apos; IN recurseChild) &gt; 0) ) then
									set recurseChild = &apos;N&apos;;
								else
									if (POSITION(&apos;1&apos; IN recurseChild) &gt; 0)  then
										set recurseChild = &apos;Y&apos;;
									else
										if (POSITION(&apos;0&apos; IN recurseChild) &gt; 0)  then
											set recurseChild = &apos;N&apos;;
										end if;
									end if;
								end if;
							end if;
						end if;

						SET rowString = &apos;Status=&apos;||status||
							&apos; ResPath=&apos;||TRIM(NVL(privRec.resourcePath,&apos; &apos;)) || 
							&apos; ResType=&apos;||TRIM(NVL(privRec.resourceType,&apos; &apos;)) ||
							&apos; Dependencies=&apos;||recurseDependencies || 
							&apos; Dependents=&apos;||recurseDependents || 
							&apos; Child=&apos;||recurseChild  || 
							&apos; mode=&apos;|| TRIM(NVL(privRec.mode,&apos; &apos;)) ||  
							&apos; Name=&apos;||TRIM(NVL(privRec.name,&apos; &apos;)) || 
							&apos; Type=&apos;||TRIM(NVL(privRec.nameType,&apos; &apos;)) || 
							&apos; Domain=&apos;||TRIM(NVL(privRec.domainName,&apos; &apos;)) || 
							&apos; EnvType=&apos;||TRIM(NVL(envType,&apos; &apos;)) || 
							&apos; ActualPrivileges=&apos;||TRIM(NVL(displayActualPrivilegeList,&apos; &apos;)) || 
							&apos; Owner=&apos;||TRIM(NVL(privRec.owner,&apos; &apos;)) || 
							&apos; OwnerDomain=&apos;||TRIM(NVL(privRec.ownerDomain,&apos; &apos;))||
							&apos;|&apos;||newline;

						call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||rowString, logOutput);
					END IF;
				END IF;

				-- Set the previous resource path and type so as to track when a line is different than the previous
				--   This will trigger invoking the updateResourcePrivileges() method during batch privilege processing.
				SET prevPrivRec = privRec;
			END IF;
		END FOR;

		IF (preview = &apos;N&apos; AND numRows &gt; 1) THEN
			IF (debug1ReadOnly = &apos;Y&apos;) THEN
				-- Output a blank line for end of processing if not preview and rows processed.
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, &apos;|&apos;||newline, logOutput);
			END IF;
		END IF;

		-- Local Debug
		IF (debug2Modified = &apos;Y&apos;) THEN
			call print(moduleName||&apos; : END: LENGTH(privReadStr1)=&apos;||LENGTH(privReadStr1)||&apos;  LENGTH(privReadStr2)=&apos;||LENGTH(privReadStr2));
			call print(moduleName||&apos; : END: LENGTH(privReadAppliedStr1)=&apos;||LENGTH(privReadAppliedStr1)|| &apos;  LENGTH(privReadAppliedStr2)=&apos;||LENGTH(privReadAppliedStr2));
		END IF;

 		-- Reset the read string since all changes have been applied
		SET privReadStr1 = NULL;
		SET privReadStr2 = NULL;
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1414441694073</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:10:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:5:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:6:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:7:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:8:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:9:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">16/479</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/385</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/399</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/530</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/255</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/386</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/275</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/387</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/378</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/372</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/159</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/373</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/645</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/644</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/392</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/525</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/364</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/365</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/263</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/338</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/484</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/371</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/492</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/458</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/516</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/160</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="validateSupportingTables" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/validateSupportingTables" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="projectName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="subproject" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="domainName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="envName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="orgNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="projectNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="subprojectNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="domainNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="envNameNotFound" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="orgCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="projectCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="subprojectCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="domainCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="envNameCount" direction="INOUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="lastOrg" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="lastProject" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="lastSubproject" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="lastDomain" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="lastEnvName" direction="INOUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="exceptionText" direction="INOUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="scriptType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptMapping" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	Modified Date:	Modified By:		CSW Version:	Reason:
	05/16/2017		Mike Tinius			7.0.5			Adapted for Data Abstraction Best Practices.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE validateSupportingTables(
	IN 	datasource				VARCHAR(255),-- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
	IN debug					CHAR(1),
	IN organization				VARCHAR,
	IN projectName				VARCHAR,
	IN subproject				VARCHAR,
	IN domainName				VARCHAR,
	IN envName					VARCHAR,
	INOUT orgNotFound			LONGVARCHAR,
	INOUT projectNotFound		LONGVARCHAR,
	INOUT subprojectNotFound	LONGVARCHAR,
	INOUT domainNotFound		LONGVARCHAR,
	INOUT envNameNotFound		LONGVARCHAR,
	INOUT orgCount				INTEGER,
	INOUT projectCount			INTEGER,
	INOUT subprojectCount		INTEGER,
	INOUT domainCount			INTEGER,
	INOUT envNameCount			INTEGER,
	INOUT lastOrg				VARCHAR,
	INOUT lastProject			VARCHAR,
	INOUT lastSubproject		VARCHAR,
	INOUT lastDomain			VARCHAR,
	INOUT lastEnvName			VARCHAR,
	INOUT exceptionText			LONGVARCHAR -- add on to the exception if the validation was unsuccessful.
)
BEGIN
	DECLARE ex					EXCEPTION;
	DECLARE recCount			INTEGER;
	DECLARE environment			VARCHAR;
	DECLARE ownerName			VARCHAR;
	DECLARE ownerDomain			VARCHAR;
	DECLARE i					INTEGER;
	DECLARE envValid			BOOLEAN;
	DECLARE sqlStatement		VARCHAR(4096);
	DECLARE curs				CURSOR(cnt INTEGER);
	DECLARE j					INTEGER;
	DECLARE pos1,pos2			INTEGER;
	DECLARE object				VARCHAR(4000);
	DECLARE moreToDo1			BOOLEAN;
	DECLARE objectList1			LONGVARCHAR;
	DECLARE expression1			VARCHAR;
	DECLARE explen1				INTEGER;
	DECLARE scriptPath			VARCHAR(4000);

		-- Validation logic
		IF (organization IS NOT NULL AND (orgCount = 0 OR lastOrg &lt;&gt; organization)) THEN
			IF (LENGTH(orgNotFound) = 0 OR INSTR(orgNotFound, &apos;,&apos;||organization) = 0) THEN
				-- Verify the ORGANIZATION_TYPE
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;OT&apos;, datasource, scriptPath);
				set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ORGANIZATION_NAME = &apos;&apos;&apos;||organization||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
				open curs for sqlStatement;
				fetch curs into orgCount;
				close curs;

				IF (debug = &apos;Y&apos;) THEN
					CALL PRINT(&apos;VALIDATE ORGANIZATION_TYPE: orgCount=&apos;||orgCount||&apos;  ORGANIZATION_NAME=&apos;||TRIM(NVL(organization,&apos;  &apos;)));
				END IF;
				-- Raise an exception when the ORGANIZATION_NAME does not exist
				IF (orgCount = 0) THEN
					set exceptionText = exceptionText || &apos;ORGANIZATION_TYPE: ORGANIZATION_NAME=[&apos;||TRIM(NVL(organization,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
					set orgNotFound = orgNotFound || &apos;,&apos;||organization;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT(&apos;VALIDATE ORGANIZATION_TYPE: exceptionText=&apos;||exceptionText);
						CALL PRINT(&apos;VALIDATE ORGANIZATION_TYPE: orgNotFound=&apos;||orgNotFound);
					END IF;
				END IF;
			END IF;
		END IF;

		IF (organization IS NOT NULL AND projectName IS NOT NULL AND (projectCount = 0 OR lastOrg &lt;&gt; organization OR lastProject &lt;&gt; projectName)) THEN
			IF (LENGTH(projectNotFound) = 0 OR INSTR(projectNotFound, &apos;,&apos;||organization||&apos;:&apos;||projectName) = 0) THEN
				-- Verify the PROJECT_TYPE
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;PT&apos;, datasource, scriptPath);
				set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PROJECT_NAME = &apos;&apos;&apos;||projectName||&apos;&apos;&apos; and ORGANIZATION_NAME = &apos;&apos;&apos;||organization||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
				open curs for sqlStatement;
				fetch curs into projectCount;
				close curs;

				IF (debug = &apos;Y&apos;) THEN
					CALL PRINT(&apos;VALIDATE PROJECT_TYPE: projectCount=&apos;||projectCount||&apos;  ORGANIZATION_NAME=[&apos;||TRIM(NVL(organization,&apos;  &apos;))||&apos;] and PROJECT_NAME=[&apos;||TRIM(NVL(projectName,&apos;  &apos;))||&apos;]&apos;);
				END IF;
				-- Raise an exception when the ORGANIZATION_NAME and PROJECT_NAME does not exist
				IF (projectCount = 0) THEN
					set exceptionText = exceptionText || &apos;PROJECT_TYPE: ORGANIZATION_NAME=[&apos;||TRIM(NVL(organization,&apos;  &apos;))||&apos;] and PROJECT_NAME=[&apos;||TRIM(NVL(projectName,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
					set projectNotFound = projectNotFound || &apos;,&apos;||organization||&apos;:&apos;||projectName;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT(&apos;VALIDATE PROJECT_TYPE: exceptionText=&apos;||exceptionText);
						CALL PRINT(&apos;VALIDATE PROJECT_TYPE: projectNotFound=&apos;||projectNotFound);
					END IF;
				END IF;
			END IF;
		END IF;

		IF (projectName IS NOT NULL AND subproject IS NOT NULL AND (subprojectCount = 0 OR lastProject &lt;&gt; projectName OR lastSubproject &lt;&gt; subproject)) THEN
			IF (LENGTH(subprojectNotFound) = 0 OR INSTR(subprojectNotFound, &apos;,&apos;||projectName||&apos;:&apos;||subproject) = 0) THEN
				-- Verify the SUBPROJECT_TYPE
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ST&apos;, datasource, scriptPath);
				set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where SUBPROJECT_NAME = &apos;&apos;&apos;||subproject||&apos;&apos;&apos; and PROJECT_NAME = &apos;&apos;&apos;||projectName||&apos;&apos;&apos; and  ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
				open curs for sqlStatement;
				fetch curs into subprojectCount;
				close curs;

				IF (debug = &apos;Y&apos;) THEN
					CALL PRINT(&apos;VALIDATE SUBPROJECT_TYPE: subprojectCount=&apos;||subprojectCount||&apos;  PROJECT_NAME=[&apos;||TRIM(NVL(projectName,&apos;  &apos;))||&apos;] and SUBPROJECT_NAME=[&apos;||TRIM(NVL(subproject,&apos;  &apos;))||&apos;]&apos;);
				END IF;
				-- Raise an exception when the PROJECT_NAME and SUBPROJECT_NAME does not exist
				IF (subprojectCount = 0) THEN
					set exceptionText = exceptionText || &apos;SUBPROJECT_TYPE: PROJECT_NAME=[&apos;||TRIM(NVL(projectName,&apos;  &apos;))||&apos;] and SUBPROJECT_NAME=[&apos;||TRIM(NVL(subproject,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
					set subprojectNotFound = subprojectNotFound || &apos;,&apos;||projectName||&apos;:&apos;||subproject;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT(&apos;VALIDATE SUBPROJECT_TYPE: exceptionText=&apos;||exceptionText);
						CALL PRINT(&apos;VALIDATE SUBPROJECT_TYPE: subprojectNotFound=&apos;||subprojectNotFound);
					END IF;
				END IF;
			END IF;
		END IF;

		IF (domainName IS NOT NULL AND (domainCount = 0 OR lastDomain &lt;&gt; domainName)) THEN
			IF (LENGTH(domainNotFound) = 0 OR INSTR(domainNotFound, &apos;,&apos;||domainName) = 0) THEN
				-- Verify the DOMAIN_TYPE
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;DT&apos;, datasource, scriptPath);
				set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where DOMAIN_NAME = &apos;&apos;&apos;||domainName||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
				open curs for sqlStatement;
				fetch curs into domainCount;
				close curs;

				IF (debug = &apos;Y&apos;) THEN
					CALL PRINT(&apos;VALIDATE DOMAIN_TYPE: domainCount=&apos;||domainCount||&apos;  DOMAIN_NAME=&apos;||TRIM(NVL(domainName,&apos;  &apos;)));
				END IF;
				-- Raise an exception when the DOMAIN_NAME does not exist
				IF (domainCount = 0) THEN
					set exceptionText = exceptionText || &apos;DOMAIN_TYPE: DOMAIN_NAME=[&apos;||TRIM(NVL(domainName,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
					set domainNotFound = domainNotFound || &apos;,&apos;||domainName;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT(&apos;VALIDATE DOMAIN_TYPE: exceptionText=&apos;||exceptionText);
						CALL PRINT(&apos;VALIDATE DOMAIN_TYPE: domainNotFound=&apos;||domainNotFound);
					END IF;
				END IF;
			END IF;
		END IF;

		IF (envName IS NOT NULL AND (envNameCount = 0 OR lastEnvName &lt;&gt; envName)) THEN
			IF (LENGTH(envNameNotFound) = 0 OR INSTR(envNameNotFound, &apos;,&apos;||envName) = 0) THEN
				-- Verify the ENVIRONMENT_TYPE
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ET&apos;, datasource, scriptPath);
				set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ENVIRONMENT_NAME = &apos;&apos;&apos;||envName||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
				open curs for sqlStatement;
				fetch curs into envNameCount;
				close curs;

				IF (debug = &apos;Y&apos;) THEN
					CALL PRINT(&apos;VALIDATE ENVIRONMENT_TYPE: envNameCount=&apos;||envNameCount||&apos;  ENVIRONMENT_NAME=&apos;||TRIM(NVL(envName,&apos;  &apos;)));
				END IF;
				-- Raise an exception when the ENVIRONMENT_NAME does not exist
				IF (envNameCount = 0) THEN
					set exceptionText = exceptionText || &apos;ENVIRONMENT_TYPE: ENVIRONMENT_NAME=[&apos;||TRIM(NVL(envName,&apos;  &apos;))||&apos;] does not exist.&apos; || CHR(10);
					set envNameNotFound = envNameNotFound || &apos;,&apos;||envName;
					IF (debug = &apos;Y&apos;) THEN
						CALL PRINT(&apos;VALIDATE ENVIRONMENT_TYPE: exceptionText=&apos;||exceptionText);
						CALL PRINT(&apos;VALIDATE ENVIRONMENT_TYPE: envNameNotFound=&apos;||envNameNotFound);
					END IF;
				END IF;
			END IF;
		END IF;

		-- Set the last variable value with the current variable value
		SET lastOrg = organization;
		SET lastProject = projectName;
		SET lastSubproject = subproject;
		SET lastDomain = domainName;
		SET lastEnvName = envName;
END</attribute>
  <attribute name="creationDate" type="LONG">1459446278822</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap_im</attribute>
  <attribute name="creatorUserId" type="INTEGER">4306</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564075714164</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4306</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/149</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/85</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/84</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/125</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/101</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/77</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/181</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/180</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/156</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/157</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/132</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/133</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/109</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/173</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/108</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1459446278822</attribute>
</metadata>
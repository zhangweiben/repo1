<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="performSupportingTableMaintenance" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/performSupportingTableMaintenance" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="performInsert" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="projectName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="subprojectList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="domainNameList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="environmentNameList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="message" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="scriptType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptMapping" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_02_DOMAIN_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inDOMAIN_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_03_ENVIRONMENT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inENVIRONMENT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inSUBPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*	performSupportingTableMaintenance:
	----------------------------------

	This procedure is used to perform table maintenance on the supporting tables in the database.
			Table Name			Require Fields
			------------------	------------------
			ORGANIZATION_TYPE:	ORGANIZATION_NAME
			PROJECT_TYPE:		ORGANIZATION_NAME
								PROJECT_NAME
			SUBPROJECT_TYPE:	SUBPROJECT_NAME
								PROJECT_NAME
								ORGANIZATION_NAME
			DOMAIN_TYPE:		DOMAIN_NAME
			ENVIRONMENT_TYPE:	ENVIRONMENT_NAME
	Rules.
		1. performInsert:
				When performInsert=Y, perform the insert of the new row for the given table.
				When performInsert=N, do not perform the insert of the new row for the given table but display what will happen.
		2. organization
				Used for tables ORGANIZATION_TYPE or PROJECT_TYPE
				If not null, then test ORGANIZATION_TYPE.ORGANIZATION_NAME for existence.  
				If not exist then insert.
		3. projectName
				Used for table PROJECT_TYPE.ORGANIZATION_NAME and PROJECT_TYPE.PROJECT_NAME
				If projectName and organization is not null then test PROJECT_TYPE.ORGANIZATION_NAME and PROJECT_TYPE.PROJECT_NAME for existence.
				If not exist then insert.
		4. subprojectList
				Used for table SUBPROJECT_TYPE.SUBPROJECT_NAME and SUBPROJECT_TYPE.PROJECT_NAME and SUBPROJECT_TYPE.ORGANIZATION_NAME
				This may be a comma separated list of subprojects.
				For each subproject and project, if they are not null then test PROJECT_TYPE.SUBPROJECT_NAME and PROJECT_TYPE.PROJECT_NAME and SUBPROJECT_TYPE.ORGANIZATION_NAME for existence.
				If not exist then insert.
		5. domainNameList
				Used for tables DOMAIN_TYPE
				This may be a comma separated list of domain names.
				If not null, then test DOMAIN_TYPE.DOMAIN_NAME for existence.  
				If not exist then insert.
		6. environmentNameList
				Used for tables ENVIRONMENT_TYPE
				This may be a comma separated list of environent names.
				If not null, then test ENVIRONMENT_TYPE.ENVIRONMENT_NAME for existence.  
				If not exist then insert.

	Modified Date:	Modified By:		CIS Version:	Reason:
	--------------	------------------	------------	-------
	03/31/2016		Mike Tinius			7.0.2			Added new as a way of inserting new privileges into PROD Oracle privilege UI database.
	04/11/2016		Mike Tinius			7.0.2			Added the ability to insert environment type and global variables.
	05/16/2017		Mike Tinius			7.0.5			Adapted for Data Abstraction Best Practices.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE performSupportingTableMaintenance(
	IN datasource				VARCHAR(255),-- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
	IN performInsert			CHAR(1),	-- Y or N.  Y=yes perform insert.  
											-- N=no do not perform insert but display the same messages to see what will be executed.
	IN organization				VARCHAR,	-- leave null unless you want to insert into ORGANIZATION_TYPE and/or PROJECT_TYPE
											-- 		Examples (1 of): ORG1, ORG2
	IN projectName				VARCHAR,	-- leave null unless you want to insert into PROJECT_TYPE and/or SUBPROJECT_TYPE
											--		Examples (1 of): PROJECT1, PROJECT2
	IN subprojectList			LONGVARCHAR,-- leave null unless you want to insert into SUBPROJECT_TYPE.  
											--		This may be a comma separated list of subprojects.
											--		Examples (1 of): SB1, SB2, SB3
	IN domainNameList			LONGVARCHAR,-- leave null unless you want to insert into DOMAIN_TYPE
											--		This may be a comma separated list of domain names.
											-- 		Examples (1 of): ldap, composite, dynamic
	IN environmentNameList		LONGVARCHAR,-- leave null unless you want to insert into ENVIRONMENT_TYPE
											--		This may be a comma separated list of environment names.
											-- 		Examples (1 of): DEV, UAT, PROD
	OUT message					LONGVARCHAR
)
BEGIN
	DECLARE recCount				INTEGER;
	DECLARE globalVar				VARCHAR(4096);
	DECLARE globalVarElem			VARCHAR(4096);
	DECLARE environment				VARCHAR;
	DECLARE ownerName				VARCHAR;
	DECLARE ownerDomain				VARCHAR;
	DECLARE subproject				VARCHAR;
	DECLARE domainName				VARCHAR;
	DECLARE environmentName			VARCHAR;
	DECLARE envValid				BOOLEAN;
	DECLARE j,k						INTEGER;
	DECLARE pos1,pos2				INTEGER;
	DECLARE object					VARCHAR(4000);
	DECLARE moreToDo1,moreToDo2		BOOLEAN;
	DECLARE objectList1,objectList2	LONGVARCHAR;
	DECLARE expression1,expression2	VARCHAR;
	DECLARE explen1,explen2			INTEGER;
	DECLARE messageout				VARCHAR(4000);
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE scriptPath				VARCHAR(4000);
	DECLARE countCursor				CURSOR(rowCount INTEGER);
	DECLARE ex						EXCEPTION;

	SET message = &apos;&apos;;

	IF (datasource IS NOT NULL AND datasource = &apos;EXCEL&apos;) THEN
		raise ex value &apos;The input variable datasource=&quot;EXCEL&quot; is not valid.&apos;;
	END IF;

	-- Perform ORGANIZATION_TYPE maintenance.
	IF (organization IS NOT NULL AND LENGTH(organization) &gt; 0) THEN
		IF (INSTR(organization, &apos;,&apos;) &gt; 0) THEN
			raise ex value &apos;The input variable &quot;organization&quot;=[&apos;||organization||&apos;] may not be a comma separated list.&apos;;
		END IF;

		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;OT&apos;, datasource, scriptPath);
		set sqlStatement = 
		&apos;SELECT COUNT(*) recCount
			FROM &apos;||scriptPath||&apos;
			WHERE ISACTIVE = &apos;&apos;Y&apos;&apos; AND ORGANIZATION_NAME = &apos;&apos;&apos;||organization||&apos;&apos;&apos;&apos;;
		open countCursor for sqlStatement;
		fetch countCursor into recCount;
		close countCursor;
		-- Perform maintenance on the ORGANIZATION_TYPE table to insert the new ORGANIZATION_NAME
		IF (recCount = 0) THEN
			IF (performInsert IS NOT NULL and UPPER(performInsert) = &apos;Y&apos;) THEN
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE(datasource, null, null, organization, messageout);
				SET message = message || &apos;ORGANIZATION_TYPE: &apos;||messageout||&apos;: ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
			ELSE
				SET message = message || &apos;ORGANIZATION_TYPE: &quot;WILL BE&quot; INSERTED ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
			END IF;
		ELSE
			SET message = message || &apos;ORGANIZATION_TYPE: ALREADY EXISTS ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
		END IF;
	ELSE
		SET message = message || &apos;ORGANIZATION_TYPE: NO INPUT VALUE PROVIDED FOR organization.&apos;||CHR(10);
	END IF;

	-- Perform PROJECT_TYPE maintenance.
	IF (organization IS NOT NULL AND LENGTH(organization) &gt; 0 AND projectName IS NOT NULL AND LENGTH(projectName) &gt; 0) THEN
		IF (INSTR(projectName, &apos;,&apos;) &gt; 0) THEN
			raise ex value &apos;The input variable &quot;projectName&quot;=[&apos;||projectName||&apos;] may not be a comma separated list.&apos;;
		END IF;

		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;PT&apos;, datasource, scriptPath);
		set sqlStatement = 
		&apos;SELECT COUNT(*) recCount
			FROM &apos;||scriptPath||&apos;
			WHERE ISACTIVE = &apos;&apos;Y&apos;&apos; AND ORGANIZATION_NAME = &apos;&apos;&apos;||organization||&apos;&apos;&apos; AND PROJECT_NAME = &apos;&apos;&apos;||projectName||&apos;&apos;&apos;&apos;;
		open countCursor for sqlStatement;
		fetch countCursor into recCount;
		close countCursor;
		-- Perform maintenance on the PROJECT_TYPE table to insert the new PROJECT_NAME and ORGANIZATION_NAME
		IF (recCount = 0) THEN
			IF (performInsert IS NOT NULL and UPPER(performInsert) = &apos;Y&apos;) THEN
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE(datasource, null, null, projectName, organization, messageout);
				SET message = message || &apos;PROJECT_TYPE: &apos;||messageout||&apos;: PROJECT_NAME=[&apos;||projectName||&apos;]  ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
			ELSE
				SET message = message || &apos;PROJECT_TYPE: &quot;WILL BE&quot; INSERTED PROJECT_NAME=[&apos;||projectName||&apos;]  ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
			END IF;
		ELSE
			SET message = message || &apos;PROJECT_TYPE: ALREADY EXISTS PROJECT_NAME=[&apos;||projectName||&apos;]  ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
		END IF;
	ELSE
		SET message = message || &apos;PROJECT_TYPE: NO INPUT VALUE PROVIDED FOR organization and/or projectName.&apos;||CHR(10);
	END IF;

	-- Perform SUBPROJECT_TYPE maintenance.
	IF (projectName IS NOT NULL AND LENGTH(projectName) &gt; 0 AND subprojectList IS NOT NULL AND LENGTH(subprojectList) &gt; 0 and organization IS NOT NULL AND LENGTH(organization) &gt; 0) THEN
		-- Extract the object from the object list
		SET objectList1 = subprojectList;
		SET expression1 = &apos;,&apos;;
		SET explen1 = length(expression1);
		SET moreToDo1 = true;
		SET j = 0;
		WHILE (moreToDo1) DO
			-- Extract the source column type
			set j = j + 1;
			SET object = null;
			IF (j = 1) THEN
				SET pos1 = INSTR(objectList1, expression1, 1, j);
				IF (pos1 &gt; 0) THEN
					SET object = SUBSTRING(objectList1, 1, pos1-1);
				ELSE
					IF (LENGTH(TRIM(objectList1)) &gt; 0) THEN
						SET object = objectList1;
					END IF;
					SET moreToDo1 = false;
				END IF;
			ELSE
				SET pos1 = INSTR(objectList1, expression1, 1, j-1);
				SET pos2 = INSTR(objectList1, expression1, 1, j);
				IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
					SET object = SUBSTRING(objectList1, pos1+explen1, pos2-pos1-explen1);
				ELSEIF (pos1 &gt; 0 and pos2 = 0) THEN
					SET object = SUBSTRING(objectList1, pos1+explen1);
					SET moreToDo1 = false;
				END IF;
			END IF;
			SET object = TRIM(object);
			--CALL print(&apos;priv object=[&apos;||TRIM(NVL(object,&apos;  &apos;))||&apos;]&apos;);
			IF (object IS NOT NULL and LENGTH(TRIM(object)) &gt; 0) then
				set subproject = object;

				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ST&apos;, datasource, scriptPath);
				set sqlStatement = 
				&apos;SELECT COUNT(*) recCount
					FROM &apos;||scriptPath||&apos;
					WHERE ISACTIVE = &apos;&apos;Y&apos;&apos; AND PROJECT_NAME = &apos;&apos;&apos;||projectName||&apos;&apos;&apos; AND SUBPROJECT_NAME = &apos;&apos;&apos;||subproject||&apos;&apos;&apos; AND ORGANIZATION_NAME = &apos;&apos;&apos;||organization||&apos;&apos;&apos;&apos;;
				open countCursor for sqlStatement;
				fetch countCursor into recCount;
				close countCursor;
				-- Perform maintenance on the SUBPROJECT_TYPE table to insert the new SUBPROJECT_NAME and PROJECT_NAME
				IF (recCount = 0) THEN
					IF (performInsert IS NOT NULL and UPPER(performInsert) = &apos;Y&apos;) THEN
						call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE(datasource, null, null, subproject, projectName, organization, messageout);
						SET message = message || &apos;SUBPROJECT_TYPE: &apos;||messageout||&apos;: SUBPROJECT_NAME=[&apos;||subproject||&apos;]  PROJECT_NAME=[&apos;||projectName||&apos;] ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
					ELSE
						SET message = message || &apos;SUBPROJECT_TYPE: &quot;WILL BE&quot; INSERTED  SUBPROJECT_NAME=[&apos;||subproject||&apos;]  PROJECT_NAME=[&apos;||projectName||&apos;] ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
					END IF;
				ELSE
					SET message = message || &apos;SUBPROJECT_TYPE: ALREADY EXISTS SUBPROJECT_NAME=[&apos;||subproject||&apos;]  PROJECT_NAME=[&apos;||projectName||&apos;] ORGANIZATION_NAME=[&apos;||organization||&apos;]&apos;||CHR(10);
				END IF;
			END IF;
		END WHILE;
	ELSE
		SET message = message || &apos;SUBPROJECT_TYPE: NO INPUT VALUE PROVIDED FOR subproject and/or projectName and/or organization.&apos;||CHR(10);
	END IF;

	-- Perform DOMAIN_TYPE maintenance.
	IF (domainNameList IS NOT NULL AND LENGTH(domainNameList) &gt; 0) THEN
		-- Extract the object from the object list
		SET objectList1 = domainNameList;
		SET expression1 = &apos;,&apos;;
		SET explen1 = length(expression1);
		SET moreToDo1 = true;
		SET j = 0;
		WHILE (moreToDo1) DO
			-- Extract the source column type
			set j = j + 1;
			SET object = null;
			IF (j = 1) THEN
				SET pos1 = INSTR(objectList1, expression1, 1, j);
				IF (pos1 &gt; 0) THEN
					SET object = SUBSTRING(objectList1, 1, pos1-1);
				ELSE
					IF (LENGTH(TRIM(objectList1)) &gt; 0) THEN
						SET object = objectList1;
					END IF;
					SET moreToDo1 = false;
				END IF;
			ELSE
				SET pos1 = INSTR(objectList1, expression1, 1, j-1);
				SET pos2 = INSTR(objectList1, expression1, 1, j);
				IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
					SET object = SUBSTRING(objectList1, pos1+explen1, pos2-pos1-explen1);
				ELSEIF (pos1 &gt; 0 and pos2 = 0) THEN
					SET object = SUBSTRING(objectList1, pos1+explen1);
					SET moreToDo1 = false;
				END IF;
			END IF;
			SET object = TRIM(object);
			--CALL print(&apos;priv object=[&apos;||TRIM(NVL(object,&apos;  &apos;))||&apos;]&apos;);
			IF (object IS NOT NULL and LENGTH(TRIM(object)) &gt; 0) then
				set domainName = object;

				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;DT&apos;, datasource, scriptPath);
				set sqlStatement = 
				&apos;SELECT COUNT(*) recCount
					FROM &apos;||scriptPath||&apos;
					WHERE ISACTIVE = &apos;&apos;Y&apos;&apos; AND DOMAIN_NAME = &apos;&apos;&apos;||domainName||&apos;&apos;&apos;&apos;;
				open countCursor for sqlStatement;
				fetch countCursor into recCount;
				close countCursor;
				-- Perform maintenance on the DOMAIN_TYPE table to insert the new DOMAIN_NAME
				IF (recCount = 0) THEN
					IF (performInsert IS NOT NULL and UPPER(performInsert) = &apos;Y&apos;) THEN
						call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_02_DOMAIN_TYPE(datasource, null, null, domainName, messageout);
						SET message = message || &apos;DOMAIN_TYPE: &apos;||messageout||&apos;: DOMAIN_NAME=[&apos;||domainName||&apos;]&apos;||CHR(10);
					ELSE
						SET message = message || &apos;DOMAIN_TYPE: &quot;WILL BE&quot; INSERTED DOMAIN_NAME=[&apos;||domainName||&apos;]&apos;||CHR(10);
					END IF;
				ELSE
					SET message = message || &apos;DOMAIN_TYPE: ALREADY EXISTS DOMAIN_NAME=[&apos;||domainName||&apos;]&apos;||CHR(10);
				END IF;
			ELSE
				SET message = message || &apos;DOMAIN_TYPE: NO INPUT VALUE PROVIDED FOR domainName.&apos;||CHR(10);
			END IF;
		END WHILE;
	ELSE
		SET message = message || &apos;DOMAIN_TYPE: NO INPUT VALUE PROVIDED FOR domainNameList.&apos;||CHR(10);
	END IF;

	-- Perform ENVIRONMENT_TYPE maintenance.
	IF (environmentNameList IS NOT NULL AND LENGTH(environmentNameList) &gt; 0) THEN
		-- Extract the object from the object list
		SET objectList1 = environmentNameList;
		SET expression1 = &apos;,&apos;;
		SET explen1 = length(expression1);
		SET moreToDo1 = true;
		SET j = 0;
		WHILE (moreToDo1) DO
			-- Extract the source column type
			set j = j + 1;
			SET object = null;
			IF (j = 1) THEN
				SET pos1 = INSTR(objectList1, expression1, 1, j);
				IF (pos1 &gt; 0) THEN
					SET object = SUBSTRING(objectList1, 1, pos1-1);
				ELSE
					IF (LENGTH(TRIM(objectList1)) &gt; 0) THEN
						SET object = objectList1;
					END IF;
					SET moreToDo1 = false;
				END IF;
			ELSE
				SET pos1 = INSTR(objectList1, expression1, 1, j-1);
				SET pos2 = INSTR(objectList1, expression1, 1, j);
				IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
					SET object = SUBSTRING(objectList1, pos1+explen1, pos2-pos1-explen1);
				ELSEIF (pos1 &gt; 0 and pos2 = 0) THEN
					SET object = SUBSTRING(objectList1, pos1+explen1);
					SET moreToDo1 = false;
				END IF;
			END IF;
			SET object = TRIM(object);
			--CALL print(&apos;priv object=[&apos;||TRIM(NVL(object,&apos;  &apos;))||&apos;]&apos;);
			IF (object IS NOT NULL and LENGTH(TRIM(object)) &gt; 0) then
				set environmentName = object;

				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ET&apos;, datasource, scriptPath);
				set sqlStatement = 
				&apos;SELECT COUNT(*) recCount
					FROM &apos;||scriptPath||&apos;
					WHERE ISACTIVE = &apos;&apos;Y&apos;&apos; AND ENVIRONMENT_NAME = &apos;&apos;&apos;||environmentName||&apos;&apos;&apos;&apos;;
				open countCursor for sqlStatement;
				fetch countCursor into recCount;
				close countCursor;
				-- Perform maintenance on the ENVIRONMENT_TYPE table to insert the new ENVIRONMENT_NAME
				IF (recCount = 0) THEN
					IF (performInsert IS NOT NULL and UPPER(performInsert) = &apos;Y&apos;) THEN
						call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_03_ENVIRONMENT_TYPE(datasource, null, null, environmentName, messageout);
						SET message = message || &apos;ENVIRONMENT_TYPE: &apos;||messageout||&apos;: ENVIRONMENT_NAME=[&apos;||environmentName||&apos;]&apos;||CHR(10);
					ELSE
						SET message = message || &apos;ENVIRONMENT_TYPE: &quot;WILL BE&quot; INSERTED ENVIRONMENT_NAME=[&apos;||environmentName||&apos;]&apos;||CHR(10);
					END IF;
				ELSE
					SET message = message || &apos;ENVIRONMENT_TYPE: ALREADY EXISTS ENVIRONMENT_NAME=[&apos;||environmentName||&apos;]&apos;||CHR(10);
				END IF;
			ELSE
				SET message = message || &apos;ENVIRONMENT_TYPE: NO INPUT VALUE PROVIDED FOR environmentName.&apos;||CHR(10);
			END IF;
		END WHILE;
	ELSE
		SET message = message || &apos;ENVIRONMENT_TYPE: NO INPUT VALUE PROVIDED FOR environmentNameList.&apos;||CHR(10);
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1459434861068</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap_im</attribute>
  <attribute name="creatorUserId" type="INTEGER">4306</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560603906783</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4306</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1459434861068</attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="modify_07_COMPOSITE_STUDIO_RIGHTS" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_07_COMPOSITE_STUDIO_RIGHTS" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="performInsertUpdate" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="setInactive" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="performDelete" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inSTUDIO_RIGHTS_ID" direction="IN" nullable="true">
      <datatype name="DECIMAL" type="DECIMAL" maxDigits="38" maxFractionalDigits="0"/>
    </parameter>
    <parameter name="inORGANIZATION_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inPROJECT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inSUBPROJECT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGROUP_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGROUP_DESC" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inDOMAIN_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inENVIRONMENT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inACCESS_FLAG" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inUNDO_LOCK" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inREAD_ALL_CONFIG" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inMODIFY_ALL_CONFIG" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inREAD_ALL_RESOURCES" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inMODIFY_ALL_RESOURCES" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inREAD_ALL_STATUS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inMODIFY_ALL_STATUS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inREAD_ALL_USER" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inMODIFY_ALL_USER" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="actionType" direction="OUT" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="rowsProcessed" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="duplicateRows" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="duplicateRowMsg" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="message" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="scriptType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptMapping" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLGroups" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Environment_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Project" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SubProject" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Group_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Domain_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sqlStatement" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClause" direction="OUT">
        <datatype type="STRING" maxLength="2048"/>
      </element>
      <element name="whereClause" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inSUBPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	This procedure is used to insert/update/delete/inactivate rows in the COMPOSITE_STUDIO_RIGHTS table.
	These are rows that come from the Group_List sheet in the Composite_Resource_Privileges_LOAD_DB.xlsx spreadsheet.
	Example:
		STUDIO_RIGHTS_ID: 	2
		ORGANIZATION_NAME: 	ORG1
		PROJECT_NAME: 		Servicing_Demo
		SUBPROJECT_NAME:	SB1
		GROUP_NAME: 		Composite_Servicing_Arch
		GROUP_DESC: 		Composite Servicing Architect
		DOMAIN_NAME: 		composite
		ENVIRONMENT_NAME: 	DEMO
		ACCESS_FLAG: 		X
		UNDO_LOCK: 			[NULL]
		READ_ALL_CONFIG: 	[NULL]
		MODIFY_ALL_CONFIG: 	[NULL]
		READ_ALL_RESOURCES: [NULL]
		MODIFY_ALL_RESOURCES: [NULL]
		READ_ALL_STATUS: 	X
		MODIFY_ALL_STATUS: 	[NULL]
		READ_ALL_USER: 		[NULL]
		MODIFY_ALL_USER: 	[NULL]
		CREATEDBY: 			CMPPRVP
		CREATEDDATE: 		2015-06-16 12:11:46
		UPDATEDBY: 			CMPPRVP
		UPDATEDDATE: 		2015-06-16 12:11:46
		ISACTIVE: 			Y

	Input:
		datasource				- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
		performInsertUpdate		- Y or N.  Y=yes perform insert or update.  
								- N=no do not perform insert or update but display the same messages to see what will be executed.		setInactive				- Set the ISACTIVE flag to N
									Y=if the record exists set it inactive.  Overrides performDelete
									N/null=do not perform this operation.
		setInactive				- Y=if the record exists set it inactive.  Overrides performDelete
								- N/null=do not perform this operation.
		performDelete			- Delete the row if it exists
									Y=perform a delete using filters supplied.
									N/null=do not perform delete but perform insert or update instead.
		various fields...
	Output:
		actionType				- I=insert, U=update, D=delete, S=set inactive
		rowsProcessed			- Number of rows process for the action type
		duplicateRows			- number of duplicate rows
		duplicateRowMsg			- a duplicate row message
		message					- a general message

	Modified Date:	Modified By:		CIS Version:	Reason:
	--------------	------------------	------------	-------
	05/16/2017		Mike Tinius			7.0.5			Adapted for Data Abstraction Best Practices.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE modify_07_COMPOSITE_STUDIO_RIGHTS(
	IN 	datasource				VARCHAR(255),-- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
	IN 	performInsertUpdate		VARCHAR(1),	-- Y or N.  Y=yes perform insert or update.  
											-- N=no do not perform insert or update but display the same messages to see what will be executed.
	IN	setInactive				VARCHAR(1),	-- Y=if the record exists set it inactive.  Overrides performDelete
											-- N/null=do not perform this operation.
	IN	performDelete			VARCHAR(1),	-- Y=perform a delete using filters supplied.
											-- N/null=do not perform delete but perform insert or update instead.
	IN	inSTUDIO_RIGHTS_ID		DECIMAL(38,0), -- This is used only when setting a row inactive or deleting a specific row by its generated STUDIO_RIGHTS_ID
	IN 	inORGANIZATION_NAME		VARCHAR(255),
	IN	inPROJECT_NAME			VARCHAR(255),
	IN	inSUBPROJECT_NAME		VARCHAR(255),
	IN	inGROUP_NAME			VARCHAR(255),
	IN	inGROUP_DESC			VARCHAR(255),
	IN	inDOMAIN_NAME			VARCHAR(255),
	IN	inENVIRONMENT_NAME		VARCHAR(255),
	IN	inACCESS_FLAG			VARCHAR(1),	-- null or X to indicate access.
	IN	inUNDO_LOCK				VARCHAR(1),	-- null or X to indicate access.
	IN	inREAD_ALL_CONFIG		VARCHAR(1),	-- null or X to indicate access.
	IN	inMODIFY_ALL_CONFIG		VARCHAR(1),	-- null or X to indicate access.
	IN	inREAD_ALL_RESOURCES	VARCHAR(1),	-- null or X to indicate access.
	IN	inMODIFY_ALL_RESOURCES	VARCHAR(1),	-- null or X to indicate access.
	IN	inREAD_ALL_STATUS		VARCHAR(1),	-- null or X to indicate access.
	IN	inMODIFY_ALL_STATUS		VARCHAR(1),	-- null or X to indicate access.
	IN	inREAD_ALL_USER			VARCHAR(1),	-- null or X to indicate access.
	IN	inMODIFY_ALL_USER		VARCHAR(1),	-- null or X to indicate access.
	OUT actionType				CHAR(1),	-- I=insert, U=update, D=delete, S=set inactive
	OUT rowsProcessed			INTEGER,	-- Number of rows process for the action type
	OUT duplicateRows			INTEGER,	-- Number of duplicate rows found
	OUT duplicateRowMsg			LONGVARCHAR,-- message for duplicate rows
	OUT	message					LONGVARCHAR	-- a general message
)
BEGIN
	DECLARE moduleName	VARCHAR DEFAULT &apos;modify_07_COMPOSITE_STUDIO_RIGHTS&apos;;
	DECLARE debug				CHAR(1) DEFAULT &apos;Y&apos;;
	DECLARE ex					EXCEPTION;
	DECLARE cnt					INTEGER;
	DECLARE duplicate			BOOLEAN;
	DECLARE i					INTEGER DEFAULT 0;
	DECLARE sqlStatement		LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE sqlStatement2		LONGVARCHAR;
	DECLARE sqlStatement3		LONGVARCHAR;
	DECLARE fromClause			LONGVARCHAR;
	DECLARE whereClause			LONGVARCHAR;
	DECLARE rowCount			INTEGER;
	DECLARE countCursor			CURSOR(rowCount INTEGER);
	DECLARE scriptPath			VARCHAR(4000);
	DECLARE msg					LONGVARCHAR;
	DECLARE duplicateCursor		CURSOR(cnt INTEGER, ORGANIZATION_NAME VARCHAR(255), PROJECT_NAME VARCHAR(255), SUBPROJECT_NAME VARCHAR(255), GROUP_NAME VARCHAR(255), DOMAIN_NAME VARCHAR(255), ENVIRONMENT_NAME VARCHAR(255));

	set rowsProcessed = 0;
	set duplicateRows = 0;
	set duplicateRowMsg = &apos;&apos;;

	IF (datasource IS NOT NULL AND datasource = &apos;EXCEL&apos;) THEN
		raise ex value &apos;The input variable datasource=&quot;EXCEL&quot; is not valid.&apos;;
	END IF;

	-- Verify the ORGANIZATION type
	if (inORGANIZATION_NAME is null or length(trim(inORGANIZATION_NAME)) = 0) then
		raise ex value &apos;inORGANIZATION_NAME cannot be null or empty.&apos;;
	end if;
	call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;OT&apos;, datasource, scriptPath);
	set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ORGANIZATION_NAME = &apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
	open countCursor for sqlStatement;
	fetch countCursor into cnt;
	close countCursor;
	if (cnt is null or cnt = 0) then
		raise ex value &apos;inORGANIZATION_NAME=&apos;||inORGANIZATION_NAME||&apos; is not valid.&apos;;
	end if;

	-- Determine the operation: insert/update/delete/inactivate
	if (performInsertUpdate is not null and upper(performInsertUpdate) = &apos;Y&apos;) then
		-- Verify the PROJECT type
		if (inPROJECT_NAME is null or length(trim(inPROJECT_NAME)) = 0) then
			raise ex value &apos;inPROJECT_NAME cannot be null or empty.&apos;;
		end if;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;PT&apos;, datasource, scriptPath);
		set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PROJECT_NAME = &apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos; and ORGANIZATION_NAME = &apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
		open countCursor for sqlStatement;
		fetch countCursor into cnt;
		close countCursor;
		if (cnt is null or cnt = 0) then
			raise ex value &apos;inPROJECT_NAME=&apos;||inPROJECT_NAME||&apos; and inORGANIZATION_NAME=&apos;||inORGANIZATION_NAME||&apos; is not valid.&apos;;
		end if;

		-- Verify the GROUP_NAME
		if (inGROUP_NAME is null or length(trim(inGROUP_NAME)) = 0) then
			raise ex value &apos;inGROUP_NAME cannot be null or empty.&apos;;
		end if;

		-- Verify the DOMAIN type
		if (inDOMAIN_NAME is null or length(trim(inDOMAIN_NAME)) = 0) then
			raise ex value &apos;inDOMAIN_NAME cannot be null or empty.&apos;;
		end if;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;DT&apos;, datasource, scriptPath);
		set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where DOMAIN_NAME = &apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
		open countCursor for sqlStatement;
		fetch countCursor into cnt;
		close countCursor;
		if (cnt is null or cnt = 0) then
			raise ex value &apos;inDOMAIN_NAME=&apos;||inDOMAIN_NAME||&apos; is not valid.&apos;;
		end if;

		-- Verify the ENVIRONMENT_NAME
		if (inENVIRONMENT_NAME is null or length(trim(inENVIRONMENT_NAME)) = 0) then
			raise ex value &apos;inENVIRONMENT_NAME cannot be null or empty.&apos;;
		end if;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ET&apos;, datasource, scriptPath);
		set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ENVIRONMENT_NAME = &apos;&apos;&apos;||inENVIRONMENT_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
		open countCursor for sqlStatement;
		fetch countCursor into cnt;
		close countCursor;
		if (cnt is null or cnt = 0) then
			raise ex value &apos;inENVIRONMENT_NAME=&apos;||inENVIRONMENT_NAME||&apos; is not valid.&apos;;
		end if;

		-- Verify the SUBPROJECT type
		if (inSUBPROJECT_NAME is not null) then
			if (length(trim(inSUBPROJECT_NAME)) = 0) then
				raise ex value &apos;inSUBPROJECT_NAME cannot be empty.&apos;;
			end if;
			call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ST&apos;, datasource, scriptPath);
			set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where SUBPROJECT_NAME = &apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos; and PROJECT_NAME = &apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos; and  ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
			open countCursor for sqlStatement;
			fetch countCursor into cnt;
			close countCursor;
			if (cnt is null or cnt = 0) then
				raise ex value &apos;inSUBPROJECT_NAME=&apos;||inSUBPROJECT_NAME||&apos; and inPROJECT_NAME=&apos;||inPROJECT_NAME||&apos; is not valid.&apos;;
			end if;
		end if;

		if (inACCESS_FLAG is not null and (length(trim(inACCESS_FLAG)) = 0 or upper(inACCESS_FLAG) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inACCESS_FLAG cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inUNDO_LOCK is not null and (length(trim(inUNDO_LOCK)) = 0 or upper(inUNDO_LOCK) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inUNDO_LOCK cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inREAD_ALL_CONFIG is not null and (length(trim(inREAD_ALL_CONFIG)) = 0 or upper(inREAD_ALL_CONFIG) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inREAD_ALL_CONFIG cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inMODIFY_ALL_CONFIG is not null and (length(trim(inMODIFY_ALL_CONFIG)) = 0 or upper(inMODIFY_ALL_CONFIG) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inMODIFY_ALL_CONFIG cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inREAD_ALL_RESOURCES is not null and (length(trim(inREAD_ALL_RESOURCES)) = 0 or upper(inREAD_ALL_RESOURCES) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inREAD_ALL_RESOURCES cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inMODIFY_ALL_RESOURCES is not null and (length(trim(inMODIFY_ALL_RESOURCES)) = 0 or upper(inMODIFY_ALL_RESOURCES) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inMODIFY_ALL_RESOURCES cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inREAD_ALL_STATUS is not null and (length(trim(inREAD_ALL_STATUS)) = 0 or upper(inREAD_ALL_STATUS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inREAD_ALL_STATUS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inMODIFY_ALL_STATUS is not null and (length(trim(inMODIFY_ALL_STATUS)) = 0 or upper(inMODIFY_ALL_STATUS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inMODIFY_ALL_STATUS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inREAD_ALL_USER is not null and (length(trim(inREAD_ALL_USER)) = 0 or upper(inREAD_ALL_USER) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inREAD_ALL_USER cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inMODIFY_ALL_USER is not null and (length(trim(inMODIFY_ALL_USER)) = 0 or upper(inMODIFY_ALL_USER) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inMODIFY_ALL_USER cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;

		SET duplicate = false;
		-- Check for existing records
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CG&apos;, datasource, scriptPath);
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLGroups(
				datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, inGROUP_NAME, inDOMAIN_NAME, 
				debug, sqlStatement, fromClause, whereClause);

		set sqlStatement = &apos;SELECT g.cnt, c.ORGANIZATION_NAME, c.PROJECT_NAME, c.SUBPROJECT_NAME, c.GROUP_NAME, c.DOMAIN_NAME, c.ENVIRONMENT_NAME
			FROM &apos;||scriptPath||&apos; c
			INNER JOIN
			(
				SELECT count(*) cnt, ORGANIZATION_NAME, PROJECT_NAME, SUBPROJECT_NAME, GROUP_NAME, DOMAIN_NAME, ENVIRONMENT_NAME
                FROM &apos;||scriptPath||&apos; 
                &apos;||TRIM(whereClause)||
                &apos;  AND ISACTIVE = &apos;&apos;Y&apos;&apos;
				GROUP BY ORGANIZATION_NAME, PROJECT_NAME, SUBPROJECT_NAME, GROUP_NAME, DOMAIN_NAME, ENVIRONMENT_NAME
			) g
			ON c.ORGANIZATION_NAME = g.ORGANIZATION_NAME
			AND c.PROJECT_NAME = g.PROJECT_NAME
            AND c.SUBPROJECT_NAME = g.SUBPROJECT_NAME
			AND c.GROUP_NAME = g.GROUP_NAME
			AND c.DOMAIN_NAME = g.DOMAIN_NAME
			AND c.ENVIRONMENT_NAME = g.ENVIRONMENT_NAME
			AND c.ISACTIVE = &apos;&apos;Y&apos;&apos;
			AND g.cnt &gt; 0
			ORDER BY c.ORGANIZATION_NAME, c.PROJECT_NAME, c.SUBPROJECT_NAME, c.GROUP_NAME, c.DOMAIN_NAME, c.ENVIRONMENT_NAME&apos;;

		if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
			call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
		end if;

		open duplicateCursor for sqlStatement;
		FOR dup AS duplicateCursor DO
			SET duplicate = true;
			-- Duplicate rows were found so log the message but do not update
			IF (dup.cnt &gt; 1) THEN
				SET duplicateRowMsg = duplicateRowMsg || &apos; COUNT=&apos;||dup.cnt ||&apos;|&apos;||
					dup.ORGANIZATION_NAME ||&apos;|&apos;|| dup.PROJECT_NAME||&apos;|&apos;|| dup.GROUP_NAME||&apos;|&apos;|| dup.DOMAIN_NAME||&apos;|&apos;|| dup.ENVIRONMENT_NAME || &apos;|&apos;||	CHR(10);
				SET duplicateRows = duplicateRows + dup.cnt - 1; -- subtract 1 for the original row so it is not counted.

			-- A single matching row was found so update it.
			ELSEIF (dup.cnt = 1) THEN 
				set actionType = &apos;U&apos;;
				IF (performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
					set sqlStatement = 
				&apos;UPDATE &apos;||scriptPath||&apos;
                        SET
                        ORGANIZATION_NAME       = &apos;||NVL2(inORGANIZATION_NAME,      &apos;&apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        PROJECT_NAME            = &apos;||NVL2(inPROJECT_NAME,           &apos;&apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        SUBPROJECT_NAME         = &apos;||NVL2(inSUBPROJECT_NAME,        &apos;&apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        GROUP_NAME              = &apos;||NVL2(inGROUP_NAME,             &apos;&apos;&apos;&apos;||inGROUP_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        GROUP_DESC              = &apos;||NVL2(inGROUP_DESC,             &apos;&apos;&apos;&apos;||inGROUP_DESC||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        DOMAIN_NAME             = &apos;||NVL2(inDOMAIN_NAME,            &apos;&apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        ENVIRONMENT_NAME        = &apos;||NVL2(inENVIRONMENT_NAME,       &apos;&apos;&apos;&apos;||UPPER(inENVIRONMENT_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        ACCESS_FLAG             = &apos;||NVL2(inACCESS_FLAG,            &apos;&apos;&apos;&apos;||UPPER(inACCESS_FLAG)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        UNDO_LOCK               = &apos;||NVL2(inUNDO_LOCK,              &apos;&apos;&apos;&apos;||UPPER(inUNDO_LOCK)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        READ_ALL_CONFIG         = &apos;||NVL2(inREAD_ALL_CONFIG,        &apos;&apos;&apos;&apos;||UPPER(inREAD_ALL_CONFIG)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        MODIFY_ALL_CONFIG       = &apos;||NVL2(inMODIFY_ALL_CONFIG,      &apos;&apos;&apos;&apos;||UPPER(inMODIFY_ALL_CONFIG)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        READ_ALL_RESOURCES      = &apos;||NVL2(inREAD_ALL_RESOURCES,     &apos;&apos;&apos;&apos;||UPPER(inREAD_ALL_RESOURCES)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        MODIFY_ALL_RESOURCES    = &apos;||NVL2(inMODIFY_ALL_RESOURCES,   &apos;&apos;&apos;&apos;||UPPER(inMODIFY_ALL_RESOURCES)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        READ_ALL_STATUS         = &apos;||NVL2(inREAD_ALL_STATUS,        &apos;&apos;&apos;&apos;||UPPER(inREAD_ALL_STATUS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        MODIFY_ALL_STATUS       = &apos;||NVL2(inMODIFY_ALL_STATUS,      &apos;&apos;&apos;&apos;||UPPER(inMODIFY_ALL_STATUS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        READ_ALL_USER           = &apos;||NVL2(inREAD_ALL_USER,          &apos;&apos;&apos;&apos;||UPPER(inREAD_ALL_USER)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        MODIFY_ALL_USER         = &apos;||NVL2(inMODIFY_ALL_USER,        &apos;&apos;&apos;&apos;||UPPER(inMODIFY_ALL_USER)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;
                    &apos;||TRIM(whereClause)||&apos;
                      AND ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;

					if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
						call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
					end if;

					execute immediate sqlStatement;
					set message = &apos;SUCCESS UPDATING &apos;||TRIM(whereClause); 
					SET rowsProcessed = rowsProcessed + 1;
				ELSE
					set message = &apos;SUCCESS TO BE UPDATED: &apos;||TRIM(whereClause); 
				END IF; 
			END IF;
		END FOR;

		-- No matching row was found so insert it.
		IF (NOT duplicate) THEN
			set actionType = &apos;I&apos;;
			IF(performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
				set sqlStatement = 
				&apos;insert into &apos;||scriptPath||&apos; (
                    ORGANIZATION_NAME,
                    PROJECT_NAME,
                    SUBPROJECT_NAME,
                    GROUP_NAME,
                    GROUP_DESC,
                    DOMAIN_NAME,
                    ENVIRONMENT_NAME,
                    ACCESS_FLAG,
                    UNDO_LOCK, 
                    READ_ALL_CONFIG, 
                    MODIFY_ALL_CONFIG, 
                    READ_ALL_RESOURCES, 
                    MODIFY_ALL_RESOURCES, 
                    READ_ALL_STATUS, 
                    MODIFY_ALL_STATUS,
                    READ_ALL_USER,
                    MODIFY_ALL_USER,
                    ISACTIVE)
                    values (&apos;||NVL2(inORGANIZATION_NAME,      &apos;&apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inPROJECT_NAME,           &apos;&apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inSUBPROJECT_NAME,        &apos;&apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inGROUP_NAME,             &apos;&apos;&apos;&apos;||inGROUP_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inGROUP_DESC,             &apos;&apos;&apos;&apos;||inGROUP_DESC||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inDOMAIN_NAME,            &apos;&apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inENVIRONMENT_NAME,       &apos;&apos;&apos;&apos;||UPPER(inENVIRONMENT_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inACCESS_FLAG,            &apos;&apos;&apos;&apos;||UPPER(inACCESS_FLAG)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inUNDO_LOCK,              &apos;&apos;&apos;&apos;||UPPER(inUNDO_LOCK)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inREAD_ALL_CONFIG,        &apos;&apos;&apos;&apos;||UPPER(inREAD_ALL_CONFIG)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inMODIFY_ALL_CONFIG,      &apos;&apos;&apos;&apos;||UPPER(inMODIFY_ALL_CONFIG)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inREAD_ALL_RESOURCES,     &apos;&apos;&apos;&apos;||UPPER(inREAD_ALL_RESOURCES)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inMODIFY_ALL_RESOURCES,   &apos;&apos;&apos;&apos;||UPPER(inMODIFY_ALL_RESOURCES)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inREAD_ALL_STATUS,        &apos;&apos;&apos;&apos;||UPPER(inREAD_ALL_STATUS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inMODIFY_ALL_STATUS,      &apos;&apos;&apos;&apos;||UPPER(inMODIFY_ALL_STATUS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inREAD_ALL_USER,          &apos;&apos;&apos;&apos;||UPPER(inREAD_ALL_USER)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inMODIFY_ALL_USER,        &apos;&apos;&apos;&apos;||UPPER(inMODIFY_ALL_USER)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;&apos;Y&apos;&apos;
                        )&apos;;

				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
				end if;
				-- Execute the SQL INSERT
				execute immediate sqlStatement;
				set message = &apos;SUCCESS INSERTING &apos;|| 
					inORGANIZATION_NAME ||&apos;|&apos;|| inPROJECT_NAME||&apos;|&apos;|| TRIM(NVL(inSUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| inGROUP_NAME||&apos;|&apos;|| inDOMAIN_NAME||&apos;|&apos;|| inENVIRONMENT_NAME || &apos;|&apos;;
				SET rowsProcessed = rowsProcessed + 1;
			ELSE
				set message = &apos;SUCCESS TO BE INSERTED: &apos;|| 
					inORGANIZATION_NAME ||&apos;|&apos;|| inPROJECT_NAME||&apos;|&apos;|| TRIM(NVL(inSUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| inGROUP_NAME||&apos;|&apos;|| inDOMAIN_NAME||&apos;|&apos;|| inENVIRONMENT_NAME || &apos;|&apos;;
			END IF;
		END IF;
	elseif (setInactive is not null and upper(setInactive) = &apos;Y&apos;) then
		set actionType = &apos;S&apos;;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CG&apos;, datasource, scriptPath);
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLGroups(
				datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, inGROUP_NAME, inDOMAIN_NAME, 
				debug, sqlStatement, fromClause, whereClause);

		-- Set row inactive from COMPOSITE_STUDIO_RIGHTS using the STUDIO_RIGHTS_ID
		if (inSTUDIO_RIGHTS_ID is not null) then
			set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where STUDIO_RIGHTS_ID = &apos;||inSTUDIO_RIGHTS_ID;
			open countCursor for sqlStatement;
			fetch countCursor into cnt;
			close countCursor;
			SET rowsProcessed = cnt;
			if (cnt &gt; 0) then
				-- Update ISACTIVE from COMPOSITE_STUDIO_RIGHTS table
				set sqlStatement = &apos;UPDATE &apos;||scriptPath||&apos;	SET ISACTIVE = &apos;&apos;N&apos;&apos; WHERE STUDIO_RIGHTS_ID = &apos;||inSTUDIO_RIGHTS_ID;
				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
				end if;
				execute immediate sqlStatement;
				set message = &apos;SUCCESS SETTING INACTIVE STUDIO_RIGHTS_ID=&apos;|| inSTUDIO_RIGHTS_ID;
			else
				set message = &apos;No rows exists.&apos;;
			end if;
		else
			-- Set rows inactive using adhoc where clause
			set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; &apos;||TRIM(whereClause);
			open countCursor for sqlStatement;
			fetch countCursor into cnt;
			close countCursor;

			SET rowsProcessed = cnt;
			if (cnt &gt; 0) then
				-- Update ISACTIVE from COMPOSITE_STUDIO_RIGHTS table
				set sqlStatement = 
				&apos;update &apos;||scriptPath||&apos;
                    set ISACTIVE = &apos;&apos;N&apos;&apos;
                &apos; ||TRIM(whereClause);

				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
				end if;

				execute immediate sqlStatement;
				set message = &apos;SUCCESS SETTING INACTIVE &apos;||TRIM(whereClause); 
			else
				set message = &apos;No rows exists.&apos;;
			end if;
		end if;
	elseif (performDelete is not null and upper(performDelete) = &apos;Y&apos;) then
		set actionType = &apos;D&apos;;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CG&apos;, datasource, scriptPath);
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLGroups(
				datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, inGROUP_NAME, inDOMAIN_NAME, 
				debug, sqlStatement, fromClause, whereClause);

		BEGIN INDEPENDENT TRANSACTION
			-- Delete a row from COMPOSITE_STUDIO_RIGHTS using the STUDIO_RIGHTS_ID
			if (inSTUDIO_RIGHTS_ID is not null) then
				set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where STUDIO_RIGHTS_ID = &apos;||inSTUDIO_RIGHTS_ID;
				open countCursor for sqlStatement;
				fetch countCursor into cnt;
				close countCursor;
				set rowsProcessed = cnt;
				if (cnt &gt; 0) then
					-- Delete row from COMPOSITE_STUDIO_RIGHTS table using STUDIO_RIGHTS_ID
					set sqlStatement = &apos;DELETE FROM &apos;||scriptPath||&apos; WHERE STUDIO_RIGHTS_ID = &apos;||inSTUDIO_RIGHTS_ID;
					if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
						call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
					end if;
					execute immediate sqlStatement;
					set message = &apos;SUCCESS DELETING STUDIO_RIGHTS_ID=&apos;|| inSTUDIO_RIGHTS_ID;
				else
					set message = &apos;No rows exists.&apos;;
				end if;
			else
				-- Delete rows from COMPOSITE_STUDIO_RIGHTS table using adhoc SQL
				-- Create the fromClause pointing to the correct /Formatting layer database table
				set fromClause = &apos;FROM &apos;||scriptPath;
				-- Create the SELCT COUNT(*) CNT statement
				set sqlStatement2 = &apos;SELECT COUNT(*) rowsDeleted &apos;||fromClause||CHR(10)||&apos;         &apos;||whereClause;				
				-- Create the DELETE statement
				set sqlStatement3 = &apos;DELETE &apos;||fromClause||CHR(10)||&apos;         &apos;||whereClause;
				-- Print out debug
				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(SUBSTRING(moduleName || &apos; : fromClause=&apos;||fromClause,1,63900));
					call print(SUBSTRING(moduleName || &apos; : whereClause=&apos;||whereClause,1,63900));
					call print(SUBSTRING(moduleName || &apos; : sqlStatement2=&apos;||sqlStatement2,1,63900));
					call print(SUBSTRING(moduleName || &apos; : sqlStatement3=&apos;||sqlStatement3,1,63900));
				end if;

				-- Execute the SELECT COUNT statement
				open countCursor for sqlStatement2;
				fetch countCursor into cnt;
				close countCursor;
				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(moduleName || &apos; : Number of privilege rows=&apos;||cnt);
				end if;

				-- Execute the DELETE statement
				set rowsProcessed = cnt;
				if (cnt &gt; 0 and performDelete is not null and UPPER(performDelete) = &apos;Y&apos;) then
					-- Execute the DELETE statement
					if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
						call print(moduleName || &apos; : Deleting &apos;||cnt||&apos; privileges rows.&apos;);
					end if;
					execute immediate sqlStatement3;
					set message = &apos;SUCCESS DELETING &apos;||TRIM(whereClause); 
				else
					set message = &apos;No rows exists.&apos;;
				end if;
			end if;
		EXCEPTION
			ELSE
				raise;
		END;

		-- Clean up supporting tables: Delete SUBPROJECT_TYPE and PROJECT_TYPE and ORGANIZATION_TYPE if available and valid to delete.
		if (inSUBPROJECT_NAME is not null) then
			call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE(datasource, null, performDelete, inSUBPROJECT_NAME, inPROJECT_NAME, inORGANIZATION_NAME, msg);
		elseif (inPROJECT_NAME is not null) then
			call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE(datasource, null, performDelete, inPROJECT_NAME, inORGANIZATION_NAME, msg);
		elseif (inORGANIZATION_NAME is not null) then
			call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE(datasource, null, performDelete, inORGANIZATION_NAME, msg);
		end if;
	else
		set message = &apos;Invalid command provided.&apos;;
	end if;
	call print(moduleName||&apos; : &apos;||message);
END</attribute>
  <attribute name="creationDate" type="LONG">1491944720784</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserId" type="INTEGER">4005</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564075714164</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4005</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/357</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/456</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/457</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/410</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/455</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/466</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/387</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/498</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/458</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/260</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/300</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/474</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/438</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1491944720784</attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="modify_06_COMPOSITE_PRIVILEGES" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_06_COMPOSITE_PRIVILEGES" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="performInsertUpdate" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="setInactive" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="performDelete" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inPRIVILEGE_ID" direction="IN" nullable="true">
      <datatype name="DECIMAL" type="DECIMAL" maxDigits="38" maxFractionalDigits="0"/>
    </parameter>
    <parameter name="inORGANIZATION_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inPROJECT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inSUBPROJECT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inRESOURCE_PATH" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="inRESOURCE_TYPE" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inRECURSE_DEPENDENCIES" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inRECURSE_DEPENDENTS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inRECURSE_CHILD" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="2"/>
    </parameter>
    <parameter name="inREVOKE_ALL" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inNAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="inNAME_TYPE" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inDOMAIN_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inENVIRONMENT_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inREAD_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inWRITE_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inEXECUTE_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inSELECT_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inUPDATE_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inINSERT_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inDELETE_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inGRANT_ACCESS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inINITIALIZE" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="inOWNER_NAME" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inOWNER_DOMAIN" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inCOMMENTS" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="actionType" direction="OUT" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="rowsProcessed" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="duplicateRows" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="duplicateRowMsg" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="message" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="scriptType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptMapping" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Environment_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Project" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SubProject" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Sheet_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Resource_Path" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Resource_Type" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Name_" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Name_Type" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Domain_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="sqlStatement" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fromClause" direction="OUT">
        <datatype type="STRING" maxLength="2048"/>
      </element>
      <element name="whereClause" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="setInactive" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="performDelete" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="inSUBPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inPROJECT_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inORGANIZATION_NAME" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="message" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
	This procedure is used to insert/update/delete/inactivate rows in the COMPOSITE_PRIVILEGES table.
	These are rows that come from the Privileges_shared, Privileges_databases, and Privileges_webservices 
	sheets in the Composite_Resource_Privileges_LOAD_DB.xlsx spreadsheet.

	For deleting records the following fields are used to create the where clause:
		PRIVIELGE_ID - if present then it only uses this to delete that 1 record.
		The following list of fields are used for constructing a dynamic where clause.  If a field contains a null then it
		is not used for the where clause.  Therefore it provides a lot of flexibility for deleting as much or little as you wish.
			inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, inRESOURCE_PATH, inNAME, inNAME_TYPE, inDOMAIN_NAME

	Example record for insert or update:
		PRIVILEGE_ID:		2
		ORGANIZATION_NAME:	ORG1
		PRIVILEGE_TYPE:		SHARED
		PROJECT_NAME:		Common
		SUBPROJECT_NAME:	[NULL]
		RESOURCE_PATH:		/shared/Common/generateViews
		RESOURCE_TYPE:		CONTAINER
		RECURSE_DEPENDENCIES:[NULL]
		RECURSE_DEPENDENTS:	[NULL]
		RECURSE_CHILD:		YM
		REVOKE_ALL:			N
		NAME:				group1
		NAME_TYPE:			GROUP
		DOMAIN_NAME:		composite
		ENVIRONMENT_NAME:	DEV
		READ_ACCESS:		X
		WRITE_ACCESS:		[NULL]
		EXECUTE_ACCESS:		X
		SELECT_ACCESS:		X
		UPDATE_ACCESS:		[NULL]
		INSERT_ACCESS:		[NULL]
		DELETE_ACCESS:		[NULL]
		GRANT_ACCESS:		[NULL]
		INITIALIZE:			X
		OWNER_NAME:			[NULL]
		OWNER_DOMAIN:		[NULL]
		COMMENTS:			initialize
		CREATEDBY:			CMPPRV
		CREATEDDATE:		2017-05-17 15:31:13
		UPDATEDBY:			CMPPRV
		UPDATEDDATE:		2017-05-17 15:31:13
		ISACTIVE:			Y

	Input:
		datasource				- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
		performInsertUpdate		- Y or N.  Y=yes perform insert or update.  
								- N=no do not perform insert or update but display the same messages to see what will be executed.		setInactive				- Set the ISACTIVE flag to N
									Y=if the record exists set it inactive.  Overrides performDelete
									N/null=do not perform this operation.
		setInactive				- Y=if the record exists set it inactive.  Overrides performDelete
								- N/null=do not perform this operation.
		performDelete			- Delete the row if it exists
									Y=perform a delete using filters supplied.
									N/null=do not perform delete but perform insert or update instead.
		various fields...
	Output:
		actionType				- I=insert, U=update, D=delete, S=set inactive
		rowsProcessed			- Number of rows process for the action type
		duplicateRows			- number of duplicate rows
		duplicateRowMsg			- a duplicate row message
		message					- a general message

	Modified Date:	Modified By:		CIS Version:	Reason:
	--------------	------------------	------------	-------
	05/16/2017		Mike Tinius			7.0.5			Adapted for Data Abstraction Best Practices.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE modify_06_COMPOSITE_PRIVILEGES(
	IN 	datasource				VARCHAR(255),-- REQUIRED FILTER: DB_[LLE,PROD], The source of the groups. Refer to getPrivilegeDatasourceToScriptMapping().
	IN 	performInsertUpdate		VARCHAR(1),	-- Y or N.  Y=yes perform insert or update.  
											-- N=no do not perform insert or update but display the same messages to see what will be executed.
	IN	setInactive				VARCHAR(1),	-- Y=if the record exists set it inactive.  Overrides performDelete
											-- N/null=do not perform this operation.
	IN	performDelete			VARCHAR(1),	-- Y=perform a delete using filters supplied.
											-- N/null=do not perform delete but perform insert or update instead.
	IN	inPRIVILEGE_ID			DECIMAL(38,0), -- This is used only when deleting a specific row by its generated PRIVILEGE_ID
	IN 	inORGANIZATION_NAME		VARCHAR(255),
	IN	inPROJECT_NAME			VARCHAR(255),
	IN	inSUBPROJECT_NAME		VARCHAR(255),
	IN	inRESOURCE_PATH			VARCHAR(4000),
	IN	inRESOURCE_TYPE			VARCHAR(255),
	IN	inRECURSE_DEPENDENCIES	VARCHAR(1),
	IN	inRECURSE_DEPENDENTS	VARCHAR(1),
	IN	inRECURSE_CHILD			VARCHAR(2),	-- not null: YM or YC
	IN	inREVOKE_ALL			VARCHAR(1),	-- not null: Y or N
	IN	inNAME					VARCHAR(1000),					
	IN	inNAME_TYPE				VARCHAR(255),
	IN	inDOMAIN_NAME			VARCHAR(255),
	IN	inENVIRONMENT_NAME		VARCHAR(255),
	IN	inREAD_ACCESS			VARCHAR(1),	-- null or X to indicate access.
	IN	inWRITE_ACCESS			VARCHAR(1),	-- null or X to indicate access.
	IN	inEXECUTE_ACCESS		VARCHAR(1),	-- null or X to indicate access.
	IN	inSELECT_ACCESS			VARCHAR(1),	-- null or X to indicate access.
	IN	inUPDATE_ACCESS			VARCHAR(1),	-- null or X to indicate access.
	IN	inINSERT_ACCESS			VARCHAR(1),	-- null or X to indicate access.
	IN	inDELETE_ACCESS			VARCHAR(1),	-- null or X to indicate access.
	IN	inGRANT_ACCESS			VARCHAR(1),	-- null or X to indicate access.
	IN	inINITIALIZE			VARCHAR(1), -- null or X to indicate access.
	IN	inOWNER_NAME			VARCHAR(255),
	IN	inOWNER_DOMAIN			VARCHAR(255),
	IN	inCOMMENTS				VARCHAR(4000),
	OUT actionType				CHAR(1),	-- I=insert, U=update, D=delete, S=set inactive
	OUT rowsProcessed			INTEGER,	-- Number of rows process for the action type
	OUT duplicateRows			INTEGER,	-- Number of duplicate rows found
	OUT duplicateRowMsg			LONGVARCHAR,-- message for duplicate rows
	OUT	message					LONGVARCHAR	-- a general message
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;modify_06_COMPOSITE_PRIVILEGES&apos;;
	DECLARE debug				CHAR(1) DEFAULT &apos;Y&apos;;
	DECLARE ex					EXCEPTION;
	DECLARE cnt					INTEGER;
	DECLARE privilegeType		VARCHAR;
	DECLARE duplicate			BOOLEAN;
	DECLARE Sheet_Name			VARCHAR DEFAULT null;
	DECLARE sqlStatement		LONGVARCHAR;
	DECLARE sqlStatement2		LONGVARCHAR;
	DECLARE sqlStatement3		LONGVARCHAR;
	DECLARE fromClause			LONGVARCHAR;
	DECLARE whereClause			LONGVARCHAR;
	DECLARE pos					INTEGER;
	DECLARE i					INTEGER;
	DECLARE rowCount			INTEGER;
	DECLARE subprojectCount		INTEGER DEFAULT 0;
	DECLARE countCursor			CURSOR(rowCount INTEGER);
	DECLARE EnvTypeCursor		CURSOR(EnvType VARCHAR(300));
	DECLARE EnvTypeList			LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE duplicateCursor		CURSOR(cnt INTEGER, ORGANIZATION_NAME VARCHAR(255), PROJECT_NAME VARCHAR(255), SUBPROJECT_NAME VARCHAR(255), RESOURCE_PATH VARCHAR(4000), RESOURCE_TYPE VARCHAR(255), DOMAIN_NAME VARCHAR(255), NAME_TYPE VARCHAR(255), NAME VARCHAR(255), ENVIRONMENT_NAME VARCHAR(255));
	DECLARE msg					LONGVARCHAR;
	DECLARE scriptPath			VARCHAR(4000);

	set rowsProcessed = 0;
	set duplicateRows = 0;
	set duplicateRowMsg = &apos;&apos;;

	IF (datasource IS NOT NULL AND datasource = &apos;EXCEL&apos;) THEN
		raise ex value &apos;The input variable datasource=&quot;EXCEL&quot; is not valid.&apos;;
	END IF;

	-- Verify the ORGANIZATION type
	if (inORGANIZATION_NAME is null or length(trim(inORGANIZATION_NAME)) = 0) then
		raise ex value &apos;inORGANIZATION_NAME cannot be null or empty.&apos;;
	end if;
	call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;OT&apos;, datasource, scriptPath);
	set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ORGANIZATION_NAME = &apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
	open countCursor for sqlStatement;
	fetch countCursor into cnt;
	close countCursor;
	if (cnt is null or cnt = 0) then
		raise ex value &apos;inORGANIZATION_NAME=&apos;||inORGANIZATION_NAME||&apos; is not valid.&apos;;
	end if;

	-- Determine the operation: insert/update/delete/inactivate
	if (performInsertUpdate is not null and upper(performInsertUpdate) = &apos;Y&apos;) then
		-- Verify the PROJECT type
		if (inPROJECT_NAME is null or length(trim(inPROJECT_NAME)) = 0) then
			raise ex value &apos;inPROJECT_NAME cannot be null or empty.&apos;;
		end if;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;PT&apos;, datasource, scriptPath);
		set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PROJECT_NAME = &apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos; and ORGANIZATION_NAME = &apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
		open countCursor for sqlStatement;
		fetch countCursor into cnt;
		close countCursor;
		if (cnt is null or cnt = 0) then
			raise ex value &apos;inPROJECT_NAME=&apos;||inPROJECT_NAME||&apos; and inORGANIZATION_NAME=&apos;||inORGANIZATION_NAME||&apos; is not valid.&apos;;
		end if;

		-- Verify the RESOURCE_PATH and RESOURCE_TYPE
		if (inRESOURCE_PATH is null or length(trim(inRESOURCE_PATH)) = 0) then
			raise ex value &apos;inRESOURCE_PATH cannot be null or empty.&apos;;
		end if;
		if (inRESOURCE_TYPE is null or length(trim(inRESOURCE_TYPE)) = 0) then
			raise ex value &apos;inRESOURCE_TYPE cannot be null or empty.&apos;;
		end if;
		-- Verify the NAME and NAME_TYPE
		if (inNAME is null or length(trim(inNAME)) = 0) then
			raise ex value &apos;inNAME cannot be null or empty.&apos;;
		end if;
		if (inNAME_TYPE is null or length(trim(inNAME_TYPE)) = 0) then
			raise ex value &apos;inNAME_TYPE cannot be null or empty.&apos;;
		end if;

		-- Verify the DOMAIN type
		if (inDOMAIN_NAME is null or length(trim(inDOMAIN_NAME)) = 0) then
			raise ex value &apos;inDOMAIN_NAME cannot be null or empty.&apos;;
		end if;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;DT&apos;, datasource, scriptPath);
		set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where DOMAIN_NAME = &apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
		open countCursor for sqlStatement;
		fetch countCursor into cnt;
		close countCursor;
		if (cnt is null or cnt = 0) then
			raise ex value &apos;inDOMAIN_NAME=&apos;||inDOMAIN_NAME||&apos; is not valid.&apos;;
		end if;

		-- Verify the ENVIRONMENT_NAME
		if (inENVIRONMENT_NAME is null or length(trim(inENVIRONMENT_NAME)) = 0) then
			raise ex value &apos;inENVIRONMENT_NAME cannot be null or empty.&apos;;
		end if;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ET&apos;, datasource, scriptPath);
		set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where ENVIRONMENT_NAME = &apos;&apos;&apos;||inENVIRONMENT_NAME||&apos;&apos;&apos; and ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
		open countCursor for sqlStatement;
		fetch countCursor into cnt;
		close countCursor;
		if (cnt is null or cnt = 0) then
			raise ex value &apos;inENVIRONMENT_NAME=&apos;||inENVIRONMENT_NAME||&apos; is not valid.&apos;;
		end if;

		-- Verify the SUBPROJECT type
		if (inSUBPROJECT_NAME is not null) then
			if (length(trim(inSUBPROJECT_NAME)) = 0) then
				raise ex value &apos;inSUBPROJECT_NAME cannot be empty.&apos;;
			end if;
			call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;ST&apos;, datasource, scriptPath);
			set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where SUBPROJECT_NAME = &apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos; and PROJECT_NAME = &apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos; and  ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;
			open countCursor for sqlStatement;
			fetch countCursor into cnt;
			close countCursor;
			if (cnt is null or cnt = 0) then
				raise ex value &apos;inSUBPROJECT_NAME=&apos;||inSUBPROJECT_NAME||&apos; and inPROJECT_NAME=&apos;||inPROJECT_NAME||&apos; is not valid.&apos;;
			end if;
		end if;

		if (inRECURSE_DEPENDENCIES is not null and upper(inRECURSE_DEPENDENCIES) &lt;&gt; &apos;N&apos; AND upper(inRECURSE_DEPENDENCIES) &lt;&gt; &apos;Y&apos;) then
			raise ex value &apos;inRECURSE_DEPENDENCIES cannot be any value other than &quot;N&quot; OR &quot;Y&quot;.&apos;;
		end if;
		if (inRECURSE_DEPENDENTS is not null and upper(inRECURSE_DEPENDENTS) &lt;&gt; &apos;N&apos; AND upper(inRECURSE_DEPENDENTS) &lt;&gt; &apos;Y&apos;) then
			raise ex value &apos;inRECURSE_DEPENDENTS cannot be any value other than &quot;N&quot; OR &quot;Y&quot;.&apos;;
		end if;
		if (inRECURSE_CHILD is null or (inRECURSE_CHILD is not null and upper(inRECURSE_CHILD) &lt;&gt; &apos;N&apos; AND upper(inRECURSE_CHILD) &lt;&gt; &apos;YC&apos; AND upper(inRECURSE_CHILD) &lt;&gt; &apos;YM&apos;)) then
			raise ex value &apos;inRECURSE_CHILD cannot be any value other than &quot;N&quot;, &quot;YC&quot; OR &quot;YM&quot;.&apos;;
		end if;
		if (inREVOKE_ALL is null or (inREVOKE_ALL is not null and upper(inREVOKE_ALL) &lt;&gt; &apos;N&apos; AND upper(inREVOKE_ALL) &lt;&gt; &apos;Y&apos;)) then
			raise ex value &apos;inREVOKE_ALL cannot be any value other than &quot;N&quot; OR &quot;Y&quot;.&apos;;
		end if;
		if (inNAME_TYPE is not null and (length(trim(inNAME_TYPE)) = 0) or (upper(inNAME_TYPE) &lt;&gt; &apos;USER&apos; AND upper(inNAME_TYPE) &lt;&gt; &apos;GROUP&apos;)) then
			raise ex value &apos;inNAME_TYPE cannot be empty or any value other than &quot;USER&quot; OR &quot;GROUP&quot;.&apos;;
		end if;
		if (inREAD_ACCESS is not null and (length(trim(inREAD_ACCESS)) = 0 or upper(inREAD_ACCESS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inREAD_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inWRITE_ACCESS is not null and (length(trim(inWRITE_ACCESS)) = 0 or upper(inWRITE_ACCESS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inWRITE_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inEXECUTE_ACCESS is not null and (length(trim(inEXECUTE_ACCESS)) = 0 or upper(inEXECUTE_ACCESS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inEXECUTE_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inSELECT_ACCESS is not null and (length(trim(inSELECT_ACCESS)) = 0 or upper(inSELECT_ACCESS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inSELECT_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inUPDATE_ACCESS is not null and (length(trim(inUPDATE_ACCESS)) = 0 or upper(inUPDATE_ACCESS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inUPDATE_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inINSERT_ACCESS is not null and (length(trim(inINSERT_ACCESS)) = 0 or upper(inINSERT_ACCESS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inINSERT_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inDELETE_ACCESS is not null and (length(trim(inDELETE_ACCESS)) = 0 or upper(inDELETE_ACCESS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inDELETE_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inGRANT_ACCESS is not null and (length(trim(inGRANT_ACCESS)) = 0 or upper(inGRANT_ACCESS) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inGRANT_ACCESS cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		if (inINITIALIZE is not null and (length(trim(inINITIALIZE)) = 0 or upper(inINITIALIZE) &lt;&gt; &apos;X&apos;)) then
			raise ex value &apos;inINITIALIZE cannot be empty or any value other than &quot;X&quot;.&apos;;
		end if;
		-- Determine the PRIVILEGE_TYPE [SHARED|DATABASES|WEBSERVICES]
		if (instr(lower(trim(inRESOURCE_PATH)), &apos;/shared&apos;) = 1) then
			set privilegeType = &apos;SHARED&apos;;
		end if;
		if (instr(lower(trim(inRESOURCE_PATH)), &apos;/services/databases&apos;) = 1) then
			set privilegeType = &apos;DATABASES&apos;;
		end if;
		if (instr(lower(trim(inRESOURCE_PATH)), &apos;/services/webservices&apos;) = 1) then
			set privilegeType = &apos;WEBSERVICES&apos;;
		end if;

		-- Determine if this combination of already exists.
		SET duplicate = false;

		-- Check for existing records
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
		CALL /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges(
				datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, Sheet_Name, inRESOURCE_PATH, inRESOURCE_TYPE,
				inNAME, inNAME_TYPE, inDOMAIN_NAME, debug, sqlStatement, fromClause, whereClause);

		set sqlStatement = &apos;SELECT g.cnt, c.ORGANIZATION_NAME, c.PROJECT_NAME, c.SUBPROJECT_NAME, c.RESOURCE_PATH, c.RESOURCE_TYPE, c.DOMAIN_NAME, c.NAME_TYPE, c.NAME, c.ENVIRONMENT_NAME
            FROM &apos;||scriptPath||&apos; c
            INNER JOIN
            (
                SELECT count(*) cnt, ORGANIZATION_NAME, PROJECT_NAME, SUBPROJECT_NAME, RESOURCE_PATH, RESOURCE_TYPE, DOMAIN_NAME, NAME_TYPE, NAME, ENVIRONMENT_NAME
                FROM &apos;||scriptPath||&apos; 
                &apos;||TRIM(whereClause)||
                &apos;  AND ISACTIVE = &apos;&apos;Y&apos;&apos;
                GROUP BY ORGANIZATION_NAME, PROJECT_NAME, SUBPROJECT_NAME, RESOURCE_PATH, RESOURCE_TYPE, DOMAIN_NAME, NAME_TYPE, NAME, ENVIRONMENT_NAME
            ) g
            ON c.ORGANIZATION_NAME = g.ORGANIZATION_NAME
            AND c.PROJECT_NAME = g.PROJECT_NAME
            AND c.SUBPROJECT_NAME = g.SUBPROJECT_NAME
            AND c.RESOURCE_PATH = g.RESOURCE_PATH
            AND c.RESOURCE_TYPE = g.RESOURCE_TYPE
            AND c.DOMAIN_NAME = g.DOMAIN_NAME
            AND c.NAME = g.NAME
            AND c.NAME_TYPE = g.NAME_TYPE
            AND c.ENVIRONMENT_NAME = g.ENVIRONMENT_NAME
            AND ISACTIVE = &apos;&apos;Y&apos;&apos;
            AND g.cnt &gt; 0
            ORDER BY c.ORGANIZATION_NAME, c.PROJECT_NAME, c.SUBPROJECT_NAME, c.RESOURCE_PATH, c.RESOURCE_TYPE, c.DOMAIN_NAME, c.NAME_TYPE, c.NAME, c.ENVIRONMENT_NAME&apos;;

		if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
			call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
		end if;

		open duplicateCursor for sqlStatement;
		FOR dup AS duplicateCursor DO
			SET duplicate = true;
			-- Duplicate rows were found so log the message but do not update
			IF (dup.cnt &gt; 1) THEN
				SET duplicateRowMsg = duplicateRowMsg || &apos; COUNT=&apos;||dup.cnt ||&apos;|&apos;||
					dup.ORGANIZATION_NAME ||&apos;|&apos;|| dup.PROJECT_NAME||&apos;|&apos;|| TRIM(NVL(dup.SUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| dup.RESOURCE_PATH||&apos;|&apos;|| 
					dup.RESOURCE_TYPE||&apos;|&apos;|| dup.DOMAIN_NAME||&apos;|&apos;|| dup.NAME_TYPE||&apos;|&apos;|| dup.NAME||&apos;|&apos;|| dup.ENVIRONMENT_NAME || &apos;|&apos;||	CHR(10);
				SET duplicateRows = duplicateRows + dup.cnt - 1; -- subtract 1 for the original row so it is not counted.

			-- A single matching row was found so update it.
			ELSEIF (dup.cnt = 1) THEN 
				set actionType = &apos;U&apos;;
				IF (performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
					set sqlStatement = 
                    &apos;UPDATE &apos;||scriptPath||&apos;
                        SET
                        ORGANIZATION_NAME       = &apos;||NVL2(inORGANIZATION_NAME,      &apos;&apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        PRIVILEGE_TYPE          = &apos;||NVL2(privilegeType,            &apos;&apos;&apos;&apos;||privilegeType||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        PROJECT_NAME            = &apos;||NVL2(inPROJECT_NAME,           &apos;&apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        SUBPROJECT_NAME         = &apos;||NVL2(inSUBPROJECT_NAME,        &apos;&apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RESOURCE_PATH           = &apos;||NVL2(inRESOURCE_PATH,          &apos;&apos;&apos;&apos;||inRESOURCE_PATH||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RESOURCE_TYPE           = &apos;||NVL2(inRESOURCE_TYPE,          &apos;&apos;&apos;&apos;||UPPER(inRESOURCE_TYPE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RECURSE_DEPENDENCIES    = &apos;||NVL2(inRECURSE_DEPENDENCIES,   &apos;&apos;&apos;&apos;||UPPER(inRECURSE_DEPENDENCIES)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RECURSE_DEPENDENTS      = &apos;||NVL2(inRECURSE_DEPENDENTS,     &apos;&apos;&apos;&apos;||UPPER(inRECURSE_DEPENDENTS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        RECURSE_CHILD           = &apos;||NVL2(inRECURSE_CHILD,          &apos;&apos;&apos;&apos;||UPPER(inRECURSE_CHILD)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        REVOKE_ALL              = &apos;||NVL2(inREVOKE_ALL,             &apos;&apos;&apos;&apos;||UPPER(inREVOKE_ALL)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        NAME                    = &apos;||NVL2(inNAME,                   &apos;&apos;&apos;&apos;||inNAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        NAME_TYPE               = &apos;||NVL2(inNAME_TYPE,              &apos;&apos;&apos;&apos;||UPPER(inNAME_TYPE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        DOMAIN_NAME             = &apos;||NVL2(inDOMAIN_NAME,            &apos;&apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        ENVIRONMENT_NAME        = &apos;||NVL2(inENVIRONMENT_NAME,       &apos;&apos;&apos;&apos;||UPPER(inENVIRONMENT_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        READ_ACCESS             = &apos;||NVL2(inREAD_ACCESS,            &apos;&apos;&apos;&apos;||UPPER(inREAD_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        WRITE_ACCESS            = &apos;||NVL2(inWRITE_ACCESS,           &apos;&apos;&apos;&apos;||UPPER(inWRITE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        EXECUTE_ACCESS          = &apos;||NVL2(inEXECUTE_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inEXECUTE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        SELECT_ACCESS           = &apos;||NVL2(inSELECT_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inSELECT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        UPDATE_ACCESS           = &apos;||NVL2(inUPDATE_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inUPDATE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        INSERT_ACCESS           = &apos;||NVL2(inINSERT_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inINSERT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        DELETE_ACCESS           = &apos;||NVL2(inDELETE_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inDELETE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        GRANT_ACCESS            = &apos;||NVL2(inGRANT_ACCESS,           &apos;&apos;&apos;&apos;||UPPER(inGRANT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        INITIALIZE              = &apos;||NVL2(inINITIALIZE,             &apos;&apos;&apos;&apos;||UPPER(inINITIALIZE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        OWNER_NAME              = &apos;||NVL2(inOWNER_NAME,             &apos;&apos;&apos;&apos;||inOWNER_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        OWNER_DOMAIN            = &apos;||NVL2(inOWNER_DOMAIN,           &apos;&apos;&apos;&apos;||inOWNER_DOMAIN||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                        COMMENTS                = &apos;||NVL2(inCOMMENTS,               &apos;&apos;&apos;&apos;||inCOMMENTS||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;
                    &apos;||TRIM(whereClause)||&apos;
                      AND ISACTIVE = &apos;&apos;Y&apos;&apos;&apos;;

					if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
						call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
					end if;

					execute immediate sqlStatement;
				END IF; 
				set message = &apos;SUCCESS UPDATING &apos;||TRIM(whereClause); 
				SET rowsProcessed = rowsProcessed + 1;
			ELSE
				set message = &apos;SUCCESS TO BE UPDATED: &apos;||TRIM(whereClause); 
			END IF;
		END FOR;

		-- No matching row was found so insert it.
		IF (NOT duplicate) THEN
			set actionType = &apos;I&apos;;
			IF(performInsertUpdate IS NOT NULL AND UPPER(performInsertUpdate) = &apos;Y&apos;) THEN
				set sqlStatement = 
				&apos;insert into &apos;||scriptPath||&apos;
                    (ORGANIZATION_NAME, PRIVILEGE_TYPE, PROJECT_NAME, SUBPROJECT_NAME, RESOURCE_PATH, RESOURCE_TYPE, 
                    RECURSE_DEPENDENCIES, RECURSE_DEPENDENTS, RECURSE_CHILD, REVOKE_ALL, 
                    NAME, NAME_TYPE, DOMAIN_NAME, ENVIRONMENT_NAME, 
                    READ_ACCESS, WRITE_ACCESS, EXECUTE_ACCESS, SELECT_ACCESS, UPDATE_ACCESS, INSERT_ACCESS, DELETE_ACCESS, GRANT_ACCESS, 
                    INITIALIZE, OWNER_NAME, OWNER_DOMAIN, COMMENTS, ISACTIVE)
                    values (&apos;||NVL2(inORGANIZATION_NAME,     &apos;&apos;&apos;&apos;||inORGANIZATION_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(privilegeType,           &apos;&apos;&apos;&apos;||privilegeType||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inPROJECT_NAME,          &apos;&apos;&apos;&apos;||inPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inSUBPROJECT_NAME,       &apos;&apos;&apos;&apos;||inSUBPROJECT_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRESOURCE_PATH,         &apos;&apos;&apos;&apos;||inRESOURCE_PATH||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRESOURCE_TYPE,         &apos;&apos;&apos;&apos;||UPPER(inRESOURCE_TYPE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRECURSE_DEPENDENCIES,  &apos;&apos;&apos;&apos;||UPPER(inRECURSE_DEPENDENCIES)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRECURSE_DEPENDENTS,    &apos;&apos;&apos;&apos;||UPPER(inRECURSE_DEPENDENTS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inRECURSE_CHILD,         &apos;&apos;&apos;&apos;||UPPER(inRECURSE_CHILD)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inREVOKE_ALL,            &apos;&apos;&apos;&apos;||UPPER(inREVOKE_ALL)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inNAME,                  &apos;&apos;&apos;&apos;||inNAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inNAME_TYPE,             &apos;&apos;&apos;&apos;||UPPER(inNAME_TYPE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inDOMAIN_NAME,           &apos;&apos;&apos;&apos;||inDOMAIN_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inENVIRONMENT_NAME,      &apos;&apos;&apos;&apos;||UPPER(inENVIRONMENT_NAME)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inREAD_ACCESS,           &apos;&apos;&apos;&apos;||UPPER(inREAD_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inWRITE_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inWRITE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inEXECUTE_ACCESS,        &apos;&apos;&apos;&apos;||UPPER(inEXECUTE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inSELECT_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inSELECT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inUPDATE_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inUPDATE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inINSERT_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inINSERT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inDELETE_ACCESS,         &apos;&apos;&apos;&apos;||UPPER(inDELETE_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inGRANT_ACCESS,          &apos;&apos;&apos;&apos;||UPPER(inGRANT_ACCESS)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inINITIALIZE,            &apos;&apos;&apos;&apos;||UPPER(inINITIALIZE)||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inOWNER_NAME,            &apos;&apos;&apos;&apos;||inOWNER_NAME||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inOWNER_DOMAIN,          &apos;&apos;&apos;&apos;||inOWNER_DOMAIN||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;||NVL2(inCOMMENTS,              &apos;&apos;&apos;&apos;||inCOMMENTS||&apos;&apos;&apos;&apos;, &apos;null&apos;)||&apos;,
                            &apos;&apos;Y&apos;&apos;
                        )&apos;;

				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
				end if;
				-- Execute the SQL INSERT
				execute immediate sqlStatement;
				set message = &apos;SUCCESS INSERTING &apos;|| 
					inORGANIZATION_NAME ||&apos;|&apos;|| inPROJECT_NAME||&apos;|&apos;|| TRIM(NVL(inSUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| inRESOURCE_PATH||&apos;|&apos;|| 
					inRESOURCE_TYPE||&apos;|&apos;|| inNAME||&apos;|&apos;|| inNAME_TYPE||&apos;|&apos;|| inDOMAIN_NAME||&apos;|&apos;|| inENVIRONMENT_NAME || &apos;|&apos;;
				SET rowsProcessed = rowsProcessed + 1;
			ELSE
				set message = &apos;SUCCESS TO BE INSERTED: &apos;|| 
					inORGANIZATION_NAME ||&apos;|&apos;|| inPROJECT_NAME||&apos;|&apos;|| TRIM(NVL(inSUBPROJECT_NAME,&apos;  &apos;))||&apos;|&apos;|| inRESOURCE_PATH||&apos;|&apos;|| 
					inRESOURCE_TYPE||&apos;|&apos;|| inNAME||&apos;|&apos;|| inNAME_TYPE||&apos;|&apos;|| inDOMAIN_NAME||&apos;|&apos;|| inENVIRONMENT_NAME || &apos;|&apos;;
			END IF;
		END IF;
	elseif (setInactive is not null and upper(setInactive) = &apos;Y&apos;) then
		set actionType = &apos;S&apos;;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges(
				datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, Sheet_Name, inRESOURCE_PATH, inRESOURCE_TYPE,
				inNAME, inNAME_TYPE, inDOMAIN_NAME, debug, sqlStatement, fromClause, whereClause);

		-- Set row inactive from COMPOSITE_PRIVILEGES using the PRIVILEGE_ID
		if (inPRIVILEGE_ID is not null) then
			set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PRIVILEGE_ID = &apos;||inPRIVILEGE_ID;
			open countCursor for sqlStatement;
			fetch countCursor into cnt;
			close countCursor;
			SET rowsProcessed = cnt;
			if (cnt &gt; 0) then
				-- Update ISACTIVE from COMPOSITE_PRIVILEGES table
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
				set sqlStatement = &apos;UPDATE &apos;||scriptPath||&apos;	SET ISACTIVE = &apos;&apos;N&apos;&apos; WHERE PRIVILEGE_ID = &apos;||inPRIVILEGE_ID;
				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
				end if;
				execute immediate sqlStatement;
				set message = &apos;SUCCESS SETTING INACTIVE PRIVILEGE_ID=&apos;|| inPRIVILEGE_ID;
			else
				set message = &apos;No rows exists.&apos;;
			end if;
		else
			-- Set rows inactive using adhoc where clause
			set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; &apos;||TRIM(whereClause);
			open countCursor for sqlStatement;
			fetch countCursor into cnt;
			close countCursor;

			SET rowsProcessed = cnt;
			if (cnt &gt; 0) then
				-- Update ISACTIVE from COMPOSITE_PRIVILEGES table
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
				set sqlStatement = 
				&apos;update &apos;||scriptPath||&apos;
                    set ISACTIVE = &apos;&apos;N&apos;&apos;
                &apos; ||TRIM(whereClause);

				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
				end if;

				execute immediate sqlStatement;
				set message = &apos;SUCCESS SETTING INACTIVE &apos;||TRIM(whereClause); 
			else
				set message = &apos;No rows exists.&apos;;
			end if;
		end if;
	elseif (performDelete is not null and upper(performDelete) = &apos;Y&apos;) then
		set actionType = &apos;D&apos;;
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getSQLPrivileges(
				datasource, inENVIRONMENT_NAME, inORGANIZATION_NAME, inPROJECT_NAME, inSUBPROJECT_NAME, Sheet_Name, inRESOURCE_PATH, inRESOURCE_TYPE,
				inNAME, inNAME_TYPE, inDOMAIN_NAME, debug, sqlStatement, fromClause, whereClause);

		BEGIN INDEPENDENT TRANSACTION
			-- Delete a row from COMPOSITE_PRIVILEGES using the PRIVILEGE_ID
			if (inPRIVILEGE_ID is not null) then
				set sqlStatement = &apos;select count(*) cnt from &apos;||scriptPath||&apos; where PRIVILEGE_ID = &apos;||inPRIVILEGE_ID;
				open countCursor for sqlStatement;
				fetch countCursor into cnt;
				close countCursor;
				set rowsProcessed = cnt;
				if (cnt &gt; 0) then
					-- Delete row from COMPOSITE_PRIVILEGES table using PRIVILEGE_ID
					call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/getPrivilegeDatasourceToScriptMapping(&apos;CP&apos;, datasource, scriptPath);
					set sqlStatement = &apos;DELETE FROM &apos;||scriptPath||&apos; WHERE PRIVILEGE_ID = &apos;||inPRIVILEGE_ID;
					if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
						call print(moduleName || &apos; : sqlStatement=&apos;||SUBSTRING(moduleName || &apos; : sqlStatement=&apos;||sqlStatement,1,63900));
					end if;
					execute immediate sqlStatement;
					set message = &apos;SUCCESS DELETING PRIVILEGE_ID=&apos;|| inPRIVILEGE_ID;
				else
					set message = &apos;No rows exists.&apos;;
				end if;
			else
				-- Delete rows from COMPOSITE_PRIVILEGES table using adhoc SQL
				-- Create the fromClause pointing to the correct /Formatting layer database table
				set fromClause = &apos;FROM &apos;||scriptPath;
				-- Create the SELCT COUNT(*) CNT statement
				set sqlStatement2 = &apos;SELECT COUNT(*) rowsDeleted &apos;||fromClause||CHR(10)||&apos;         &apos;||whereClause;
				-- Create the DELETE statement
				set sqlStatement3 = &apos;DELETE &apos;||fromClause||CHR(10)||&apos;         &apos;||whereClause;
				-- Print out debug
				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(SUBSTRING(moduleName || &apos; : fromClause=&apos;||fromClause,1,63900));
					call print(SUBSTRING(moduleName || &apos; : whereClause=&apos;||whereClause,1,63900));
					call print(SUBSTRING(moduleName || &apos; : sqlStatement2=&apos;||sqlStatement2,1,63900));
					call print(SUBSTRING(moduleName || &apos; : sqlStatement3=&apos;||sqlStatement3,1,63900));
				end if;

				-- Execute the SELECT COUNT statement
				open countCursor for sqlStatement2;
				fetch countCursor into cnt;
				close countCursor;
				if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
					call print(moduleName || &apos; : Number of privilege rows=&apos;||cnt);
				end if;

				-- Execute the DELETE statement
				set rowsProcessed = cnt;
				if (cnt &gt; 0 and performDelete is not null and UPPER(performDelete) = &apos;Y&apos;) then
					-- Execute the DELETE statement
					if (debug is not null and UPPER(debug) = &apos;Y&apos;) then
						call print(moduleName || &apos; : Deleting &apos;||cnt||&apos; privileges rows.&apos;);
					end if;
					execute immediate sqlStatement3;
					set message = &apos;SUCCESS DELETING &apos;||TRIM(whereClause); 
				else
					set message = &apos;No rows exists.&apos;;
				end if;
			end if;
		EXCEPTION
			ELSE
				raise;
		END;

		-- Clean up supporting tables: Delete SUBPROJECT_TYPE and PROJECT_TYPE and ORGANIZATION_TYPE if available and valid to delete.
		if (inSUBPROJECT_NAME is not null) then
			call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_05_SUBPROJECT_TYPE(datasource, null, performDelete, inSUBPROJECT_NAME, inPROJECT_NAME, inORGANIZATION_NAME, msg);
		elseif (inPROJECT_NAME is not null) then
			call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_04_PROJECT_TYPE(datasource, null, performDelete, inPROJECT_NAME, inORGANIZATION_NAME, msg);
		elseif (inORGANIZATION_NAME is not null) then
			call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/ModifyDBPrivileges/TableMaintenance/modify_01_ORGANIZATION_TYPE(datasource, null, performDelete, inORGANIZATION_NAME, msg);
		end if;
	else
		set message = &apos;Invalid command provided.&apos;;
	end if;
	call print(moduleName||&apos; : &apos;||message);
END</attribute>
  <attribute name="creationDate" type="LONG">1491944720784</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserId" type="INTEGER">4005</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564075714164</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4005</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">7/577</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/534</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/545</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/488</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/431</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/464</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/537</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/535</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/536</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/553</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/378</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/517</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/328</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1491944720784</attribute>
</metadata>
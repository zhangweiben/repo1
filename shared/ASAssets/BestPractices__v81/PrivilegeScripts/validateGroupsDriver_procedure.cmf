<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="validateGroupsDriver" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/validateGroupsDriver" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters>
    <parameter name="Datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Environment_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Organization" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Project" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="SubProject" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Group_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Domain_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inDebug1" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1Console" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1CISLog" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug2" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="validGroups" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="rowsProcessed" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="logOutput" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="groupResult" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="printConsole" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="printLog" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inLogOutput" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="addLogOutput" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outLogOutput" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/getGroups" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="datasource" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Environment_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Organization" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Project" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="SubProject" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Group_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="Domain_Name" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="rownum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="sheetRownum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="datasource">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sheetName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Organization">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Project">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="SubProject">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="GroupName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Description">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="Domain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Env Type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="Access">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Unlock">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Config_R">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Config_M">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Resources_R">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Resources_M">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Status_R">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Status_M">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Users_R">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="Users_M">
            <datatype type="STRING" maxLength="1"/>
          </element>
          <element name="IsActive">
            <datatype type="STRING" maxLength="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/user/getGroup" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="groupName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="groupDomain" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="groupExists" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="groupExplicitRights" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="groupEffectiveRights" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="groupInheritedRights" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* validateGroupsDriver:

	Reads the Composite_Resource_Privileges.xlsx spreadsheet and validates whether the group exists or not.

	Input:
		Datasource		VARCHAR(255),	-- RECOMMENDED FILTER: the datasource where the groups are stored.
											If not parameter is provided the default value is used from defaultValues.datasource.  Possible values include:
												EXCEL - Excel spreadsheet which gets uploaded to each CIS server.
												DB_LLE - SQL Server database for lower level environments.  Basically it is used for testing purposes and developing new functionality.
												DB_PROD - SQL Server production database.  This connection should always be used unless developing new functionality.
		Environment_Name VARCHAR(255), 	-- REQUIRED FILTER: The Composite server environment in which to get/update studio rights for: [DEV, TEST, UAT, PROD]
		Organization	VARCHAR(255),	-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
		Project			VARCHAR(255),	-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
		SubProject		VARCHAR(255),	-- RECOMMENDED FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  
											This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the project will be updated.
		Group_Name 		VARCHAR(255), 	-- OPTIONAL FILTER: The group name for which to get/update studio rights.
		Domain_Name 	VARCHAR(255), 	-- OPTIONAL FILTER: The domain name in which to get/update studio rights.
		inDebug1		CHAR(1),		-- N/Null=No debug, Y (default)=Debug for this procedure - basic messages
		inDebug1Console	CHAR(1), 		-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
		inDebug1CISLog	CHAR(1), 		-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
	Output:
		validGroups		VARCHAR,		-- true=if all groups are present (valid).  false=if one or more groups are not present (invalid).
		rowsProcessed	INTEGER			-- The number of rows processed from the spreadsheet.
		logOutput		LONGVARCHAR		-- The output log that gets printed to the command line console is also output
		groupResult		LONGVARCHAR		-- Result with pipe dlimited rows

	Exceptions:  Exception may be thrown.

	Modified Date:	Modified By:		CSW Version:	Reason:
	05/16/2017		Mike Tinius			7.0.5			Adapted for Data Abstraction Best Practices.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE validateGroupsDriver(
	IN Datasource		VARCHAR(255),	-- RECOMMENDED FILTER: the datasource where the groups are stored.
    IN Environment_Name VARCHAR(255), 	-- REQUIRED FILTER: The Composite server environment in which to get/update studio rights for: [DEV, TEST, UAT, PROD]
	IN Organization		VARCHAR(255),	-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
	IN Project			VARCHAR(255),	-- OPTIONAL FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given project.
	IN SubProject		VARCHAR(255),	-- RECOMMENDED FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the sub-projects will be updated.
    IN Group_Name 		VARCHAR(255), 	-- OPTIONAL FILTER: The group name for which to get/update studio rights.
    IN Domain_Name 		VARCHAR(255), 	-- OPTIONAL FILTER: The domain name in which to get/update studio rights.
	IN inDebug1			CHAR(1),		-- N/Null=No debug, Y (default)=Debug for this procedure - basic messages
	IN inDebug1Console	CHAR(1), 		-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
	IN inDebug1CISLog	CHAR(1), 		-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
	IN inDebug2			CHAR(1),		-- N/Null (default)=No debug, Y=Debug for 2nd and 3rd tier procedures (deep debug)
	OUT validGroups		VARCHAR,		-- true=if all groups are present (valid).  false=if one or more groups are not present (invalid).
	OUT rowsProcessed	INTEGER,		-- The number of rows processed from the spreadsheet
	OUT logOutput		LONGVARCHAR,	-- The output log that gets printed to the command line console is also output
	OUT groupResult		LONGVARCHAR		-- Result with pipe dlimited rows
)
BEGIN
	DECLARE moduleName 				VARCHAR DEFAULT &apos;validateGroupsDriver&apos;;
	DECLARE debug1					CHAR(1) DEFAULT UPPER(NVL(inDebug1,&apos;Y&apos;));			-- Debug for this procedure - basic messages
	DECLARE debug1Console			CHAR(1) DEFAULT NVL(UPPER(inDebug1Console),&apos;N&apos;);
	DECLARE debug1CISLog			CHAR(1) DEFAULT NVL(UPPER(inDebug1CISLog),&apos;N&apos;);
	DECLARE debug2					CHAR(1) DEFAULT NVL(UPPER(inDebug2),&apos;N&apos;);
	DECLARE i						INTEGER;
	DECLARE rowString				LONGVARCHAR;
	DECLARE message					VARCHAR(4000);
	DECLARE ex						EXCEPTION;
	DECLARE groupName				VARCHAR;
	DECLARE domainName				VARCHAR;
	DECLARE srcRights				VARCHAR(4000);
	DECLARE actualRights			VARCHAR(4000);
	DECLARE diffRights				VARCHAR(4000);
	DECLARE groupExists				BIT;
	DECLARE groupExplicitRights		VARCHAR(255);
	DECLARE groupEffectiveRights	VARCHAR(255);
	DECLARE groupInheritedRights	VARCHAR(255);
	DECLARE newline					VARCHAR DEFAULT CHR(10);
	DECLARE groupsRec				/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/TypeDefinitions.groupsRowType;
	DECLARE datasource_				VARCHAR DEFAULT /shared/ASAssets/BestPractices_v81/&quot;_ProjectMaintenance&quot;/defaultValues.datasource;

	IF (Datasource IS NOT NULL AND LENGTH(Datasource) &gt; 0) THEN
		set datasource_ = Datasource;
	END IF;

	set logOutput = &apos;&apos;;
	-- Print out the input filters
	set message = &apos;INPUT FILTERS:&apos;||newline;
    if (Environment_Name is not null and LENGTH(TRIM(Environment_Name)) &gt; 0) then
		set message = message || &apos; Environment_Name=&apos;||Environment_Name||newline;
	end if;
    if (Organization is not null and LENGTH(TRIM(Organization)) &gt; 0) then
		set message = message || &apos; Organization=&apos;||Organization||newline;
	end if;
    if (Project is not null and LENGTH(TRIM(Project)) &gt; 0) then
		set message = message || &apos; Project=&apos;||Project||newline;
	end if;
    if (Group_Name is not null and LENGTH(TRIM(Group_Name)) &gt; 0) then
		set message = message || &apos; Group_Name=&apos;||Group_Name||newline;
	end if;
    if (Domain_Name is not null and LENGTH(TRIM(Domain_Name)) &gt; 0) then
		set message = message || &apos; Domain_Name=&apos;||Domain_Name||newline;
	end if;
	IF (debug1 IS NOT NULL AND UPPER(debug1) = &apos;Y&apos;) THEN
		call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||message, logOutput); 
	END IF;

	set validGroups = &apos;true&apos;;
	set rowsProcessed = 0;
	FOR r AS 
		SELECT * FROM /shared/ASAssets/BestPractices_v81/PrivilegeScripts/getGroups(datasource_, Environment_Name, Organization, Project, SubProject, Group_Name, Domain_Name, debug1)
	DO
		set groupsRec = r;
		-- Get the user or group
		set groupName = null;
		if (r.GroupName is not null or LENGTH(TRIM(r.GroupName)) &gt; 0) then
			set groupName = TRIM(r.GroupName);
		end if;
		-- Set the privilege list:   Access	Unlock	Config_R	Config_M	Resources_R	  Resources_M	Status_R	Status_M	Users_R	Users_M
		set srcRights = &apos;&apos;;
		if ((r.Access is null or LENGTH(TRIM(r.Access))=0) and 
			(r.Unlock is null or LENGTH(TRIM(r.Unlock))=0) and
			(r.Config_R is null or LENGTH(TRIM(r.Config_R))=0) and
			(r.Config_M is null or LENGTH(TRIM(r.Config_M))=0) and
			(r.Resources_R is null or LENGTH(TRIM(r.Resources_R))=0) and
			(r.Resources_M is null or LENGTH(TRIM(r.Resources_M))=0) and
			(r.Status_R is null or LENGTH(TRIM(r.Status_R))=0) and
			(r.Status_M is null or LENGTH(TRIM(r.Status_M))=0) and
			(r.Users_R is null or LENGTH(TRIM(r.Users_R))=0) and
			(r.Users_M is null or LENGTH(TRIM(r.Users_M))=0)) then
				set srcRights = &apos;NONE&apos;;
		end if;
		if (r.Access is not null      and LENGTH(TRIM(r.Access))&gt;0) then set srcRights = srcRights || &apos;ACCESS_TOOLS &apos;;    end if;			
		if (r.Unlock is not null      and LENGTH(TRIM(r.Unlock))&gt;0) then set srcRights = srcRights || &apos;UNLOCK_RESOURCE &apos;;   end if;			
		if (r.Config_R is not null    and LENGTH(TRIM(r.Config_R))&gt;0) then set srcRights = srcRights || &apos;READ_ALL_CONFIG &apos;; end if;			
		if (r.Config_M is not null 	  and LENGTH(TRIM(r.Config_M))&gt;0) then set srcRights = srcRights || &apos;MODIFY_ALL_CONFIG &apos;;  end if;		
		if (r.Resources_R is not null and LENGTH(TRIM(r.Resources_R))&gt;0) then set srcRights = srcRights || &apos;READ_ALL_RESOURCES &apos;;  end if;	
		if (r.Resources_M is not null and LENGTH(TRIM(r.Resources_M))&gt;0) then set srcRights = srcRights || &apos;MODIFY_ALL_RESOURCES &apos;;  end if;
		if (r.Status_R is not null    and LENGTH(TRIM(r.Status_R))&gt;0) then set srcRights = srcRights || &apos;READ_ALL_STATUS &apos;;  end if;		
		if (r.Status_M is not null    and LENGTH(TRIM(r.Status_M))&gt;0) then set srcRights = srcRights || &apos;MODIFY_ALL_STATUS &apos;;   end if;		
		if (r.Users_R is not null     and LENGTH(TRIM(r.Users_R))&gt;0) then set srcRights = srcRights || &apos;READ_ALL_USERS &apos;;   end if;			
		if (r.Users_M is not null     and LENGTH(TRIM(r.Users_M))&gt;0) then set srcRights = srcRights || &apos;MODIFY_ALL_USERS &apos;;   end if;		
		set srcRights = TRIM(srcRights);

		-- Process the row as long their is a resourcePath and the environment type passed in matches the non-null environment type in the spreadsheet.
		if (groupName is not null) then
			set rowsProcessed = rowsProcessed + 1;

			-- Get the domain
			set domainName = null;
			if (r.&quot;Domain&quot; is not null or LENGTH(TRIM(r.&quot;Domain&quot;)) &gt; 0) then
				set domainName = TRIM(r.&quot;Domain&quot;);
			end if;

			set rowString = &apos;Row=&apos;||r.rownum||&apos; SheetRow=&apos;||r.sheetRownum||&apos; Sheet=&apos;||r.sheetName||&apos; groupName=&apos;||groupName || &apos; domainName=&apos;||domainName;

			call /shared/ASAssets/Utilities/repository/&quot;user&quot;/getGroup(debug2, groupName, domainName, groupExists, groupExplicitRights, groupEffectiveRights, groupInheritedRights);
			-- The group does not exists
			if (groupExists = 0) then
				set validGroups = &apos;false&apos;;
				set rowString = rowString || &apos;  exists=NO&apos;;
				if (groupResult is null) then
					set groupResult = rowString;
				else
					set groupResult = groupResult || &apos;|&apos;||newline || rowString;
				end if;
			else

				-- Set the privilege list:   Access	Unlock	Config_R	Config_M	Resources_R	  Resources_M	Status_R	Status_M	Users_R	Users_M
				set actualRights = &apos;&apos;;
				if (INSTR(groupExplicitRights,&apos;NONE&apos;) &gt; 0) then 				set actualRights = actualRights || &apos;NONE&apos;; end if;
				if (INSTR(groupExplicitRights,&apos;ACCESS_TOOLS&apos;) &gt; 0) then 		set actualRights = actualRights || &apos;ACCESS_TOOLS &apos;;    end if;				-- AT
				if (INSTR(groupExplicitRights,&apos;UNLOCK_RESOURCE&apos;) &gt; 0) then 		set actualRights = actualRights || &apos;UNLOCK_RESOURCE &apos;;   end if;			-- UR
				if (INSTR(groupExplicitRights,&apos;READ_ALL_CONFIG&apos;) &gt; 0) then 		set actualRights = actualRights || &apos;READ_ALL_CONFIG &apos;; end if;			-- RAC
				if (INSTR(groupExplicitRights,&apos;MODIFY_ALL_CONFIG&apos;) &gt; 0) then 	set actualRights = actualRights || &apos;MODIFY_ALL_CONFIG &apos;;  end if;		-- MAC
				if (INSTR(groupExplicitRights,&apos;READ_ALL_RESOURCES&apos;) &gt; 0) then 	set actualRights = actualRights || &apos;READ_ALL_RESOURCES &apos;;  end if;	-- RAR
				if (INSTR(groupExplicitRights,&apos;MODIFY_ALL_RESOURCES&apos;) &gt; 0) then set actualRights = actualRights || &apos;MODIFY_ALL_RESOURCES &apos;;  end if;	-- MAR
				if (INSTR(groupExplicitRights,&apos;READ_ALL_STATUS&apos;) &gt; 0) then 		set actualRights = actualRights || &apos;READ_ALL_STATUS &apos;;  end if;			-- RAS
				if (INSTR(groupExplicitRights,&apos;MODIFY_ALL_STATUS&apos;) &gt; 0) then 	set actualRights = actualRights || &apos;MODIFY_ALL_STATUS &apos;;   end if;		-- MAS
				if (INSTR(groupExplicitRights,&apos;READ_ALL_USERS&apos;) &gt; 0) then 		set actualRights = actualRights || &apos;READ_ALL_USERS &apos;;   end if;			-- RAU
				if (INSTR(groupExplicitRights,&apos;MODIFY_ALL_USERS&apos;) &gt; 0) then 	set actualRights = actualRights || &apos;MODIFY_ALL_USERS &apos;;   end if;			-- MAU
				set actualRights = TRIM(actualRights);

				set diffRights = &apos;&apos;;
				if (INSTR(srcRights,&apos;NONE&apos;) &gt; 0 and INSTR(actualRights,&apos;NONE&apos;) &gt; 0) then 								 set diffRights = diffRights || &apos;=NONE&apos;; end if;
				if (INSTR(srcRights,&apos;NONE&apos;) = 0 and INSTR(actualRights,&apos;NONE&apos;) &gt; 0) then 								 set diffRights = diffRights || &apos;+NONE&apos;; end if;
				if (INSTR(srcRights,&apos;NONE&apos;) &gt; 0 and INSTR(actualRights,&apos;NONE&apos;) = 0) then 								 set diffRights = diffRights || &apos;-NONE&apos;; end if;

				if (INSTR(srcRights,&apos;ACCESS_TOOLS&apos;) &gt; 0 and INSTR(actualRights,&apos;ACCESS_TOOLS&apos;) &gt; 0) then 				 set diffRights = diffRights || &apos;=ACCESS_TOOLS &apos;;    end if;				-- AT
				if (INSTR(srcRights,&apos;ACCESS_TOOLS&apos;) = 0 and INSTR(actualRights,&apos;ACCESS_TOOLS&apos;) &gt; 0) then 				 set diffRights = diffRights || &apos;+ACCESS_TOOLS &apos;;    end if;				-- AT
				if (INSTR(srcRights,&apos;ACCESS_TOOLS&apos;) &gt; 0 and INSTR(actualRights,&apos;ACCESS_TOOLS&apos;) = 0) then 				 set diffRights = diffRights || &apos;-ACCESS_TOOLS &apos;;    end if;				-- AT

				if (INSTR(srcRights,&apos;UNLOCK_RESOURCE&apos;) &gt; 0 and INSTR(actualRights,&apos;UNLOCK_RESOURCE&apos;) &gt; 0) then 			 set diffRights = diffRights || &apos;=UNLOCK_RESOURCE &apos;;   end if;			-- UR
				if (INSTR(srcRights,&apos;UNLOCK_RESOURCE&apos;) = 0 and INSTR(actualRights,&apos;UNLOCK_RESOURCE&apos;) &gt; 0) then 			 set diffRights = diffRights || &apos;+UNLOCK_RESOURCE &apos;;   end if;			-- UR
				if (INSTR(srcRights,&apos;UNLOCK_RESOURCE&apos;) &gt; 0 and INSTR(actualRights,&apos;UNLOCK_RESOURCE&apos;) = 0) then 			 set diffRights = diffRights || &apos;-UNLOCK_RESOURCE &apos;;   end if;			-- UR

				if (INSTR(srcRights,&apos;READ_ALL_CONFIG&apos;) &gt; 0 and INSTR(actualRights,&apos;READ_ALL_CONFIG&apos;) &gt; 0) then 			 set diffRights = diffRights || &apos;=READ_ALL_CONFIG &apos;; end if;			-- RAC
				if (INSTR(srcRights,&apos;READ_ALL_CONFIG&apos;) = 0 and INSTR(actualRights,&apos;READ_ALL_CONFIG&apos;) &gt; 0) then 			 set diffRights = diffRights || &apos;+READ_ALL_CONFIG &apos;; end if;			-- RAC
				if (INSTR(srcRights,&apos;READ_ALL_CONFIG&apos;) &gt; 0 and INSTR(actualRights,&apos;READ_ALL_CONFIG&apos;) = 0) then 			 set diffRights = diffRights || &apos;-READ_ALL_CONFIG &apos;; end if;			-- RAC

				if (INSTR(srcRights,&apos;MODIFY_ALL_CONFIG&apos;) &gt; 0 and INSTR(actualRights,&apos;MODIFY_ALL_CONFIG&apos;) &gt; 0) then 		 set diffRights = diffRights || &apos;=MODIFY_ALL_CONFIG &apos;;  end if;		-- MAC
				if (INSTR(srcRights,&apos;MODIFY_ALL_CONFIG&apos;) = 0 and INSTR(actualRights,&apos;MODIFY_ALL_CONFIG&apos;) &gt; 0) then 		 set diffRights = diffRights || &apos;+MODIFY_ALL_CONFIG &apos;;  end if;		-- MAC
				if (INSTR(srcRights,&apos;MODIFY_ALL_CONFIG&apos;) &gt; 0 and INSTR(actualRights,&apos;MODIFY_ALL_CONFIG&apos;) = 0) then 		 set diffRights = diffRights || &apos;-MODIFY_ALL_CONFIG &apos;;  end if;		-- MAC

				if (INSTR(srcRights,&apos;READ_ALL_RESOURCES&apos;) &gt; 0 and INSTR(actualRights,&apos;READ_ALL_RESOURCES&apos;) &gt; 0) then 	 set diffRights = diffRights || &apos;=READ_ALL_RESOURCES &apos;;  end if;	-- RAR
				if (INSTR(srcRights,&apos;READ_ALL_RESOURCES&apos;) = 0 and INSTR(actualRights,&apos;READ_ALL_RESOURCES&apos;) &gt; 0) then 	 set diffRights = diffRights || &apos;+READ_ALL_RESOURCES &apos;;  end if;	-- RAR
				if (INSTR(srcRights,&apos;READ_ALL_RESOURCES&apos;) &gt; 0 and INSTR(actualRights,&apos;READ_ALL_RESOURCES&apos;) = 0) then 	 set diffRights = diffRights || &apos;-READ_ALL_RESOURCES &apos;;  end if;	-- RAR

				if (INSTR(srcRights,&apos;MODIFY_ALL_RESOURCES&apos;) &gt; 0 and INSTR(actualRights,&apos;MODIFY_ALL_RESOURCES&apos;) &gt; 0) then set diffRights = diffRights || &apos;=MODIFY_ALL_RESOURCES &apos;;  end if;	-- MAR
				if (INSTR(srcRights,&apos;MODIFY_ALL_RESOURCES&apos;) = 0 and INSTR(actualRights,&apos;MODIFY_ALL_RESOURCES&apos;) &gt; 0) then set diffRights = diffRights || &apos;+MODIFY_ALL_RESOURCES &apos;;  end if;	-- MAR
				if (INSTR(srcRights,&apos;MODIFY_ALL_RESOURCES&apos;) &gt; 0 and INSTR(actualRights,&apos;MODIFY_ALL_RESOURCES&apos;) = 0) then set diffRights = diffRights || &apos;-MODIFY_ALL_RESOURCES &apos;;  end if;	-- MAR

				if (INSTR(srcRights,&apos;READ_ALL_STATUS&apos;) &gt; 0 and INSTR(actualRights,&apos;READ_ALL_STATUS&apos;) &gt; 0) then 			 set diffRights = diffRights || &apos;=READ_ALL_STATUS &apos;;  end if;			-- RAS
				if (INSTR(srcRights,&apos;READ_ALL_STATUS&apos;) = 0 and INSTR(actualRights,&apos;READ_ALL_STATUS&apos;) &gt; 0) then 			 set diffRights = diffRights || &apos;+READ_ALL_STATUS &apos;;  end if;			-- RAS
				if (INSTR(srcRights,&apos;READ_ALL_STATUS&apos;) &gt; 0 and INSTR(actualRights,&apos;READ_ALL_STATUS&apos;) = 0) then 			 set diffRights = diffRights || &apos;-READ_ALL_STATUS &apos;;  end if;			-- RAS

				if (INSTR(srcRights,&apos;MODIFY_ALL_STATUS&apos;) &gt; 0 and INSTR(actualRights,&apos;MODIFY_ALL_STATUS&apos;) &gt; 0) then 		 set diffRights = diffRights || &apos;=MODIFY_ALL_STATUS &apos;;   end if;		-- MAS
				if (INSTR(srcRights,&apos;MODIFY_ALL_STATUS&apos;) = 0 and INSTR(actualRights,&apos;MODIFY_ALL_STATUS&apos;) &gt; 0) then 		 set diffRights = diffRights || &apos;+MODIFY_ALL_STATUS &apos;;   end if;		-- MAS
				if (INSTR(srcRights,&apos;MODIFY_ALL_STATUS&apos;) &gt; 0 and INSTR(actualRights,&apos;MODIFY_ALL_STATUS&apos;) = 0) then 		 set diffRights = diffRights || &apos;-MODIFY_ALL_STATUS &apos;;   end if;		-- MAS

				if (INSTR(srcRights,&apos;READ_ALL_USERS&apos;) &gt; 0 and INSTR(actualRights,&apos;READ_ALL_USERS&apos;) &gt; 0) then 			 set diffRights = diffRights || &apos;=READ_ALL_USERS &apos;;   end if;			-- RAU
				if (INSTR(srcRights,&apos;READ_ALL_USERS&apos;) = 0 and INSTR(actualRights,&apos;READ_ALL_USERS&apos;) &gt; 0) then 			 set diffRights = diffRights || &apos;+READ_ALL_USERS &apos;;   end if;			-- RAU
				if (INSTR(srcRights,&apos;READ_ALL_USERS&apos;) &gt; 0 and INSTR(actualRights,&apos;READ_ALL_USERS&apos;) = 0) then 			 set diffRights = diffRights || &apos;-READ_ALL_USERS &apos;;   end if;			-- RAU

				if (INSTR(srcRights,&apos;MODIFY_ALL_USERS&apos;) &gt; 0 and INSTR(actualRights,&apos;MODIFY_ALL_USERS&apos;) &gt; 0) then 		 set diffRights = diffRights || &apos;=MODIFY_ALL_USERS &apos;;   end if;			-- MAU
				if (INSTR(srcRights,&apos;MODIFY_ALL_USERS&apos;) = 0 and INSTR(actualRights,&apos;MODIFY_ALL_USERS&apos;) &gt; 0) then 		 set diffRights = diffRights || &apos;+MODIFY_ALL_USERS &apos;;   end if;			-- MAU
				if (INSTR(srcRights,&apos;MODIFY_ALL_USERS&apos;) &gt; 0 and INSTR(actualRights,&apos;MODIFY_ALL_USERS&apos;) = 0) then 		 set diffRights = diffRights || &apos;-MODIFY_ALL_USERS &apos;;   end if;			-- MAU
				set diffRights = TRIM(diffRights);

				if (srcRights = actualRights) then
					set validGroups = &apos;true&apos;;
					set rowString = rowString || &apos;  exists=YES  studio_rights=YES  diff_rights=&apos;||diffRights  ;
				else
					set validGroups = &apos;false&apos;;
					set rowString = rowString || &apos;  exists=YES  studio_rights=NO  diff_rights=&apos;||diffRights;
				end if;
				if (groupResult is null) then
					set groupResult = rowString;
				else
					set groupResult = groupResult || &apos;|&apos;||newline || rowString;
				end if;
				IF (debug2 IS NOT NULL AND UPPER(debug2) = &apos;Y&apos;) THEN
					call print(&apos;___srcRights=&apos;||srcRights);
					call print(&apos;actualRights=&apos;||actualRights);
					call print(&apos;__diffRights=&apos;||diffRights);
				END IF;
			end if;
			IF (debug1 IS NOT NULL AND UPPER(debug1) = &apos;Y&apos;) THEN
				call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Helpers/addLogOutput(debug1Console, debug1CISLog, logOutput, moduleName||&apos; : &apos;||rowString||&apos;|&apos;||newline, logOutput);
			END IF;
		END IF;
	END FOR;
END</attribute>
  <attribute name="creationDate" type="LONG">1386352480098</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564075714164</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/252</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/250</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/251</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="_README" path="/shared/ASAssets/BestPractices_v81/PrivilegeScripts/_README" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.
</annotation>
  <parameters></parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/*
	Installation:
		1. Modify the default settings:
			Location: /shared/ASAssets/BestPractices_v81/_ProjectMaintenance/defaultValues

			a. datasource: determine whether to use EXCEL or DB_[LLE,PROD] (database) as the default source for the privilege rows.
				Value: EXCEL
			b. defaultDatabaseLLEMapping: provides a way to choose Oracle or SQL Server as the default LLE when using &quot;DB_LLE&quot; datasource.
				Value: DB_LLE_ORA or DB_LLE_SS
			c. defaultDatabasePRODMapping: provides a way to choose Oracle or SQL Server as the default LLE when using &quot;DB_PROD&quot; datasource.
				Value: DB_PROD_ORA or DB_PROD_SS

		2. Modify the data source path or connection information:
			a. EXCEL: modify the root path if needed.
				Location:    [EXCEL] /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/Privileges_DS_EXCEL
			b. DATABASE: modify connection information for the datasource to be used
				Oracle database locations:
					/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/Privileges_DB_PROD_ORA
					/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/Privileges_DB_LLE_ORA
				SQL Server database locations:
					/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/Privileges_DB_PROD_SS
					/shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/Privileges_DB_LLE_SS

		3. Create the tables
				Oracle [LLE]: /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/DDL/Oracle_LLE/
					1_pqCreate_DABP_privilege_tables
					2_pqCreate_DABP_privilege_triggers
					3_pqCreate_DABP_privilege_sequences
				Oracle [PROD]: /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/DDL/Oracle_PROD/
					1_pqCreate_DABP_privilege_tables
					2_pqCreate_DABP_privilege_triggers
					3_pqCreate_DABP_privilege_sequences

				SQL Server [LLE]: /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/DDL/SQLServer_LLE/
					1_pqCreate_DABP_privilege_tables
					2_pqCreate_DABP_privilege_triggers
				SQL Server [PROD]: /shared/ASAssets/BestPractices_v81/PrivilegeScripts/Metadata/DDL/SQLServer_PROD/
					1_pqCreate_DABP_privilege_tables
					2_pqCreate_DABP_privilege_triggers

		4. Reintrospect the data sources

		5. Test the data sources
			a. Show Contents for one of the worksheets to insure that data is being retrieved.

		6. Construct the Privilege Spreadsheet to be loaded into the database

		7. Load the database from the spreadsheet
			a. loadNewPrivileges_EXCEL - the first time, it will notify you of the missing support table values.  
				This will load the privileges from the 3 privilege tabs in the spreadsheet.
			b. performSupportingTableMaintenance - run this to load the supporting tables.
			c. loadNewGroups_EXCEL - optional unless you want to set the Studio Rights for the CIS groups in the Group_List tab of the spreadsheet.
			d. loadNewUsers_EXCEL - optional unless you want to load users from the Users_List sheet.

	Usage:
		1. Composite Groups
			Note: Groups must be created before users
			a. Determine if you have any composite groups to create using the spreadsheet: Privileges_LOAD_DB.xlsx
					sheet: Group_List
			b. Execute: updateGroupsDriver - create/update groups from the Excel spreadsheet for the given filter.

				Input:
					Datasource		VARCHAR(255),	-- RECOMMENDED FILTER: the datasource where the groups are stored.
														If not parameter is provided the default value is used from defaultValues.datasource.  Possible values include:
															EXCEL - Excel spreadsheet which gets uploaded to each CIS server.
															DB_LLE - SQL Server database for lower level environments.  Basically it is used for testing purposes and developing new functionality.
															DB_PROD - SQL Server production database.  This connection should always be used unless developing new functionality.
					Environment_Name VARCHAR(255), 	-- REQUIRED FILTER: The Composite server environment in which to get/update studio rights for: [DEV, TEST, UAT, PROD]
					Organization	VARCHAR(255),	-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
					Project			VARCHAR(255),	-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
					Group_Name 		VARCHAR(255), 	-- OPTIONAL FILTER: The group name for which to get/update studio rights.
					Template		VARCHAR(255), 	-- OPTIONAL FILTER: The studio template for which to get/update studio rights.
					Domain_Name 	VARCHAR(255), 	-- OPTIONAL FILTER: The domain name in which to get/update studio rights.
					preview			CHAR(1),		-- N or null(default)=Do not preview.  Execute the update groups.  Y=preview what will get set but don&apos;t actually execute the update groups.
					forceDomainAsComposite 	BIT,	-- OPTIONAL PARAM: 1=true, 0=false.  
													--    Provides a way to force a conversion of the group from an LDAP domain name like &quot;ldap&quot; to a the &quot;composite&quot; domain.  
													--    This is useful when setting up the privileges for testing with composite groups that mirror the LDAP groups.  This way the spreadsheet does not have to be modified.
													--    For example, the LDAP group Composite_Servicing_Dev is automatically converted to the composite domain group composite_servicing_dev.
					inDebug1			CHAR(1),	-- N/Null=No debug, Y(default)=Debug.  Determines whether to capture any debug output and return it in logOutput.
					inDebug1Console		CHAR(1), 	-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
					inDebug1CISLog		CHAR(1), 	-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
					inDebug1ReadOnly	CHAR(1), 	-- N/Null (default)=No debug, Y=Debug for READ only messages
				Output:
					rowsProcessed	INTEGER			-- number of rows processed from the spreadsheet
					logOutput		LONGVARCHAR		-- The output log that gets printed to the command line console is also output

			c. Execute: validateGroupsDriver - validate that the groups exist for the filter provided.
				Input:  Provide the same parameters of input as you did for updateGroupsDriver.

		2. Composite Users
			Note: Users must be created before privileges
			a. Determine if you have any composite groups to create using the spreadsheet: Privileges_LOAD_DB.xlsx
					sheet: User_List
			b. Execute: updateUsersDriver - create/update users from the Excel spreadsheet for the given filter.

				Input:
					Datasource		VARCHAR(255),	-- RECOMMENDED FILTER: the datasource where the users are stored.
														If not parameter is provided the default value is used from defaultValues.datasource.  Possible values include:
															EXCEL - Excel spreadsheet which gets uploaded to each CIS server.
															DB_LLE - SQL Server database for lower level environments.  Basically it is used for testing purposes and developing new functionality.
															DB_PROD - SQL Server production database.  This connection should always be used unless developing new functionality.
					Environment_Name VARCHAR(255), 	-- REQUIRED FILTER: The Composite server environment in which to get/update users for: [DEV, TEST, UAT, PROD]
					Organization	VARCHAR(255),	-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
					Project			VARCHAR(255),	-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
					User_Name 		VARCHAR(255), 	-- OPTIONAL FILTER: The user name for which to get/update users.
					Domain_Name 	VARCHAR(255), 	-- OPTIONAL FILTER: The domain name in which to get/update users.
					preview			CHAR(1),		-- N or null(default)=Do not preview.  Execute update users.  Y=preview what will get set but don&apos;t actually execute the update users.
					inDebug1		CHAR(1),		-- N/Null=No debug, Y (default)=Debug for this procedure - basic messages
					inDebug1Console	CHAR(1), 		-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
					inDebug1CISLog	CHAR(1), 		-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
				Output:
					rowsProcessed	INTEGER			-- number of rows processed from the spreadsheet
					logOutput		LONGVARCHAR		-- The output log that gets printed to the command line console is also output

			c. Execute: validateUsersDriver - validate that the users exist for the filter provided.
				Input:  Provide the same parameters of input as you did for UpdateUsersDriver.

		3. Composite Privileges
			Note: Groups/Users must be created before privileges
			a. Determine if you have any composite groups to create using the spreadsheet: Privileges_LOAD_DB.xlsx
					For EXCEL datasource, sheets: Privileges_shared, Privileges_databases, Privileges_webservices
			b. Execute: updateResourcePrivilegesDriver - update privileges from a specified datasource for the given filter.

				Input:
					Datasource		VARCHAR(255),	-- RECOMMENDED FILTER: the datasource where the privileges are stored.
														If not parameter is provided the default value is used from defaultValues.datasource.  Possible values include:
															EXCEL - Excel spreadsheet which gets uploaded to each CIS server.
															DB_LLE - SQL Server database for lower level environments.  Basically it is used for testing purposes and developing new functionality.
															DB_PROD - SQL Server production database.  This connection should always be used unless developing new functionality.
					Batch_Privileges INTEGER,		-- REQUIRED_FILTER: 1=Batch all privileges for the same path, type and recursion setting. 0=Process each spreadsheet line separately (no batching).
														When the resource path in the spreadsheet changes, a batch is executed.
														When the resource type in the spreadsheet changes, a batch is executed.
														When the recursion identifier in the spreadsheet changes, a batch is executed.  
															A group of rows with like recursion may only be batched together otherwise the meaning of the privilege setting is not the same.
					Environment_Name VARCHAR(255), 	-- REQUIRED FILTER: The Composite server environment in which to get/update privileges for: [DEV, TEST, UAT, PROD]
					Organization	VARCHAR(255),	-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
					Project			VARCHAR(255),	-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  
														This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
					SubProject		VARCHAR(255),	-- RECOMMENDED FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  
														This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the project will be updated.
					Sheet_Name 		VARCHAR(255), 	-- OPTIONAL FILTER: The name of the Excel spreadsheet in which to get/update privileges from: [shared, databases, webservices]
					Resource_Path 	LONGVARCHAR,	-- OPTIONAL FILTER: The resource path in which to get/update privileges.  It may contain a wildcard &quot;%&quot;.
					Name_ 			VARCHAR(255), 	-- OPTIONAL FILTER: The user/group name in which to get/update privileges.
					Name_Type		VARCHAR(255), 	-- OPTIONAL FILTER: Valid values are USER or GROUP
					Domain_Name 	VARCHAR(255), 	-- OPTIONAL FILTER: The domain name in which to get/update privileges.
					preview			CHAR(1),		-- N or null(default)=Do not preview.  Execute the privileges.  Y=preview what will get set but don&apos;t actually execute the privileges.
					forceDomainAsComposite 	BIT,	-- OPTIONAL PARAM: 1=true, 0=false.  
													--    Provides a way to force a conversion of the group from an LDAP domain name like &quot;ldap&quot; to a the &quot;composite&quot; domain.  
													--    This is useful when setting up the privileges for testing with composite groups that mirror the LDAP groups.  This way the spreadsheet does not have to be modified.
													--    For example, the LDAP group Composite_Servicing_Dev is automatically converted to the composite domain group composite_servicing_dev.
					inDebug1			CHAR(1),	-- N/Null=No debug, Y (default)=Debug for this procedure - basic messages
					inDebug1Console		CHAR(1), 	-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
					inDebug1CISLog		CHAR(1), 	-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
					inDebug1ReadOnly	CHAR(1),	-- N/Null (default)=No debug, Y=Debug for READ only messages
					inDebug1RevokeAll	CHAR(1),	-- N/Null (default)=No debug, Y=Debug for Revoke All messages.
					inDebug2			CHAR(1),	-- N/Null (default)=No debug, Y=Debug for 2nd and 3rd tier procedures (deep debug)
					inBypassErrors		BIT			-- Bypass errors.  Throw exception when paths not found.
													--   0/Null (default) Do not bypass errors.
													--   1=bypass resource not found errors but report them.
				Output:
					rowsProcessed	INTEGER			-- number of rows processed from the spreadsheet
					logOutput		LONGVARCHAR		-- The output log that gets printed to the command line console is also output
*/
PROCEDURE &quot;_README&quot;()
BEGIN
END
</attribute>
  <attribute name="creationDate" type="LONG">1387471023045</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1513891747563</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
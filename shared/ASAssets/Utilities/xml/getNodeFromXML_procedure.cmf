<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getNodeFromXML" path="/shared/ASAssets/Utilities/xml/getNodeFromXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>getNodeFromXML:
	Given a qualified XPath, extract the node tree from the incoming XML.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		inXpath - xpath statement used to extract the value at that location in the XML 
			Values: e.g. /Book/Chapter
		iteration		0=get all iterations, 1=get 1st occurrence only
		inXml - any XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
							&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
							&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     	&lt;/Book&gt;
	Output:
		outValue - text value from the XML document as directed by the XPath.  Empty String returned if node not found.
			Values: &lt;Chapter&gt;Test Data&lt;/Chapter&gt;
	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2010.3		09/01/2010		Mike Tinius			5.1.0			Created new.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="namespaces" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXpath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="iteration" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inXml" direction="IN" nullable="true">
      <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="outValue" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/findString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="stringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="pos" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getNodeFromXML:
	Given a qualified XPath, extract the node tree from the incoming XML.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off
		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
		inXpath - xpath statement used to extract the value at that location in the XML 
			Values: e.g. /Book/Chapter
		iteration		0=get all iterations, 1=get 1st occurrence only
		inXml - any valid XML document
			Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
							&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
							&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
				     	&lt;/Book&gt;
	Output:
		outValue - text value from the XML document as directed by the XPath.  Empty String returned if node not found.
			Values: &lt;Chapter&gt;Test Data&lt;/Chapter&gt;
	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2010.3		09/01/2010		Mike Tinius			5.1.0			Created new.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc. All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getNodeFromXML(
	IN debug			CHAR(1),
	IN namespaces		LONGVARCHAR,
	IN inXpath			LONGVARCHAR,
	IN iteration		INTEGER, -- 0=get all iterations, 1=get 1st occurrence only
	IN inXml			XML,
	OUT outValue		LONGVARCHAR
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;getNodeFromXML()&apos;;
	DECLARE	xsltExpr 		VARCHAR(2048);
	DECLARE outXML			XML;
	DECLARE enclosingNode	VARCHAR(255);
	DECLARE enclosingNodeLen INTEGER;
	DECLARE beginPos		INTEGER;
	DECLARE endPos			INTEGER;
	DECLARE emptyNodePos	INTEGER;
	DECLARE tempPath		/shared/ASAssets/Utilities/TypeDefinitions.pathType;
	DECLARE copy_options	VARCHAR DEFAULT &apos;@*|node()&apos;; -- get all attributes and nodes and return empty ones also
	DECLARE direction		CHAR(1);

	-- extract the enclosing node for the XML being retrieved.
	call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(inXpath, &apos;E&apos;, enclosingNode, tempPath);
	set enclosingNode = REPLACE(enclosingNode, &apos;@&apos;, &apos;&apos;); -- remove any attribute designations

	set xsltExpr = 
&apos;&lt;xsl:stylesheet version=&quot;1.0&quot;
	xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
	&apos;|| namespaces || &apos;&gt;
 &lt;xsl:template match=&quot;&apos; || inXpath ||&apos;&quot;&gt;
    &lt;xsl:copy copy-namespaces=&quot;yes&quot;&gt;
      &lt;xsl:copy-of select=&quot;&apos;||copy_options||&apos;&quot;/&gt;
    &lt;/xsl:copy&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
&apos;;
	if (upper(debug) = &apos;Y&apos; or upper(debug) = &apos;T&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;XSLT=&apos;||xsltExpr);
	end if;	
	set outXML = XSLT( inXml, xsltExpr );
	set outValue = cast(outXML as longvarchar);
	if (upper(debug) = &apos;Y&apos; or upper(debug) = &apos;T&apos;) then
--		call /shared/Utilities/log/logDebugMessage(moduleName,debug,&apos;outValue after XSLT=&apos;||outValue);
	end if;
	if (outValue IS NOT NULL AND LENGTH(&apos;|&apos;||outValue||&apos;|&apos;) &gt; 2) then
		-- set the direction to search for the enclosing node
		if (iteration = 0) then
			set direction = &apos;R&apos;; -- get all of the interations
		else
			set direction = &apos;F&apos;; -- get the first iteration only
		end if;
		set beginPos = POSITION(&apos;&lt;&apos;||enclosingNode in outValue);
		call /shared/ASAssets/Utilities/string/findString(&apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos;, outValue, direction, endPos);
		call /shared/ASAssets/Utilities/string/findString(&apos;/&gt;&apos;, outValue, direction, emptyNodePos);
	if (upper(debug) = &apos;Y&apos; or upper(debug) = &apos;T&apos;) then
--			call /shared/Utilities/log/logDebugMessage(moduleName,debug,&apos;beginPos=&apos;||beginPos||&apos;  endPos=&apos;||endPos||&apos;  emptyNodePos=&apos;||emptyNodePos);	
		end if;
		if (beginPos = 0) then
			set outValue = &apos;&apos;; -- return empty if begin enclosing node not found
		else
			if (endPos &gt; emptyNodePos) then
				set enclosingNodeLen = LENGTH(&apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos;);
			else
				if (direction = &apos;F&apos;) then
					if (endPos &lt; emptyNodePos and endPos &lt;&gt; 0) then
						set enclosingNodeLen = LENGTH(&apos;&lt;/&apos;||enclosingNode||&apos;&gt;&apos;);
					else
						set endPos = emptyNodePos;
						set enclosingNodeLen = LENGTH(&apos;/&gt;&apos;);
					end if;
				else
					set endPos = emptyNodePos;
					set enclosingNodeLen = LENGTH(&apos;/&gt;&apos;);
				end if;
			end if;
			set outValue = substring(outValue, beginPos, endPos-beginPos + enclosingNodeLen);
		end if;
	end if;
	if (upper(debug) = &apos;Y&apos; or upper(debug) = &apos;T&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;XPath=&apos;||inXpath || &apos;    NODE VALUE: [&apos;||NVL(outValue,&apos;null&apos;)||&apos;]&apos;);	
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564694615807</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
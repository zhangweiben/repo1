<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="extractXMLOccurrence" path="/shared/ASAssets/Utilities/xml/extractXMLOccurrence" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>extractXMLOccurrence:

	Extract XML occurrence refers to the ability to locate XML text based on an opening and closing XML tag.
	This is useful when needing to extract a particular occurrence of a repeating XML string without having 
	to use expensive XML parsing utilities.
 
	Input:
		inXML			 		LONGVARCHAR, 	-- XML to parse
			examples:  	&lt;xmlRow&gt; 			&lt;-- opening delimiter -- begin and end delimiter + content returned when inIncludeDelimiter=1
							&lt;name&gt;&lt;/name&gt;	|
							&lt;type&gt;&lt;/type&gt;	|--content in the middle is returned when inIncludeDelimiter=0
							&lt;value&gt;&lt;/value&gt;	|
						&lt;/xmlRow&gt; 			&lt;-- closing delimiter
		openingDelim			VARCHAR,		-- Must be a unique repeating element begin tag within the XML.  format: &lt;tagname&gt;
		closingDelim			VARCHAR, 		-- Must be a unique repeating element end tag within the XML.    format: &lt;/tagname&gt;
		inOccurrence			INTEGER, 		-- The occurrence of the opening and closing delimiter.  Must be greater than 0.
		inIncludeDelimiter		INTEGER, 		-- 0 (default) do not include, 				1=do include delimiter
		inTrimText				INTEGER, 		-- 0 (default) do not trim, 				1=do trim
		inCaseSensitive			INTEGER, 		-- 0 (default) case insensitivie search,	1=case sensitive search
	Output:
		status				VARCHAR,		-- FOUND=occurrence found. NOT_FOUND=occurrence not found
		result  			LONGVARCHAR		-- if FOUND and result is NULL then a null tag was found.  &lt;tagname/&gt;
											-- if FOUND and result is empty &apos;&apos; then an empty tag was found &lt;tagname&gt;&lt;/tagname&gt;
											-- if FOUND and result is not emtpy then a value was found &lt;tagname&gt;value&lt;/tagname&gt;
											-- if NOT_FOUND then the result is NULL
	Exceptions:  INVALID_DELIMITER
				 INVALID_PARAMETER

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	05/23/2019		Mike Tinius			7.0.8			Created new.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="inContentXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inTagName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inOccurrence" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inIncludeDelimiter" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inTrimText" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inCaseSensitive" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/unescapeXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	extractXMLOccurrence:

	Extract XML occurrence refers to the ability to locate XML text based on an opening and closing XML tag.
	This is useful when needing to extract a particular occurrence of a repeating XML string without having 
	to use expensive XML parsing utilities.  If the XML contains escaped XML, the content will automatically
	be unescaped before proceeding with extraction.
	Example. this input:
				&amp;lt;xmlRow&amp;gt;    &amp;lt;name&amp;gt;FirstName&amp;lt;/name&amp;gt;   &amp;lt;type&amp;gt;STRING&amp;lt;/type&amp;gt;   &amp;lt;value&amp;gt;Bob&amp;lt;/value&amp;gt; &amp;lt;/xmlRow&amp;gt; 
			becomes:
				&lt;xmlRow&gt;    &lt;name&gt;FirstName&lt;/name&gt;   &lt;type&gt;STRING&lt;/type&gt;   &lt;value&gt;Bob&lt;/value&gt; &lt;/xmlRow&gt; 
 
	Input:
		inContentXML	 		LONGVARCHAR, 	-- XML to parse
			examples:  	&lt;xmlRow&gt; 			&lt;-- opening delimiter -- begin and end delimiter + content returned when inIncludeDelimiter=1
							&lt;name&gt;&lt;/name&gt;	|
							&lt;type&gt;&lt;/type&gt;	|--content in the middle is returned when inIncludeDelimiter=0
							&lt;value&gt;&lt;/value&gt;	|
						&lt;/xmlRow&gt; 			&lt;-- closing delimiter
		inTagName				VARCHAR,		-- This is the opening and closing XML tag name.  It is only the tag name with no angle brackets.  
												--		The opening &lt;tagname&gt; and closing &lt;/tagname&gt; brackets will applied within this procedure.
												-- 		The tag anme must be a unique repeating element within the XML.
												-- 		e.g. xmlRow
		inOccurrence			INTEGER, 		-- The occurrence of the opening and closing delimiter.  Must be greater than 0.
		inIncludeDelimiter		INTEGER, 		-- 0 (default) do not include, 				1=do include delimiter
		inTrimText				INTEGER, 		-- 0 (default) do not trim, 				1=do trim
		inCaseSensitive			INTEGER, 		-- 0 (default) case insensitivie search,	1=case sensitive search
	Output:
		status				VARCHAR,		-- FOUND=occurrence found. NOT_FOUND=occurrence not found
		result  			LONGVARCHAR		-- if FOUND and result is NULL then a null tag was found.  &lt;tagname/&gt;
											-- if FOUND and result is empty &apos;&apos; then an empty tag was found &lt;tagname&gt;&lt;/tagname&gt;
											-- if FOUND and result is not emtpy then a value was found &lt;tagname&gt;value&lt;/tagname&gt;
											-- if NOT_FOUND then the result is NULL
	Exceptions:  INVALID_DELIMITER
				 INVALID_PARAMETER

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	05/23/2019		Mike Tinius			7.0.8			Created new.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE extractXMLOccurrence(
	IN inContentXML		 	LONGVARCHAR, 	-- XML to parse
	IN inTagName			VARCHAR,		-- This is the opening and closing XML tag name.  It is only the tag name with no angle brackets.  
											--		The opening &lt;tagname&gt; nand closing &lt;/tagname&gt; brackets will applied within this procedure.
											-- 		The tag anme must be a unique repeating element within the XML.
											-- 		e.g. xmlRow
	IN inOccurrence			INTEGER, 		-- The occurrence of the opening and closing delimiter.  Must be greater than 0.
	IN inIncludeDelimiter	INTEGER, 		-- 0 (default) do not include, 				1=do include delimiter
	IN inTrimText			INTEGER, 		-- 0 (default) do not trim, 				1=do trim
	IN inCaseSensitive		INTEGER, 		-- 0 (default) case insensitivie search,	1=case sensitive search
	OUT status				VARCHAR,		-- FOUND=occurrence found. NOT_FOUND=occurrence not found
	OUT result  			LONGVARCHAR		-- if FOUND and result is NULL then a null tag was found.  &lt;tagname/&gt;
											-- if FOUND and result is empty &apos;&apos; then an empty tag was found &lt;tagname&gt;&lt;/tagname&gt;
											-- if FOUND and result is not emtpy then a value was found &lt;tagname&gt;value&lt;/tagname&gt;
											-- if NOT_FOUND then the result is NULL
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;extractXMLOccurrence&apos;;
	DECLARE debug					CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE contentXML				LONGVARCHAR DEFAULT inContentXML;
	DECLARE tagName					VARCHAR DEFAULT TRIM(inTagName);  -- Must be a unique repeating element tag within the XML.
	DECLARE occurrence				INTEGER DEFAULT inOccurrence;
	DECLARE includeDelimiter		INTEGER DEFAULT inIncludeDelimiter;
	DECLARE trimText				INTEGER DEFAULT inTrimText;
	DECLARE caseSensitive			INTEGER DEFAULT inCaseSensitive;
	DECLARE openingDelim			VARCHAR; -- Format derived from inTagName.  format: &lt;tagname&gt;
	DECLARE closingDelim			VARCHAR; -- Format derived from inTagName.  format: &lt;/tagname&gt;
	DECLARE nullDelim				VARCHAR; -- Format derived from inTagName.  format: &lt;tagname/&gt;
	-- Remove the &apos;&gt;&apos; from the end of the opening delimiter in order to find null tags also
	DECLARE openModDelim			VARCHAR; -- Format derived from inTagName.  format: &lt;tagname
	DECLARE len						INTEGER;
	DECLARE startPos 				INTEGER;
	DECLARE endPos					INTEGER DEFAULT 0;
	DECLARE nullTagPos				INTEGER;
	DECLARE INVALID_DELIMITER		EXCEPTION;
	DECLARE INVALID_PARAMETER		EXCEPTION;

	-- Validate the input
	if (tagName is null or length(tagName) = 0) then
		raise INVALID_DELIMITER value &apos;The &quot;inTagName&quot; may not be null or empty.&apos;;
	end if;
	-- Validate occurrence
	if (occurrence is null) then
		set occurrence = 0;
	end if;
	if (occurrence &lt;= 0) then
		raise INVALID_PARAMETER value &apos;The occurrence must be greater than 0.  occurrence=&apos;||occurrence;
	end if;
	-- Validate includeDelimiter
	if (includeDelimiter is null) then
		set includeDelimiter = 0;
	end if;
	-- Validate trimText
	if (trimText is null) then
		set trimText = 0;
	end if;
	-- Validate caseSensitive
	if (caseSensitive is null) then
		set caseSensitive = 0;
	end if;

	-- Set various tag name styles from the input tag name parameter including: opening, closing, null and open modified.
	if (INSTR(tagName, &apos;&lt;&apos;) &gt; 0) then
		set tagName = REPLACE(tagName, &apos;&lt;&apos;, &apos;&apos;);
	end if;
	if (INSTR(tagName, &apos;&gt;&apos;) &gt; 0) then
		set tagName = REPLACE(tagName, &apos;&gt;&apos;, &apos;&apos;);
	end if;
	if (INSTR(tagName, &apos;&lt;/&apos;) &gt; 0) then
		set tagName = REPLACE(tagName, &apos;&lt;/&apos;, &apos;&apos;);
	end if;
	set openingDelim 	= &apos;&lt;&apos; || tagName || &apos;&gt;&apos;;
	set closingDelim 	= &apos;&lt;/&apos;|| tagName || &apos;&gt;&apos;;
	set nullDelim    	= &apos;&lt;&apos; || tagName || &apos;/&gt;&apos;;
	set openModDelim = &apos;&lt;&apos; || tagName;

	-- Determine if the XML requires un-escaping
	-- &amp;lt;xmlRow&amp;gt;    &amp;lt;name&amp;gt;FirstName&amp;lt;/name&amp;gt;   &amp;lt;type&amp;gt;STRING&amp;lt;/type&amp;gt;   &amp;lt;value&amp;gt;Bob&amp;lt;/value&amp;gt; &amp;lt;/xmlRow&amp;gt; 
	if (INSTR(contentXML, &apos;&amp;lt;&apos;||tagName||&apos;&amp;gt;&apos;) &gt; 0) then
		call /shared/ASAssets/Utilities/&quot;xml&quot;/unescapeXML(contentXML, contentXML);
	end if;

	if (UPPER(debug) = &apos;Y&apos;) then
		call print(moduleName||&apos; : INPUT:&apos;);
		call print(moduleName||&apos; :   contentXML=&apos;||NVL(contentXML,&apos;null&apos;));
		call print(moduleName||&apos; :   tagName=[&apos;||NVL(tagName,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; :   occurrence=[&apos;||occurrence||&apos;]&apos;);
		call print(moduleName||&apos; :   includeDelimiter=[&apos;||includeDelimiter||&apos;]&apos;);
		call print(moduleName||&apos; :   trimText=[&apos;||trimText||&apos;]&apos;);
		call print(moduleName||&apos; :   caseSensitive=[&apos;||caseSensitive||&apos;]&apos;);
		call print(moduleName||&apos; :   openingDelim=[&apos;||NVL(openingDelim,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; :   closingDelim=[&apos;||NVL(closingDelim,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; :   nullDelim=[&apos;||NVL(nullDelim,&apos;null&apos;)||&apos;]&apos;);
		call print(moduleName||&apos; :   openModDelim=[&apos;||NVL(openModDelim,&apos;null&apos;)||&apos;]&apos;);
	end if;

/* Example
&lt;xmlRow&gt; 
  &lt;name&gt;&lt;/name&gt;
  &lt;type&gt;&lt;/type&gt;
  &lt;value&gt;&lt;/value&gt;
&lt;/xmlRow&gt;
&lt;xmlRow/&gt; 
&lt;xmlRow&gt; 
  &lt;name&gt;&lt;/name&gt;
  &lt;type&gt;&lt;/type&gt;
  &lt;value/&gt;
&lt;/xmlRow&gt;
*/
	set status = &apos;NOT_FOUND&apos;;
	set result = null;
	if (caseSensitive = 0) then
		set startPos = INSTR(LOWER(contentXML), LOWER(openModDelim), 1, occurrence);
		if (UPPER(debug) = &apos;Y&apos;) then
			call print(moduleName||&apos; :   startPos=&apos;||startPos);
		end if;
		if (startPos &gt; 0) then
			set nullTagPos = INSTR(LOWER(contentXML), LOWER(nullDelim), startPos);
			if (UPPER(debug) = &apos;Y&apos;) then
				call print(moduleName||&apos; :   nullTagPos=&apos;||nullTagPos);
			end if;
			if (startPos = nullTagPos) then
				-- found null delimiter. Intialize result
				set status = &apos;FOUND&apos;;
				set result = null;
			else
				set endPos = INSTR(LOWER(contentXML), LOWER(closingDelim), startPos);
			end if;
		end if;
	else
		set startPos = INSTR(contentXML, openModDelim, 1, occurrence);
		if (UPPER(debug) = &apos;Y&apos;) then
			call print(moduleName||&apos; :   startPos=&apos;||startPos);
		end if;
		if (startPos &gt; 0) then
			set nullTagPos = INSTR(contentXML, nullDelim, startPos);
			if (UPPER(debug) = &apos;Y&apos;) then
				call print(moduleName||&apos; :   nullTagPos=&apos;||nullTagPos);
			end if;
			if (startPos = nullTagPos) then
				-- found null delimiter. Intialize result
				set status = &apos;FOUND&apos;;
				set result = null;
			else
				set endPos = INSTR(contentXML, closingDelim, startPos);
			end if;
		end if;
	end if;

	-- Search for the opening and closing tag for the occurrence
	if (status = &apos;NOT_FOUND&apos; and startPos &gt; 0 and endPos &gt; 0 and endPos &gt; startPos) then
		set status = &apos;FOUND&apos;;
		if (includeDelimiter = 1) then
			set len = LENGTH(closingDelim);
			set result = SUBSTRING(contentXML, startPos, (endPos+len)-startPos);
		else
			set len = LENGTH(openingDelim);
			set result = SUBSTRING(contentXML, startPos+len, endPos-(startPos+len));
		end if;
		if (trimText = 1) then
			set result = TRIM(result);
		end if;
		if (UPPER(debug) = &apos;Y&apos;) then
			call print(moduleName||&apos; :   result length=&apos;||cast(length(&apos;|&apos;||result||&apos;|&apos;)-2 as varchar));
		end if;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573155473170</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">aiuhmb0</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/220</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/189</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/194</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/171</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/145</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/144</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/143</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/142</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/149</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/148</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/147</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/146</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/176</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/141</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/140</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/150</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="pruneXMLV2" path="/shared/ASAssets/Utilities/xml/pruneXMLV2" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>pruneXML:

	Prune out empty XML nodes except those in the retainXPathList.
	IMPORTANT:  Some nodes may be empty of data but yet are required from an XML schema validation perspective.
	By providing an incoming list of XPath statements, this procedure can insure those nodes are not pruned out
	if they are found to be empty.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off

		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:tns=&quot;http://mynamespace&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;

		retainXPathList - contains a double || separated list of XPath statements for the incoming XML that insure
			those nodes are retained in the XML if they are empty.  The invoking of this procedure must
			define and populate the delimited list.  The invoker will determine the XPath statement by consulting
			the XML Schema for required elements and the deterimine from their application which nodes have the 
			possibility of being empty.  Those are the candidates for this list.
			Values: e.g. /rootnode/XYZ/A/@foo||/rootnode/XYZ/C

		inXml - any XML document which requires pruning 
			Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot; ghi=&quot;&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
	Output:
		outXml - contains the incoming XML with nodes pruned
			Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2010.3		08/02/2010		Mike Tinius			5.1.0			Created new
	2019.200	05/21/2019		Mike Tinius			7.0.8			New pruneXMLV2 derived from purneXML to remove vector input.

	(c) 2017 TIBCO Software Inc. All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="namespaces" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="retainXPathList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXml" direction="IN" nullable="true">
      <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="outXml" direction="OUT" nullable="true">
      <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	pruneXML:

	Prune out empty XML nodes except those in the retainXPathList.
	IMPORTANT:  Some nodes may be empty of data but yet are required from an XML schema validation perspective.
	By providing an incoming list of XPath statements, this procedure can insure those nodes are not pruned out
	if they are found to be empty.
 
	Input:
		debug - defines the debugging options for this procedure.  
			Values: Y or T = debugging turned on, N or F = debugging turned off

		namespaces - any string with the valid namespaces for the incoming XML  
			Values: e.g. xmlns:tns=&quot;http://mynamespace&quot;
				     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
				     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;

		retainXPathList - contains a double || separated list of XPath statements for the incoming XML that insure
			those nodes are retained in the XML if they are empty.  The invoking of this procedure must
			define and populate the delimited list.  The invoker will determine the XPath statement by consulting
			the XML Schema for required elements and the deterimine from their application which nodes have the 
			possibility of being empty.  Those are the candidates for this list.
			Values: e.g. /rootnode/XYZ/A/@foo||/rootnode/XYZ/C

		inXml - any XML document which requires pruning 
			Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot; ghi=&quot;&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
	Output:
		outXml - contains the incoming XML with nodes pruned
			Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2010.3		08/02/2010		Mike Tinius			5.1.0			Created new
	2019.200	05/21/2019		Mike Tinius			7.0.8			New pruneXMLV2 derived from purneXML to remove vector input.

	(c) 2017 TIBCO Software Inc. All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE pruneXMLV2(
		IN debug				CHAR(1),
		IN namespaces			LONGVARCHAR,
		IN retainXPathList	 	LONGVARCHAR,
		IN inXml				XML,
		OUT outXml				XML
	)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;pruneXMLV2()&apos;;
	DECLARE xsltExpr		LONGVARCHAR;
	DECLARE xsltTemplate	LONGVARCHAR DEFAULT &apos;&apos;;

	-- Build the XSLT template that will preserve nodes in the XML even if they are empty.
	-- Build a template for each xpath found in the xpath list
	FOR r AS 
		SELECT * FROM /shared/ASAssets/Utilities/string/extractTextList(retainXPathList, &apos;||&apos;, 0, 0, 0, 0, 1) 
		WHERE textExpression IS NOT NULL AND LENGTH(TRIM(textExpression)) &gt; 0
	DO
		SET xsltTemplate = xsltTemplate ||
&apos;
&lt;xslt:template match=&quot;&apos;||r.textExpression||&apos;&quot;&gt;
    &lt;xslt:copy&gt;
      &lt;xslt:apply-templates select=&quot;@*&quot;/&gt;
      &lt;xslt:apply-templates select=&quot;node()&quot;/&gt;
    &lt;/xslt:copy&gt;
  &lt;/xslt:template&gt; 
&apos;;
	END FOR;

	-- Create the baseline XSTL script that will prune out the XML but leave empty, mandatory fields in the XML
	SET xsltExpr =
&apos;&lt;xslt:stylesheet version=&quot;1.0&quot;
	xmlns:xslt=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
	xmlns:csw-xform=&quot;http://www.compositesw.com/2003/xform&quot; 
	&apos;|| namespaces || &apos;&gt;
  &lt;xslt:output method=&quot;xml&quot; encoding=&quot;UTF-8&quot; indent=&quot;yes&quot;/&gt;
  &lt;xslt:template match=&quot;@*[not(normalize-space(.))]&quot;/&gt;
  &lt;xslt:template match=&quot;node()[ descendant-or-self::*[@* != &amp;apos;&amp;apos;] or  descendant-or-self::*[string-length(normalize-space(.)) &amp;gt; 0] ]&quot;&gt;
    &lt;xslt:copy&gt;
      &lt;xslt:apply-templates select=&quot;@*&quot;/&gt;
      &lt;xslt:apply-templates select=&quot;node()&quot;/&gt;
    &lt;/xslt:copy&gt;
  &lt;/xslt:template&gt;
&apos; || xsltTemplate ||&apos;

  &lt;xslt:template match=&quot;text()&quot;&gt;
    &lt;xslt:value-of select=&quot;.&quot;/&gt;
  &lt;/xslt:template&gt;
  &lt;xslt:template match=&quot;@*&quot;&gt;
    &lt;xslt:attribute name=&quot;{name()}&quot;&gt;
      &lt;xslt:value-of select=&quot;.&quot;/&gt;
    &lt;/xslt:attribute&gt;
  &lt;/xslt:template&gt;

  &lt;!-- This line removes all white space and blank lines --&gt;
  &lt;xslt:template match=&quot;text()[not(normalize-space())]&quot;/&gt;

&lt;/xslt:stylesheet&gt;
&apos;;
	-- Execute the XSLT against the incoming XML (KO/SDR) format
	SET outXml = XSLT( inXml, xsltExpr );

	-- Reformat the XML with a Pretty Print
	SET xsltExpr = 
&apos;&lt;xsl:stylesheet version=&quot;1.0&quot;
  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;
  xmlns:csw-xform=&quot;http://www.compositesw.com/2003/xform&quot;&gt;
   &lt;!-- This xslt does a pretty XML print to reformat the XML where the white space was stripped out --&gt;
   &lt;xsl:output method=&quot;xml&quot;/&gt;
   &lt;xsl:param name=&quot;indent-increment&quot; select=&quot;&apos;&apos;   &apos;&apos;&quot; /&gt;

   &lt;xsl:template match=&quot;*&quot;&gt;
      &lt;xsl:param name=&quot;indent&quot; select=&quot;&apos;&apos;&amp;#xA;&apos;&apos;&quot;/&gt;

      &lt;xsl:value-of select=&quot;$indent&quot;/&gt;
      &lt;xsl:copy&gt;
        &lt;xsl:copy-of select=&quot;@*&quot; /&gt;
        &lt;xsl:apply-templates&gt;
          &lt;xsl:with-param name=&quot;indent&quot;
               select=&quot;concat($indent, $indent-increment)&quot;/&gt;
        &lt;/xsl:apply-templates&gt;
        &lt;xsl:if test=&quot;*&quot;&gt;
          &lt;xsl:value-of select=&quot;$indent&quot;/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:copy&gt;
   &lt;/xsl:template&gt;

   &lt;xsl:template match=&quot;comment()|processing-instruction()&quot;&gt;
      &lt;xsl:copy /&gt;
   &lt;/xsl:template&gt;

   &lt;xsl:template match=&quot;text()[normalize-space(.)=&apos;&apos;&apos;&apos;]&quot;/&gt;

&lt;/xsl:stylesheet&gt;&apos;;

	-- Execute the XSLT against the incoming XML (KO/SDR) format
	SET outXml = XSLT( outXml, xsltExpr );
END</attribute>
  <attribute name="creationDate" type="LONG">1383622342531</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564694702245</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
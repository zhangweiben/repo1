<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="medianFromQuery" path="/shared/ASAssets/Utilities/calculations/medianFromQuery" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>medianFromQuery:

	This procedure determines the median value of an input query that returns a single column.
    The median is defined as the middle value of a sorted list of numbers. If the number of
    elements in the list is odd, the median is the middle element. If the number of elements
    in the list is even, then the median is the average of the two middle elements.


	Input:
		query - contains a query that returns a single column result set. Must have an ORDER BY
                clause (ASC or DESC doesn&apos;t matter), or an exception is thrown.
			Values: A select statement


	Output:
		result - the median value of the result set
			Values: a double


	Exceptions:
        /lib/util/System.IllegalArgumentException - Thrown when the input query does not return 
                                                    a single column or does not contain an ORDER
                                                    BY clause.

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/20/2019		Mike Tinius			7.0.8			Removed the VECTOR to make this more efficient.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="query" direction="IN" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="DOUBLE" type="FLOAT" minValue="2.2250738585072014E-308" maxValue="1.7976931348623157E308"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/TextUtils/RegexPosition" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
  medianFromQuery:

	This procedure determines the median value of the result set of an input query that returns
    a single column. The median is defined as the middle value of a sorted list of numbers. If
    the number of elements in the list is odd, the median is the middle element. If the number
    of elements in the list is even, then the median is the average of the two middle elements.
    If the query results in no rows, the result is NULL.


	Input:
		query - contains a query that returns a single column result set. Must have an ORDER BY
                clause (ASC or DESC doesn&apos;t matter), or an exception is thrown.
			Values: A select statement


	Output:
		result - the median value of the result set
			Values: a double or NULL (if the query returns no rows.)


	Exceptions:
        /lib/util/System.IllegalArgumentException - Thrown when the input query does not return 
                                                    a single column or does not contain an ORDER
                                                    BY clause.

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/20/2019		Mike Tinius			7.0.8			Removed the VECTOR to make this more efficient.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE medianFromQuery(
	IN	query	/lib/util/System.Text,
	OUT	result	DOUBLE
)
BEGIN
    DECLARE PROC_NAME 			CONSTANT VARCHAR DEFAULT &apos;medianFromQuery&apos;;
	DECLARE debug				CHAR(1) DEFAULT &apos;N&apos;;
    DECLARE myQuery System.Text DEFAULT query;
    DECLARE curs 				CURSOR (myCol DOUBLE);
    DECLARE myVal1, myVal2		DOUBLE;
	DECLARE myValues			LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE numValues			INTEGER DEFAULT 0;
	DECLARE mypos				INTEGER;
	DECLARE mysearch			VARCHAR;
	DECLARE pos1, pos2, len		INTEGER;


    -- the regex here will allow:
    --     a single column name
    --     a single column name with a column alias
    --     a function call with any number of arguments (but no sub-calls to other functions.)
    --     a function call with any number of arguments with a column alias
    --
	CALL /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(myQuery, &apos;(?i)^\s*SELECT\s+([^\s,\*]+|[^\s,]+\s+\([^\(\)]+\))((\s+AS)?\s+[^\s,\*]+)?\s+FROM\s+&apos;, 1, pos1);
    IF (pos1 = 0) THEN
        RAISE System.IllegalArgumentException VALUE PROC_NAME || &apos;: Input query does not return a single column or query is malformed.&apos;;
    END IF;

    -- see if the query has an order by. if not, add one.
    --
	CALL /shared/ASAssets/Utilities/string/TextUtils/RegexPosition(myQuery, &apos;(?i)\s+order\s+by\s+&apos;, 1, pos1);
    IF (pos1 = 0) THEN
        RAISE System.IllegalArgumentException VALUE PROC_NAME || &apos;: Input query does not contain an ORDER BY clause.&apos;;
    END IF;

    OPEN curs FOR myQuery;
    FETCH curs INTO myVal1;
    WHILE (curs.FOUND) DO
		SET numValues = numValues + 1;
		SET myValues = myValues || &apos;|&apos;||numValues||&apos;:&apos;||myVal1;
        FETCH curs INTO myVal1;
    END WHILE;
    CLOSE curs;
	IF (UPPER(debug) = &apos;Y&apos;) THEN
		CALL print(&apos;numValues=&apos;||numValues||&apos;  myValues=&apos;||NVL(myValues,&apos;null&apos;));
	END IF;

    IF (numValues = 0) THEN
        SET result = NULL;
    ELSEIF (numValues % 2 = 1) THEN -- number of values is odd
		SET mypos = CAST(numValues / 2 AS INT) + 1;
		SET mysearch = &apos;|&apos;||mypos||&apos;:&apos;;
		SET len = LENGTH(mysearch);
		SET pos1 = INSTR(myValues, mysearch);
		IF (UPPER(debug) = &apos;Y&apos;) THEN
			CALL print(&apos;ODD:  mypos=&apos;||mypos||&apos;  mysearch=&apos;||mysearch||&apos;  pos1=&apos;||pos1||&apos;  len=&apos;||len);
		END IF;
		IF (pos1 &gt; 0) THEN
			SET pos2 = INSTR(myValues, &apos;|&apos;, pos1+len);
			SET myVal1 = SUBSTRING(myValues, pos1+len, pos2-(pos1+len));
			IF (UPPER(debug) = &apos;Y&apos;) THEN
				CALL print(&apos;ODD: myVal1=&apos;||myVal1||&apos;  pos2=&apos;||pos2);
			END IF;
		END IF;
		SET result = myVal1;
    ELSE
		-- Extract the 1st median value
		SET mypos = CAST(numValues / 2 AS INT);
		SET mysearch = &apos;|&apos;||mypos||&apos;:&apos;;
		SET len = LENGTH(mysearch);
		SET pos1 = INSTR(myValues, mysearch);
		IF (UPPER(debug) = &apos;Y&apos;) THEN
			CALL print(&apos;EVEN: mypos=&apos;||mypos||&apos;  mysearch=&apos;||mysearch||&apos;  pos1=&apos;||pos1||&apos;  len=&apos;||len);
		END IF;
		IF (pos1 &gt; 0) THEN
			SET pos2 = INSTR(myValues, &apos;|&apos;, pos1+len);
			SET myVal1 = SUBSTRING(myValues, pos1+len, pos2-(pos1+len));
			IF (UPPER(debug) = &apos;Y&apos;) THEN
				CALL print(&apos;EVEN: myVal1=&apos;||myVal1||&apos;  pos2=&apos;||pos2);
			END IF;
		END IF;

		-- Extract the 2nd medan value
		SET mypos = CAST(numValues / 2 AS INT) + 1;
		SET mysearch = &apos;|&apos;||mypos||&apos;:&apos;;
		SET len = LENGTH(mysearch);
		SET pos1 = INSTR(myValues, mysearch);
		IF (UPPER(debug) = &apos;Y&apos;) THEN
			CALL print(&apos;EVEN: mypos=&apos;||mypos||&apos;  mysearch=&apos;||mysearch||&apos;  pos1=&apos;||pos1||&apos;  len=&apos;||len);
		END IF;
		IF (pos1 &gt; 0) THEN
			SET pos2 = INSTR(myValues, &apos;|&apos;, pos1+len);
			SET myVal2 = SUBSTRING(myValues, pos1+len, pos2-(pos1+len));
			IF (UPPER(debug) = &apos;Y&apos;) THEN
				CALL print(&apos;EVEN: myVal2=&apos;||myVal2||&apos;  pos2=&apos;||pos2);
			END IF;
		END IF;

		SET result = (myVal1 + myVal2) / 2;
    END IF;

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564682677263</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/120</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/126</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">21/55</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/103</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/136</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/80</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/142</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/92</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/73</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/109</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="test_introspectResources" path="/shared/ASAssets/Utilities/examples/repository/test_introspectResources" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="datasourceType" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="errStatus" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="errMessage" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="introspectionResult" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="dataSourceType" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="dataSourceSubtype" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/introspectResources" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="dsPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="schemaTablePatterns" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="tableNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="schemaProcedurePatterns" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="procedureNames" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="errStatus" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="errMessage" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="introspectionResult" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="dataSourceType" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="dataSourceSubtype" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">PROCEDURE test_introspectResources(
	IN  datasourceType				SMALLINT, 		-- 1=Relational, 2=CSV, 3=Excel, 4=Relational w/multiple schemas, 5=Relational w/catalog and multiple schemas, 6=Excel with multiple directory containers and multiple sheets
	OUT errStatus 					VARCHAR,		-- SUCCESS or FAILED
	OUT errMessage 					LONGVARCHAR,	-- Error message if errStatus=FAILED, otherwise null
	OUT introspectionResult 		LONGVARCHAR,	-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
	OUT dataSourceType				VARCHAR,		-- The type of data source that was introspected.
	OUT dataSourceSubtype			VARCHAR			-- The subtype of data source that was introspected.
)
BEGIN
	DECLARE  dsPath 				/lib/resource/ResourceDefs.ResourcePath;	-- mandatory.   Full path to datasource
	DECLARE  catalogName 			VARCHAR;		-- optional (null) - 
													--		Relational Database - database catalog Name if applicable.
													--		CSV - leave this null as it is not applicable
													--		Excel Non-ODBC - leave this null as it is not applicable
	DECLARE  schemaNames			LONGVARCHAR;	-- optional (null) -  NULL=no specified schema list OR one or more comma separated schemas to introspect.
													--	Note: If a list of schema names are provided and a list of table names are provided the list of table names
													--	  will be applied in total to each schema name.  It is not currently in scope to correlate a list of tables to a list of schemas. 
													-- 		Relational Database - schema name or list of schema names.
													-- 		CSV - leave this null as it is not applicable
													--		Excel Non-ODBC - the excel file name or list of file names.
	DECLARE  schemaTablePatterns	VARCHAR(4096);	-- comma separated list of patterns such as D%, E%, F%.    Introspect all tables starting with D, E and F or
													--		a bracketed correlated and comma-separated list of table patterns associated with each schema:
													--			schemaNames=		SCHEMA1,SCHEMA2	- This is the list of comma-separated schemas 
													--			schemaTablePatterns=[M%]   [P%]		- The 1st set of bracketed table patterns goes with the 1st schema.  
													--												- The 2nd bracketed set of table patterns goes with the 2nd schema 
	DECLARE  tableNames 			LONGVARCHAR;	-- optional.  NULL=no specified table list OR one or more comma separated table namess to introspect or	
													--		a bracketed correlated and comma-separated list of table names associated with each schema:
													--			schemaNames=	SCHEMA1,SCHEMA2	- This is the list of comma-separated schemas 
													--			tableNames=		[T1,T2][T3,T4]	- The 1st set of bracketed tables goes with the 1st schema.  
													--											- The 2nd bracketed set of tables goes with the 2nd schema
													--		Relational Database - When NULL, all tables for the schema are introspected, otherwise the list of tables provided are introspected.
													--		CSV - When NULL, all CSV files are introspected, otherwise the list of files provided are introspected.
													--		Excel Non-ODBC - When NULL, all sheets are introspected, otherwise the list of sheets provided are introspected.
													--		XML Files - When NULL, all XML files are introspected, otherwise the list of files provided are introspected.
													--			To introspect the definition set specify the definition set name in this format:  name(TYPE:SUBTYPE)
													--				Example: productCatalog.xml,productCatalogDefinitions(DEFINITION_SET:XML_SCHEMA_DEFINITION_SET)
													--		Table names with spaces may be use double quotes to enclose the name but it is not necessary as spaces are preserved.
													-- 		Generically, any resource name type and subtype can be overridden using this format:  name(TYPE:SUBTYPE).
													--			The invoking program is required to know the valid TYPE and SUBTYPE combinations.
	DECLARE schemaProcedurePatterns VARCHAR(4096);	-- comma separated list of patterns such as D%, E%, F%.    Introspect all new procedure patterns starting with D, E and F or
													--		a bracketed correlated and comma-separated list of procedure patterns associated with each schema:
													--			schemaNames=			SCHEMA1,SCHEMA2	- This is the list of comma-separated schemas 
													--			schemaProcedurePatterns=[N%]   [O%]		- The 1st set of bracketed procedure patterns goes with the 1st schema.  
													--													- The 2nd bracketed set of procedure patterns goes with the 2nd schema 
	DECLARE  procedureNames 		LONGVARCHAR;	-- optional. NULL=no specified procedure list OR 1 or more comma separated procedure names to introspect or 
													--		a bracketed correlated and comma-separated list of procedure names associated with each schema:
													--			schemaNames=	SCHEMA1,SCHEMA2	- This is the list of comma-separated schemas 
													--			procedureNames=	[P1][P2,P3,P4]	- The 1st set of bracketed procedures goes with the 1st schema.  
													--											- The 2nd bracketed set of procedures goes with the 2nd schema
													-- 		Relational Database - When NULL, all procedures are introspected, otherwise the list of procedures provided are introspected.
													-- 		CSV - leave this null as it is not applicable
													--		Excel Non-ODBC - leave this null as it is not applicable
													--		Procedure names with spaces may be use double quotes to enclose the name but it is not necessary as spaces are preserved.
													-- 		Generically, any resource name type and subtype can be overridden using this format:  name(TYPE:SUBTYPE).
													--			The invoking program is required to know the valid TYPE and SUBTYPE combinations.
	DECLARE	separator				VARCHAR;		-- Default=,  The separator used to separate lists for the input parameters: tableNames, schemaTablePatterns, schemaProcedurePatterns and procedureNames.
													--		The separator value should not exist within the tableNames or procedureNames variable.
	DECLARE  debug					CHAR(1);		-- Y=debug on, N=debug off.
	/****  
		Apply the list of tables and/or procedures associated with each schema in the schemaNames list. 
		The correlation of tables to schema uses the following format:
		schemaNames=			SCHEMA1,SCHEMA2		- This is the list of comma-separated schemas 
		tableNames=				[T1,T2][T3,T4,T5]	- The 1st set of bracketed table names goes with the 1st schema.  The 2nd bracketed set of table names goes with the 2nd schema
		schemaTablePatterns=	[M%]   [P%]			- The 1st set of bracketed table patterns goes with the 1st schema.  The 2nd bracketed set of table patterns goes with the 2nd schema 
		procedureNames=			[P1][P2,P3,P4]		- The 1st set of bracketed procedure names goes with the 1st schema.  The 2nd bracketed set of procedure names goes with the 2nd schema
		schemaProcedurePatterns=[N%]   [O%]			- The 1st set of bracketed procedure patterns goes with the 1st schema.  The 2nd bracketed set of procedure patterns goes with the 2nd schema 
	****/

	if (datasourceType = 1) then
		SET dsPath = &apos;/shared/ASAssets/Utilities/examples/repository/source/ds_ordersCopy&apos;;
		SET catalogName = null;
		SET schemaNames = &apos;tutorial&apos;;
		SET schemaTablePatterns = null;
		SET tableNames = null;
		SET schemaProcedurePatterns = null;
		SET procedureNames = null;
		SET separator = &apos;,&apos;;
		SET debug = &apos;Y&apos;;
	end if;

	if (datasourceType = 2) then
		SET dsPath = &apos;/shared/ASAssets/Utilities/examples/repository/source/ds_ordersCopy&apos;;
		SET catalogName = null;
		SET schemaNames = &apos;tutorial&apos;;
		SET schemaTablePatterns = null;
		SET tableNames = &apos;cache_status,cache_tracking,customers,employees,orderdetails,orders,orders_cache,shippingmethods&apos;;
		SET schemaProcedurePatterns = null;
		SET procedureNames = null;
		SET separator = &apos;,&apos;;
		SET debug = &apos;Y&apos;;
	end if;

	if (datasourceType = 3) then
		SET dsPath = &apos;/shared/ASAssets/Utilities/examples/repository/source/ds_ordersCopy&apos;;
		SET catalogName = null;
		SET schemaNames = &apos;tutorial,public&apos;;
		SET schemaTablePatterns = null;
		SET tableNames = &apos;[cache_status,cache_tracking,test0,test1,test2][]&apos;;
		SET schemaProcedurePatterns = null;
		SET procedureNames = &apos;[][set_limit,show_limit]&apos;;
		SET separator = &apos;,&apos;;
		SET debug = &apos;Y&apos;;
	end if;

	if (datasourceType = 4) then
		SET dsPath = &apos;/shared/ASAssets/Utilities/examples/repository/source/ds_ordersCopy&apos;;
		SET catalogName = null;
		SET schemaNames = &apos;tutorial&apos;;
		SET schemaTablePatterns = &apos;c%&apos;;
		SET tableNames = null;
		SET schemaProcedurePatterns = null;
		SET procedureNames = null;
		SET separator = &apos;,&apos;;
		SET debug = &apos;Y&apos;;
	end if;

	if (datasourceType = 5) then
		SET dsPath = &apos;/shared/ASAssets/Utilities/examples/repository/source/ds_XMLCopy&apos;;
		SET catalogName = null;
		SET schemaNames = null;
		SET schemaTablePatterns = null;
		SET tableNames = &apos;productCatalog.xml,productCatalogDefinitions(DEFINITION_SET:XML_SCHEMA_DEFINITION_SET)&apos;;
		SET schemaProcedurePatterns = null;
		SET procedureNames = null;
		SET separator = &apos;,&apos;;
		SET debug = &apos;Y&apos;;
	end if;


	CALL /shared/ASAssets/Utilities/repository/introspectResources(
		dsPath,
		catalogName,
		schemaNames,
		schemaTablePatterns,
		tableNames,
		schemaProcedurePatterns,
		procedureNames,
		separator,
		debug,
		errStatus,				-- SUCCESS or FAILED
		errMessage,				-- Error message if errStatus=FAILED, otherwise null
		introspectionResult,	-- A line (CHR(10)) delimited string of results.  Use introspectResourcesResultCursor() to  return a cursor.
		dataSourceType,			-- The type of data source that was introspected.
		dataSourceSubtype		-- The subtype of data source that was introspected.
	);
		
END</attribute>
  <attribute name="creationDate" type="LONG">1515856924639</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1557779114742</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1515856924639</attribute>
</metadata>
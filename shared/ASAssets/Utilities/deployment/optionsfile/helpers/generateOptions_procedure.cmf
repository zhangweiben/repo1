<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="generateOptions" path="/shared/ASAssets/Utilities/deployment/optionsfile/helpers/generateOptions" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>generateOptions:

	This procedure loops through all of the data source connections inside the DV instance and generates the -set lines needed
	to create an &quot;options file&quot; to deploy those data sources to another DV server.  You can export the lines to a file 
	and then modify the parameters for each line to be suitable to the target deployment server.  For example you can run this 
	script on &quot;development&quot; and then modify the host, port, username, password, etc to match &quot;Test&quot; and then use those -set lines
	in your options file to perform the import into &quot;Test&quot;.

    Input:
		resourcePathList	LONGVARCHAR,	-- null=retrieve options for all paths.  comma-separated path list=retrieve options for paths in the list.
		excludePathList		LONGVARCHAR,	-- null=no path exclusions.  comma-separated path list=exclude paths in the list.  

    Output:
        resultPipe - A cursor containing each -set line for each data source configured.
            CURSOR (
                line LONGVARCHAR
            )

    Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
    2014.4		10/16/2014      Jeremy Akers        6.2.6           Created new
	2019.200	02/22/2019		Mike Tinius			7.0.8			Modified to allow the generation of all datasource options which was the original and is the default.
																		Allow the option generation of a single resource path or a comma-separated list of paths. 
																		This is useful when doing maintenance on the options file and you only need to generate for 1 or more specific paths.
																		The exclusion list allows you prune out datasource options from this list.
																		Both the resourcePathList and the excludePathList may contain partial paths.  Do not include % for a wild-card. It is done automatically.
	2019.200	05/30/2019		Mike Tinius			7.0.8			Renamed this procedure from generateOptFile to generateOptions as this only generates options and not the file itself.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="resourcePathList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludePathList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resultPipe" direction="OUT" nullable="true">
      <datatype name="resultPipe" type="TABLE" refId="1">
        <element name="line">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getDataSourceAttributes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="dataSourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="attrName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="attrValue">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    generateOptions:

	This procedure loops through all of the data source connections inside the DV instance and generates the -set lines needed
	to create an &quot;options file&quot; to deploy those data sources to another DV server.  You can export the lines to a file 
	and then modify the parameters for each line to be suitable to the target deployment server.  For example you can run this 
	script on &quot;development&quot; and then modify the host, port, username, password, etc to match &quot;Test&quot; and then use those -set lines
	in your options file to perform the import into &quot;Test&quot;.

    Input:
		resourcePathList	LONGVARCHAR,	-- null=retrieve options for all paths.  comma-separated path list=retrieve options for paths in the list.
		excludePathList		LONGVARCHAR,	-- null=no path exclusions.  comma-separated path list=exclude paths in the list.  

    Output:
        resultPipe - A cursor containing each -set line for each data source configured.
            CURSOR (
                line LONGVARCHAR
            )

    Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
    2014.4		10/16/2014      Jeremy Akers        6.2.6           Created new
	2019.200	02/22/2019		Mike Tinius			7.0.8			Modified to allow the generation of all datasource options which was the original and is the default.
																		Allow the option generation of a single resource path or a comma-separated list of paths. 
																		This is useful when doing maintenance on the options file and you only need to generate for 1 or more specific paths.
																		The exclusion list allows you prune out datasource options from this list.
																		Both the resourcePathList and the excludePathList may contain partial paths.  Do not include % for a wild-card. It is done automatically.
	2019.200	05/30/2019		Mike Tinius			7.0.8			Renamed this procedure from generateOptFile to generateOptions as this only generates options and not the file itself.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE generateOptions(
	IN resourcePathList	LONGVARCHAR,	-- null=Retrieve options for all paths.  comma-separated path list=retrieve options for paths in the list
	IN excludePathList	LONGVARCHAR,	-- null=no path exclusions.  comma-separated path list=list of paths to exclude from retrieving
	OUT resultPipe 		PIPE(line LONGVARCHAR)
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;generateOptFile&apos;;
	DECLARE debug					CHAR(1) DEFAULT &apos;Y&apos;;
	DECLARE encodedSingleQuote		VARCHAR DEFAULT &apos;_0027&apos;; -- _0027=&apos;&apos;&apos; single quote
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE resourcePath			LONGVARCHAR;
	DECLARE attrValue				LONGVARCHAR;
	DECLARE pos						INTEGER;
	DECLARE includePathCount		INTEGER DEFAULT 0;
	DECLARE includePathInputList	LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE excludePathInputList	LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE crs 					CURSOR(
		SOURCE_NAME		VARCHAR(255),
		SOURCE_TYPE		VARCHAR(60),
		SOURCE_CATEGORY	VARCHAR(60),
		OWNER			VARCHAR(255),
		PARENT_PATH		VARCHAR(4000)
	);
	-- value to use if a data source attribute value hasn&apos;t been set (exists in the
	-- repository but is set to NULL.) defaults to &quot;&quot; to maintain NULL setting.
	DECLARE NULL_VALUE 				CONSTANT VARCHAR DEFAULT &apos;&quot;&quot;&apos;;

	-- Create the include path list
	-- 		It is necessary to encode single quotes within the path to _0027 so that extractTextList works properly.
	--		Once the line is extracted, the encoded single quote is replaced with an original single quote.
	--		In order for dynamic sql to execute properly, any single quotes must be escaped with another single quote.
	FOR r AS 
		SELECT textExpression line 
		FROM /shared/ASAssets/Utilities/string/extractTextList(REPLACE(resourcePathList, &apos;&apos;&apos;&apos;, encodedSingleQuote), &apos;,&apos;, 1, 1, 1, 0, 1) 
		WHERE textExpression IS NOT NULL AND LENGTH(TRIM(textExpression)) &gt; 0
	DO
		SET includePathCount = includePathCount + 1;
		IF (includePathCount &gt; 1) THEN
			SET includePathInputList = includePathInputList || &apos;             OR &apos;;
		END IF;
		SET includePathInputList = includePathInputList || &apos;PARENT_PATH||&apos;&apos;/&apos;&apos;||SOURCE_NAME LIKE &apos;&apos;&apos;||REPLACE(REPLACE(r.line, encodedSingleQuote, &apos;&apos;&apos;&apos;), &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;%&apos;||&apos;&apos;&apos;&apos;||CHR(10);
	END FOR;
	IF (includePathCount &gt; 0) THEN
		IF (includePathCount = 1) THEN
			SET includePathInputList = CHR(10)||&apos;       AND &apos;||includePathInputList;
		ELSE
			SET includePathInputList = CHR(10)||&apos;       AND (&apos;|| TRIM(includePathInputList) || &apos;)&apos; || CHR(10);
		END IF;
	ELSE
		SET includePathInputList = CHR(10);
	END IF;

	-- Create the exclude path list
	-- 		It is necessary to encode single quotes within the path to _0027 so that extractTextList works properly.
	--		Once the line is extracted, the encoded single quote is replaced with an original single quote.
	--		In order for dynamic sql to execute properly, any single quotes must be escaped with another single quote.
	FOR r AS 
		SELECT textExpression line 
		FROM /shared/ASAssets/Utilities/string/extractTextList(REPLACE(excludePathList, &apos;&apos;&apos;&apos;, encodedSingleQuote), &apos;,&apos;, 1, 1, 1, 0, 1) 
		WHERE textExpression IS NOT NULL AND LENGTH(TRIM(textExpression)) &gt; 0
	DO
		SET excludePathInputList = excludePathInputList || &apos;       AND PARENT_PATH||&apos;&apos;/&apos;&apos;||SOURCE_NAME NOT LIKE &apos;&apos;&apos;||REPLACE(REPLACE(r.line, encodedSingleQuote, &apos;&apos;&apos;&apos;), &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;%&apos;||&apos;&apos;&apos;&apos;||CHR(10);
	END FOR;
	IF (LENGTH(TRIM(excludePathInputList)) = 0) THEN
		SET excludePathInputList = CHR(10);
	END IF;

	-- Generate the SQL Statement used to open the cursor.
	SET sqlStatement = 
	&apos;SELECT SOURCE_NAME, SOURCE_TYPE, SOURCE_CATEGORY, OWNER, PARENT_PATH
     FROM /services/databases/system/SYS_DATASOURCES
     WHERE PARENT_PATH LIKE &apos;&apos;/shared%&apos;&apos; &apos;||includePathInputList||excludePathInputList||
&apos;       AND PARENT_PATH NOT LIKE &apos;&apos;/shared/examples%&apos;&apos;
       AND PARENT_PATH NOT LIKE &apos;&apos;/shared/ASAssets/Utilities/%&apos;&apos; 
       AND PARENT_PATH NOT LIKE &apos;&apos;/shared/PSAssets/Utilities/%&apos;&apos; 
     ORDER BY PARENT_PATH, SOURCE_NAME&apos;;

	IF (UPPER(debug) = &apos;Y&apos;) THEN
		CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
		CALL PRINT(&apos;--------------------------------------------------------------------------------------------------------------&apos;);
		CALL PRINT(&apos;Copy -set lines below this line and modify all CHANGE_PASSWORD entries:&apos;);
		CALL PRINT(&apos;--------------------------------------------------------------------------------------------------------------&apos;);
	END IF;

	-- Open and fetch the cursor for the adhoc SQL statement.
	OPEN crs FOR sqlStatement;
	FOR r AS crs DO
		FOR rds AS
			SELECT 
                    CASE AttrName
                        WHEN &apos;login&apos; THEN &apos;user&apos;
						WHEN &apos;username&apos; THEN &apos;user&apos;
                        WHEN &apos;urlDatabaseName&apos; THEN &apos;database&apos;
                        WHEN &apos;urlIP&apos; THEN &apos;host&apos;
						WHEN &apos;url&apos; then &apos;raw:url&apos;
                        WHEN &apos;urlPort&apos; THEN &apos;port&apos;
						WHEN &apos;root&apos; THEN &apos;path&apos;
                        ELSE AttrName
                    END AttrName,
                    CASE AttrName
						WHEN &apos;password&apos; THEN &apos;CHANGE_PASSWORD&apos;
						ELSE COALESCE (attrValue, NULL_VALUE)
					END attrValue
			FROM /shared/ASAssets/Utilities/repository/getDataSourceAttributes(r.PARENT_PATH || &apos;/&apos; || r.SOURCE_NAME)
			WHERE AttrName IN (&apos;login&apos;, &apos;password&apos;, &apos;urlDatabaseName&apos;, &apos;urlIP&apos;, &apos;urlPort&apos;, &apos;username&apos;, &apos;root&apos;, &apos;url&apos;)
			  AND (LOWER(attrValue) NOT LIKE &apos;jdbc%&apos;) -- This will still retrieve http, file and ldap attributes but not jdbc
			ORDER BY AttrName
		DO
			IF (r.PARENT_PATH IS NOT NULL AND r.SOURCE_NAME IS NOT NULL) THEN
				SET attrValue = rds.attrValue;
				-- Detect any spaces within the attribute value and enclose the value with double quotes.
				SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(attrValue, &apos; &apos;) INTO pos FROM /services/databases/system/DUAL;
				IF (rds.attrName = &apos;path&apos; OR (attrValue IS NOT NULL AND attrValue &lt;&gt; NULL_VALUE AND pos &gt; 0)) THEN
					SET attrValue = &apos;&quot;&apos;||attrValue||&apos;&quot;&apos;;
				END IF;
				-- Apply double quotes around the datasource path if needed.
				CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(r.PARENT_PATH || &apos;/&apos; || r.SOURCE_NAME, null, resourcePath);
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL PRINT(&apos;-set &apos; || resourcePath || &apos; DATA_SOURCE &apos; || NVL(rds.AttrName,&apos;AttrName=null&apos;) || &apos; &apos; || NVL(attrValue,&apos;null&apos;));
				END IF;
				-- Generate the pkg_import option statements
				INSERT INTO resultPipe VALUES (&apos;-set &apos; || resourcePath || &apos; DATA_SOURCE &apos; || rds.AttrName || &apos; &apos; || attrValue);
			END IF;
		END FOR;
	END FOR;
END</attribute>
  <attribute name="creationDate" type="LONG">1412626753904</attribute>
  <attribute name="creatorUserDomain" type="STRING">corptest</attribute>
  <attribute name="creatorUserName" type="STRING">jakers</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564683224053</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/127</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/166</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/126</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/129</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/128</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
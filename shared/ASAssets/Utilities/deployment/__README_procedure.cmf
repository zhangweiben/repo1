<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="_README" path="/shared/ASAssets/Utilities/deployment/_README" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters></parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">/*
----------------------------------------------------------
INSTRUCTIONS:
----------------------------------------------------------
	1. Copy the &quot;deployment&quot; folder from the Utilities zip file to all target DV servers.
		Use a consistent folder path on each server.  
		For setup see the section &quot;INSTRUCTIONS FOR SCRIPT SETUP&quot; below to modify paths and ports.
	2. Review section I. regarding exporting resource ownership and privileges files.
	3. Review section II. regarding generating an options file for each target deployment server.
	4. Review section III. regarding customizing &quot;runAfterImport&quot;.
	5. Review section IV. regarding deployment scripts and how to use them.

----------------------------------------------------------
Deployment Considerations
----------------------------------------------------------
	The deployment folder is broken down into different subject areas that are all related to different deployment considerations.
	The list below describes the topics that are covered in this _README.
		I.   Managing Privileges and Resource Ownership using the runPrivilegeExport templates.
		II.  Generating Options file for data source connections
		III. Customizing the &quot;runAfterImport&quot; procedure template for deployment.
		IV.  Deployment scripts.

	=============================
	Deployment Folder Structure
	=============================
	This can be either windows or UNIX.  This structure must be copied to the DV target 
		server from the Utilities zip file.

	The recommended structure is shown below:
		/deployment			- Base folder which is to be copied from the Utilities zip file
			/carfiles		- A folder in which to place car files for deployment.
			/fullbackup		- A location for the deployProject.[bat|sh] to place the full server backup .car file
			/option_files	- A location to place option files.
			/privileges		- A location to write the privileges.xml file and resource_ownership.txt files.
			/scripts		- The location for the various scripts:
				/deployPrivs.[bat|sh]	- Deploy resource ownership and privileges only.
				/deployProject.[bat|sh] - Deploy a project .car file.
				/convertPkgFileV11_to_V10.[bat|sh] - Convert a package format from V11 (8.x) to V10 (7.x).
				/JdbcSample.[bat|sh]	- Provides the ability to execute custom procedures on the DV server.
				/JdbcSample.class		- The required class file for JdbcSample.[bat|sh]
				/JdbcSample.java		- The original source code for JdbcSample.class

	=============================
	INSTRUCTIONS FOR SCRIPT SETUP
	=============================
	1. Modify variables for deployProject.[bat|sh] depending on your environment.

		deployProject.bat
		------------------------------
		set DV_HOME=C:\MySW\TDV7.0.8
		set PRIVSFILE=C:\MySW\TDV_Scripts\7 0\deployment\privileges\privileges.xml
		set RESOWNERFILE=C:\MySW\TDV_Scripts\7 0\deployment\privileges\resource_ownership.txt
		set FULLBACKUPPATH=C:\MySW\TDV_Scripts\7 0\deployment\fullbackup
		set WSPORT=9400
		set DBPORT=9401

		deployProject.sh
		------------------------------
		get_DV_HOME()       { echo &quot;/Users/mtinius@tibco.com/Downloads/TDV7.0.8&quot;; }
		get_PRIVSFILE()     { echo &quot;C:/MySW/TDV_Scripts/7 0/deployment/privileges/privileges.xml&quot;; }
		get_RESOWNERFILE()  { echo &quot;C:/MySW/TDV_Scripts/7 0/deployment/privileges/resource_ownership.txt&quot;; }
		get_FULLBACKUPPATH(){ echo &quot;/Users/mtinius@tibco.com/Downloads/TDV_Scripts/7.0/deployment/fullbackup&quot;; }
		get_WSPORT()        { echo &quot;9400&quot;; }
		get_DBPORT()        { echo &quot;9401&quot;; }

	2. Modify variables for deployPrivs.[bat|sh] depending on your environment.

		deployPrivs.bat
		------------------------------
		set DV_HOME=C:\MySW\TDV7.0.8
		set PRIVSFILE=C:\MySW\TDV_Scripts\7 0\deployment\privileges\privileges.xml
		set RESOWNERFILE=C:\MySW\TDV_Scripts\7 0\deployment\privileges\resource_ownership.txt
		set DBPORT=9401

		deployPrivs.sh
		------------------------------
		get_DV_HOME()       { echo &quot;/Users/mtinius@tibco.com/Downloads/TDV7.0.8&quot;; }
		get_PRIVSFILE()     { echo &quot;C:/MySW/TDV_Scripts/7 0/deployment/privileges/privileges.xml&quot;; }
		get_RESOWNERFILE()  { echo &quot;C:/MySW/TDV_Scripts/7 0/deployment/privileges/resource_ownership.txt&quot;; }
		get_DBPORT()        { echo &quot;9401&quot;; }


	3. Modify variables for JdbcSample.[bat|sh] depending on your environment.

		JdbcSample.bat
		------------------------------
		SET DV_HOME=C:\MySW\TDV7.0.8

		JdbcSample.sh
		------------------------------
		DV_HOME=&quot;/MySW/TDV7.0.8&quot;


----------------------------------------------------------
I.   Managing Privileges and Resource Ownership
----------------------------------------------------------
	=============================
	Exporting Privileges
	=============================
	The following procedures serve as templates to export privileges to the privileges.xml file and resource ownership to the resource_ownership.txt file:
		DEV:	/shared/ASAssets/Utilities/deployment/privileges/templates/runPrivilegeExport_1_DEV_template
		TEST:	/shared/ASAssets/Utilities/deployment/privileges/templates/runPrivilegeExport_2_TEST_template
		PROD:	/shared/ASAssets/Utilities/deployment/privileges/templates/runPrivilegeExport_3_PROD_template

	The concept behind this is simple.  
		1. The templates are used to take the &quot;AS-IS&quot; snapshot of privileges for the given folder paths listed in the template 
				at the time of execution and write them out to a file [privileges.xml].
		2. It is very important that the folder privileges for each folder listed be set exactly as they should be set 
				before exporting the privilege snapshot to the privileges.xml file.
		3. Subsequently, the privilege can be re-applied from the snapshot [privileges.xml] using importResourcePrivileges.
				They can be applied from Studio by executing &quot;/shared/ASAssets/Utilities/deployment/privileges/importResourceOwnership&quot; or
				they can be applied from the UNIX command line using deployPrivs.sh.  A copy of this script can be found in its entirety
				at the bottom of this procedure.
		4. For deployment, it is recommended to invoke the published importResourcePrivileges after importing the car file.
				This is typically done from the UNIX deployment shell script [deployProject.sh] which is provided in its 
				entirety at the bottom of this procedure.
				DataSource=ASAssets		Procedure: Utilities.deployment.importResourcePrivileges
				SQL: &quot;SELECT * FROM Utilities.deployment.importResourcePrivileges(1, 0, 0, &apos;$PRIVSFILE&apos;, &apos;SET_EXACTLY&apos;)&quot;

	The objective of the template procedure is to allow the DV development team to maintain the privileges.xml and resource_ownership.txt files.
		1. For maintaining privileges (privileges.xml):
			The rows (resource locations and types) need to be maintained in this procedure.  
			If a resource is added, then the path and type need to be added to this procedure.
			If a resource is removed, then the path and type need to be removed from this procedure.
			If a change is made, to a resource in a one of the environments during deployment, then this procedure needs to be modified and 
				executed prior to deployment so that the privileges.xml file are updated and ready during deployment.
		2. For maintaining resource ownership (resource_ownership.txt)
			The row definition in the runPrivilegeExport_[DEV|TEST|PROD] procedure explicitly defines what the ownership
				should be for each resource path.  For DEV, the ownership:domain is always null:null because it is not
				reccommended to change ownership of resources in the development environment. 

		runPrivilegeExport Row Definition:
			owner: 			What the resource ownership should be set to.  If null then no resource owner is set and the path is bypassed.
							Ownership is explicitly declared here.  It is not determined by how the resourcePath is currently set.
			domain: 		The domain of the owner.  Ignored if owner is null.  Required if owner is not null.
			resourcePath:	The path from which to read (derive) the privileges for the given DV environment.
			resourceType:	The resource type for the given resourcePath.  i.e. CONTAINER, DATA_SOURCE.
		Row Format:			&apos;owner:domain:resourcePath:resourceType,&apos;

	=============================
	Importing (Apply) Privileges
	=============================
	Privileges are applied after deploying the CAR file.
	All privileges for all resources in the privileges.xml file are applied using the following procedure:
		/services/databases/ASAssets/Utilities/importResourcePrivileges &gt;-----------------|
		/shared/ASAssets/Utilities/deployment/privileges/importResourcePrivileges &lt;-------|

----------------------------------------------------------
II.  Generating Options file for data source connections
----------------------------------------------------------
	=============================
	Generate Options File
	=============================
	The procedure &quot;/shared/ASAssets/Utilities/deployment/optionsfile/generateOptionsFile&quot; is used to generate an options file on the TDV server.  
	The procedure invokes generateOptions.  If a file already exists, it adds an _copy# to the end of the file name. 
	You don&apos;t want to accidently overwrite the real file which contains the valid passwords.  Once the copy is generated, 
	it needs to be updated with the correct passwords.  Look for CHANGE_PASSWORD text within the file.
	If the file path is left null or blank, the file options are simply returned in the output variable.

	The option file may have blank lines and comments starting with a # in the first character of the line.

	=============================
	Sample Options File
	=============================
		-set /shared/test_import/&quot;source&quot;/Advisory DATA_SOURCE path &quot;C:\MyFiles\datafiles&quot;
		-set /shared/test_import/&quot;source&quot;/ds_XML DATA_SOURCE raw:url file:///C:\MySW\TDV7.0.8\docs\examples/productCatalog.xml
		-set /shared/test_import/&quot;source&quot;/ds_XMLCopy DATA_SOURCE raw:url file:///C:\MySW\TDV7.0.8\docs\examples/productCatalog.xml
		-set /shared/test_import/&quot;source&quot;/ds_inventory DATA_SOURCE database inventory
		-set /shared/test_import/&quot;source&quot;/ds_inventory DATA_SOURCE host localhost
		-set /shared/test_import/&quot;source&quot;/ds_inventory DATA_SOURCE password tutorial
		-set /shared/test_import/&quot;source&quot;/ds_inventory DATA_SOURCE port 9408
		-set /shared/test_import/&quot;source&quot;/ds_inventory DATA_SOURCE user tutorial
		-set /shared/test_import/&quot;source&quot;/ds_orders DATA_SOURCE database orders
		-set /shared/test_import/&quot;source&quot;/ds_orders DATA_SOURCE host localhost
		-set /shared/test_import/&quot;source&quot;/ds_orders DATA_SOURCE password tutorial
		-set /shared/test_import/&quot;source&quot;/ds_orders DATA_SOURCE port 9408
		-set /shared/test_import/&quot;source&quot;/ds_orders DATA_SOURCE user tutorial
		-set /shared/test_import/&quot;source&quot;/ds_ordersCopy DATA_SOURCE database orders
		-set /shared/test_import/&quot;source&quot;/ds_ordersCopy DATA_SOURCE host localhost
		-set /shared/test_import/&quot;source&quot;/ds_ordersCopy DATA_SOURCE password tutorial
		-set /shared/test_import/&quot;source&quot;/ds_ordersCopy DATA_SOURCE port 9408
		-set /shared/test_import/&quot;source&quot;/ds_ordersCopy DATA_SOURCE user tutorial

----------------------------------------------------------
III. Customizing the &quot;runAfterImport&quot; procedure template for deployment.
----------------------------------------------------------
	The procedure &quot;/shared/ASAssets/Utilities/deployment/run/runAfterImport_template&quot; is a template for running internal DV procedures 
		after import of a CAR file during a DV migration.
	This procedure should be copied to a different location so that it does not get overwritten when the Utilities are upgraded.

	Instructions:
		1. Modify /shared/ASAssets/Utilities/environment/getEnvName() and provide an environment name such as DEV, TEST, PROD etc based on the TDV server environment.
		2. Copy the &quot;runAfterImport_template&quot; template to a different location outside of the /shared/ASAssets/Utilities folder so that it does not get overwritten if the Utilities are updated.
		3. Modify the copied procedure
			a. Modify the variable &quot;scriptEnv&quot; to match environment name that comes from getEnvName().
			b. Add procedure calls to add additional logic that you want to &quot;run after import&quot;.
		4. Publish the copied procedure &quot;runAfterImport&quot; to /services/databases/ASAssets/Utilities/deployment
		5. The script deployProject.[bat|sh] would invoke runAfterImport.  
			See the following for script details: /shared/ASAssets/Utilities/deployment/privileges/_README

----------------------------------------------------------
IV. Deployment scripts.
----------------------------------------------------------
	=============================
	Deployment Script
	=============================
	At deployment time, the following procedures are invoked from &quot;deployProject.sh&quot;:
		The password is optional and will be prompted if not provided.
		deployProject.[bat|sh] [-v] [-c] &lt;CAR_file&gt; &lt;options_file&gt; &lt;hostname&gt; &lt;username&gt; &lt;domain&gt; [password]

			-v=[optional] verbose mode.  Verbose is turned on for secondary script calls.   Otherwise the default is verbose is off.
			-c=[optional] execute package .car file version check and conversion.  
			              Use -c in environments where you are migrating from DV 8.x into DV 7.x.
			              If not provided, version checking and .car file conversion will not be done which would be optimal to use
								when all environments are of the same major DV version such as all DV 7.x or all DV 8.x
						DISCLAIMER: 
							Migrating resources from 8.x to 7.x is not generally supported.
							However, it does provide a way to move basic functionality coded in 8.x to 7.x.  
							It does not support the ability to move new features that exist in 8.x but do not exist in 7.x.  
							Exceptions may be thrown in this circumstance.

		1. Perform DV server version check
			&quot;SELECT * FROM Utilities.repository.getServerAttribute(&apos;/server/config/info/version&apos;)&quot;

		2. Perform package .car file conversion if requested
			convertPkgFileV11_to_V10.[bat|sh] &lt;package_file_path&gt; 

		3. Full Server Backup
			$DV_HOME/bin/backup_export.sh -server $HOST -pkgfile $BACKUPFILENAME -user $USER -password $PASSWORD -domain $DOMAIN -includeStatistics

		4. Import specified CAR file
			$DV_HOME/bin/pkg_import.sh -pkgfile $PKGFILE -server $HOST -port $WSPORT -user $USER -password $PASSWORD -domain $DOMAIN -optfile $OPTFILE

		5. Reads the file resource_ownership.txt and changes resource ownership for each path.
			&quot;SELECT * FROM Utilities.deployment.importResourceOwnership(&apos;N&apos;, &apos;$RESOWNERFILE&apos;)&quot;
			Actual Path: /services/databases/ASAssets/Utilities/deployment/importResourceOwnership

		6. Reads the privileges.xml file and updates the privileges.
				&quot;SELECT * FROM Utilities.deployment.importResourcePrivileges(&apos;N&apos;, 1, 0, 0, &apos;$PRIVSFILE&apos;, &apos;SET_EXACTLY&apos;)&quot;
			Actual Path: /services/databases/ASAssets/Utilities/deployment/importResourcePrivileges

		7. Invokes the post-deployment customization script: 
				&quot;SELECT * FROM  Utilities.deployment.runAfterImport(&apos;N&apos;)&quot;
			Actual Path: /services/databases/ASAssets/Utilities/deployment/runAfterImport

		EXAMPLE:
			./deployProject.sh ../CAR/YYYYMMDD/carfile_name.car options.opt localhost deployuser composite
			deployProject.bat ../CAR/YYYYMMDD/carfile_name.car options.opt localhost deployuser composite

	=============================
	Privilege Script Execution
	=============================
	It is possible to apply privileges only from the UNIX command line using the following script:
		The password is optional and will be prompted if not provided.
			deployPrivs.[bat|sh] [-v] &lt;hostname&gt; &lt;username&gt; &lt;domain&gt; [password]

				-v=[optional] verbose mode.  Verbose is turned on for secondary script calls.  
						Otherwise the default is verbose is off.

		1. Reads the file resource_ownership.txt and changes resource ownership for each path.
			&quot;SELECT * FROM Utilities.deployment.importResourceOwnership(&apos;N&apos;, &apos;$RESOWNERFILE&apos;)&quot;
			Actual Path: /services/databases/ASAssets/Utilities/deployment/importResourceOwnership

		2. Reads the privileges.xml file and updates the privileges.
				&quot;SELECT * FROM Utilities.deployment.importResourcePrivileges(&apos;N&apos;, 1, 0, 0, &apos;$PRIVSFILE&apos;, &apos;SET_EXACTLY&apos;)&quot;
			Actual Path: /services/databases/ASAssets/Utilities/deployment/importResourcePrivileges

		EXAMPLE:
			./deployPrivs.sh localhost deployuser composite
			deployPrivs.bat localhost deployuser composite

	=============================
	JdbcSample Script
	=============================
	The JdbcSample script is used to interface with a DV server and execute custom procedures.
	This procedure *** REQUIRES *** JdbcSample.class to be present in the target scripts folder.  
		It can be found in the Utilities zip file &quot;deployment/scripts&quot;.
	The following scripts get executed via JdbcSample.

		1. Reads the file resource_ownership.txt and changes resource ownership for each path.
			&quot;SELECT * FROM Utilities.deployment.importResourceOwnership(&apos;N&apos;, &apos;$RESOWNERFILE&apos;)&quot;
			Actual Path: /services/databases/ASAssets/Utilities/deployment/importResourceOwnership

		2. Reads the privileges.xml file and updates the privileges.
				&quot;SELECT * FROM Utilities.deployment.importResourcePrivileges(&apos;N&apos;, 1, 0, 0, &apos;$PRIVSFILE&apos;, &apos;SET_EXACTLY&apos;)&quot;
			Actual Path: /services/databases/ASAssets/Utilities/deployment/importResourcePrivileges

		3. Invokes the post-deployment customization script: 
				&quot;SELECT * FROM  Utilities.deployment.runAfterImport(&apos;N&apos;)&quot;
			Actual Path: /services/databases/ASAssets/Utilities/deployment/runAfterImport


	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE &quot;_README&quot;()
BEGIN
END</attribute>
  <attribute name="creationDate" type="LONG">1523455413720</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1560349680262</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1523455413720</attribute>
</metadata>
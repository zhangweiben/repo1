<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="auditLoggerV2" path="/shared/ASAssets/Utilities/log/auditLoggerV2" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>auditLoggerV2:

	The auditLogger is meant to be generic implementation for audit logging purposes. 
	This version does not use a vector for input of attributes as there is a memory leak associate with using a vector as an input variable.
 
	Input:
		messageText			- The message to log, print, insert into database or email.
		attributeList		- Name/Value pair list containing only the necessary attributes for audit logging.
							The &quot;Name&quot; portion of the Name/Value pair attribute list is mandatory and the name is provided below with an explanation.

		-- Example of how to declare the necessary variables for attribute list within the invoking procedure:
		DECLARE attributeList		LONGVARCHAR;
		DECLARE sep					VARCHAR DEFAULT &apos;|~|&apos;;

		-- Example of how to set the attribute vector to be passed into auditLogger()
		SET attributeList =  
			-- Name					Value												Description
			-- General options
			&apos;debug=&apos; || 			NVL(debug,&apos;null&apos;) || sep || 						-- Y=debug or N=do not debug
			&apos;loggingType=&apos; || 		NVL(debugloggingType,&apos;null&apos;) ||	sep || 				-- One or more of this list: [LOG, EMAIL, DB, PRINT]
																						--		LOG - write to the DV log.
																						--		EMAIL - send an email.
																						--		DB - insert the message into the AUDI_LOG table. (created and introspected by developer during initialization)
																						--		PRINT - print to the Studio command line.
			&apos;notificationType=&apos; || 	NVL(notificationType,&apos;null&apos;) ||	sep || 				-- One and only one of [ERROR|INFO|DEBUG|AUDIT]
																						--		ERROR - Output error message with severity level ERROR.
																						--		AUDIT - Output audit message with severity level INFO.
																						--		INFO - Output info message with severity level INFO.
																						--		DEBUG - Output debug message with severity level INFO.
			-- Database logging options
			&apos;auditTablePath=&apos; || 	NVL(auditTablePath,&apos;null&apos;) || sep || 				-- The DV path to the AUDIT_LOG table. e.g. /shared/Cache_DB/Cache_Repo/CACHE1/AUDIT_LOG
			&apos;sequenceNum=&apos; || 		NVL(CAST(sequenceNum AS VARCHAR),&apos;null&apos;) ||	sep || 	-- A sequence number used to correlate multiple messages across different log messages.  
																						-- This allows a common code base or framework to generate a sequence number and use it across multiple invocations.
			&apos;organizationName=&apos; || 	NVL(organizationName,&apos;null&apos;) ||	sep || 				-- The name of the organization which can be used to filter messages. e.g. Mortgage, Operations, CustomerSatisfaction.
			&apos;applicationName=&apos; || 	NVL(applicationName,&apos;null&apos;) || sep || 				-- The application name that is using DV within the organization which can be used as an additional filter. e.g. HomeLoans, Bankruptcy, etc.
			&apos;origUserName=&apos; || 		NVL(origUserName,&apos;null&apos;) ||	sep || 					-- The original user name from the application: format=username@domain.  e.g. user1@ldap or user2@composite
			&apos;resourceName=&apos; || 		NVL(resourceName,&apos;null&apos;) || sep || 					-- The name of the resource being acted upon such as VIEW_NAME_INCR.
			&apos;moduleName=&apos; || 		NVL(inModuleName,&apos;null&apos;) ||	sep || 					-- The name of the module or procedure that is invoking the auditLoger which provides context for the code such as RefreshCache.
			&apos;cachekey=&apos; || 			NVL(CAST(cachekey AS VARCHAR),&apos;null&apos;) || sep || 	-- The cachekey being used to refresh the cache or 0 if not applicable.  This is especially helpful when invoked from the incremental refresh scripts.

			-- Send email options
			&apos;emailFrom=&apos; || 		NVL(emailFrom,&apos;null&apos;) || sep || 					-- The address the message is from.  NULL causes use of the server&apos;s configured &quot;from&quot; address.  Only NULL is supported in this release.
			&apos;emailReplyTo=&apos; || 		NVL(emailReplyTo,&apos;null&apos;) || sep || 					-- The address to place in the replyTo field of the message.
			&apos;emailTo=&apos; || 			NVL(emailTo,&apos;null&apos;) || sep || 						-- A comma separated list of e-mail addresses.
			&apos;emailCC=&apos; || 			NVL(emailCC,&apos;null&apos;) || sep || 						-- A comma separated list of e-mail addresses.
			&apos;emailBCC=&apos; || 			NVL(emailBCC,&apos;null&apos;) || sep || 						-- A comma separated list of e-mail addresses.
			&apos;emailSubject=&apos; || 		NVL(emailSubject,&apos;null&apos;) ||	sep || 					-- The message subject.
			&apos;emailContentType=&apos; || 	NVL(emailContentType,&apos;null&apos;) ||	sep || 				-- This can be &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
			&apos;&apos;;

	Output:
		None

	Exceptions:
		Will throw exceptions if the logging is not successful.
		IllegalArgumentException: If &quot;from&quot; is not NULL.
		IllegalArgumentException: If any of the address lines are mis-formatted.
		IllegalArgumentException: If there is not at least one &quot;to&quot; address.
		IllegalArgumentException: If there is more than one address in the &quot;replyTo&quot;.
		IllegalArgumentException: If &quot;contentType&quot; is not &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
		IllegalStateException: If the server&apos;s &quot;from&quot; address is not configured.

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	05/09/2019		Mike Tinius			7.0.8			Derived from auditLogger and modified to avoid using a VECTOR as an input parameter as there is a memory leak with vectors as input.
		
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.


	*********************************************************************
	* Sample DDL syntax for the AUDIT_LOG table.
	* 
	*   (1) Create the AUDIT_LOG table
	*		[Option 1] Execute the DDL manually outside of Composite.
	*		[Option 2] Automate the DDL creation within some sort of framework that will invoke this auditLogger.
	*   (2) Once the table is created it must be introspected into Composite.  
	*   (3) The path to the introspected table is what is provided to auditLogger via the &apos;auditTablePath&apos; attribute.	
	*********************************************************************
		ORACLE:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           	NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      	VARCHAR2(255),  -- The name of the organization.
            APPLICATION_NAME       	VARCHAR2(255),  -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         	VARCHAR2(255),  -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         	VARCHAR2(255),  -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          	VARCHAR2(2048), -- The name of the DV resource.
            MODULE_NAME            	VARCHAR2(255),  -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      	VARCHAR2(10),   -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             	TIMESTAMP(9),   -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           	VARCHAR2(2000)  -- The message to be inserted from the application.
        );

		SQL SERVER:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           	NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      	VARCHAR(255),   -- The name of the organization.
            APPLICATION_NAME       	VARCHAR(255),   -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         	VARCHAR(255),   -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         	VARCHAR(255),   -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          	VARCHAR(2048),  -- The name of the DV resource.
            MODULE_NAME            	VARCHAR(255),   -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      	VARCHAR(10),    -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             	DATETIME,       -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           	VARCHAR(2000)   -- The message to be inserted from the application.
        );

		NETEZZA:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           	NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      	VARCHAR(255),   -- The name of the organization.
            APPLICATION_NAME       	VARCHAR(255),   -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         	VARCHAR(255),   -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         	VARCHAR(255),   -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          	VARCHAR(2048),  -- The name of the DV resource.
            MODULE_NAME            	VARCHAR(255),   -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      	VARCHAR(10),    -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             	TIMESTAMP,      -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           	VARCHAR(2000)   -- The message to be inserted from the application.
        );</annotation>
  <parameters>
    <parameter name="messageText" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed</attribute>
    </parameter>
    <parameter name="attributeList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/LogError" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SendEMail" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="from" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="replyTo" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="to" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="cc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="bcc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="subject" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
      <element name="contentType" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="content" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Content" type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="value" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/conversions/convertYN" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	auditLoggerV2:

	The auditLogger is meant to be generic implementation for audit logging purposes. 
	This version does not use a vector for input of attributes as there is a memory leak associate with using a vector as an input variable.
 
	Input:
		messageText			- The message to log, print, insert into database or email.
		attributeList		- Name/Value pair list containing only the necessary attributes for audit logging.
								The &quot;Name&quot; portion of the Name/Value pair attribute list is mandatory and the name is provided below with an explanation.

		-- Example of how to declare the necessary variables for attribute list within the invoking procedure:
		DECLARE attributeList		LONGVARCHAR;

		-- Example of how to set the attribute vector to be passed into auditLogger()
		SET attributeList =  
			-- Repeat this &lt;attribute&gt; for multiple entries as needed
			&apos;&lt;attribute&gt;&lt;name&gt;debug&lt;/name&gt;&lt;value&gt;&apos;||NVL(debug,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
			&apos;&lt;attribute&gt;&lt;name&gt;loggingType&lt;/name&gt;&lt;value&gt;&apos;||NVL(loggingType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
			&apos;&lt;attribute&gt;&lt;name&gt;notificationType&lt;/name&gt;&lt;value&gt;&apos;||NVL(notificationType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
			&apos;&apos;;

			-- 				Name			Value																						Description
		SET attributeList =  
			-- General options
			&apos;&lt;attribute&gt;&lt;name&gt;debug&lt;/name&gt;&lt;value&gt;&apos;||NVL(debug,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)|| 								-- Y=debug or N=do not debug
			&apos;&lt;attribute&gt;&lt;name&gt;loggingType&lt;/name&gt;&lt;value&gt;&apos;||NVL(loggingType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||					-- One or more of this list: [LOG, EMAIL, DB, PRINT]
																																		--		LOG - write to the DV log.
																																		--		EMAIL - send an email.
																																		--		DB - insert the message into the AUDI_LOG table. (created and introspected by developer during initialization)
																																		--		PRINT - print to the Studio command line.
			&apos;&lt;attribute&gt;&lt;name&gt;notificationType&lt;/name&gt;&lt;value&gt;&apos;||NVL(notificationType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||			-- One and only one of [ERROR|INFO|DEBUG|AUDIT]
																																		--		ERROR - Output error message with severity level ERROR.
																																		--		AUDIT - Output audit message with severity level INFO.
																																		--		INFO - Output info message with severity level INFO.
																																		--		DEBUG - Output debug message with severity level INFO.
			-- Database logging options
			&apos;&lt;attribute&gt;&lt;name&gt;auditTablePath&lt;/name&gt;&lt;value&gt;&apos;||NVL(auditTablePath,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||				-- The DV path to the AUDIT_LOG table. e.g. /shared/Cache_DB/Cache_Repo/CACHE1/AUDIT_LOG
			&apos;&lt;attribute&gt;&lt;name&gt;sequenceNum&lt;/name&gt;&lt;value&gt;&apos;||NVL(CAST(sequenceNum AS VARCHAR),&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||	-- A sequence number used to correlate multiple messages across different log messages.  
																																		-- This allows a common code base or framework to generate a sequence number and use it across multiple invocations.
			&apos;&lt;attribute&gt;&lt;name&gt;organizationName&lt;/name&gt;&lt;value&gt;&apos;||NVL(organizationName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||			-- The name of the organization which can be used to filter messages. e.g. Mortgage, Operations, CustomerSatisfaction.
			&apos;&lt;attribute&gt;&lt;name&gt;applicationName&lt;/name&gt;&lt;value&gt;&apos;||NVL(applicationName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||			-- The application name that is using DV within the organization which can be used as an additional filter. e.g. HomeLoans, Bankruptcy, etc.
			&apos;&lt;attribute&gt;&lt;name&gt;origUserName&lt;/name&gt;&lt;value&gt;&apos;||NVL(origUserName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||					-- The original user name from the application: format=username@domain.  e.g. user1@ldap or user2@composite
			&apos;&lt;attribute&gt;&lt;name&gt;resourceName&lt;/name&gt;&lt;value&gt;&apos;||NVL(resourceName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||					-- The name of the resource being acted upon such as VIEW_NAME_INCR.
			&apos;&lt;attribute&gt;&lt;name&gt;moduleName&lt;/name&gt;&lt;value&gt;&apos;||NVL(moduleName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||						-- The name of the module or procedure that is invoking the auditLoger which provides context for the code such as RefreshCache.
			&apos;&lt;attribute&gt;&lt;name&gt;cachekey&lt;/name&gt;&lt;value&gt;&apos;||NVL(CAST(cachekey AS VARCHAR),&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||			-- The cachekey being used to refresh the cache or 0 if not applicable.  This is especially helpful when invoked from the incremental refresh scripts.

			-- Send email options
			&apos;&lt;attribute&gt;&lt;name&gt;emailFrom&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailFrom,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||						-- The address the message is from.  NULL causes use of the server&apos;s configured &quot;from&quot; address.  Only NULL is supported in this release.
			&apos;&lt;attribute&gt;&lt;name&gt;emailReplyTo&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailReplyTo,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||					-- The address to place in the replyTo field of the message.
			&apos;&lt;attribute&gt;&lt;name&gt;emailTo&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailTo,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||							-- A comma separated list of e-mail addresses.
			&apos;&lt;attribute&gt;&lt;name&gt;emailCC&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailCC,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||							-- A comma separated list of e-mail addresses.
			&apos;&lt;attribute&gt;&lt;name&gt;emailBCC&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailBCC,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||							-- A comma separated list of e-mail addresses.
			&apos;&lt;attribute&gt;&lt;name&gt;emailSubject&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailSubject,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||					-- The message subject.
			&apos;&lt;attribute&gt;&lt;name&gt;emailContentType&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailContentType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||			-- This can be &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
			&apos;&apos;;

	Output:
		None

	Exceptions:
		Will throw exceptions if the logging is not successful.
		IllegalAttributeNameException: when the attribute name passed is in incorrect.
		IllegalArgumentException: If &quot;from&quot; is not NULL.
		IllegalArgumentException: If any of the address lines are mis-formatted.
		IllegalArgumentException: If there is not at least one &quot;to&quot; address.
		IllegalArgumentException: If there is more than one address in the &quot;replyTo&quot;.
		IllegalArgumentException: If &quot;contentType&quot; is not &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
		IllegalStateException: If the server&apos;s &quot;from&quot; address is not configured.

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	05/09/2019		Mike Tinius			7.0.8			Derived from auditLogger and modified to avoid using a VECTOR as an input parameter as there is a memory leak with vectors as input.
		
	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.


	*********************************************************************
	* Sample DDL syntax for the AUDIT_LOG table.
	* 
	*   (1) Create the AUDIT_LOG table
	*		[Option 1] Execute the DDL manually outside of Composite.
	*		[Option 2] Automate the DDL creation within some sort of framework that will invoke this auditLogger.
	*   (2) Once the table is created it must be introspected into Composite.  
	*   (3) The path to the introspected table is what is provided to auditLogger via the &apos;auditTablePath&apos; attribute.	
	*********************************************************************
		ORACLE:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           	NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      	VARCHAR2(255),  -- The name of the organization.
            APPLICATION_NAME       	VARCHAR2(255),  -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         	VARCHAR2(255),  -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         	VARCHAR2(255),  -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          	VARCHAR2(2048), -- The name of the DV resource.
            MODULE_NAME            	VARCHAR2(255),  -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      	VARCHAR2(10),   -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             	TIMESTAMP(9),   -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           	VARCHAR2(2000)  -- The message to be inserted from the application.
        );

		SQL SERVER:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           	NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      	VARCHAR(255),   -- The name of the organization.
            APPLICATION_NAME       	VARCHAR(255),   -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         	VARCHAR(255),   -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         	VARCHAR(255),   -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          	VARCHAR(2048),  -- The name of the DV resource.
            MODULE_NAME            	VARCHAR(255),   -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      	VARCHAR(10),    -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             	DATETIME,       -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           	VARCHAR(2000)   -- The message to be inserted from the application.
        );

		NETEZZA:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           	NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      	VARCHAR(255),   -- The name of the organization.
            APPLICATION_NAME       	VARCHAR(255),   -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         	VARCHAR(255),   -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         	VARCHAR(255),   -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          	VARCHAR(2048),  -- The name of the DV resource.
            MODULE_NAME            	VARCHAR(255),   -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      	VARCHAR(10),    -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             	TIMESTAMP,      -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           	VARCHAR(2000)   -- The message to be inserted from the application.
        );
*/
PROCEDURE auditLoggerV2(
	IN messageText 		LONGVARCHAR,			-- The message to log.
	IN attributeList	LONGVARCHAR				-- The attributes that describe what and how to log the message.
												-- Format must adhere to the following: |~|attributeName=attributeValue|~|attributeName=attributeValue|~|...
)
BEGIN INDEPENDENT TRANSACTION
	DECLARE thisModuleName			VARCHAR DEFAULT &apos;auditLoggerV3&apos;;
    DECLARE localDebug 				VARCHAR(1) 	DEFAULT &apos;N&apos;;
	DECLARE localSequenceNum		BIGINT;
    DECLARE localMessageText 		LONGVARCHAR;
	DECLARE printSize				INTEGER DEFAULT 63900;
    DECLARE outputMessageText 		LONGVARCHAR;
	DECLARE localLoggingType 		VARCHAR DEFAULT &apos;LOG&apos;;
	DECLARE localNotificationType 	VARCHAR DEFAULT &apos;INFO&apos;;
	DECLARE localModuleName			VARCHAR;
	DECLARE defaultMessageLength 	INTEGER DEFAULT 4000;
	DECLARE auditTableColumnList	VARCHAR DEFAULT &apos;cachekey, SEQUENCE_NUM, ORGANIZATION_NAME, APPLICATION_NAME, CURR_USER_NAME, ORIG_USER_NAME, RESOURCE_NAME, MODULE_NAME, NOTIFICATION_TYPE, AUDIT_TIME, MESSAGE_TEXT&apos;; 
	DECLARE messageColumn			VARCHAR DEFAULT &apos;MESSAGE_TEXT&apos;;
	DECLARE messageLengthStr		VARCHAR;
 	DECLARE currUserName			VARCHAR;
 	DECLARE userDomain				VARCHAR;
	DECLARE sqlStatement			LONGVARCHAR;
	DECLARE resourceExists			BOOLEAN;
	DECLARE i						INTEGER;
	DECLARE resourceNotExist		EXCEPTION;
	DECLARE sequenceNum				BIGINT;  		-- sequence number used to correlate multiple messages across different inserts.
	DECLARE organizationName		VARCHAR; 		-- e.g. Mortgage, Operations
	DECLARE applicationName			VARCHAR; 		-- e.g. HomeLoans, Bankruptcy, etc.
	DECLARE origUserName			VARCHAR;		-- original user name from the application: format=username@domain.  e.g. user@ldap or user@composite
	DECLARE resourceName			VARCHAR(4096); 	-- e.g. Name of the resource being acted upon such as VIEW_NAME_INCR
	DECLARE moduleName 				VARCHAR; 		-- e.g. RefreshCache - the name of the procedure that calls this method
	DECLARE cachekey				BIGINT; 		-- e.g. the cachekey being used to refresh the cache or 0 if not applicable
	DECLARE loggingType 			VARCHAR; 		-- one or more of [LOG, EMAIL, DB, PRINT]
	DECLARE notificationType 		VARCHAR; 		-- one and only one of [ERROR, INFO, DEBUG, AUDIT]
	DECLARE auditTablePath			VARCHAR(4096); 	-- /shared/Cache_DB/Cache_Repo/COMP6_CACHE1/AUDIT_LOG
	DECLARE debug 					VARCHAR; 		-- Y or N
	DECLARE emailFrom				VARCHAR(4096);	-- The address the message is from.  NULL causes use of the server&apos;s configured &quot;from&quot; address.  Only NULL is supported in this release.
	DECLARE emailReplyTo			VARCHAR(4096);	-- The address to place in the replyTo field of the message.
	DECLARE emailTo					VARCHAR(4096);	-- A comma separated list of e-mail addresses.
	DECLARE emailCC					VARCHAR(4096);	-- A comma separated list of e-mail addresses.
	DECLARE emailBCC				VARCHAR(4096);	-- A comma separated list of e-mail addresses.
	DECLARE emailSubject			VARCHAR(4096);	-- The message subject.
	DECLARE emailContentType		VARCHAR;		-- This can be &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
	DECLARE environmentName			VARCHAR(4096);	-- The name used to save the default message length into the environment memory.
	DECLARE attrName				VARCHAR;
	DECLARE attrValue				LONGVARCHAR;
	DECLARE attrEntry				LONGVARCHAR;
	DECLARE numEntries				INTEGER DEFAULT 0;
 	DECLARE pos1, pos2				INTEGER;
	DECLARE pos3, pos4				INTEGER;
	DECLARE len						INTEGER;
	DECLARE IllegalAttributeNameException	EXCEPTION;

	-- Assign attributes to variables
	IF (attributeList IS NOT NULL AND LENGTH(TRIM(attributeList)) &gt; 0) THEN
		SET pos1 = INSTR(attributeList, &apos;&lt;attribute&gt;&apos;);
		SET pos2 = INSTR(attributeList, &apos;&lt;/attribute&gt;&apos;);
		WHILE (pos1 &gt; 0 and pos2 &gt; 0) DO
			SET numEntries = numEntries + 1;
			SET len = LENGTH(&apos;&lt;attribute&gt;&apos;);
			SET attrEntry = TRIM(SUBSTRING(attributeList, pos1+len, pos2-(pos1+len)));

			-- Extract the name
			SET pos3 = INSTR(attrEntry, &apos;&lt;name&gt;&apos;);
			SET pos4 = INSTR(attrEntry, &apos;&lt;/name&gt;&apos;);
			SET attrName = null;
			IF (pos3 = 0 or pos4 = 0) THEN
				RAISE IllegalAttributeNameException VALUE &apos;attribute[&apos;||numEntries||&apos;]/name may not be blank or empty.&apos;;
			ELSE
				SET len = LENGTH(&apos;&lt;name&gt;&apos;);
				SET attrName = TRIM(SUBSTRING(attrEntry, pos3+len, pos4-(pos3+len)));
				IF (LENGTH(TRIM(attrName)) = 0) THEN
					RAISE IllegalAttributeNameException VALUE &apos;attribute[&apos;||numEntries||&apos;]/name may not be blank or empty.&apos;;
				END IF;
			END IF;
			IF (UPPER(localDebug) = &apos;Y&apos;) THEN
				CALL PRINT(thisModuleName||&apos; : attribute[&apos;||numEntries||&apos;]/name=[&apos;||NVL(attrName,&apos;null&apos;)||&apos;]&apos;);
			END IF;

			-- Extract the value
			SET pos3 = INSTR(attrEntry, &apos;&lt;value&gt;&apos;);
			SET pos4 = INSTR(attrEntry, &apos;&lt;/value&gt;&apos;);
			SET attrValue = null;
			IF (pos3 &gt; 0 AND pos4 &gt; 0) THEN
				SET len = LENGTH(&apos;&lt;value&gt;&apos;);
				SET attrValue = TRIM(SUBSTRING(attrEntry, pos3+len, pos4-(pos3+len)));
			END IF;
			-- If the word NULL was passed in then set the column annotation to blank to destroy the annotation that is there.
			IF (UPPER(attrValue) = &apos;NULL&apos;) THEN
				SET attrValue = null;
			END IF;
			IF (UPPER(localDebug) = &apos;Y&apos;) THEN
				CALL PRINT(SUBSTRING(thisModuleName||&apos; : attribute[&apos;||numEntries||&apos;]/value=[&apos;||NVL(attrValue,&apos;null&apos;)||&apos;]&apos;,1,printSize));
			END IF;

			IF (attrName IS NOT NULL AND LENGTH(attrName) &gt; 0) THEN
				CASE attrName
					WHEN &apos;debug&apos; 					THEN CALL /shared/ASAssets/Utilities/conversions/convertYN(attrValue, debug);
					WHEN &apos;loggingType&apos; 				THEN SET loggingType = CAST(attrValue AS VARCHAR(255));
					WHEN &apos;notificationType&apos; 		THEN SET notificationType = CAST(attrValue AS VARCHAR(255));
					-- Database logging options
					WHEN &apos;sequenceNum&apos; 				THEN SET sequenceNum = CAST(attrValue AS BIGINT);
					WHEN &apos;organizationName&apos; 		THEN SET organizationName = CAST(attrValue AS VARCHAR(255));
					WHEN &apos;applicationName&apos; 			THEN SET applicationName = CAST(attrValue AS VARCHAR(255));
					WHEN &apos;origUserName&apos; 			THEN SET origUserName = CAST(attrValue AS VARCHAR(255));
					WHEN &apos;resourceName&apos; 			THEN SET resourceName = CAST(attrValue AS VARCHAR(4096));
					WHEN &apos;moduleName&apos; 				THEN SET moduleName = CAST(attrValue AS VARCHAR(255));
					WHEN &apos;cachekey&apos; 				THEN SET cachekey = CAST(attrValue AS BIGINT);
					WHEN &apos;auditTablePath&apos; 			THEN SET auditTablePath = CAST(attrValue AS VARCHAR(4096));
					-- Email logging options
					WHEN &apos;emailFrom&apos; 				THEN SET emailFrom = CAST(attrValue AS VARCHAR(4096));
					WHEN &apos;emailReplyTo&apos; 			THEN SET emailReplyTo = CAST(attrValue AS VARCHAR(4096));
					WHEN &apos;emailTo&apos; 					THEN SET emailTo = CAST(attrValue AS VARCHAR(4096));
					WHEN &apos;emailCC&apos; 					THEN SET emailCC = CAST(attrValue AS VARCHAR(4096));
					WHEN &apos;emailBCC&apos; 				THEN SET emailBCC = CAST(attrValue AS VARCHAR(4096));
					WHEN &apos;emailSubject&apos; 			THEN SET emailSubject = CAST(attrValue AS VARCHAR(4096));
					WHEN &apos;emailContentType&apos; 		THEN SET emailContentType = CAST(attrValue AS VARCHAR(255));
					ELSE
						RAISE IllegalAttributeNameException VALUE &apos;Attribute name is unknown.  name=&apos;||NVL(attrName,&apos;null&apos;);
				END CASE;
			END IF; 

			-- Get the next column entry
			SET pos1 = INSTR(attributeList, &apos;&lt;attribute&gt;&apos;, pos1+1);
			SET pos2 = INSTR(attributeList, &apos;&lt;/attribute&gt;&apos;, pos2+1);
		END WHILE;
	END IF;

	SET localSequenceNum = CAST(NVL(CAST(sequenceNum AS VARCHAR), &apos;0&apos;) AS BIGINT);
	SET localModuleName = TRIM(NVL(moduleName, &apos; &apos;));

	-- Get the user context:  user name and domain
	call /lib/util/GetProperty(&apos;CURRENT_USER_NAME&apos;, currUserName);
	call /lib/util/GetProperty(&apos;CURRENT_USER_DOMAIN&apos;, userDomain);
	SET currUserName = currUserName ||&apos;@&apos;||userDomain;

    IF (localDebug = &apos;N&apos; AND (debug IS NOT NULL or LENGTH(debug) &gt; 0)) then
        SET localDebug = UPPER(debug);
    END IF;
	IF loggingType IS NOT NULL THEN
		SET localLoggingType = loggingType;
	END IF;
	IF notificationType IS NOT NULL THEN
		SET localNotificationType = notificationType;
	END IF;
	IF (LENGTH(localModuleName) &gt; 0) THEN
		SET localModuleName = localModuleName || &apos;: &apos;;
	END IF;

	/***************************************
	 * OUTPUT TO LOG OR LOGERROR
	 ***************************************/
	IF (POSITION(&apos;LOG&apos; IN localLoggingType) &gt; 0 AND localNotificationType IN (&apos;DEBUG&apos;, &apos;ERROR&apos;,&apos;INFO&apos;, &apos;AUDIT&apos;)) THEN
		-- Concat the local message text with additional values.
		SET localMessageText = &apos;&apos;;
		IF (localSequenceNum IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos;Seq#=&apos; || CAST(localSequenceNum AS VARCHAR);
		END IF;
		IF (origUserName IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; origUserName=&apos; || origUserName;
		END IF;
		IF (resourceName IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; ResName=&apos; || resourceName;
		END IF;
		IF (cachekey IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; cachekey=&apos; || CAST(cachekey AS VARCHAR);
		END IF;
		SET localMessageText = localMessageText || &apos; msg=&apos; || TRIM(NVL(messageText, &apos;null&apos;));

		IF (LENGTH(localMessageText) &gt; defaultMessageLength) THEN
		   SET localMessageText = SUBSTRING(localMessageText, 1, defaultMessageLength);
		END IF;
		SET outputMessageText = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || localMessageText;
		IF (localNotificationType IN (&apos;ERROR&apos;)) THEN
			-- Output error message to log file with severity level ERROR.
			CALL LogError (outputMessageText);
		ELSE
			-- Output error message to log file with severity level INFO.
			CALL LOG	  (outputMessageText);
		END IF;
	END IF;

	/***************************************
	 * OUTPUT TO PRINT COMMAND LINE
	 ***************************************/
	IF (POSITION(&apos;PRINT&apos; in localLoggingType) &gt; 0 AND localNotificationType IN (&apos;DEBUG&apos;, &apos;ERROR&apos;,&apos;INFO&apos;, &apos;AUDIT&apos;)) THEN
		-- Concat the local message text with additional values.
		SET localMessageText = &apos;&apos;;
		IF (localSequenceNum IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos;Seq#=&apos; || CAST(localSequenceNum AS VARCHAR);
		END IF;
		IF (origUserName IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; origUserName=&apos; || origUserName;
		END IF;
		IF (resourceName IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; ResName=&apos; || resourceName;
		END IF;
		IF (cachekey IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; cachekey=&apos; || CAST(cachekey AS VARCHAR);
		END IF;
		SET localMessageText = localMessageText || &apos; msg=&apos; || TRIM(NVL(messageText, &apos;null&apos;));

		IF (LENGTH(localMessageText) &gt; defaultMessageLength) THEN
		   SET localMessageText = SUBSTRING(localMessageText, 1, defaultMessageLength);
		END IF;
		SET outputMessageText = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || localMessageText;
		CALL PRINT(SUBSTRING(outputMessageText,1,printSize));
	END IF;

	/***************************************
	 * OUTPUT TO EMAIL
	 ***************************************/
	IF (POSITION(&apos;EMAIL&apos; in localLoggingType) &gt; 0 AND localNotificationType IN (&apos;DEBUG&apos;, &apos;ERROR&apos;, &apos;INFO&apos;, &apos;AUDIT&apos;)) THEN
		-- Concat the local message text with additional values.
		SET localMessageText = &apos;&apos;;
		IF (localSequenceNum IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos;Seq#=&apos; || CAST(localSequenceNum AS VARCHAR);
		END IF;
		IF (origUserName IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; origUserName=&apos; || origUserName;
		END IF;
		IF (resourceName IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; ResName=&apos; || resourceName;
		END IF;
		IF (cachekey IS NOT NULL) THEN
			SET localMessageText = localMessageText || &apos; cachekey=&apos; || CAST(cachekey AS VARCHAR);
		END IF;
		SET localMessageText = localMessageText || &apos; msg=&apos; || TRIM(NVL(messageText, &apos;null&apos;));

		IF (LENGTH(localMessageText) &gt; defaultMessageLength) THEN
		   SET localMessageText = SUBSTRING(localMessageText, 1, defaultMessageLength);
		END IF;
		SET outputMessageText = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || localMessageText;

		-- Validate email attributes
		SET emailFrom = NULL; -- The current rule is for emailFrom to be set to NULL or the server will throw an exception.
		IF (emailContentType != &apos;TEXT_PLAIN&apos; AND emailContentType != &apos;TEXT_HTML&apos;) THEN
			SET emailContentType = &apos;TEXT_PLAIN&apos;;
		END IF;
		IF (emailContentType IS NULL OR LENGTH(emailContentType) = 0) THEN
			SET emailContentType = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || &apos; DV Generated Email.&apos;;
		END IF;

		-- Sends an e-mail message with the specified headers and content.
		CALL /lib/util/SendEMail(
				emailFrom,			-- The address the message is from.  NULL causes use of the server&apos;s configured &quot;from&quot; address.  Only NULL is supported in this release.
				emailReplyTo,		-- The address to place in the replyTo field of the message.
				emailTo,			-- A comma separated list of e-mail addresses.
				emailCC,			-- A comma separated list of e-mail addresses.
				emailBCC,			-- A comma separated list of e-mail addresses.
				emailSubject,		-- The message subject.
				emailContentType,	-- This can be &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
				outputMessageText	-- The message body.
			);
	END IF;

	/***************************************
	 * OUTPUT TO DB AUDIT_LOG TABLE
	 ***************************************/
	IF (POSITION(&apos;DB&apos; in localLoggingType) &gt; 0 AND localNotificationType IN (&apos;DEBUG&apos;, &apos;ERROR&apos;, &apos;INFO&apos;, &apos;AUDIT&apos;)) THEN
		SET localMessageText = TRIM(NVL(messageText, &apos; &apos;));

		-- Make sure the database AUDIT_TABLE exists before trying to write to it
		call /lib/resource/ResourceExists(auditTablePath, &apos;TABLE&apos;, null, resourceExists);
		IF (NOT resourceExists) THEN
			RAISE resourceNotExist VALUE &apos;The audit log table path provided does not exist.  auditTablePath=&apos;||NVL(auditTablePath, &apos; &apos;);
		END if;

		-- If the defaultMessageLength is stored in memory for this audit table path then use it
		-- Use the audit table path with . notation to get the defaultMessageLength length from memory
		SET environmentName = SUBSTRING(REPLACE(REPLACE(auditTablePath,&apos;/&apos;, &apos;.&apos;), &apos;&quot;&apos;, &apos;&apos;), 2);
		CALL /lib/util/GetEnvironment(environmentName, messageLengthStr);
		IF (UPPER(messageLengthStr) = &apos;NULL&apos; OR UPPER(messageLengthStr) = &apos;[NULL]&apos;) THEN
			SET messageLengthStr = null;
		END IF;
		IF (messageLengthStr IS NOT NULL) THEN
			SET defaultMessageLength = CAST(messageLengthStr AS INTEGER);
			IF (localDebug = &apos;Y&apos;) THEN
				CALL PRINT(SUBSTRING(thisModuleName||&apos; : GetEnvironment: ********** &apos;||environmentName||&apos;=&apos;||NVL(messageLengthStr,&apos;null&apos;),1,printSize));
			END IF;
		ELSE
			-- Determine the column length of the message text field so that the message length can be substringed dynamically.
			tableLoop:
			FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(auditTablePath, &apos;TABLE&apos;) DO
				IF (r.columnName = messageColumn) THEN
					CALL /shared/ASAssets/Utilities/string/extractBiDelimitedText(r.columnType, &apos;VARCHAR&apos;, &apos;(&apos;, &apos;)&apos;, 1, 1, 0, messageLengthStr);
					SET defaultMessageLength = CAST(messageLengthStr AS INTEGER);
					LEAVE tableLoop;
				END IF;
			END FOR;
			-- Use the audit table path with . notation to store the defaultMessageLength length in memory
			IF (defaultMessageLength IS NOT NULL) THEN
				IF (localDebug = &apos;Y&apos;) THEN
					CALL PRINT(SUBSTRING(thisModuleName||&apos; : SetEnvironment: ********** &apos;||environmentName||&apos;=&apos;||NVL(CAST(defaultMessageLength AS VARCHAR),&apos;null&apos;),1,printSize));
				END IF;
				CALL /lib/util/SetEnvironment(environmentName ,CAST(defaultMessageLength AS VARCHAR));
			END IF;
		END IF;
		-- For every single quote add another to escape it so that the dynamic sql will execute
		set localMessageText = REPLACE(localMessageText, &apos;&apos;&apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;);
		IF (POSITION(&apos;&apos;&apos;&apos; in localMessageText) &gt; 0) THEN
			set localMessageText = REPLACE(localMessageText, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
		END IF;

		IF (LENGTH(localMessageText) &gt; defaultMessageLength) THEN
			SET localMessageText = SUBSTRING(localMessageText, 1, defaultMessageLength);
			-- Remove the odd single quote from the end as it will cause an error inserting.
			-- All single quotes must be doubled within the string for the dynamic SQL insert to work.
			-- The problem here is that the length of the string has been exceeded so this is a precaution.
			-- The best approach is simply to remove all single quotes from the end of the line.
			SET i = LENGTH(localMessageText);
			msgLoop:
			WHILE (i &gt; 0) DO
				IF (SUBSTR(localMessageText, i, 1) != &apos;&apos;&apos;&apos;) THEN
					leave msgLoop;
				END IF;
				SET i = i - 1;
			END WHILE;
			SET localMessageText = SUBSTRING(localMessageText, 1, i);
		END IF;
		SET localMessageText = 
				NVL(cachekey, 0)||&apos;, &apos;&apos;&apos;||
				localSequenceNum||&apos;&apos;&apos;, &apos;&apos;&apos;||
				TRIM(NVL(organizationName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
				TRIM(NVL(applicationName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
				TRIM(NVL(currUserName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
				TRIM(NVL(origUserName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
				TRIM(NVL(resourceName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
				TRIM(NVL(moduleName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
				TRIM(NVL(localNotificationType,&apos; &apos;))||&apos;&apos;&apos;, &apos;||
				&apos;CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP), &apos;&apos;&apos; 
				|| localMessageText||&apos;&apos;&apos;&apos;;
		SET outputMessageText = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || localMessageText;

		-- Create the dynamic sql statement and handle any null values
		--	 Table Path example: /shared/Cache_DB/Cache_Repo/COMP6_CACHE1/AUDIT_LOG
		call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(auditTablePath, null, auditTablePath);
		set sqlStatement = &apos;INSERT INTO &apos;||auditTablePath||&apos;
		(&apos;||auditTableColumnList||&apos;) 
		VALUES (&apos;|| localMessageText ||&apos;)&apos;;
		EXECUTE IMMEDIATE sqlStatement;
	END IF;        

	IF (localDebug = &apos;Y&apos; AND outputMessageText IS NOT NULL) THEN
		CALL PRINT(SUBSTRING(thisModuleName||&apos; : &apos;||outputMessageText,1,printSize));
	END IF;

END</attribute>
  <attribute name="creationDate" type="LONG">1389654139807</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">nbklsvb</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564746460385</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/237</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/320</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>LogError</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/351</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/489</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/221</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/323</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/438</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/423</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getConstant" path="/shared/ASAssets/Utilities/string/getConstant" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>getConstant:

	DEPRECATED: use getConstantV2 going forward.

	This procedure gets a constant value from a dynamic constant path.  All constants must be of type VARCHAR.  
	If the value is actually an integer THEN the application must take care of casting to the proper value.

	Input:
		constantPath - The path to the constants file ending with procedure parenthesis ().                                                                                                                                                 i.e. /shared/PSAsSETs/Utilities/documentation/constants()
		constantName - The name of the constant.
 
	Output:
		outValue - The value of the constant

	Exceptions:  
		/lib/util/System.IllegalArgumentException - Exception IF constantPath is not valid (null or resource not found).

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2014.4		08/28/2014		Mike Tinius			6.2.6			Created new
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.301	08/01/2019		Mike Tinius			7.0.8			2019.301: Added CAST(constantName AS LONGVARCHAR) in projection to avoid exception when a constant is not a character type.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="constantName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="outValue" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getConstant:

	DEPRECATED: use getConstantV2 going forward.

	This procedure gets a constant value from a dynamic constant path.  All constants must be of type VARCHAR.  
	If the value is actually an integer THEN the application must take care of casting to the proper value.

	Input:
		constantPath - The path to the constants file ending with procedure parenthesis ().                                                                                                                                                 i.e. /shared/PSAsSETs/Utilities/documentation/constants()
		constantName - The name of the constant.
 
	Output:
		outValue - The value of the constant

	Exceptions:  
		/lib/util/System.IllegalArgumentException - Exception IF constantPath is not valid (null or resource not found).

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2014.4		08/28/2014		Mike Tinius			6.2.6			Created new
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.301	08/01/2019		Mike Tinius			7.0.8			2019.301: Added CAST(constantName AS LONGVARCHAR) in projection to avoid exception when a constant is not a character type.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getConstant(
	IN constantPath		VARCHAR(4000),
	IN constantName		VARCHAR,
	OUT outValue		LONGVARCHAR
)
BEGIN
	DECLARE moduleName			VARCHAR DEFAULT &apos;getConstant&apos;;
	DECLARE debug				CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE contsantPath_		VARCHAR(4000) DEFAULT constantPath;
	DECLARE sqlStatement		VARCHAR(4000);
	DECLARE result				CURSOR (textVal LONGVARCHAR);
	DECLARE sqlProjection		VARCHAR(4000);
	DECLARE sqlFrom				VARCHAR(4000);
	DECLARE resExists			BOOLEAN;
	DECLARE ex					EXCEPTION;

	IF (contsantPath_ IS NULL OR LENGTH(contsantPath_) = 0) THEN
		RAISE System.IllegalArgumentException VALUE &apos;The parameter &quot;constantsPath&quot; is null or empty.  Please provide a valid path.&apos;;
	END IF;
	IF (constantName IS NULL OR LENGTH(constantName) = 0) THEN
		RAISE System.IllegalArgumentException VALUE &apos;The parameter &quot;constantName&quot; is null or empty.  Please provide a valid constant.&apos;;
	END IF;
	CALL /lib/resource/ResourceExists(contsantPath_, &apos;PROCEDURE&apos;, null, resExists);
	IF (NOT resExists) THEN
		RAISE System.IllegalArgumentException VALUE &apos;The &quot;constantsPath=[&apos;||TRIM(NVL(contsantPath_, &apos; &apos;))||&apos;]&quot; does not exist.  Please provide a valid path.&apos;;
	END IF;

	-- Set up the sql projection list
	IF (constantName IS NOT NULL AND LENGTH(&apos;|&apos;||constantName||&apos;|&apos;) &gt; 2) THEN
		SET sqlProjection = &apos;CAST(&apos;||TRIM(constantName)||&apos; AS LONGVARCHAR)&apos;;
	ELSE
		SET sqlProjection = &apos;null&apos;;
	END IF;
	-- Set up the SQL from clause
	IF (contsantPath_ IS NOT NULL AND LENGTH(&apos;|&apos;||contsantPath_||&apos;|&apos;) &gt; 2) THEN
		CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(contsantPath_,null, sqlFrom);
		SET sqlFrom = TRIM(sqlFrom);
		-- Append procedure () at the end of the path IF it does not exist.
		IF (POSITION(&apos;()&apos; IN contsantPath_) = 0) THEN
			SET sqlFrom = sqlFrom || &apos;()&apos;;
		END IF;
	END IF;

	-- Set up the SQL statement
	SET sqlStatement = &apos;select &apos;|| sqlProjection || &apos; from &apos; || sqlFrom;
	IF (UPPER(debug) = &apos;Y&apos;) THEN
		call print(&apos;SQL:&apos;||sqlStatement);
	END IF;

	SET outValue = null;
	OPEN result FOR sqlStatement;
	FOR r AS result DO
		SET outValue = r.textVal;
	END FOR;
END
</attribute>
  <attribute name="creationDate" type="LONG">1409259010734</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564692390417</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/57</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/60</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/64</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/86</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
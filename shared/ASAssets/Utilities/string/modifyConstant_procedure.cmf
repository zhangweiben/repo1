<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="modifyConstant" path="/shared/ASAssets/Utilities/string/modifyConstant" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>modifyConstants:

	This script is used to modify a Constants procedure and change values at the time of deployment in order to enable automation.
	This script will work with various constant procedures such as:
		The generate views defaultValues:
			/shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/_scripts/Constants/defaultValues
		The cache framework constants:
			/shared/ASAssets/CacheManagement/CacheFrameworkSample/Oracle_Application/Constants/Constants
		The KPImetrics commonValues:
			/shared/ASAssets/KPImetrics/Configuration/commonValues

	The Constants file is any SQL Script procedure that contains the following formats:
			SET varname = value;
		OR
			DECLARE PUBLIC varname	CONSTANT VARCHAR(4096) DEFAULT &apos;value&apos;;  -- Comment

	This script will search for &quot;SET varname &quot; or &quot;DECLARE PUBLIC varname &quot; in the script text in order to modify the value.  
	The new value that is passed in is used to modify the old value that occurs between the &apos;=&apos; and &apos;;&apos; or &apos;DEFAULT&apos; and &apos;;&apos;.
	If the original value has opening and closing single quotes then the new value must also have them.  The script will detect if the old value has the single quotes
		and add them to the new value if the new value does not have them.
	For example a Constants procedure may have many variables set but we are only interested in setting one of the variables which will be uniquely defined
	within the context of the procedure.  Example:
			SET EnvironmentType					= &apos;DEV&apos;;
		OR
			DECLARE PUBLIC EnvironmentType	CONSTANT VARCHAR(4096) DEFAULT &apos;DEV&apos;;  -- Comment

	In the above example the objective is to search for the constantsName=EnvironmentType and replace the value with constantsValue=&apos;UAT&apos;
	Notice that the value contains all necessary surrounding quotes.  The chart below shows how to escape values such as single and double quotes if necessary.

	The following values that are passed in may be escaped for the values passed in by the variable constantsValue:
		Description		Value		Escaped Value
		quote 			(&quot;) 		&quot; 
		apostrophe 		(&apos;) 		&apos; 
		ampersand		(&amp;)			&amp;
		less than 		(&lt;) 		&lt; 
		greater than 	(&gt;) 		&gt; 

	INPUT:
		constantsPath 	- Path to the application constants procedure.
		constantsName 	- The constants name of the name/value pair to modify
		constantsValue 	- The constants value of the name/value pair to modify. Values are modified between the = and ;
						  Values must contain all single quotes around the data values if applicable.

	OUTPUT:
		none

	EXCEPTIONS:
		ex - throws an exception if anything goes wrong

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2014.4		10/06/2014		Mike Tinius			6.2.6			Created new in order to support automated deployment. 
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
																	Added ability to modify DECLARE PUBLIC statements in addition to the existing SET variable_name =  statements.
	2019.301	07/26/2019		Mike Tinius			7.0.8			Modified procedure to search for DECLARE PUBLIC or SET variable_name using a normalized script where spaces are reduced to insure locating the text.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="constantsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="constantsName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantsValue" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getScriptText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/server/getServerAttribute" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="attributePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="keyValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/unescapeXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* modifyConstants:

	This script is used to modify a Constants procedure and change values at the time of deployment in order to enable automation.
	This script will work with various constant procedures such as:
		The generate views defaultValues:
			/shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/_scripts/Constants/defaultValues
		The cache framework constants:
			/shared/ASAssets/CacheManagement/CacheFrameworkSample/Oracle_Application/Constants/Constants
		The KPImetrics commonValues:
			/shared/ASAssets/KPImetrics/Configuration/commonValues

	The Constants file is any SQL Script procedure that contains the following formats:
			SET varname = value;
		OR
			DECLARE PUBLIC varname	CONSTANT VARCHAR(4096) DEFAULT &apos;value&apos;;  -- Comment

	This script will search for &quot;SET varname &quot; or &quot;DECLARE PUBLIC varname &quot; in the script text in order to modify the value.  
	The new value that is passed in is used to modify the old value that occurs between the &apos;=&apos; and &apos;;&apos; or &apos;DEFAULT&apos; and &apos;;&apos;.
	If the original value has opening and closing single quotes then the new value must also have them.  The script will detect if the old value has the single quotes
		and add them to the new value if the new value does not have them.
	For example a Constants procedure may have many variables set but we are only interested in setting one of the variables which will be uniquely defined
	within the context of the procedure.  Example:
			SET EnvironmentType					= &apos;DEV&apos;;
		OR
			DECLARE PUBLIC EnvironmentType	CONSTANT VARCHAR(4096) DEFAULT &apos;DEV&apos;;  -- Comment

	In the above example the objective is to search for the constantsName=EnvironmentType and replace the value with constantsValue=&apos;UAT&apos;
	Notice that the value contains all necessary surrounding quotes.  The chart below shows how to escape values such as single and double quotes if necessary.

	The following values that are passed in may be escaped for the values passed in by the variable constantsValue:
		Description		Value		Escaped Value
		quote 			(&quot;) 		&quot; 
		apostrophe 		(&apos;) 		&apos; 
		ampersand		(&amp;)			&amp;
		less than 		(&lt;) 		&lt; 
		greater than 	(&gt;) 		&gt; 

	INPUT:
		constantsPath 	- Path to the application constants procedure.
		constantsName 	- The constants name of the name/value pair to modify
		constantsValue 	- The constants value of the name/value pair to modify. Values are modified between the = and ;
						  Values must contain all single quotes around the data values if applicable.

	OUTPUT:
		none

	EXCEPTIONS:
		ex - throws an exception if anything goes wrong

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2014.4		10/06/2014		Mike Tinius			6.2.6			Created new in order to support automated deployment. 
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
																	Added ability to modify DECLARE PUBLIC statements in addition to the existing SET variable_name =  statements.
	2019.301	07/26/2019		Mike Tinius			7.0.8			Modified procedure to search for DECLARE PUBLIC or SET variable_name using a normalized script where spaces are reduced to insure locating the text.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/  
PROCEDURE modifyConstant(
	IN  constantsPath	 		VARCHAR(4096),	-- Path to the application constants procedure.
	IN  constantsName			VARCHAR,		-- The constants name of the name/value pair to modify
	IN  constantsValue			LONGVARCHAR		-- The constants value of the name/value pair to modify. Values are modified between the = and ;
)

BEGIN
	DECLARE moduleName						VARCHAR DEFAULT &apos;modifyConstant&apos;;
	DECLARE debug							CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE resExists						BOOLEAN;
	DECLARE scriptText						LONGVARCHAR;
	DECLARE scriptTextMod					LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE line		 					LONGVARCHAR;
	DECLARE lineNormalized					LONGVARCHAR;
	DECLARE lineNum							INTEGER DEFAULT 0;
	DECLARE pos, pos1, pos2					INTEGER;
	DECLARE posBeg, posBegLen				INTEGER;
	DECLARE posEnd							INTEGER;
	DECLARE oldValue						LONGVARCHAR;
	DECLARE newValue						LONGVARCHAR;
	DECLARE begLine							LONGVARCHAR;
	DECLARE endLine							LONGVARCHAR;
	DECLARE constantFound					BOOLEAN DEFAULT FALSE;
	DECLARE igrnoreTrailingSpaces			BOOLEAN;
	DECLARE igrnoreTrailingSpacesAttribute	VARCHAR DEFAULT &apos;/server/sql/language/ignoreTrailingSpaces&apos;;
	DECLARE resultAttr						VARCHAR;
	DECLARE success							BIT;
	DECLARE createResponse 					XML;
	DECLARE faultResponse					XML;
	DECLARE ex								EXCEPTION;

	-- Make sure the resource exists
	CALL /lib/resource/ResourceExists(constantsPath, &apos;PROCEDURE&apos;, NULL, resExists);
	IF (resExists AND constantsName IS NOT NULL AND LENGTH(&apos;|&apos;||constantsName||&apos;|&apos;) &gt; 2 AND constantsValue IS NOT NULL AND LENGTH(&apos;|&apos;||constantsValue||&apos;|&apos;) &gt; 2) THEN
		-- Unescape any of the esaped values in constantsValue
		CALL /shared/ASAssets/Utilities/&quot;xml&quot;/unescapeXML(constantsValue, newValue);
		IF (UPPER(debug) = &apos;Y&apos;) THEN
			CALL print(moduleName||&apos; : unescapeXML:  newValue=[&apos;||newValue||&apos;]&apos;);
		END IF;
		-- Get the script text
		CALL /shared/ASAssets/Utilities/repository/getScriptText(constantsPath, &apos;PROCEDURE&apos;, NULL, scriptText);

		-- Get the server attribute trailing spaces setting
		CALL /shared/ASAssets/Utilities/repository/server/getServerAttribute(igrnoreTrailingSpacesAttribute, resultAttr);
		IF (resultAttr IS NULL) THEN
			SET igrnoreTrailingSpaces = true;
		END IF;
		IF (LOWER(resultAttr) = &apos;true&apos; OR LOWER(resultAttr) = &apos;false&apos;) THEN
			SET igrnoreTrailingSpaces = CAST(resultAttr AS BOOLEAN);
		ELSE
			SET igrnoreTrailingSpaces = &apos;true&apos;;
		END IF;

		-- Extract the script text procedure line by line to process it looking for constants to modify.
		FOR r AS SELECT textExpression line FROM /shared/ASAssets/Utilities/string/extractTextList(scriptText, CHR(10), 0,0,0,0,0) DO
			SET lineNum = lineNum + 1;
			SET line = r.line;

			-- Normalize the line in order to find the text without excessive white space [tabs, multiple spaces and carriage returns].
			SET lineNormalized = UPPER(REPLACE(REPLACE(line, CHR(9), &apos; &apos;), CHR(13), &apos;&apos;));
			-- Reduce the number of double spaces to a single space
			IF (igrnoreTrailingSpaces) THEN
				SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(lineNormalized, &apos;  &apos;) INTO pos FROM /services/databases/system/DUAL;
				WHILE (pos &gt; 0) DO
					SET lineNormalized = REPLACE(lineNormalized, &apos;  &apos;, &apos; &apos;);
					SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(lineNormalized, &apos;  &apos;) INTO pos FROM /services/databases/system/DUAL;
				END WHILE;
			ELSE
				SET pos = INSTR(lineNormalized, &apos;  &apos;);
				WHILE (pos &gt; 0) DO
					SET lineNormalized = REPLACE(lineNormalized, &apos;  &apos;, &apos; &apos;);
					SET pos = INSTR(lineNormalized, &apos;  &apos;);
				END WHILE;
			END IF;

			-- Locate the constantsName within the script text.  Use upper case to avoid the &quot;DECLARE PUBLIC VARIABLE_NAME&quot; being in lower case.
			-- FORMAT: DECLARE PUBLIC variable_name	CONSTANT VARCHAR(4096) DEFAULT &apos;some value here&apos;;  -- Comment
			SET pos1 = 0;
			IF (INSTR(lineNormalized, &apos;DECLARE PUBLIC &apos;||UPPER(constantsName)) &gt; 0) THEN
				IF (igrnoreTrailingSpaces) THEN
					SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(lineNormalized, &apos;DECLARE PUBLIC &apos;||UPPER(constantsName)||&apos; &apos;) INTO pos1 FROM /services/databases/system/DUAL;
				ELSE
					SET pos1 = INSTR(lineNormalized, &apos;DECLARE PUBLIC &apos;||UPPER(constantsName)||&apos; &apos;);
				END IF;
			END IF;
			-- Locate the constantsName within the script text.  Use upper case to avoid the &quot;SET variable_name&quot; being in lower case.
			-- Format: SET variable_name	= &apos;x&apos;;
			SET pos2 = 0;
			IF (INSTR(lineNormalized, &apos;SET &apos;||UPPER(constantsName)) &gt; 0) THEN
				IF (igrnoreTrailingSpaces) THEN
					SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(lineNormalized, &apos;SET &apos;||UPPER(constantsName)||&apos; &apos;) INTO pos2 FROM /services/databases/system/DUAL;
				ELSE
					SET pos2 = INSTR(lineNormalized, &apos;SET &apos;||UPPER(constantsName)||&apos; &apos;);
				END IF;
			END IF;

			IF (pos1 &gt; 0 OR pos2 &gt; 0) THEN
				-- Get the actual position of SET or DECLARE in the original line.
				SET pos1 = INSTR(UPPER(line), &apos;DECLARE&apos;);
				SET pos2 = INSTR(UPPER(line), &apos;SET&apos;);
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL print(moduleName||&apos; lineNum=&apos;||lineNum||&apos;  &quot;DECLARE PUBLIC &apos;||constantsName||&apos;&quot; pos1=&apos;||pos1);
					CALL print(moduleName||&apos; lineNum=&apos;||lineNum||&apos;  &quot;SET &apos;||constantsName||&apos;&quot; pos2=&apos;||pos2);
					CALL print(moduleName||&apos; original line=[&apos;||line||&apos;]&apos;);
				END IF;

				-- If the &quot;DECLARE PUBLIC variable_name&quot; exists then continue
				IF (pos1 &gt; 0) THEN
					SET pos = pos1;
					SET posBeg = INSTR(line, &apos;DEFAULT&apos;, pos);
					SET posBegLen = LENGTH(&apos;DEFAULT&apos;);
					SET posEnd = INSTR(line, &apos;;&apos;, pos);

				-- ELSE the &quot;SET variable_name&quot; exists then continue
				ELSE
					SET pos = pos2;
					SET posBeg = INSTR(line, &apos;=&apos;, pos);
					SET posBegLen = LENGTH(&apos;=&apos;);
					SET posEnd = INSTR(line, &apos;;&apos;, pos);
				END IF;

				-- Extract the beginning portion of the line.
				SET begLine = SUBSTRING(line, 1, posBeg+posBegLen-1);
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL print(moduleName||&apos; begLine=[&apos;||begLine||&apos;]&apos;);
				END IF;
				-- Extract the end portion of the line
				SET endLine = SUBSTRING(line, posEnd);
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL  print(moduleName||&apos; endLine=[&apos;||endLine||&apos;]&apos;);
				END IF;
				-- Extract the old value from the line
				SET oldValue = TRIM(SUBSTRING(line, posBeg+posBegLen, posEnd-posBeg-posBegLen));
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL  print(moduleName||&apos; oldValue=[&apos;||oldValue||&apos;]&apos;);
				END IF;
				-- Check for single quotes and add to newValue if needed
				IF (SUBSTRING(oldValue,1,1) = &apos;&apos;&apos;&apos; AND SUBSTRING(oldValue,LENGTH(oldValue),1) = &apos;&apos;&apos;&apos;) THEN
					IF (SUBSTRING(newValue,1,1) &lt;&gt; &apos;&apos;&apos;&apos;) THEN
						-- Add single quotes to the beginning of the newValue
						SET newValue = &apos;&apos;&apos;&apos;||newValue;
					END IF;
					IF (SUBSTRING(newValue,LENGTH(newValue),1) &lt;&gt; &apos;&apos;&apos;&apos;) THEN
						-- Add single quotes to the end of the newValue
						SET newValue = newValue||&apos;&apos;&apos;&apos;;
					END IF;
				END IF;

				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL print(moduleName||&apos; newValue=[&apos;||newValue||&apos;]&apos;);
				END IF;

				-- Rebuild the line by concatenating the beginning, new value and end script portions together.
				SET line = begLine||&apos; &apos;||newValue||endLine;
				SET scriptTextMod = scriptTextMod || line || CHR(10);
				SET constantFound = TRUE;

				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL print(moduleName||&apos; modified line=[&apos;||line||&apos;]&apos;);
				END IF;
			ELSE
				SET scriptTextMod = scriptTextMod || line || CHR(10);
			END IF;
		END FOR;

		IF (NOT constantFound) THEN
			RAISE ex VALUE &apos;The constant name &quot;&apos;||constantsName||&apos;&quot; could not be found.&apos;;
		END IF;

		-- Trim any erroneous white space before and after the script.
		SET scriptTextMod = TRIM(scriptTextMod);

		BEGIN INDEPENDENT TRANSACTION
			-- Update the original script with the changed value
			CALL /shared/ASAssets/Utilities/repository/updateSqlScript(constantsPath, scriptTextMod, success, createResponse, faultResponse);
		EXCEPTION
			ELSE
				RAISE;
		END;
		IF (faultResponse IS NOT NULL) THEN
			RAISE ex VALUE CAST(faultResponse AS LONGVARCHAR);
		END IF;
	ELSE
		RAISE ex VALUE &apos;The constants path procedure does not exist.  constantsPath=&apos;||NVL(constantsPath,&apos;null&apos;);
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1412609625958</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573160027349</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">12/202</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/110</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/222</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/175</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/197</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/176</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/231</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/174</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/207</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
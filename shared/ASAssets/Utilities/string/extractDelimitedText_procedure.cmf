<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="extractDelimitedText" path="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>extractDelimitedText:
	This is a generic procedure for extracting values from a list using a single or multi-character delimiter.
	The results are returned as a cursor of objects.  This does not use the expensive REGEX function or VECTORS for
	parsing the delimited text.  It does not parse character by character.  It uses a more efficient INSTR and SUBSTRING
	to extract the results.

	Input:
		inputString			LONGVARCHAR,		-- A text string containing a list with delimeters to be extracted into a cursor of output.
		delimiter			VARCHAR,			-- 1 or more characters such as single characters: space , | / or double characters such as ||
												--		or any repeatable combination.
		occurrence			SMALLINT,			-- 0=all occurrences, n&gt;0=the occurrence of delimited text or null if the occurrence requested is not applicable.
		reverseInputText	SMALLINT,			-- 0=do not reverse input text, 1=reverse input text before parsing
		reverseOutput		SMALLINT,			-- 0=do not reverse output text, 1=reverse output text before returning.
		trimText			SMALLINT, 			-- 0=do not trim, 1=do trim result
		includeDelimiter 	SMALLINT,			-- 0=exclude delimiter from output, 1=include delimiter in output

	Output:
		result - A cursor of extracted text.  
			If no delimiter was found, then the original input text is returned.
			If the delimiter appears at the beginning of the text before any other characters, an empty row is output 
				and counts as 1 occurrence.  For example:  /a/b/c/d with delimiter=/ and occurrence=2 would result in &apos;a&apos; being returned.

	Example Usage:
		1. Extract the last object in a DV path: 
			inputString=/a1/b2/c3/d4
			delimiter=/
			occurrence=1
			reverseInputText=1
			reverseOutput=1
			trimText=1
			includeDelimiter=0
			result:	d4

		2. Extract a comma-separated list
			inputString=a1,b2,c3,d4
			delimiter=,
			occurrence=0
			reverseInputText=0
			reverseOutput=0
			trimText=1
			includeDelimiter=0
			result:	a1
					b2
					c3
					d4

		3. Extract the 4th object [database] in a DV path: 
				object: 1       2         3  4       5      6
			inputString=/services/databases/db/catalog/schema
			delimiter=/
			occurrence=4
			reverseInputText=0
			reverseOutput=0
			trimText=1
			includeDelimiter=0
			result:	db


	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2018.100	02/26/2018		Mike Tinius			7.0.5			Created new.
	2019.200	04/08/2019		Mike Tinius			7.0.8			Fixed bug where server is set with ignore trailing spaces=true and there is a trailing space in the delimiter.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="inputString" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="delimiter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="occurrence" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="reverseInputText" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="reverseOutput" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="trimText" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="includeDelimiter" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="object">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* extractDelimitedText:
	This is a generic procedure for extracting values from a list using a single or multi-character delimiter.
	The results are returned as a cursor of objects.  This does not use the expensive REGEX function or VECTORS for
	parsing the delimited text.  It does not parse character by character.  It uses a more efficient INSTR and SUBSTRING
	to extract the results.

	Input:
		inputString			LONGVARCHAR,		-- A text string containing a list with delimeters to be extracted into a cursor of output.
		delimiter			VARCHAR,			-- 1 or more characters such as single characters: space , | / or double characters such as ||
												--		or any repeatable combination.
		occurrence			SMALLINT,			-- 0=all occurrences, n&gt;0=the occurrence of delimited text or null if the occurrence requested is not applicable.
		reverseInputText	SMALLINT,			-- 0=do not reverse input text, 1=reverse input text before parsing
		reverseOutput		SMALLINT,			-- 0=do not reverse output text, 1=reverse output text before returning.
		trimText			SMALLINT, 			-- 0=do not trim, 1=do trim result
		includeDelimiter 	SMALLINT,			-- 0=exclude delimiter from output, 1=include delimiter in output

	Output:
		result - A cursor of extracted text.  
			If no delimiter was found, then the original input text is returned.
			If the delimiter appears at the beginning of the text before any other characters, an empty row is output 
				and counts as 1 occurrence.  For example:  /a/b/c/d with delimiter=/ and occurrence=2 would result in &apos;a&apos; being returned.

	Example Usage:
		1. Extract the last object in a DV path: 
			inputString=/a1/b2/c3/d4
			delimiter=/
			occurrence=1
			reverseInputText=1
			reverseOutput=1
			trimText=1
			includeDelimiter=0
			result:	d4

		2. Extract a comma-separated list
			inputString=a1,b2,c3,d4
			delimiter=,
			occurrence=0
			reverseInputText=0
			reverseOutput=0
			trimText=1
			includeDelimiter=0
			result:	a1
					b2
					c3
					d4

		3. Extract the 4th object [database] in a DV path: 
				object: 1       2         3  4       5      6
			inputString=/services/databases/db/catalog/schema
			delimiter=/
			occurrence=4
			reverseInputText=0
			reverseOutput=0
			trimText=1
			includeDelimiter=0
			result:	db


	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2018.100	02/26/2018		Mike Tinius			7.0.5			Created new.
	2019.200	04/08/2019		Mike Tinius			7.0.8			Fixed bug where server is set with ignore trailing spaces=true and there is a trailing space in the delimiter.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE extractDelimitedText(
	IN  inputString			LONGVARCHAR,
	IN  delimiter			VARCHAR,			-- 1 or more characters such as single characters:, | / or double characters such as ||
												--		or any repeatable combination.
	IN	occurrence 			SMALLINT,			-- 0=all occurrences, n&gt;0=the occurrence of delimited text or null if the occurrence requested is not applicable.
	IN  reverseInputText	SMALLINT,			-- 0=do not reverse input text, 1=reverse input text before parsing
	IN  reverseOutput		SMALLINT,			-- 0=do not reverse output text, 1=reverse output text before returning.
	IN  trimText			SMALLINT, 			-- 0=do not trim, 1=do trim result
	IN	includeDelimiter 	SMALLINT,			-- 0=exclude delimiter from output, 1=include delimiter in output
	OUT result				PIPE (object LONGVARCHAR)
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;extractDelimitedText&apos;;
	DECLARE debug					CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE j						INTEGER;
	DECLARE pos1,pos2				INTEGER;
	DECLARE trailingSpaceInDelim	BOOLEAN DEFAULT false;
	DECLARE moreToDo1				BOOLEAN DEFAULT true;
	DECLARE object					LONGVARCHAR;
	DECLARE objectList1				LONGVARCHAR;
	DECLARE expression1				VARCHAR;
	DECLARE delimLen				INTEGER;
	DECLARE start1					INTEGER;
	DECLARE lastpos1				INTEGER;
	DECLARE poslen					INTEGER;
	DECLARE starttime				TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

	-- The space character can be a problem if it is used as a delimiter, because the
	-- Query Engine&apos;s &quot;Ignore Trailing Spaces&quot; setting can cause unexpected consequences with the LENGTH() function.
	-- To work around this, we always append a character to the parameter used in LENGTH().
	SET delimLen = length(delimiter||&apos;*&apos;)-1;
	IF (SUBSTRING(delimiter, delimLen, 1) = &apos; &apos;) THEN
		SET trailingSpaceInDelim = true;
	END IF;

	IF (debug = &apos;Y&apos;) THEN
		CALL PRINT (moduleName||&apos; INPUT:&apos;);
		CALL PRINT(moduleName||&apos;    inputString=[&apos;||SUBSTRING(inputString,1,63900)||&apos;]  inputString Len=[&apos;||CAST(LENGTH(inputString||&apos;*&apos;)-1 AS VARCHAR)||&apos;]&apos;);
		CALL PRINT(moduleName||&apos;    delimiter=[&apos;||NVL(delimiter,&apos;null&apos;)||&apos;]   delimLen=[&apos;||NVL(CAST(delimLen AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT(moduleName||&apos;    occurrence=[&apos;||NVL(CAST(occurrence AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT(moduleName||&apos;    reverseInputText=[&apos;||NVL(CAST(reverseInputText AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT(moduleName||&apos;    reverseOutput=[&apos;||NVL(CAST(reverseOutput AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT(moduleName||&apos;    trimText=[&apos;||NVL(CAST(trimText AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
		CALL PRINT(moduleName||&apos;    includeDelimiter=[&apos;||NVL(CAST(includeDelimiter AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
	END IF;

	-- Parse value list if applicable
	IF (inputString IS NOT NULL AND LENGTH(inputString||&apos;*&apos;)-1 &gt; 0 AND delimiter IS NOT NULL AND delimLen &gt; 0) THEN
		-- Extract the object from the input string
		IF (reverseInputText IS NOT NULL AND reverseInputText = 1) THEN
			SET objectList1 = REVERSE(inputString);
		ELSE
			SET objectList1 = inputString;
		END IF;
		IF (debug = &apos;Y&apos;) THEN
			CALL PRINT(moduleName||&apos;    objectList1=[&apos;||SUBSTRING(objectList1,1,63900)||&apos;]  objectList1 Len=[&apos;||CAST(LENGTH(objectList1||&apos;*&apos;)-1 AS VARCHAR)||&apos;]&apos;);
		END IF;
		SET moreToDo1 = true;
		SET start1 = 1;
		SET lastpos1 = 0;
		SET j = 0;
		WHILE (moreToDo1) DO
			SET j = j + 1;
			SET object = null;
			IF (j = 1) THEN
				IF (trailingSpaceInDelim) THEN
					SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(objectList1, delimiter, start1) INTO pos1 FROM /services/databases/system/DUAL;
				ELSE
					SET pos1 = INSTR(objectList1, delimiter, start1);
				END IF;
				IF (pos1 &gt; 0) THEN
					SET poslen = pos1-1;
					IF (poslen &lt; 0) THEN
						SET poslen = 0;
					END IF;
					SET object = SUBSTRING(objectList1, 1, poslen);
				ELSE
					IF (LENGTH(TRIM(objectList1)) &gt; 0) THEN
						SET object = objectList1;
					END IF;
					SET moreToDo1 = false;
				END IF;
				SET lastpos1 = pos1;
				SET start1 = lastpos1+delimLen;
			ELSE
				IF (trailingSpaceInDelim) THEN
					SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(objectList1, delimiter, start1) INTO pos2 FROM /services/databases/system/DUAL;
				ELSE
					SET pos2 = INSTR(objectList1, delimiter, start1);
				END IF;
				IF (lastpos1 &gt; 0 and pos2 &gt; 0) THEN
					SET poslen = pos2-lastpos1-delimLen;
					IF (poslen &lt; 0) THEN
						SET poslen = 0;
					END IF;
					SET object = SUBSTRING(objectList1, lastpos1+delimLen, poslen);
				ELSEIF (lastpos1 &gt; 0 and pos2 = 0) THEN
					SET object = SUBSTRING(objectList1, lastpos1+delimLen);
					SET moreToDo1 = false;
				END IF;
				SET lastpos1 = pos2;
				SET start1 = lastpos1+delimLen;
			END IF;
			IF (trimText IS NOT NULL AND trimText = 1) THEN
				SET object = TRIM(object);
			END IF;
			IF (reverseOutput IS NOT NULL AND reverseOutput = 1) THEN
				SET object = REVERSE(object);
			END IF;
			IF (includeDelimiter IS NOT NULL AND includeDelimiter = 1 AND moreToDo1) THEN
				SET object = object || delimiter;
			END IF;
			IF (debug = &apos;Y&apos;) THEN
				IF (object IS NOT NULL) THEN
					CALL PRINT(moduleName||&apos; : object=[&apos;||object||&apos;]&apos;);
				ELSE
					CALL PRINT(moduleName||&apos; : object=[null]&apos;);
				END IF;
			END IF;
			IF (object IS NOT NULL) then
				IF (occurrence IS NULL OR occurrence = 0 or occurrence = j) THEN
					INSERT INTO result VALUES(object);
					-- Exit the loop if the occurrence was found
					IF (occurrence = j) THEN
						SET moreToDo1 = false;
					END IF;
				END IF;
			END IF;
		END WHILE;
	END IF;
	IF (debug = &apos;Y&apos;) THEN
		CALL PRINT(moduleName||&apos; : Duration=[&apos;||CAST(CURRENT_TIMESTAMP - starttime AS VARCHAR)||&apos;]&apos;);
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1519402575519</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1572986812031</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">asp5665</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/135</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/119</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/118</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/117</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/123</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/211</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/122</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/121</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/120</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/116</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/196</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/194</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1519402575519</attribute>
</metadata>
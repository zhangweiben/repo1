<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="findOpenClosePair" path="/shared/ASAssets/Utilities/string/findOpenClosePair" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>findOpenClosePair:

	Search through the sql script to find the corresponding right close character ) for the starting left open character (
	This assumes there is only a single outer () pair such as P1(  P2 ( ) ).  This pattern is not supported in this context: P1 ( )  P2 ( )
	By finding the logical end to the analytical function part 1, is insures that the follow-on searches will have no issues 
		with embedded commas or other search text that might interfere with the rest of the searches.
 
	Input:
		sqlScript			LONGVARCHAR,		-- The sql script or expression to parse
		begPos				INTEGER,			-- The position to start searching for the first open/close pair P1 ( expression )
		codingList			LONGVARCHAR,		-- The optional coding list to use to encode the return value.  If null then no encoding is done.
												-- Examples of a coding list derived from the constants tab in the encodedValues resource:
																  &apos; &apos;
													encodedSpace=_0020
																			+    -        **       *     /     %     !
													codingListArithmetic=_002B,_002D,_002A_002A,_002A,_002F,_0025,_0021
																					   !=         &lt;&gt;         &gt;=         &lt;=         &gt;          &lt;          =
													codingListComparisonOperators=_003C_003E,_0021_003D,_003E_003D,_003C_003D,_003E_0000,_003C_0000,_003D_0000
		openingDelim			VARCHAR			-- The opening character such as left paren ( or left bracket [
		closingDelim			VARCHAR			-- The closing character such as right paren ) or right bracket ].  The opening and closing character cannot be the same.
		trimText				INTEGER, 		-- Trim the extractedScript. 0 do not trim, 1=do trim.
	Output:
		openingDelimPos			INTEGER,		-- The position of the left open character for the pair.
		closingDelimPos			INTEGER			-- The position of the right close character for the pair.
		extractedScript			LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; between the opening and closing pair P1 ( expression ).
		sqlScriptEncoded		LONGVARCHAR, 	-- This is the encoded original sqlScript that was passed in.  If no codingList was passed in then it is the original script as is.
		extractedScriptBefore	LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; before the opening pair &quot;exp_before P1 ( expression ) exp_after&quot;.
		extractedScriptAfter	LONGVARCHAR 	-- This is the first extracted &quot;expression&quot; after the closing pair &quot;exp_before P1 ( expression ) exp_after&quot;.

	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2017.2		03/09/2017		Mike Tinius			7.0.4			Created new
	2019.200	04/19/2019		Mike Tinius			7.0.8			Migrated from KPImetrics to Utilities

	(c) 2017 TIBCO Software Inc. All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="sqlScript" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="begPos" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="codingList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="openingDelim" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="closingDelim" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="trimText" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="openingDelimPos" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="closingDelimPos" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="extractedScript" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sqlScriptEncoded" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="extractedScriptBefore" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="extractedScriptAfter" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getCodedString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inCodingType" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inEncodingActions" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="codingList" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inModuleNameInvoking" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inDebug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inModuleQualifer" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="outString" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	findOpenClosePair:

	Search through the sql script to find the corresponding right close character ) for the starting left open character (
	This assumes there is only a single outer () pair such as P1(  P2 ( ) ).  This pattern is not supported in this context: P1 ( )  P2 ( )
	By finding the logical end to the analytical function part 1, is insures that the follow-on searches will have no issues 
		with embedded commas or other search text that might interfere with the rest of the searches.
 
	Input:
		sqlScript			LONGVARCHAR,		-- The sql script or expression to parse
		begPos				INTEGER,			-- The position to start searching for the first open/close pair P1 ( expression )
		codingList			LONGVARCHAR,		-- The optional coding list to use to encode the return value.  If null then no encoding is done.
												-- Examples of a coding list derived from the constants tab in the encodedValues resource:
																  &apos; &apos;
													encodedSpace=_0020
																			+    -        **       *     /     %     !
													codingListArithmetic=_002B,_002D,_002A_002A,_002A,_002F,_0025,_0021
																					   !=         &lt;&gt;         &gt;=         &lt;=         &gt;          &lt;          =
													codingListComparisonOperators=_003C_003E,_0021_003D,_003E_003D,_003C_003D,_003E_0000,_003C_0000,_003D_0000
		openingDelim			VARCHAR			-- The opening character such as left paren ( or left bracket [
		closingDelim			VARCHAR			-- The closing character such as right paren ) or right bracket ].  The opening and closing character cannot be the same.
		trimText				INTEGER, 		-- Trim the extractedScript. 0 do not trim, 1=do trim.
	Output:
		openingDelimPos			INTEGER,		-- The position of the left open character for the pair.
		closingDelimPos			INTEGER			-- The position of the right close character for the pair.
		extractedScript			LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; between the opening and closing pair P1 ( expression ).
		sqlScriptEncoded		LONGVARCHAR, 	-- This is the encoded original sqlScript that was passed in.  If no codingList was passed in then it is the original script as is.
		extractedScriptBefore	LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; before the opening pair &quot;exp_before P1 ( expression ) exp_after&quot;.
		extractedScriptAfter	LONGVARCHAR 	-- This is the first extracted &quot;expression&quot; after the closing pair &quot;exp_before P1 ( expression ) exp_after&quot;.

	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2017.2		03/09/2017		Mike Tinius			7.0.4			Created new
	2019.200	04/19/2019		Mike Tinius			7.0.8			Migrated from KPImetrics to Utilities

	(c) 2017 TIBCO Software Inc. All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE findOpenClosePair(
	IN	sqlScript				LONGVARCHAR,	-- The sql script or expression to parse
	IN	begPos					INTEGER,		-- The position to start searching for the first open/close pair P1 ( expression )
	IN	codingList				LONGVARCHAR,	-- The optional coding list to use to encode the return value.  If null then no encoding is done.
	IN	openingDelim			VARCHAR,		-- The opening delimiter such as left paren ( or left bracket [
	IN	closingDelim			VARCHAR,		-- The closing delimiter such as right paren ) or right bracket ].  The opening and closing character cannot be the same.
	IN 	trimText				INTEGER, 		-- Trim the extractedScript. 0 do not trim, 1=do trim.
	OUT openingDelimPos			INTEGER,		-- The position of the left open character for the pair.
	OUT closingDelimPos			INTEGER,		-- The position of the right close character for the pair.
	OUT extractedScript			LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; between the opening and closing pair P1 ( expression ).
	OUT sqlScriptEncoded		LONGVARCHAR, 	-- This is the encoded original sqlScript that was passed in.  If no codingList was passed in then it is the original script as is.
	OUT extractedScriptBefore	LONGVARCHAR, 	-- This is the first extracted &quot;expression&quot; before the opening pair &quot;exp_before P1 ( expression ) exp_after&quot;.
	OUT extractedScriptAfter	LONGVARCHAR 	-- This is the first extracted &quot;expression&quot; after the closing pair &quot;exp_before P1 ( expression ) exp_after&quot;.
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;findOpenClosePair&apos;;
	DECLARE debug					CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE debug4					CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE debugPrintSize			INTEGER DEFAULT 60000;
	DECLARE i						INTEGER;
	DECLARE len						INTEGER;
	DECLARE pairCount				INTEGER;
	DECLARE ch						VARCHAR;
	DECLARE validOpeningDelimList	VARCHAR DEFAULT &apos;(,{,[,&lt;,/&apos;;
	DECLARE validClosingDelimList	VARCHAR DEFAULT &apos;),},],&gt;,\&apos;;
	DECLARE INVALID_DELIMITER		EXCEPTION;
	DECLARE EX_NULL_VALUE			EXCEPTION;
	DECLARE EX_SAME_VALUE			EXCEPTION;

	-- Initialize parameters
	set extractedScript = null;
	set sqlScriptEncoded = sqlScript;
	set extractedScriptBefore = null;
	set extractedScriptAfter = null;
	set openingDelimPos = 0;
	set closingDelimPos = 0;
	if (debug = &apos;Y&apos;) then
		call print(moduleName||&apos; :  begPos=&apos;||begPos||&apos;  openingDelim=&apos;||TRIM(NVL(openingDelim,&apos;  &apos;))||&apos;  closingDelim=&apos;||TRIM(NVL(closingDelim,&apos;  &apos;))||
								&apos;  sqlScript=[&apos;||SUBSTRING(RTRIM(NVL(sqlScript,&apos;  &apos;)),1,debugPrintSize));
	end if;
	if (openingDelim is null or length(trim(openingDelim)) = 0) then
		raise INVALID_DELIMITER value moduleName||&apos; : The input variable &quot;openingDelim&quot; cannot be null or blank.&apos;;
	end if;
	if (closingDelim is null or length(trim(closingDelim)) = 0) then
		raise INVALID_DELIMITER value moduleName||&apos; : The input variable &quot;closingDelim&quot; cannot be null or blank.&apos;;
	end if;
	if (openingDelim = closingDelim) then
		raise INVALID_DELIMITER value moduleName||&apos; : The input variables &quot;openingDelim&quot;=&quot;&apos;||openingDelim||&apos;&quot; and &quot;closingDelim&quot;=&quot;&apos;||closingDelim||&apos;&quot; cannot be the same.&apos;;
	end if;
	-- Determine if the opening delimiter is valid
	set i = 1;
	set len = LENGTH(openingDelim);
	while (i &lt;= len) do
		set ch = SUBSTRING(openingDelim,i,1);
		if (INSTR(validOpeningDelimList, ch) = 0) then
			raise INVALID_DELIMITER value &apos;The opening delimiter=&quot;&apos;||openingDelim||&apos;&quot; contains 1 or more characters that are not members of the valid opening list: &quot;&apos;||validOpeningDelimList||&apos;&quot;&apos;;
		end if;
		set i = i + 1;
	end while;
	-- Determine if the closing delimiter is valid
	set i = 1;
	set len = LENGTH(closingDelim);
	while (i &lt;= len) do
		set ch = SUBSTRING(closingDelim,i,1);
		if (INSTR(validClosingDelimList, ch) = 0) then
			raise INVALID_DELIMITER value &apos;The closing delimiter=&quot;&apos;||closingDelim||&apos;&quot; contains 1 or more characters that are not members of the valid closing list: &quot;&apos;||validClosingDelimList||&apos;&quot;&apos;;
		end if;
		set i = i + 1;
	end while;

	-- Extract the script text
	if (sqlScript IS NOT NULL AND LENGTH(TRIM(sqlScript)) &gt; 0) then
		-- Search through the sql script to find the corresponding right paren ) for the starting left paren (
		-- This assumes there is only a single outer () pair such as P1(  P2 ( ) ).  
		-- This pattern is not supported in this context: P1 ( )  P2 ( )
		set extractedScript = &apos;&apos;;
		set i = begPos;
		set pairCount = -1;
		parseLoop:
		while (i &lt;= LENGTH(sqlScript)) do
			set ch = substring(sqlScript,i,1);
			if (ch = openingDelim) then
				if (pairCount &lt; 0) then
					set pairCount = 0;
				end if;
				set pairCount = pairCount + 1;
				if (openingDelimPos = 0) then
					set openingDelimPos = i;
				end if;
			end if;
			if (ch = closingDelim) then
				set pairCount = pairCount - 1;
				if (pairCount = 0) then
					set closingDelimPos = i;
					leave parseLoop;
				end if;
			end if;
			set i = i + 1;
		end while;
		if (debug4 = &apos;Y&apos;) then
			call print(moduleName||&apos; :  begPos=&apos;||begPos||&apos;  openingDelimPos=&apos;||openingDelimPos||&apos;  closingDelimPos=&apos;||closingDelimPos);
		end if;

		if (openingDelimPos &gt; 0 and closingDelimPos &gt; 0) then
			set extractedScript = SUBSTRING(sqlScript, openingDelimPos+1, closingDelimPos-openingDelimPos-1);
			if (trimText is not null and trimText = 1) then
				set extractedScript = TRIM(extractedScript);
			end if;
			set extractedScriptBefore = SUBSTRING(sqlScript, 1, openingDelimPos-1);
			set extractedScriptAfter = SUBSTRING(sqlScript, closingDelimPos+1);

			-- Encode the coding list within opening and closing characters
			if (codingList is not null and length(trim(codingList)) &gt; 0) then
				call /shared/ASAssets/Utilities/string/getCodedString(&apos;E&apos;, &apos;N&apos;, codingList, extractedScript, moduleName, debug4, &apos;extractedScript&apos;, extractedScript);
				if (openingDelimPos = 1) then
					set sqlScriptEncoded = extractedScript||SUBSTRING(sqlScript,closingDelimPos);
					set closingDelimPos = length(extractedScript) + 1;
				else
					set sqlScriptEncoded = SUBSTRING(sqlScript, 1, openingDelimPos)||extractedScript||SUBSTRING(sqlScript,closingDelimPos);
					set closingDelimPos = openingDelimPos + length(extractedScript) + 1;
				end if;
			end if;
		end if;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">1489071144247</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserId" type="INTEGER">4005</attribute>
  <attribute name="creatorUserName" type="STRING">zkxl6un</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564694086875</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">4005</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/154</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/91</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1489071144247</attribute>
</metadata>
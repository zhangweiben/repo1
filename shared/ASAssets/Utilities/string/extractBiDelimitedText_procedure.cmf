<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="extractBiDelimitedText" path="/shared/ASAssets/Utilities/string/extractBiDelimitedText" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0" isFunction="true">
  <annotation>extractBiDelimitedText:
	Extract bi-delimited text refers to the ability to locate text based on a search term where the search term
	encloses the sought after text in a beginning and ending delimiter thus bi-delimited.  Where this can be useful
	is when you have to throw an exception and you want to embed both the custom error code and error message in the 
	exception:   raise ex VALUE &apos;Custom exception: ERROR_CODE(C1) ERROR_MESSAGE(Error is foo.)&apos;.   This allows you
	to have a generic error processing routine that can extract specific error codes and values.  Of course this is
	not limited to that.  You can be very creative in the usage of this routine.
 
	Input:
		inText - Text to search 
			examples:  	ERROR_CODE(C1), ERROR_CODE((C1)) 
						ERROR_CODE{C2}, ERROR_CODE{{C2}}
						ERROR_CODE[C3], ERROR_CODE[[C3]]
						ERROR_CODE&lt;C4&gt;, ERROR_CODE&lt;&lt;C4&gt;&gt;
		searchTerm - a word with no spaces that represents the keyword search term to locate
		openingDelim - The beginning delimiter which directly follows the searchTerm
			Allowed: Single: &apos;[&apos;, &apos;(&apos;, &apos;{&apos;,  &apos;&lt;&apos;     Doubles: &apos;[[&apos;, &apos;((&apos;, &apos;{{&apos;, &apos;&lt;&lt;&apos;
		closingDelim - The ending delimiter which directly follows the content
			Allowed: Single: &apos;]&apos;, &apos;)&apos;, &apos;}&apos;, &apos;&gt;&apos;      Doubles: &apos;]]&apos;, &apos;))&apos;, &apos;}}&apos;, &apos;&gt;&gt;&apos;
		inOccurrence - the occurrence of the searchTerm to return (default=1).
				The value of the occurrence input value determines which 
				  occurrence to return (numbered starting at 1 from left to right. Use negative values to 
				  number occurrences from right to left.) If a NULL value or zero is passed in for occurrence,
				  a default of 1 is used.  
		trimText - 0=do not trim result, 1=do trim result text (default=0)
		caseSensitive - 0=no search term case sensitivity, 1=case sensitive search term
	Output:
		result - the result

	Exceptions:  INVALID_DELIMITER

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.2		03/01/2013		Mike Tinius			5.2.0			created new for Best Practices 7.0.
	2017.2		02/15/2017		Mike Tinius			7.0.4			Modified to remove all external functions including: isEmpty, RegexSplit and RegexPosition.
	2019.200	04/08/2019		Mike Tinius			7.0.8			Fixed bug where server is set with ignore trailing spaces=true and there is a trailing space in the delimiter.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="inText" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="searchTerm" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="openingDelim" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="closingDelim" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inOccurrence" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inTrimText" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inCaseSensitive" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="1">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* extractBiDelimitedText:
	Extract bi-delimited text refers to the ability to locate text based on a search term where the search term
	encloses the sought after text in a beginning and ending delimiter thus bi-delimited.  Where this can be useful
	is when you have to throw an exception and you want to embed both the custom error code and error message in the 
	exception:   raise ex VALUE &apos;Custom exception: ERROR_CODE(C1) ERROR_MESSAGE(Error is foo.)&apos;.   This allows you
	to have a generic error processing routine that can extract specific error codes and values.  Of course this is
	not limited to that.  You can be very creative in the usage of this routine.
 
	Input:
		inText - Text to search 
			examples:  	ERROR_CODE(C1), ERROR_CODE((C1)) 
						ERROR_CODE{C2}, ERROR_CODE{{C2}}
						ERROR_CODE[C3], ERROR_CODE[[C3]]
						ERROR_CODE&lt;C4&gt;, ERROR_CODE&lt;&lt;C4&gt;&gt;
		searchTerm - a word with no spaces that represents the keyword search term to locate
		openingDelim - The beginning delimiter which directly follows the searchTerm
			Allowed: Single: &apos;[&apos;, &apos;(&apos;, &apos;{&apos;,  &apos;&lt;&apos;     Doubles: &apos;[[&apos;, &apos;((&apos;, &apos;{{&apos;, &apos;&lt;&lt;&apos;
		closingDelim - The ending delimiter which directly follows the content
			Allowed: Single: &apos;]&apos;, &apos;)&apos;, &apos;}&apos;, &apos;&gt;&apos;      Doubles: &apos;]]&apos;, &apos;))&apos;, &apos;}}&apos;, &apos;&gt;&gt;&apos;
		inOccurrence - the occurrence of the searchTerm to return (default=1).
				The value of the occurrence input value determines which 
				  occurrence to return (numbered starting at 1 from left to right. Use negative values to 
				  number occurrences from right to left.) If a NULL value or zero is passed in for occurrence,
				  a default of 1 is used.  
		inTrimText - 0=do not trim result, 1=do trim result text (default=0)
		inCaseSensitive - 0=no search term case sensitivity, 1=case sensitive search term
	Output:
		result - the result.  Null if nothing found.

	Exceptions:  INVALID_DELIMITER

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.2		03/01/2013		Mike Tinius			5.2.0			created new for Best Practices 7.0.
	2017.2		02/15/2017		Mike Tinius			7.0.4			Modified to remove all external functions including: isEmpty, RegexSplit and RegexPosition.
	2019.200	04/08/2019		Mike Tinius			7.0.8			Fixed bug where server is set with ignore trailing spaces=true and there is a trailing space in the delimiter.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE extractBiDelimitedText(
	IN inText			 	LONGVARCHAR,  -- text to parse
	IN searchTerm			VARCHAR, -- word to search for
	IN openingDelim			VARCHAR, --Allowed: Single: &apos;[&apos;, &apos;(&apos;, &apos;{&apos;,  &apos;&lt;&apos;     Doubles: &apos;[[&apos;, &apos;((&apos;, &apos;{{&apos;, &apos;&lt;&lt;&apos;
	IN closingDelim			VARCHAR, --Allowed: Single: &apos;]&apos;, &apos;)&apos;, &apos;}&apos;, &apos;&gt;&apos;      Doubles: &apos;]]&apos;, &apos;))&apos;, &apos;}}&apos;, &apos;&gt;&gt;&apos;
	IN inOccurrence			INTEGER, --The occurrence of the search term
	IN inTrimText			INTEGER, --0 do not trim, 1=do trim
	IN inCaseSensitive		INTEGER, --0=no, 1=yes case sensitive search term
	OUT result  			LONGVARCHAR
)
BEGIN
	DECLARE i						INTEGER;
	DECLARE len						INTEGER;
	DECLARE ch						VARCHAR;
	DECLARE startPos 				INTEGER;
	DECLARE endPos					INTEGER;
	DECLARE tempText				LONGVARCHAR;
	DECLARE delim					VARCHAR;
	DECLARE occurrence				INTEGER DEFAULT inOccurrence;
	DECLARE trimText				INTEGER DEFAULT inTrimText;
	DECLARE caseSensitive			INTEGER DEFAULT inCaseSensitive;
	DECLARE validOpeningDelimdList	VARCHAR DEFAULT &apos;(,{,[,&lt;,/,\,~,!,|,@,#,$,%,^,&amp;,*,_,.,?,+,=,;,:,`,&quot;,&apos;&apos;&apos;;
	DECLARE validClosingDelimdList	VARCHAR DEFAULT &apos;),},],&gt;,/,\,~,!,|,@,#,$,%,^,&amp;,*,_,.,?,+,=,;,:,`,&quot;,&apos;&apos;&apos;;
	DECLARE INVALID_DELIMITER		EXCEPTION;
	DECLARE searchTermLen			INTEGER;
	DECLARE trailingSpaceInSearchTerm BOOLEAN DEFAULT false;

	-- The space character can be a problem if it is used as a delimiter, because the
	-- Query Engine&apos;s &quot;Ignore Trailing Spaces&quot; setting can cause unexpected consequences with the LENGTH() function.
	-- To work around this, we always append a character to the parameter used in LENGTH().
	SET searchTermLen = length(searchTerm||&apos;*&apos;)-1;
	IF (SUBSTRING(searchTerm, searchTermLen, 1) = &apos; &apos;) THEN
		SET trailingSpaceInSearchTerm = true;
	END IF;

	if (openingDelim is null or length(trim(openingDelim)) = 0 or closingDelim is null or length(trim(closingDelim)) = 0) then
		raise INVALID_DELIMITER value &apos;The opening and/or closing delimiter may not be null or empty.&apos;;
	end if;
	if (openingDelim = closingDelim) then
		raise INVALID_DELIMITER value &apos;The opening and closing delimiter may not be the same: &quot;&apos;||openingDelim||&apos;&quot;&apos;;
	end if;
	-- Determine if the opening delimiter is valid
	set i = 1;
	set len = LENGTH(openingDelim);
	while (i &lt;= len) do
		set ch = SUBSTRING(openingDelim,i,1);
		if (INSTR(validOpeningDelimdList, ch) = 0) then
			raise INVALID_DELIMITER value &apos;The opening delimiter=&quot;&apos;||openingDelim||&apos;&quot; contains 1 or more characters that are not members of the valid opening list: &quot;&apos;||validOpeningDelimdList||&apos;&quot;&apos;;
		end if;
		set i = i + 1;
	end while;
	-- Determine if the closing delimiter is valid
	set i = 1;
	set len = LENGTH(closingDelim);
	while (i &lt;= len) do
		set ch = SUBSTRING(closingDelim,i,1);
		if (INSTR(validClosingDelimdList, ch) = 0) then
			raise INVALID_DELIMITER value &apos;The closing delimiter=&quot;&apos;||closingDelim||&apos;&quot; contains 1 or more characters that are not members of the valid closing list: &quot;&apos;||validClosingDelimdList||&apos;&quot;&apos;;
		end if;
		set i = i + 1;
	end while;
	-- Validate occurrence
	if (occurrence is null or occurrence = 0) then
		set occurrence = 1;
	end if;
	-- Validate trimText
	if (trimText is null) then
		set trimText = 0;
	end if;
	-- Validate caseSensitive
	if (caseSensitive is null) then
		set caseSensitive = 0;
	end if;
	-- Intialize result
	set result = null;

	if (caseSensitive = 0) then
		if (trailingSpaceInSearchTerm) then
			select {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(UPPER(inText), UPPER(searchTerm), 1, occurrence) into startPos from /services/databases/system/DUAL;
		else
			set startPos = INSTR(UPPER(inText), UPPER(searchTerm), 1, occurrence);
		end if;
	else
		if (trailingSpaceInSearchTerm) then
			select {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(inText, searchTerm, 1, occurrence) into startPos from /services/databases/system/DUAL;
		else
			set startPos = INSTR(inText, searchTerm, 1, occurrence);
		end if;
	end if;
	--call print(&apos;searchTerm=[&apos;||searchTerm||&apos;] startPos=&apos;||startPos);
	if (startPos &gt; 0) then

		set tempText = SUBSTRING(inText, startPos+searchTermLen);
		--call print(&apos;startPos=&apos;||startPos||&apos;  tempText=&apos;||emptyStr(tempText));
		set startPos = INSTR(tempText, openingDelim);
		set endPos = INSTR(tempText, closingDelim);
		if (startPos &gt; 0 and endPos &gt; 0) then
			set tempText = SUBSTRING(tempText, 1, endPos-1);
			--call print(&apos;startPos=&apos;||startPos||&apos;  endPos=&apos;||endPos||&apos;  tempText=&apos;||emptyStr(tempText));
			if ( LENGTH(openingDelim)+1 &lt;= LENGTH(tempText)) then
				set result = SUBSTRING(tempText, LENGTH(openingDelim)+1);
				if (trimText = 1) then
					set result = TRIM(result);
				end if;
			end if;
		end if;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564691906273</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
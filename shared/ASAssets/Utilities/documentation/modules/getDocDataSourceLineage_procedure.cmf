<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getDocDataSourceLineage" path="/shared/ASAssets/Utilities/documentation/modules/getDocDataSourceLineage" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getDocDataSourceLineage:

	This procedure returns all the DATA_SOURCE type resources found under the starting path.  It returns the formatted
	text for two sections: &quot;Data Sources Accessed List&quot; and &quot;Data Sources Lineage&quot;.  

	The data sources accessed is a distinct list of data sources along with their type, path and whether they are enabled or not.  

	Input:
		resourcePath					The full resource path to the CIS resource to introspect and return data source access and lineage documentation.
											Values: e.g. /shared/examples/CompositeView
		resourceType					The type of resource.
											Values: e.g. TABLE
		constantPath					This is the path to the constants file
											Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
		commandOptionValueDsAccessed 	The result command (&apos;print_datasource_accessed&apos;) 
											Values: e.g. [0,1] - none=0, all=1
		commandOptionValueDsLineage 	The result command (&apos;print_datasource_lineage&apos;) 
											Values: e.g. [0,1] - none=0, all=1
		childResVect					This is a complete list (vector) of data source children.  Since these routines are recursive it will be inefficient
											to calculate this on the fly each time.  It is more efficient to get these resources once up front and simply pass
											the entire list in.  It is used to identify the lowest level resources which is a child of a data source.
	Output:
		formattedText					The formatted text output.

	Exceptions:  none

An example output is shown below:
	The data source accessed list provides a unique list of data sources used by the passed in resource path.

	The data source lineage provides a top to bottom lineage starting with the &quot;resources used&quot; list.  
	The format of the lineage shows indenting and a depth counter when the depth of the resource changes.
	Additionally, when a child source is found an indicator of [CS] is placed in front of the resource.
	The type of that resource is placed at the end of the child resource path in the format of [TYPE.SUBTYPE].
	The parent data source path is placed under neath the child with a [DS] indicator in front of it.

Data Source Accessed List:
---------------------------
    Datasource Name               Enabled Type        Sub Type                 Datasource Path                                     
    ----------------------------- ------- ----------- ------------------------ ---------------------------------------------------
    ds_orders                     1       DATA_SOURCE RELATIONAL_DATA_SOURCE   /shared/examples/ds_orders                          
    ds_XML                        1       DATA_SOURCE XML_FILE_DATA_SOURCE     /shared/examples/ds_XML                             
    ds_inventory                  1       DATA_SOURCE RELATIONAL_DATA_SOURCE   /shared/examples/ds_inventory                       

Data Source Lineage:
--------------------
seqnum   id     pid    depth  resource path
     1 - 20587             0  /shared/examples/CompositeView

     2 - 20658  20587      1    /shared/examples/ViewOrder
     3 - 20741  20658      2      [CS] /shared/examples/ds_orders/customers  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     4 - 20679  20658      2      [CS] /shared/examples/ds_orders/orderdetails  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     5 - 20711  20658      2      [CS] /shared/examples/ds_orders/orders  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     6 - 20670  20711      3        /shared/examples/ds_orders
     7 - 20729  20670      4          [CS] /shared/examples/ds_orders/cache_status  [TABLE.DATABASE_TABLE]
                                      [DS] /shared/examples/ds_orders
     8 - 20671  20670      4          [CS] /shared/examples/ds_orders/cache_tracking  [TABLE.DATABASE_TABLE]
                                      [DS] /shared/examples/ds_orders
     9 - 20689  20711      3        [CS] /shared/examples/ds_orders/orders_cache  [TABLE.DATABASE_TABLE]
                                    [DS] /shared/examples/ds_orders

    10 - 20774  20587      1    /shared/examples/ViewSales
    11 - 20679  20774      2      [CS] /shared/examples/ds_orders/orderdetails  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
    12 - 20786  20774      2      /shared/examples/productCatalog_Transformation
    13 - 20757  20786      3        [CS] /shared/examples/ds_XML/productCatalog.xml  [TREE.XML_FILE_TREE]
                                    [DS] /shared/examples/ds_XML

    14 - 20763  20587      1    /shared/examples/ViewSupplier
    15 - 20606  20763      2      [CS] /shared/examples/ds_inventory/inventorytransactions  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory
    16 - 20619  20763      2      [CS] /shared/examples/ds_inventory/purchaseorders  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory
    17 - 20644  20763      2      [CS] /shared/examples/ds_inventory/suppliers  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/25/2012		Mike Tinius			5.2.0			Created new
	2012.401	11/12/2012		Mike Tinius			5.2.0			Completely overhauled inputs and logic to use getResourceLineageRecursive.
	2013.4		10/28/2013		Mike Tinius			6.2.0			Updated for /shared/PSAssets structure
	2014.2		03/20/2014		Mike Tinius			6.2.0			Added parameter to getResourceListRecursive to support recursion detection.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/21/2019		Mike Tinius			7.0.8			Removed the use of VECTOR as it is not efficient.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="commandOptionValueDsAccessed" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="commandOptionValueDsLineage" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="formattedText" direction="OUT" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceLineageRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 	getDocDataSourceLineage:

	This procedure returns all the DATA_SOURCE type resources found under the starting path.  It returns the formatted
	text for two sections: &quot;Data Sources Accessed List&quot; and &quot;Data Sources Lineage&quot;.  

	The data sources accessed is a distinct list of data sources along with their type, path and whether they are enabled or not.  

	Input:
		resourcePath					The full resource path to the DV resource to introspect and return data source access and lineage documentation.
											Values: e.g. /shared/examples/CompositeView
		resourceType					The type of resource.
											Values: e.g. TABLE
		constantPath					This is the path to the constants file
											Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
		commandOptionValueDsAccessed 	The result command (&apos;print_datasource_accessed&apos;) 
											Values: e.g. [0,1] - none=0, all=1
		commandOptionValueDsLineage 	The result command (&apos;print_datasource_lineage&apos;) 
											Values: e.g. [0,1] - none=0, all=1

	Output:
		formattedText					The formatted text output.

	Exceptions:  none

An example output is shown below:
	The data source accessed list provides a unique list of data sources used by the passed in resource path.

	The data source lineage provides a top to bottom lineage starting with the &quot;resources used&quot; list.  
	The format of the lineage shows indenting and a depth counter when the depth of the resource changes.
	Additionally, when a child source is found an indicator of [CS] is placed in front of the resource.
	The type of that resource is placed at the end of the child resource path in the format of [TYPE.SUBTYPE].
	The parent data source path is placed under neath the child with a [DS] indicator in front of it.

Data Source Accessed List:
---------------------------
    Datasource Name               Enabled Type        Sub Type                 Datasource Path                                     
    ----------------------------- ------- ----------- ------------------------ ---------------------------------------------------
    ds_orders                     1       DATA_SOURCE RELATIONAL_DATA_SOURCE   /shared/examples/ds_orders                          
    ds_XML                        1       DATA_SOURCE XML_FILE_DATA_SOURCE     /shared/examples/ds_XML                             
    ds_inventory                  1       DATA_SOURCE RELATIONAL_DATA_SOURCE   /shared/examples/ds_inventory                       

Data Source Lineage:
--------------------
seqnum   id     pid    depth  resource path
     1 - 20587             0  /shared/examples/CompositeView

     2 - 20658  20587      1    /shared/examples/ViewOrder
     3 - 20741  20658      2      [CS] /shared/examples/ds_orders/customers  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     4 - 20679  20658      2      [CS] /shared/examples/ds_orders/orderdetails  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     5 - 20711  20658      2      [CS] /shared/examples/ds_orders/orders  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     6 - 20670  20711      3        /shared/examples/ds_orders
     7 - 20729  20670      4          [CS] /shared/examples/ds_orders/cache_status  [TABLE.DATABASE_TABLE]
                                      [DS] /shared/examples/ds_orders
     8 - 20671  20670      4          [CS] /shared/examples/ds_orders/cache_tracking  [TABLE.DATABASE_TABLE]
                                      [DS] /shared/examples/ds_orders
     9 - 20689  20711      3        [CS] /shared/examples/ds_orders/orders_cache  [TABLE.DATABASE_TABLE]
                                    [DS] /shared/examples/ds_orders

    10 - 20774  20587      1    /shared/examples/ViewSales
    11 - 20679  20774      2      [CS] /shared/examples/ds_orders/orderdetails  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
    12 - 20786  20774      2      /shared/examples/productCatalog_Transformation
    13 - 20757  20786      3        [CS] /shared/examples/ds_XML/productCatalog.xml  [TREE.XML_FILE_TREE]
                                    [DS] /shared/examples/ds_XML

    14 - 20763  20587      1    /shared/examples/ViewSupplier
    15 - 20606  20763      2      [CS] /shared/examples/ds_inventory/inventorytransactions  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory
    16 - 20619  20763      2      [CS] /shared/examples/ds_inventory/purchaseorders  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory
    17 - 20644  20763      2      [CS] /shared/examples/ds_inventory/suppliers  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/25/2012		Mike Tinius			5.2.0			Created new
	2012.401	11/12/2012		Mike Tinius			5.2.0			Completely overhauled inputs and logic to use getResourceLineageRecursive.
	2013.4		10/28/2013		Mike Tinius			6.2.0			Updated for /shared/PSAssets structure
	2014.2		03/20/2014		Mike Tinius			6.2.0			Added parameter to getResourceListRecursive to support recursion detection.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/21/2019		Mike Tinius			7.0.8			Removed the use of VECTOR as it is not efficient.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getDocDataSourceLineage(
    IN resourcePath		 			LONGVARCHAR,  
    IN resourceType 				VARCHAR(255),
	IN constantPath					LONGVARCHAR,
	IN commandOptionValueDsAccessed INTEGER, --&apos;print_datasource_accessed&apos;:: 0 or 1
	IN commandOptionValueDsLineage 	INTEGER, --&apos;print_datasource_lineage&apos;:: 0 or 1
	OUT formattedText				/lib/util/System.Text
)
BEGIN
	DECLARE moduleName 				VARCHAR DEFAULT &apos;getDocDataSourceLineage&apos;;
	DECLARE debug					CHAR(1);
	DECLARE debug2					CHAR(1) DEFAULT &apos;N&apos;;
	DECLARE debugTime				CHAR(1);
	DECLARE debugTime2				CHAR(1);
	DECLARE i,numRows				INTEGER;
	DECLARE DNHeader				VARCHAR DEFAULT &apos;Datasource Name&apos;;	-- DN=Datasource Name header/size
	DECLARE DNsize					INTEGER DEFAULT LENGTH(DNHeader)+1; -- DN=Datasource Name size, default len=16
	DECLARE DPHeader				VARCHAR DEFAULT &apos;Datasource Path&apos;;	-- DP=Datasource Path header
	DECLARE DPsize					INTEGER DEFAULT LENGTH(DPHeader);	-- DP=Datasource Path size
	DECLARE DTHeader				VARCHAR DEFAULT &apos;Type&apos;;				-- DT=Datasource Type header
	DECLARE DTsize					INTEGER DEFAULT LENGTH(DTHeader);	-- DT=Datasource Type size
	DECLARE STHeader				VARCHAR DEFAULT &apos;Subtype&apos;;			-- ST=datasource SubType header
	DECLARE STsize					INTEGER DEFAULT LENGTH(STHeader);	-- ST=datasource SubType size
	DECLARE ENHeader				VARCHAR DEFAULT &apos;Enabled&apos;;			-- EN=dtasource ENabled header
	DECLARE ENsize					INTEGER DEFAULT LENGTH(ENHeader);	-- EN=datasource ENabled size
	DECLARE pid						VARCHAR;
	DECLARE padChar					VARCHAR;
	DECLARE eol						VARCHAR;
	DECLARE indent4					VARCHAR;
	DECLARE indentResponse			LONGVARCHAR;
	DECLARE linePart1				/lib/util/System.Text;
	DECLARE linePart2				/lib/util/System.Text;
	DECLARE nameValuePair			LONGVARCHAR;
	DECLARE name					VARCHAR;
	DECLARE val						LONGVARCHAR;
	DECLARE docList					LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE rec						/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType;
/*	ROW(
		seqNum					INTEGER,
		resourceID				INTEGER,
		parentID				INTEGER,
		resDepth				INTEGER,
		treeType				VARCHAR(255), -- Parent, Child
		resName 				VARCHAR(255), 
		resPath 				TypeDefinitions.pathType,
		resType					VARCHAR(255),
		subType					VARCHAR(255),
		enabled					BIT,
		dsID					INTEGER,
		dsResName				VARCHAR(255),
		dsResPath				TypeDefinitions.pathType,
		dsResType 				VARCHAR(255),
		dsResSubType			VARCHAR(255),
		dsEnabled				BIT,
		dsChildCount			INTEGER)
*/
	DECLARE lineage						LONGVARCHAR;
	DECLARE pos							INTEGER;
	DECLARE dsUniqueList				/lib/util/System.Text DEFAULT &apos;&apos;;
	DECLARE dsListHeader				VARCHAR(1024);
	DECLARE dsListText					/lib/util/System.Text;
	DECLARE lineageHeader				VARCHAR(1024);
	DECLARE lineageText					/lib/util/System.Text;
	DECLARE excludeDSPathsList			LONGVARCHAR;
	DECLARE datasourceAncestory			INTEGER DEFAULT 1;
	DECLARE startTimeGetLineage			TIMESTAMP;
	DECLARE startTimeDsAccessed 		TIMESTAMP;
	DECLARE startTimeResourceLineage 	TIMESTAMP;
	DECLARE startTimeOverallLineage 	TIMESTAMP;
	DECLARE durationDsAccessed			INTERVAL DAY TO SECOND;
	DECLARE durationResourceLineage		INTERVAL DAY TO SECOND;
	DECLARE durationDsAccessedDisp		VARCHAR;
	DECLARE durationResourceLineageDisp	VARCHAR;
	DECLARE durationDsAccessedOverall	INTERVAL DAY TO SECOND DEFAULT &apos;0 00:00:00.000&apos;;
	DECLARE durationResourceLineageOverall INTERVAL DAY TO SECOND DEFAULT &apos;0 00:00:00.000&apos;;
	DECLARE durationOverall				INTERVAL DAY TO SECOND;
	DECLARE inIgnoreResourceDoesNotExist INTEGER DEFAULT 1; 	-- Ignore any resources that do not exist
																-- 1 = Bypass the processing of that resource.
																-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.

	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;debug&apos;, 1, debug);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;debugTime&apos;, 1, debugTime);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;debugTime2&apos;, 1, debugTime2);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;padChar&apos;, 1, padChar);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;eol&apos;, 1, eol);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;indent4&apos;, 1, indent4);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;excludeDSPathsList&apos;, 1, excludeDSPathsList);

	-- Initialize the starting times
	set startTimeOverallLineage = CURRENT_TIMESTAMP;
	-- Initialize output
	set formattedText = &apos;&apos;;

	-- Only execute this if the resource is not a CONTAINER
	if (resourceType != &apos;CONTAINER&apos;) then
		/********************************************
		 * Get the Data Source Lineage
		 ********************************************/
		-- Find data sources associated with the path that was passed in
		set startTimeGetLineage = CURRENT_TIMESTAMP;
		set lineage = indent4 || resourcePath || eol;
		set numRows = 0;
		for r as 
			SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceLineageRecursive(NULL, NULL, NULL, NULL, resourcePath, resourceType, excludeDSPathsList, datasourceAncestory, inIgnoreResourceDoesNotExist)  
		do
			set numRows = numRows + 1;
			-- Assign the row to the list
			set docList = docList || 
						&apos;seqNum=&apos;||NVL(cast(r.seqNum as varchar),&apos;null&apos;) || &apos;::&apos; ||
						&apos;resourceID=&apos;||NVL(cast(r.resourceID as varchar),&apos;null&apos;) || &apos;::&apos; ||
						&apos;parentID=&apos;||NVL(cast(r.parentID as varchar),&apos;null&apos;) || &apos;::&apos; ||
						&apos;resDepth=&apos;||NVL(cast(r.resDepth as varchar),&apos;null&apos;) || &apos;::&apos; ||
						&apos;treeType=&apos;||NVL(r.treeType,&apos;null&apos;) || &apos;::&apos; ||
						&apos;resName=&apos;||NVL(r.resName,&apos;null&apos;) || &apos;::&apos; ||
						&apos;resPath=&apos;||NVL(r.resPath,&apos;null&apos;) || &apos;::&apos; ||
						&apos;resType=&apos;||NVL(r.resType,&apos;null&apos;) || &apos;::&apos; ||
						&apos;subType=&apos;||NVL(r.subType,&apos;null&apos;) || &apos;::&apos; ||
						&apos;enabled=&apos;||NVL(cast(r.enabled as varchar),&apos;null&apos;) || &apos;::&apos; ||
						&apos;dsID=&apos;||NVL(cast(r.dsID as varchar),&apos;null&apos;) || &apos;::&apos; ||
						&apos;dsResName=&apos;||NVL(r.dsResName,&apos;null&apos;) || &apos;::&apos; ||
						&apos;dsResPath=&apos;||NVL(r.dsResPath,&apos;null&apos;) || &apos;::&apos; ||
						&apos;dsResType=&apos;||NVL(r.dsResType,&apos;null&apos;) || &apos;::&apos; ||
						&apos;dsResSubType=&apos;||NVL(r.dsResSubType,&apos;null&apos;) ||  &apos;::&apos; ||
						&apos;dsEnabled=&apos;||NVL(cast(r.dsEnabled as varchar),&apos;null&apos;) || &apos;::&apos; ||
						&apos;dsChildCount=&apos;||NVL(cast(r.dsChildCount as varchar),&apos;null&apos;) || &apos;|&apos; ||CHR(10);

			if (UPPER(debug2) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug2,&apos;numRows=&apos;||LPAD(numRows,4,&apos; &apos;)||&apos;  DNsize=&apos;||DNsize || &apos;  DPsize=&apos;||DPsize || &apos;  DTsize=&apos;||DTsize || &apos;  STsize=&apos;||STsize || &apos;  ENsize=&apos;||ENsize);
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug2,&apos;numRows=&apos;||LPAD(numRows,4,&apos; &apos;)
						|| &apos;  DN=&apos;||NVL(r.dsResName,&apos;null&apos;) 
						|| &apos;  DP=&apos;||NVL(r.dsResPath,&apos;null&apos;)  
						|| &apos;  DT=&apos;||NVL(r.dsResType,&apos;null&apos;)  
						|| &apos;  ST=&apos;||NVL(r.dsResSubType,&apos;null&apos;)  
						|| &apos;  EN=&apos;||NVL(cast(r.dsEnabled as varchar),&apos;null&apos;) );
			end if;

			-- Determine the longest length for each field
			if (r.dsResName is not null and length(r.dsResName) &gt; DNsize) then
				set DNsize = length(r.dsResName);
			end if;
			if (r.dsResPath is not null and length(r.dsResPath) &gt; DPsize) then
				set DPsize = length(r.dsResPath);
			end if;
			if (r.dsResType is not null and length(r.dsResType) &gt; DTsize) then
				set DTsize = length(r.dsResType);
			end if;
			if (r.dsResSubType is not null and length(r.dsResSubType) &gt; STsize) then
				set STsize = length(r.dsResSubType);
			end if;
			if (r.dsEnabled is not null and length(r.dsEnabled) &gt; ENsize) then
				set ENsize = length(r.dsEnabled);
			end if;
		end for;
		if (UPPER(debug) = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;docList=&apos;||CHR(10)||NVL(docList,&apos;null&apos;));
		end if;

		-- Increment sizes by 1
		set DNsize = DNsize + 1;
		set DPsize = DPsize + 1;
		set DTsize = DTsize + 1;
		set STsize = STsize + 1;
		set ENsize = ENsize + 1;
		if (UPPER(debug2) = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug2,&apos;  DNsize=&apos;||DNsize || &apos;  DPsize=&apos;||DPsize || &apos;  DTsize=&apos;||DTsize || &apos;  STsize=&apos;||STsize || &apos;  ENsize=&apos;||ENsize);
		end if;
		if (UPPER(debugTime) = &apos;Y&apos;) then
			set durationOverall = CURRENT_TIMESTAMP - startTimeGetLineage;
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;                Get Lineage List::    duration=&apos;||cast(durationOverall as varchar)||&apos;    Lineage Row Count=&apos;||numRows);
		end if;

		/********************************************
		 * Prepare the formatted text for:
		 *    Data Sources Accessed List
		 ********************************************/
		-- Prepare the data source accessed header
		set dsListHeader = 		 		     &apos;Data Source Accessed List:&apos;||eol;
		set dsListHeader = dsListHeader||    &apos;---------------------------&apos;||eol;
		-- Establish the header
		set dsListHeader = dsListHeader || indent4 || RPAD(DNHeader,DNsize,padChar) || RPAD(ENHeader,ENsize,padChar)|| RPAD(DTHeader,DTsize,padChar)  || RPAD(STHeader,STsize,padChar) || RPAD(DPHeader,DPsize,padChar)||eol;
		set dsListHeader = dsListHeader || indent4 || RPAD(&apos;-&apos;,DNsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,ENsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,DTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,STsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,DPsize-1,&apos;-&apos;)||eol;
		set dsListText = &apos;&apos;;

		/********************************************
		 * Prepare the formatted text for:
		 *    Data Source Lineage
		 ********************************************/
		-- Prepare the data source lineage header
		set lineageHeader =                  &apos;Data Source Lineage:&apos;||eol;
		set lineageHeader = lineageHeader || &apos;--------------------&apos;||eol;
		set lineageHeader = lineageHeader || &apos;seqnum   id     pid    depth  resource path&apos;||eol;
		set lineageText = &apos;&apos;;

		-- Format the output
		set numRows = 0;
		-- Extract each resource lineage structure
		for r as 
			select * from /shared/ASAssets/Utilities/string/extractTextList(REPLACE(docList, CHR(10), &apos;&apos;), &apos;|&apos;,0,0,0,0,1)
			where textExpression is not null and length(trim(textExpression)) &gt; 0
		do
			set numRows = numRows + 1;
			-- Extract the record stucture
			set rec = null;
			for line as 
				select * from /shared/ASAssets/Utilities/string/extractTextList(r.textExpression, &apos;::&apos;,0,0,0,0,1)
				where textExpression is not null and length(trim(textExpression)) &gt; 0
			do
				set nameValuePair = line.textExpression;
				set pos = INSTR(nameValuePair, &apos;=&apos;);
				set name = SUBSTRING(nameValuePair, 1, pos-1);
				set val = SUBSTRING(nameValuePair, pos+1);
				if (val = &apos;null&apos;) then
					set val = null;
				end if;
				case
					when name=&apos;seqNum&apos; 			then set rec.seqNum = CAST(val AS INTEGER);
					when name=&apos;resourceID&apos; 		then set rec.resourceID = CAST(val AS INTEGER);
					when name=&apos;parentID&apos; 		then set rec.parentID = CAST(val AS INTEGER);
					when name=&apos;resDepth&apos; 		then set rec.resDepth = CAST(val AS INTEGER);
					when name=&apos;treeType&apos; 		then set rec.treeType = val;
					when name=&apos;resName&apos; 		then set rec.resName = val;
					when name=&apos;resPath&apos; 		then set rec.resPath = val;
					when name=&apos;resType&apos; 		then set rec.resType = val;
					when name=&apos;subType&apos; 		then set rec.subType = val;
					when name=&apos;enabled&apos; 		then set rec.enabled = CAST(val AS BIT);
					when name=&apos;dsID&apos; 			then set rec.dsID = CAST(val AS INTEGER);
					when name=&apos;dsResName&apos; 		then set rec.dsResName = val;
					when name=&apos;dsResPath&apos; 		then set rec.dsResPath = val;
					when name=&apos;dsResType&apos; 		then set rec.dsResType = val;
					when name=&apos;dsResSubType&apos; 	then set rec.dsResSubType = val;
					when name=&apos;dsEnabled&apos; 		then set rec.dsEnabled = CAST(val AS BIT);
					when name=&apos;dsChildCount&apos; 	then set rec.dsChildCount = CAST(val AS INTEGER);
					else
				end case;
			end for;

			-- Continue with the logic using the extracted record structure
			set durationDsAccessedDisp = &apos;&apos;;
			set durationResourceLineageDisp = &apos;&apos;;
			/********************************************
			 * Create the formatted text for:
			 *    Data Sources Accessed List
			 ********************************************/
			if (commandOptionValueDsAccessed = 1) then
				set startTimeDsAccessed = CURRENT_TIMESTAMP;
				-- Construct the unique list of data sources used by the incoming resource
				if (rec.dsResPath is not null and POSITION(&apos;[&apos;||rec.dsResPath||&apos;]&apos; in dsUniqueList) = 0) then
					-- Add the data source to the unique list
					set dsUniqueList = dsUniqueList || &apos;[&apos;|| rec.dsResPath || &apos;] &apos;;
					-- Construct the data source lineage text
					set dsListText = dsListText || indent4||
								RPAD(rec.dsResName,		DNsize,padChar)||
								RPAD(rec.dsEnabled,		ENsize,padChar)||
								RPAD(rec.dsResType,		DTsize,padChar)||
								RPAD(rec.dsResSubType,	STsize,padChar)||
								RPAD(rec.dsResPath,		DPsize,padChar)||
								eol;
				end if;
				-- Log the intermediate time
				set durationDsAccessed = (CURRENT_TIMESTAMP - startTimeDsAccessed);
				set durationDsAccessedOverall = durationDsAccessedOverall + durationDsAccessed;
				set durationDsAccessedDisp = RPAD(CAST(durationDsAccessed AS VARCHAR),14,padChar);
			end if;

			/********************************************
			 * Create the formatted text for:
			 *    Data Source Lineage
			 ********************************************/
			if (commandOptionValueDsLineage = 1) then
				set startTimeResourceLineage = CURRENT_TIMESTAMP;
				-- Check for a null parentID
				set pid = CAST(rec.parentID AS VARCHAR);
				if (rec.parentID is null) then
					set pid = &apos; &apos;;
				end if;

				-- Put a blank line before any resource depth=1
				set linePart1 = &apos;&apos;;
				if (rec.resDepth = 1) then
					set linePart1 = eol;
				end if;

				-- Construct the first part of the line
				set linePart1 = linePart1 ||
								LPAD(rec.seqNum,6,padChar) || &apos; - &apos;|| 
								RPAD(rec.resourceID,7,padChar) || 
								RPAD(pid,7,&apos; &apos;) ||
								LPAD(rec.resDepth,5,padChar);

				-- Construct the second part of the line formatted based on whether the resource is a child of a data source or not
				if (rec.dsResPath is null) then
--					call /shared/ASAssets/Utilities/string/indent(rec.resDepth,&apos;  &apos;,rec.resPath, indentResponse);
					-- Add indentation to the string
					set indentResponse = &apos;&apos;;
					set i = 1;
					while (i &lt;= rec.resDepth) do
						set indentResponse = indentResponse || &apos;  &apos;;
						set i = i + 1;
					end while;
					set indentResponse = indentResponse || rec.resPath;
					set linePart2 = &apos;  &apos;||indentResponse;
				else
--					call /shared/ASAssets/Utilities/string/indent(rec.resDepth,&apos;  &apos;,&apos;[CS] &apos;|| rec.resPath || &apos;  [&apos;|| rec.resType ||&apos;.&apos;||NVL(rec.subType,&apos;null&apos;)||&apos;]&apos;, indentResponse);
					-- Add indentation to the string
					set indentResponse = &apos;&apos;;
					set i = 1;
					while (i &lt;= rec.resDepth) do
						set indentResponse = indentResponse || &apos;  &apos;;
						set i = i + 1;
					end while;
					set indentResponse = indentResponse || &apos;[CS] &apos;|| rec.resPath || &apos;  [&apos;|| rec.resType ||&apos;.&apos;||NVL(rec.subType,&apos;null&apos;)||&apos;]&apos;;
					set linePart2 = &apos;  &apos;||indentResponse || eol;

--					call /shared/ASAssets/Utilities/string/indent(rec.resDepth,&apos;  &apos;,&apos;[DS] &apos;|| rec.dsResPath, indentResponse);
					-- Add indentation to the string
					set indentResponse = &apos;&apos;;
					set i = 1;
					while (i &lt;= rec.resDepth) do
						set indentResponse = indentResponse || &apos;  &apos;;
						set i = i + 1;
					end while;
					set indentResponse = indentResponse || &apos;[DS] &apos;|| rec.dsResPath;
					set linePart2 = linePart2 || LPAD(&apos; &apos;,30,&apos; &apos;)||indentResponse;
				end if;
				-- Glue both parts of the line together and put an end of line on it
				set lineageText = lineageText || NVL(linePart1,&apos;null&apos;) || NVL(linePart2,&apos;null&apos;) || eol;

				-- Log the intermediate time
				set durationResourceLineage = (CURRENT_TIMESTAMP - startTimeResourceLineage);
				set durationResourceLineageOverall = durationResourceLineageOverall + durationResourceLineage;
				set durationResourceLineageDisp = RPAD(CAST(durationResourceLineage AS VARCHAR),14,padChar);
			end if;
			if (UPPER(debugTime2) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime2,&apos;                   resource loop::      &apos;||
					LPAD(i,6,&apos; &apos;)||&apos; ds_accessed=&apos;||durationDsAccessedDisp||&apos;     res_lineage=&apos;||durationResourceLineageDisp);
			end if;
		end for;
		set docList = &apos;&apos;;

		-- Add the data source list to the output formatted text
		if (commandOptionValueDsAccessed = 1 AND dsListText IS NOT NULL AND LENGTH(&apos;|&apos;||dsListText||&apos;|&apos;) &gt; 2) then
			set startTimeDsAccessed = CURRENT_TIMESTAMP;
			set formattedText = formattedText || dsListHeader || dsListText || eol;
			set durationDsAccessedOverall = durationDsAccessedOverall + (CURRENT_TIMESTAMP - startTimeDsAccessed);
		end if;

		-- Add the data source lineage to the output formatted text
		if (commandOptionValueDsLineage = 1 AND lineageText IS NOT NULL AND LENGTH(&apos;|&apos;||lineageText||&apos;|&apos;) &gt; 2) then
			set startTimeResourceLineage = CURRENT_TIMESTAMP;
			set formattedText = formattedText || lineageHeader || lineageText;
			set durationResourceLineageOverall = durationResourceLineageOverall + (CURRENT_TIMESTAMP - startTimeResourceLineage);
		end if;

		if (UPPER(debugTime2) = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;            Datasources Accessed::    duration=&apos;||NVL(cast(durationDsAccessedOverall as varchar),&apos;null&apos;));
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;                Resource Lineage::    duration=&apos;||NVL(cast(durationResourceLineageOverall as varchar),&apos;null&apos;));
			set durationOverall = CURRENT_TIMESTAMP - startTimeOverallLineage;
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;              Datasource Lineage::    duration=&apos;||NVL(cast(durationOverall as varchar),&apos;null&apos;));
		end if;
	end if; 
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564681989205</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getDocResourceProjection" path="/shared/ASAssets/Utilities/documentation/modules/getDocResourceProjection" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getDocResourceProjection:

	This procedure returns the column projections for TABLES and PROCEDURES.
 
	Input:
		resourcePath			The full resource path to the CIS resource to introspect and return the column projections if applicable.
									Values: e.g. /shared/examples/CompositeView
		resourceType			The type of resource.
									Values: e.g. TABLE
		constantPath			This is the path to the constants file
									Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
	Output:
		formattedText			The formatted text output.

	Exceptions:  none

	An example output is shown below:

Resource Column Projection:
---------------------------
    Column Name              Column Type          Native Base Type     Native Type          
    ------------------------ -------------------- -------------------- --------------------
    OrderID                  INTEGER              N/A                  N/A                  
    ProductID                INTEGER              N/A                  N/A                  
    Discount                 DECIMAL(12,2)        N/A                  N/A                  

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/25/2012		Mike Tinius			5.2.0			Created new
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="formattedText" direction="OUT" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cursorNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="columnBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="paramDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 	getDocResourceProjection:

	This procedure returns the column projections for TABLES and PROCEDURES.
 
	Input:
		resourcePath			The full resource path to the CIS resource to introspect and return the column projections if applicable.
									Values: e.g. /shared/examples/CompositeView
		resourceType			The type of resource.
									Values: e.g. TABLE
		constantPath			This is the path to the constants file
									Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
	Output:
		formattedText			The formatted text output.

	Exceptions:  none

	An example output is shown below:

Resource Column Projection:
---------------------------
    Column Name              Column Type          Native Base Type     Native Type          
    ------------------------ -------------------- -------------------- --------------------
    OrderID                  INTEGER              N/A                  N/A                  
    ProductID                INTEGER              N/A                  N/A                  
    Discount                 DECIMAL(12,2)        N/A                  N/A                  

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/25/2012		Mike Tinius			5.2.0			Created new
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.


*/
PROCEDURE getDocResourceProjection(
    IN resourcePath 		LONGVARCHAR,  
    IN resourceType 		VARCHAR(255),
	IN constantPath			LONGVARCHAR,
	OUT formattedText		/lib/util/System.Text
)
BEGIN
	DECLARE header			VARCHAR(1024) DEFAULT &apos;&apos;;
	DECLARE CNsize			INTEGER DEFAULT 20;
	DECLARE CTsize			INTEGER DEFAULT 20;
	DECLARE NBTsize			INTEGER DEFAULT 20;
	DECLARE NTsize			INTEGER DEFAULT 20;
	DECLARE padChar			VARCHAR;
	DECLARE eol				VARCHAR;
	DECLARE indent4			VARCHAR;
	DECLARE line			LONGVARCHAR;
	DECLARE field1			VARCHAR(1024);
	DECLARE field2			VARCHAR(1024);
	DECLARE field3			VARCHAR(1024);
	DECLARE field4			VARCHAR(1024);

	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;padChar&apos;, 1, padChar);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;eol&apos;, 1, eol);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;indent4&apos;, 1, indent4);

	set formattedText = &apos;&apos;;
	set header = 		 &apos;Resource Column Projection:&apos;||eol;
	set header = header||&apos;---------------------------&apos;||eol;

	-- Formatting for tables
	if (resourceType = &apos;TABLE&apos;) then
		-- First determine the max lengths for formatting purposes
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, resourceType) do
--			call print(&apos;columnName=&apos;||NVL(r.columnName,&apos;null&apos;));
			if (r.columnName is not null) then
				if (length(r.columnName) &gt; CNsize) then
					set CNsize = length(r.columnName);
				end if;
				if (r.columnType is not null and length(r.columnType) &gt; CTsize) then
					set CTsize = length(r.columnType);
				end if;
				if (r.nativeBaseType is not null and length(r.nativeBaseType) &gt; NBTsize) then
					set NBTsize = length(r.nativeBaseType);
				end if;
				if (r.nativeType is not null and length(r.nativeType) &gt; NTsize) then
					set NTsize = length(r.nativeType);
				end if;
			end if;
		end for;

		set CNsize = CNsize + 1;
		set CTsize = CTsize + 1;
		set NBTsize = NBTsize + 1;
		set NTsize = NTsize + 1;
--		call print(&apos;CNsize=&apos;||CNsize||&apos; CTsize=&apos;||CTsize||&apos; NBTsize=&apos;||NBTsize||&apos; NTsize=&apos;||NTsize);

		-- Establish the header
		set header = header||indent4||RPAD(&apos;Column Name&apos;,CNsize,padChar) || RPAD(&apos;Column Type&apos;,CTsize,padChar) || RPAD(&apos;Native Base Type&apos;,NBTsize,padChar) || RPAD(&apos;Native Type&apos;,NTsize,padChar)||eol;
		set header = header||indent4||RPAD(&apos;-&apos;,CNsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,CTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,NBTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,NTsize-1,&apos;-&apos;)||eol;

		-- Second, perform the actual formatting
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(resourcePath, resourceType) do
			if (r.columnName is not null) then
				if (r.columnType IS NOT NULL AND LENGTH(&apos;|&apos;||r.columnType||&apos;|&apos;) &gt; 2) then
					set field1 = RPAD(NVL(r.columnName,&apos;null&apos;),CNsize,padChar);
				else
					set field1 = RPAD(&apos;N/A&apos;,CNsize,padChar);
				end if;
				if (r.columnType IS NOT NULL AND LENGTH(&apos;|&apos;||r.columnType||&apos;|&apos;) &gt; 2) then
					set field2 = RPAD(NVL(r.columnType,&apos;null&apos;),CTsize,padChar);
				else
					set field2 = RPAD(&apos;N/A&apos;,CTsize,padChar);
				end if;
				if (r.nativeBaseType IS NOT NULL AND LENGTH(&apos;|&apos;||r.nativeBaseType||&apos;|&apos;) &gt; 2) then
					set field3 = RPAD(NVL(r.nativeBaseType,&apos;null&apos;),NBTsize,padChar);
				else
					set field3 = RPAD(&apos;N/A&apos;,NBTsize,padChar);
				end if;
				if (r.nativeType IS NOT NULL AND LENGTH(&apos;|&apos;||r.nativeType||&apos;|&apos;) &gt; 2) then
					set field4 = RPAD(NVL(r.nativeType,&apos;null&apos;),NTsize,padChar);
				else
					set field4 = RPAD(&apos;N/A&apos;,NTsize,padChar);
				end if;
/*
				call print(&apos;field1=[&apos;||field1||&apos;]&apos;);
				call print(&apos;field2=[&apos;||field2||&apos;]&apos;);
				call print(&apos;field3=[&apos;||field3||&apos;]&apos;);
				call print(&apos;field4=[&apos;||field4||&apos;]&apos;);
				call print(&apos;field1:&apos;||field1||&apos; field2:&apos;||field2||&apos; field3:&apos;||field3||&apos; field4:&apos;||field4);
*/
				set line = indent4 || field1 || field2 || field3 || field4 || eol;
--				call print(&apos;line:&apos;||line);
				set formattedText = formattedText || line;
			end if;
		end for;
	end if;

	-- Formatting for procedures.
	if (resourceType = &apos;PROCEDURE&apos;) then
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, resourceType, null) do
			if (r.columnName is not null) then
				if (length(r.columnName) &gt; CNsize) then
					set CNsize = length(r.columnName);
				end if;
				if (r.columnType is not null and length(r.columnType) &gt; CTsize) then
					set CTsize = length(r.columnType);
				end if;
				if (r.nativeBaseType is not null and length(r.nativeBaseType) &gt; NBTsize) then
					set NBTsize = length(r.nativeBaseType);
				end if;
				if (r.nativeType is not null and length(r.nativeType) &gt; NTsize) then
					set NTsize = length(r.nativeType);
				end if;
			end if;
		end for;

		set CNsize = CNsize + 1;
		set CTsize = CTsize + 1;
		set NBTsize = NBTsize + 1;
		set NTsize = NTsize + 1;
--		call print(&apos;CNsize=&apos;||CNsize||&apos; CTsize=&apos;||CTsize||&apos; NBTsize=&apos;||NBTsize||&apos; NTsize=&apos;||NTsize);

		-- Establish the header
		set header = header||indent4||RPAD(&apos;Column Name&apos;,CNsize,padChar) || RPAD(&apos;Column Type&apos;,CTsize,padChar) || RPAD(&apos;Native Base Type&apos;,NBTsize,padChar) || RPAD(&apos;Native Type&apos;,NTsize,padChar)||eol;
		set header = header||indent4||RPAD(&apos;-&apos;,CNsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,CTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,NBTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,NTsize-1,&apos;-&apos;)||eol;

		-- Second, perform the actual formatting
		for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR(resourcePath, resourceType, null) do
			if (r.columnName is not null) then
				if (r.columnType IS NOT NULL AND LENGTH(&apos;|&apos;||r.columnType||&apos;|&apos;) &gt; 2) then
					set field1 = RPAD(NVL(r.columnName,&apos;null&apos;),CNsize,padChar);
				else
					set field1 = RPAD(&apos;N/A&apos;,CNsize,padChar);
				end if;
				if (r.columnType IS NOT NULL AND LENGTH(&apos;|&apos;||r.columnType||&apos;|&apos;) &gt; 2) then
					set field2 = RPAD(NVL(r.columnType,&apos;null&apos;),CTsize,padChar);
				else
					set field2 = RPAD(&apos;N/A&apos;,CTsize,padChar);
				end if;
				if (r.nativeBaseType IS NOT NULL AND LENGTH(&apos;|&apos;||r.nativeBaseType||&apos;|&apos;) &gt; 2) then
					set field3 = RPAD(NVL(r.nativeBaseType,&apos;null&apos;),NBTsize,padChar);
				else
					set field3 = RPAD(&apos;N/A&apos;,NBTsize,padChar);
				end if;
				if (r.nativeType IS NOT NULL AND LENGTH(&apos;|&apos;||r.nativeType||&apos;|&apos;) &gt; 2) then
					set field4 = RPAD(NVL(r.nativeType,&apos;null&apos;),NTsize,padChar);
				else
					set field4 = RPAD(&apos;N/A&apos;,NTsize,padChar);
				end if;
				set line = indent4 || field1 || field2 || field3 || field4 || eol;
/*
				call print(&apos;field1=[&apos;||field1||&apos;]&apos;);
				call print(&apos;field2=[&apos;||field2||&apos;]&apos;);
				call print(&apos;field3=[&apos;||field3||&apos;]&apos;);
				call print(&apos;field4=[&apos;||field4||&apos;]&apos;);
				call print(&apos;field1:&apos;||field1||&apos; field2:&apos;||field2||&apos; field3:&apos;||field3||&apos; field4:&apos;||field4);
				call print(&apos;line:&apos;||line);
*/
				set formattedText = formattedText || line;
			end if;
		end for;
	end if;

	if (formattedText IS NOT NULL AND LENGTH(&apos;|&apos;||formattedText||&apos;|&apos;) &gt; 2) then
		set formattedText = header || formattedText || eol;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564682029615</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
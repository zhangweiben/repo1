<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getAllDocumentationAPI" path="/shared/ASAssets/Utilities/documentation/getAllDocumentationAPI" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getAllDocumentationAPI:

	This procedure servers as an &quot;API&quot; procedure.  It can be invoked by other application procedures to return the documentation.
	If the file path is left null, then it does not attempt to write to a file.
 
	Input:
		resourcePath				The starting CIS path for which to introspect resources and generate documentation.  Must be of type CONTAINER.
		resourceType				The resource type of the resource path.
		docPreambleImpl				The CIS path to the procedure that represents the preamble of the documentation.  
										If left null, the default &quot;geDocPreambleImpl1&quot; is used.
		docResourceFormatImpl		The CIS path to the procedure that performs the documentation formatting.
										If left null, the default &quot;getDocResourceFormatImpl1&quot; is used.
		constantPath				This is the path to the constants file
										e.g. /shared/ASAssets/Utilities/documentation/constants()
		switches					Provides guidance on what to print for documentation and save files.  
										The format is print_switch=[option1|{default_option2}|option3]
										This is a space separate list with no spaces before or after the equal sign.
											print_containers=[{none}|all] - print the resource container (folder)
											print_annotations=[none|{all}|nonblank|blank] - print all annotations whether they are blank or not
											print_resource_projections=[none|{all}] - print the resource projections
											print_resources_used=[none|{all}] - print the immediate child resources used by the parent resource
											print_datasource_accessed=[none|{all}] - print the data source accessed list
											print_datasource_lineage=[none|{all}] - print the data source lineage
											print_time=[{no}|yes] - print the time it takes to retrieve the full documentation for each resource and the final time
 											save_file=[{no}|yes] - save the results to a file
											save_file_intermediate=[{no}|yes] - save the file intermediately after each resource is completed
										Example:
											1) switches: when left blank or null then the defaults are taken
											   result: all documentation modules are printed
											2) switches: print_annotations=nonblank print_resource_projections=none print_resources_used=none print_datasource_lineage=none
											   result: only non-blank annotations are printed and nothing else

		excludeKeywordsInPathList	Exclude keywords in path, case insensitive.  Comma separated list.  These are whole words and not wild cards.  
										A word is defined by what exists between folder separators &quot;/&quot;. 
										i.e. &apos;analysis,archive&apos;
		excludePathsList			Exclude actual paths.  Double quotes are not required.  Comma separated list.
										The exclude path list simply has to be present in any part of the resource path.  
										This means that it can be a partial path.
		filePath					The full file system path to generate the documentation file to.
	Output:
		formattedText				The formattted text is returned for all documentation

	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/25/2012		Mike Tinius			5.2.0			Created new
	2012.401	11/12/2012		Mike Tinius			5.2.0			Added the ability to save to a file after each resources formatted text is completed.  Modified input parameters.
	2013.3		05/12/2014		Mike Tinius			6.2.0			Fixed so that it will create directories prior to creating file. It throws an error if the directory does not exist.
	2018.100	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="docPreambleImpl" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="docResourceFormatImpl" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="switches" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludeKeywordsInPathList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludePathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="filePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="formattedText" direction="OUT" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="switches" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="command" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="commandOptionValue" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="filePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="append" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="fileContent" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/existsDir" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="dirPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/makeDirs" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="dirPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 	getAllDocumentationAPI:

	This procedure servers as an &quot;API&quot; procedure.  It can be invoked by other application procedures to return the documentation.
	If the file path is left null, then it does not attempt to write to a file.
 
	Input:
		resourcePath				The starting CIS path for which to introspect resources and generate documentation.  Must be of type CONTAINER.
		resourceType				The resource type of the resource path.
		docPreambleImpl				The CIS path to the procedure that represents the preamble of the documentation.  
										If left null, the default &quot;geDocPreambleImpl1&quot; is used.
		docResourceFormatImpl		The CIS path to the procedure that performs the documentation formatting.
										If left null, the default &quot;getDocResourceFormatImpl1&quot; is used.
		constantPath				This is the path to the constants file
										e.g. /shared/ASAssets/Utilities/documentation/constants()
		switches					Provides guidance on what to print for documentation and save files.  
										The format is print_switch=[option1|{default_option2}|option3]
										This is a space separate list with no spaces before or after the equal sign.
											print_containers=[{none}|all] - print the resource container (folder)
											print_annotations=[none|{all}|nonblank|blank] - print all annotations whether they are blank or not
											print_resource_projections=[none|{all}] - print the resource projections
											print_resources_used=[none|{all}] - print the immediate child resources used by the parent resource
											print_datasource_accessed=[none|{all}] - print the data source accessed list
											print_datasource_lineage=[none|{all}] - print the data source lineage
											print_time=[{no}|yes] - print the time it takes to retrieve the full documentation for each resource and the final time
 											save_file=[{no}|yes] - save the results to a file
											save_file_intermediate=[{no}|yes] - save the file intermediately after each resource is completed
										Example:
											1) switches: when left blank or null then the defaults are taken
											   result: all documentation modules are printed
											2) switches: print_annotations=nonblank print_resource_projections=none print_resources_used=none print_datasource_lineage=none
											   result: only non-blank annotations are printed and nothing else

		excludeKeywordsInPathList	Exclude keywords in path, case insensitive.  Comma separated list.  These are whole words and not wild cards.  
										A word is defined by what exists between folder separators &quot;/&quot;. 
										i.e. &apos;analysis,archive&apos;
		excludePathsList			Exclude actual paths.  Double quotes are not required.  Comma separated list.
										The exclude path list simply has to be present in any part of the resource path.  
										This means that it can be a partial path.
		filePath					The full file system path to generate the documentation file to.
	Output:
		formattedText				The formattted text is returned for all documentation

	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/25/2012		Mike Tinius			5.2.0			Created new
	2012.401	11/12/2012		Mike Tinius			5.2.0			Added the ability to save to a file after each resources formatted text is completed.  Modified input parameters.
	2013.3		05/12/2014		Mike Tinius			6.2.0			Fixed so that it will create directories prior to creating file. It throws an error if the directory does not exist.
	2018.100	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getAllDocumentationAPI(
    IN resourcePath 				LONGVARCHAR, -- must be a starting folder path to recurse through 
	IN resourceType					VARCHAR,
 	IN docPreambleImpl				LONGVARCHAR,  
	IN docResourceFormatImpl		LONGVARCHAR, 
	IN constantPath					LONGVARCHAR,
	IN switches						LONGVARCHAR,
	IN excludeKeywordsInPathList	LONGVARCHAR,
	IN excludePathsList				LONGVARCHAR,
	IN filePath						LONGVARCHAR,
	OUT formattedText				/lib/util/System.Text
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;getAllDocumentationAPI&apos;;
	DECLARE debug					CHAR(1) ;
	DECLARE sqlStatement			VARCHAR(1024);
	DECLARE result					CURSOR (formattedText LONGVARCHAR);
	DECLARE resultText				/lib/util/System.Text DEFAULT &apos;&apos;;
	DECLARE eol						VARCHAR;
	DECLARE success					boolean;
	DECLARE fileName,dirPath		LONGVARCHAR;
	DECLARE ex						EXCEPTION;
	DECLARE resourceExists			BOOLEAN;
	DECLARE parseDocSwitch			INTEGER;

	-- check to see if the resource path exists
	call /lib/resource/ResourceExists(resourcePath, resourceType, null, resourceExists);
	if (resourceExists) then

		if (constantPath IS NULL) then
			raise ex value &apos;The constantPath cannot be null.&apos;;
		else
			call /lib/resource/ResourceExists(constantPath, &apos;PROCEDURE&apos;, null, resourceExists);
			if (NOT resourceExists) then
				raise ex value &apos;The constantPath does not exist=[&apos;||NVL(constantPath,&apos;null&apos;)||&apos;]&apos;;
			end if;
		end if;

		-- Initialize variables
		set formattedText = &apos;&apos;;
		call /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;debug&apos;, 1, debug);
		call /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;eol&apos;, 1, eol);

		-- Create the directory if it does not exist
		call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(REPLACE(filePath,&apos;\&apos;,&apos;/&apos;),&apos;E&apos;,fileName,dirPath);
		call /shared/ASAssets/Utilities/file/FileProcessingCJP/existsDir(dirPath, resourceExists);
		if (not resourceExists) then
			if (UPPER(debug) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Create directory path=&apos;||dirPath);
			end if;
			call /shared/ASAssets/Utilities/file/FileProcessingCJP/makeDirs(dirPath,success);
		end if;

		--  Initialize the file if the file path is not empty and the switch save_file_intermediate=yes
			--  no=0 which means to overwrite the file because it was not saved previously.  Write it all at once at the end. 
			-- yes=1 which means append the contents since it has been saved intermediately along the way.
		call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;save_file&apos;, parseDocSwitch);
		if (filePath IS NOT NULL AND LENGTH(&apos;|&apos;||filePath||&apos;|&apos;) &gt; 2 and parseDocSwitch = 1) then
			call /shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii(filePath,0,formattedText);
			if (UPPER(debug) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Resource documentation was initialized.&apos;);
			end if;
		else
			if (UPPER(debug) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Resource documentation could not be initialized.&apos;);
			end if;
		end if; 

		/************************************************************************
		 * Get the documentation preamble
		 ************************************************************************/
		call /lib/resource/ResourceExists(docPreambleImpl, &apos;PROCEDURE&apos;, null, resourceExists);
		if (resourceExists) then

			-- Construct the dynamic SQL statement
			set sqlStatement = &apos;SELECT * from &apos;||docPreambleImpl||
					&apos;(&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;&apos;&apos;&apos;|| &apos;,&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(resourceType,&apos;  &apos;))||&apos;&apos;&apos;&apos;|| &apos;,&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(constantPath,&apos;  &apos;))||&apos;&apos;&apos;&apos;||
					&apos;)&apos;;
			if (UPPER(debug) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Invoking Preamble Format Procedure:&apos;||sqlStatement);
			end if;

			-- Open the dynamic cursor to the Document Preamble Implementation
			set resultText = &apos;&apos;;
			open result for sqlStatement;
			for r as result do
				if (r.formattedText is not null) then
					set resultText = resultText || r.formattedText;
				end if;
			end for;

			-- Set the outgoing variable
			set formattedText = formattedText || resultText;

			/********************************
			 * Save File Intermediate
			 *******************************/
			-- Save the documentation to the file if there is documentation and the file path is not empty and the switch save_file_intermediate=yes
				--  no=0 which means to overwrite the file because it was not saved previously.  Write it all at once at the end. 
				-- yes=1 which means append the contents since it has been saved intermediately along the way.
			if ( (formattedText IS NOT NULL AND LENGTH(&apos;|&apos;||formattedText||&apos;|&apos;) &gt; 2) and
				 (filePath IS NOT NULL AND LENGTH(&apos;|&apos;||filePath||&apos;|&apos;) &gt; 2) ) then
				call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;save_file&apos;, parseDocSwitch);
				if (parseDocSwitch = 1) then
					call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;save_file_intermediate&apos;, parseDocSwitch);
					if (parseDocSwitch = 1) then	
						call /shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii(filePath,1,formattedText);
						if (UPPER(debug) = &apos;Y&apos;) then
							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Resource documentation text has been saved.&apos;);
						end if;
						set formattedText = &apos;&apos;;
					end if;
				end if;
			else
					set formattedText = formattedText || eol;
			end if; 
		else
			if (UPPER(debug) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Preamble Procedure [&apos;||NVL(docPreambleImpl,&apos;null&apos;)||&apos;] DOES NOT exist.&apos;);
			end if;
		end if;

		/************************************************************************
		 * Get all documentation for all resources as per the passed in path
		 ************************************************************************/
		call /lib/resource/ResourceExists(docResourceFormatImpl, &apos;PROCEDURE&apos;, null, resourceExists);
		if (resourceExists) then

			-- Construct the dynamic SQL statement
			set sqlStatement = &apos;SELECT * from &apos;||docResourceFormatImpl||
					&apos;(&apos; ||
					&apos;&apos;&apos;&apos;||TRIM(NVL(resourcePath,&apos;  &apos;))||&apos;&apos;&apos;&apos; || &apos;,&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(resourceType,&apos;  &apos;))||&apos;&apos;&apos;&apos;|| &apos;,&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(constantPath,&apos;  &apos;))||&apos;&apos;&apos;&apos; || &apos;,&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(switches,&apos;  &apos;))||&apos;&apos;&apos;&apos; ||&apos;,&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(excludeKeywordsInPathList,&apos;  &apos;))||&apos;&apos;&apos;&apos; ||&apos;,&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(excludePathsList,&apos;  &apos;))||&apos;&apos;&apos;&apos; ||&apos;,&apos;||
					&apos;&apos;&apos;&apos;||TRIM(NVL(REPLACE(filePath,&apos;\&apos;,&apos;/&apos;),&apos;  &apos;))||&apos;&apos;&apos;&apos; ||
					 &apos;)&apos;;
			if (UPPER(debug) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Invoking Resource Format Implementation Procedure:&apos;||sqlStatement);
			end if;

			-- Open the dynamic cursor to the Document Resource Implementation
			set resultText = &apos;&apos;;
			open result for sqlStatement;
			for r as result do
				if (r.formattedText is not null) then
					set resultText = resultText || r.formattedText;
				end if;
			end for;

			-- Set the outgoing variable
			set formattedText = formattedText || resultText;

			/********************************
			 * Save File Intermediate
			 *******************************/
			-- Save the documentation to the file if there is documentation and the file path is not empty and the switch save_file_intermediate=yes
				--  no=0 which means to overwrite the file because it was not saved previously.  Write it all at once at the end. 
				-- yes=1 which means append the contents since it has been saved intermediately along the way.
			if ( (formattedText IS NOT NULL AND LENGTH(&apos;|&apos;||formattedText||&apos;|&apos;) &gt; 2) and
				 (filePath IS NOT NULL AND LENGTH(&apos;|&apos;||filePath||&apos;|&apos;) &gt; 2) ) then
				call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;save_file&apos;, parseDocSwitch);
				if (parseDocSwitch = 1) then
					call /shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii(filePath,1,formattedText);
					if (UPPER(debug) = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Resource documentation text has been saved.&apos;);
					end if;
					set formattedText = &apos;&apos;;
				end if;
			end if; 
		else
			if (UPPER(debug) = &apos;Y&apos;) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Resource Formatting Procedure [&apos;||NVL(docResourceFormatImpl,&apos;null&apos;)||&apos;] DOES NOT exist.&apos;);
			end if;
		end if;
	else
		set formattedText = &apos;Resource path provided does not exist: &apos;||NVL(resourcePath,&apos;null&apos;);
		if (UPPER(debug) = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,formattedText);
		end if;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564682235115</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
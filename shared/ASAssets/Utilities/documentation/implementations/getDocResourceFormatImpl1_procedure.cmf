<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getDocResourceFormatImpl1" path="/shared/ASAssets/Utilities/documentation/implementations/getDocResourceFormatImpl1" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getDocResourceFormatImpl1:

	This procedure provides an implementation to retrieve and format the documentation for all resources located in the passed in starting folder.

	This procedure is invoked by the getAllDocumentationAPI.  
	This procedure recursively loops through all of the resources found within the given starting folder (CONTAINER).
	The output of this procedure provides the formatting for all CIS resource.  
	The idea behind this procedure is that it provides a template for an implementation.  
	A user of the documentation utilities may choose to copy and create a new implementation and then customize it for their project.  
	Any new implementation “must” follow the input and output interface definitions as shown below.

	Input:
		startingResourcePath		The starting folder path from which to start formatting the documentation.  It is always of type CONTAINER.
										Values: e.g. /shared/examples
		startingResourceType		The resource type of the resource path.
										Values: e.g. CONTAINER
		constantPath				This is the path to the constants file
										Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
		switches					Provides guidance on what to print for documentation and save files.  
										The format is print_switch=[option1|{default_option2}|option3]
										This is a space separate list with no spaces before or after the equal sign.
											print_containers=[{none}|all] - print the resource container (folder)
											print_annotations=[none|{all}|nonblank|blank] - print all annotations whether they are blank or not
											print_resource_projections=[none|{all}] - print the resource projections
											print_resources_used=[none|{all}] - print the immediate child resources used by the parent resource
											print_datasource_accessed=[none|{all}] - print the data source accessed list
											print_datasource_lineage=[none|{all}] - print the data source lineage
											print_time=[{no}|yes] - print the time it takes to retrieve the full documentation for each resource and the final time
 											save_file=[{no}|yes] - save the results to a file
											save_file_intermediate=[{no}|yes] - save the file intermediately after each resource is completed
										Example:
											1) switches: when left blank or null then the defaults are taken
											   result: all documentation modules are printed
											2) switches: print_annotations=nonblank print_resource_projections=none print_resources_used=none print_datasource_lineage=none
											   result: only non-blank annotations are printed and nothing else
		excludeKeywordsInPathList	Exclude keywords in path, case insensitive.  Comma separated list.  These are whole words and not wild cards.  
										A word is defined by what exists between folder separators &quot;/&quot;. 
										i.e. &apos;analysis,archive&apos;
		excludePathsList			Exclude actual paths.  Double quotes are not required.  Comma separated list.
										The exclude path list simply has to be present in any part of the resource path.  
										This means that it can be a partial path.
		filePath 					The full file system path to generate the documentation file to.
	Output: 
		formattedText - formatted text is out output complete with a separator at the beginning of the resource.

	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/25/2012		Mike Tinius			5.2.0			Created new
	2012.401	11/12/2012		Mike Tinius			5.2.0			Modified to print out timings and save to a file after each resource.
	2018.1		03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/21/2019		Mike Tinius			7.0.8			Removed the use of VECTOR as it is not efficient.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="startingResourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="startingResourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="switches" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludeKeywordsInPathList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludePathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="filePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="formattedText">
          <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/documentation/helpers/getDocCounts" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="numResources" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numContainers" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numConnectors" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numDefinitionSets" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numTriggers" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numViews" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numProcs" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numTree" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numDatasources" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numPublished" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="numOtherType" direction="INOUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="switches" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="command" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="commandOptionValue" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/documentation/implementations/getDocResourceFormatImpl1_resource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="constantPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="switches" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="formattedText" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="filePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="append" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="fileContent" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getDocResourceFormatImpl1:

	This procedure provides an implementation to retrieve and format the documentation for all resources located in the passed in starting folder.

	This procedure is invoked by the getAllDocumentationAPI.  
	This procedure recursively loops through all of the resources found within the given starting folder (CONTAINER).
	The output of this procedure provides the formatting for all CIS resource.  
	The idea behind this procedure is that it provides a template for an implementation.  
	A user of the documentation utilities may choose to copy and create a new implementation and then customize it for their project.  
	Any new implementation “must” follow the input and output interface definitions as shown below.

	Input:
		startingResourcePath		The starting folder path from which to start formatting the documentation.  It is always of type CONTAINER.
										Values: e.g. /shared/examples
		startingResourceType		The resource type of the resource path.
										Values: e.g. CONTAINER
		constantPath				This is the path to the constants file
										Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
		switches					Provides guidance on what to print for documentation and save files.  
										The format is print_switch=[option1|{default_option2}|option3]
										This is a space separate list with no spaces before or after the equal sign.
											print_containers=[{none}|all] - print the resource container (folder)
											print_annotations=[none|{all}|nonblank|blank] - print all annotations whether they are blank or not
											print_resource_projections=[none|{all}] - print the resource projections
											print_resources_used=[none|{all}] - print the immediate child resources used by the parent resource
											print_datasource_accessed=[none|{all}] - print the data source accessed list
											print_datasource_lineage=[none|{all}] - print the data source lineage
											print_time=[{no}|yes] - print the time it takes to retrieve the full documentation for each resource and the final time
 											save_file=[{no}|yes] - save the results to a file
											save_file_intermediate=[{no}|yes] - save the file intermediately after each resource is completed
										Example:
											1) switches: when left blank or null then the defaults are taken
											   result: all documentation modules are printed
											2) switches: print_annotations=nonblank print_resource_projections=none print_resources_used=none print_datasource_lineage=none
											   result: only non-blank annotations are printed and nothing else
		excludeKeywordsInPathList	Exclude keywords in path, case insensitive.  Comma separated list.  These are whole words and not wild cards.  
										A word is defined by what exists between folder separators &quot;/&quot;. 
										i.e. &apos;analysis,archive&apos;
		excludePathsList			Exclude actual paths.  Double quotes are not required.  Comma separated list.
										The exclude path list simply has to be present in any part of the resource path.  
										This means that it can be a partial path.
		filePath 					The full file system path to generate the documentation file to.
	Output: 
		formattedText - formatted text is out output complete with a separator at the beginning of the resource.

	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/25/2012		Mike Tinius			5.2.0			Created new
	2012.401	11/12/2012		Mike Tinius			5.2.0			Modified to print out timings and save to a file after each resource.
	2018.1		03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/21/2019		Mike Tinius			7.0.8			Removed the use of VECTOR as it is not efficient.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE getDocResourceFormatImpl1(
    IN startingResourcePath			LONGVARCHAR,  
	IN startingResourceType			VARCHAR,
	IN constantPath					LONGVARCHAR,
	IN switches						LONGVARCHAR,
	IN excludeKeywordsInPathList	LONGVARCHAR,
	IN excludePathsList				LONGVARCHAR,
	IN filePath						LONGVARCHAR,
	OUT result						PIPE (formattedText	/lib/util/System.Text)
)
BEGIN
	DECLARE moduleName 					VARCHAR DEFAULT &apos;getDocResourceFormatImpl1&apos;;
	DECLARE debug 						CHAR(1);
    DECLARE resourcePath			 	LONGVARCHAR;
    DECLARE resourceType 				VARCHAR(255);
	DECLARE formattedText				/lib/util/System.Text DEFAULT &apos;&apos;;
	DECLARE resourceText				/lib/util/System.Text;
	DECLARE resPath						LONGVARCHAR;
	DECLARE resourceName				VARCHAR;
	DECLARE beginSeparator				VARCHAR;
	DECLARE endSeparator				VARCHAR;
	DECLARE minorSeparator 				VARCHAR;
	DECLARE eol							VARCHAR;
	DECLARE i							INTEGER;
	DECLARE excludeKeywordList			LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE excludePathList				LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE resourceList				LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE pathPart					VARCHAR(1024);
	DECLARE usePath						BOOLEAN;
	DECLARE numResources				INTEGER DEFAULT 0;
	DECLARE numContainers				INTEGER DEFAULT 0;
	DECLARE numConnectors 				INTEGER DEFAULT 0;
	DECLARE numDefinitionSets			INTEGER DEFAULT 0;
	DECLARE numTriggers					INTEGER DEFAULT 0;
	DECLARE numViews					INTEGER DEFAULT 0;
	DECLARE numProcs					INTEGER DEFAULT 0;
	DECLARE numTree						INTEGER DEFAULT 0;
	DECLARE numDatasources				INTEGER DEFAULT 0;
	DECLARE numPublished				INTEGER DEFAULT 0;
	DECLARE numOtherType				INTEGER DEFAULT 0;
	DECLARE startTime					TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE duration					INTERVAL DAY TO SECOND;
	DECLARE parseDocSwitch				INTEGER;
	DECLARE pos1, pos2					INTEGER;

	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;debug&apos;, 1, debug);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;beginSeparator&apos;, 1, beginSeparator);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;endSeparator&apos;, 1, endSeparator);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;minorSeparator&apos;, 1, minorSeparator);
	CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, &apos;eol&apos;, 1, eol);

	if (UPPER(debug) = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Exclude Keyword List.  excludeKeywordsInPathList=&apos;||NVL(excludeKeywordsInPathList,&apos;null&apos;));
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Exclude Path List.  excludePathsList=&apos;||excludePathsList);
	end if;

	-- Add the single resource to the vector when it is not a CONTAINER or DATA_SOURCE
	if (startingResourceType != &apos;CONTAINER&apos; and startingResourceType != &apos;DATA_SOURCE&apos;) then
		set resourceList = resourceList || startingResourcePath||&apos;::&apos;||startingResourceType||&apos;|&apos;;
	else
		-- Ignore the resource itself if it is a CONTAINER (folder)
		if (startingResourceType &lt;&gt; &apos;CONTAINER&apos;) then
			-- Add the resource itself to the vector if it is a DATA_SOURCE
			set resourceList = resourceList || startingResourcePath||&apos;::&apos;||startingResourceType||&apos;|&apos;;
		end if;
		-- Loop through and retrieve all the resources from a given starting resource path.
		for r as select * from /shared/ASAssets/Utilities/repository/getResourceListRecursive(startingResourcePath, startingResourceType) do
			-- set the full resource path
			set resourceList = resourceList || r.resPath||&apos;::&apos;||r.resType||&apos;|&apos;;
		end for;
	end if;
	if (length(resourceList) &gt; 0) then
		set resourceList = &apos;|&apos;||resourceList;
	end if;

	if (UPPER(debug) = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;resourceList=&apos;||NVL(resourceList,&apos;null&apos;));
	end if;

	set i = 0;
	for r as 
		select * from /shared/ASAssets/Utilities/string/extractTextList(resourceList, &apos;|&apos;,0,0,0,0,1)
		where textExpression is not null and length(trim(textExpression)) &gt; 0 
	do
		set i = i + 1;
		set resourcePath = r.textExpression;
		set pos1 = INSTR(resourcePath, &apos;::&apos;);
		if (pos1 &gt; 0) then
			set resourceType = SUBSTRING(resourcePath, pos1+2);
			set resourcePath = SUBSTRING(resourcePath, 1, pos1-1);
		else
			set resourcePath = null;
			set resourceType = null;
		end if;
		if (UPPER(debug) = &apos;Y&apos;) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;i=&apos;||i||&apos;  resourceType=&apos;||NVL(resourceType,&apos;null&apos;)||&apos;  resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
		end if;

		-- check for resource paths matching any portion of the exclude path list.  
		--		The exclude path list simply has to be present in any part of the resource path.  This means that it can be a partial path.
		-- set the full resource path
		set usePath = true;
		if (excludePathsList is not null and length(excludePathsList) &gt; 0) then
			set resPath = REPLACE(TRIM(resourcePath),&apos;&quot;&apos;,&apos;&apos;);
			usePathLoop1:
			for r as 
				select * from /shared/ASAssets/Utilities/string/extractTextList(excludePathsList, &apos;,&apos;,1,0,0,0,1)
				where textExpression is not null and length(trim(textExpression)) &gt; 0 
			do
				if (INSTR(resPath, r.textExpression) &gt; 0) then
					set usePath = false;
					leave usePathLoop1;
				end if;
			end for;
		end if;

		-- Check for keywords in the path
		if (usePath and excludeKeywordsInPathList is not null and length(excludeKeywordsInPathList) &gt; 0) then
			usePathLoop2:
			for s as 
				select * from /shared/ASAssets/Utilities/string/extractTextList(resourcePath, &apos;/&apos;,0,0,0,0,1)
				where textExpression is not null and length(trim(textExpression)) &gt; 0 
				  and LOWER(textExpression) not in (&apos;shared&apos;,&apos;services&apos;,&apos;databases&apos;,&apos;webservices&apos;)
			do
				set pathPart = REPLACE(s.textExpression,&apos;&quot;&apos;,&apos;&apos;);
				for r as 
					select * from /shared/ASAssets/Utilities/string/extractTextList(excludeKeywordsInPathList, &apos;,&apos;,0,0,0,0,1)
					where textExpression is not null and length(trim(textExpression)) &gt; 0 
				do
					if (UPPER(pathPart) = UPPER(REPLACE(r.textExpression,&apos;&quot;&apos;,&apos;&apos;))) then
						set usePath = false;
						leave usePathLoop2;
					end if;
				end for;
			end for;
		end if;

		-- Only continue if this path should be used
		if (usePath) then
			-- Count the number of resources, containers, views, procedures and published resources for the summary
			call /shared/ASAssets/Utilities/documentation/helpers/getDocCounts(resourceType, numResources, numContainers, numConnectors, numDefinitionSets, numTriggers, numViews, numProcs, numTree, numDatasources, numPublished, numOtherType);

			-- Format the resource
			call /shared/ASAssets/Utilities/documentation/implementations/getDocResourceFormatImpl1_resource(resourcePath, resourceType, constantPath, switches, resourceText);
			set formattedText = formattedText || resourceText;

			/********************************
			 * Save File Intermediate
			 *******************************/
			-- Save the documentation to the file if there is documentation and the file path is not empty and the switch save_file_intermediate=yes
				--  no=0 which means to overwrite the file because it was not saved previously.  Write it all at once at the end. 
				-- yes=1 which means append the contents since it has been saved intermediately along the way.
			if ( (formattedText IS NOT NULL AND LENGTH(&apos;|&apos;||formattedText||&apos;|&apos;) &gt; 2) and
				 (filePath IS NOT NULL AND LENGTH(&apos;|&apos;||filePath||&apos;|&apos;) &gt; 2) ) then
				call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;save_file&apos;, parseDocSwitch);
				if (parseDocSwitch = 1) then
					call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;save_file_intermediate&apos;, parseDocSwitch);
					if (parseDocSwitch = 1) then	
						call /shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii(filePath,1,formattedText);
						if (UPPER(debug) = &apos;Y&apos;) then
							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName,debug,&apos;Resource documentation text has been saved.&apos;);
						end if;
						set formattedText = &apos;&apos;;
					end if;
				end if;
			else
				set formattedText = formattedText || eol;
			end if; 
		end if;
	end for;
	set duration = CURRENT_TIMESTAMP - startTime;

	-- Add the summary of views processed
	set formattedText = formattedText || beginSeparator || eol;
	set formattedText = formattedText || &apos;---------------------&apos; || eol;
	set formattedText = formattedText || &apos;Documentation Summary&apos; || eol;
	set formattedText = formattedText || &apos;---------------------&apos; || eol;
	set formattedText = formattedText || &apos;Starting Root Path: &apos; || NVL(startingResourcePath,&apos;null&apos;) || eol;
	set formattedText = formattedText || &apos;Starting Path Type: &apos; || NVL(startingResourceType,&apos;null&apos;) || eol;
	set formattedText = formattedText || &apos;---------------------------------------------------------&apos; || eol;
	set formattedText = formattedText || &apos;Print Switches Input: &apos; || NVL(switches,&apos;null&apos;) || eol;
	set formattedText = formattedText || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;print_containers&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;print_containers=&apos;||parseDocSwitch|| &apos;            Key:[{none}=0|all=1]&apos; || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;print_annotations&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;print_annotations=&apos;||parseDocSwitch||&apos;            Key:[none=0|{all}=1|nonblank=2|blank=3]&apos; || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;print_resource_projections&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;print_resource_projections=&apos;||parseDocSwitch||&apos;   Key:[none=0|{all}=1]&apos; || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;print_resources_used&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;print_resources_used=&apos;||parseDocSwitch||&apos;         Key:[none=0|{all}=1]&apos; || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;print_datasource_accessed&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;print_datasource_accessed=&apos;||parseDocSwitch||&apos;    Key:[none=0|{all}=1]&apos; || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;print_datasource_lineage&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;print_datasource_lineage=&apos;||parseDocSwitch||&apos;     Key:[none=0|{all}=1]&apos; || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;print_time&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;print_time=&apos;||parseDocSwitch||&apos;                   Key:[{no}=0|yes=1]&apos; || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;save_file&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;save_file=&apos;||parseDocSwitch||&apos;                    Key:[{no}=0|yes=1]&apos; || eol;
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;save_file_intermediate&apos;, parseDocSwitch);
	set formattedText = formattedText || &apos;save_file_intermediate=&apos;||parseDocSwitch||&apos;       Key:[{no}=0|yes=1]&apos; || eol;
	set formattedText = formattedText || eol;
	set formattedText = formattedText || &apos;---------------------------------------------------------&apos; || eol;
	set formattedText = formattedText || &apos;Total Number of Resources:               &apos; || numResources || eol;
	set formattedText = formattedText || &apos;---------------------------------------------------------&apos; || eol;
	set formattedText = formattedText || &apos;Number of Published    (LINK):           &apos; || numPublished || eol;
	set formattedText = formattedText || &apos;Number of Folders      (CONTAINER):      &apos; || numContainers || eol;
	set formattedText = formattedText || &apos;Number of Views        (TABLE):          &apos; || numViews || eol;
	set formattedText = formattedText || &apos;Number of Procedures   (PROCEDURE):      &apos; || numProcs || eol;
	set formattedText = formattedText || &apos;Number of Data Sources (DATA_SOURCE):    &apos; || numDatasources || eol;
	set formattedText = formattedText || &apos;Number of XML          (TREE):           &apos; || numTree || eol;
	set formattedText = formattedText || &apos;Number of Triggers     (TRIGGER):        &apos; || numTriggers || eol;
	set formattedText = formattedText || &apos;Number of Connectors   (CONNECTOR):      &apos; || numConnectors || eol;
	set formattedText = formattedText || &apos;Number of Def. Sets    (DEFINITION_SET): &apos; || numDefinitionSets || eol;
	set formattedText = formattedText || &apos;Number of Other resource type:           &apos; || numOtherType || eol;

	-- Determine whether to print the timings for the entire documentation gathering process
	call /shared/ASAssets/Utilities/documentation/helpers/parseDocSwitches(switches, &apos;print_time&apos;, parseDocSwitch);
	if (parseDocSwitch = 1) then
		set formattedText = formattedText || &apos;---------------------------------------------------------&apos; || eol;
		set formattedText = formattedText || &apos;Documentation Generation Time=&apos;||cast(duration as varchar)||eol;
	end if;
	set formattedText = formattedText || endSeparator || eol;

	-- Insert the results into the output pipe
	insert into result values(formattedText);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564681711076</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
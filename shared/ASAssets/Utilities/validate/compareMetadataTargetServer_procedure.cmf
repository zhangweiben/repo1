<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="compareMetadataTargetServer" path="/shared/ASAssets/Utilities/validate/compareMetadataTargetServer" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>compareMetadataTargetServer

	This procedure is used to evaluate the lineage of a published resource and compare the metadata tables
		against a target server environment metadata.  Resources from source environment are assumed to be
		in the same location on the target server.  If the resource does not exist, it is reported that way.
		The objective is alert the development team of differences in the metadata on the target server before
		a deployment is performed.  The idea is to know what is going to happen before it happens so that the
		developer can prepare ahead of time.

	Input:
		inDebug					CHAR(1),		-- N=no debug.  Y=debug on.
		startingResourcePath	LONGVARCHAR,	-- The resource path to interrogate.  May be published resource, folder or datasource.
		targetDVSchemaPath		LONGVARCHAR, 	-- DV Path to a &quot;Composite Datasource&quot; schema where the following resources are published:
												--			getBasicResourceCursor_SQL_TABLE and getServerAttribute
												--	  Example:  /shared/Common/ComparisonTools/DV_Server/Utilities/repository
		sendEmail				CHAR(1),		-- null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
		emailList				LONGVARCHAR,	-- A comma-separated list of valid emails

	Output:
		OUT result					PIPE (
			startingLineagePath		VARCHAR(4000),
			message 				LONGVARCHAR
		)

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	04/19/2019		Mike Tinius			7.0.8			Created new

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="inDebug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="startingResourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="targetDVSchemaPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sendEmail" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="emailList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="startingLineagePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="message">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SendEMail" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="from" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="replyTo" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="to" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="cc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="bcc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="subject" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
      <element name="contentType" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="content" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Content" type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceLineageDirectRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/server/getServerAttribute" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="attributePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="keyValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	compareMetadataTargetServer

	This procedure is used to evaluate the lineage of a published resource and compare the metadata tables
		against a target server environment metadata.  Resources from source environment are assumed to be
		in the same location on the target server.  If the resource does not exist, it is reported that way.
		The objective is alert the development team of differences in the metadata on the target server before
		a deployment is performed.  The idea is to know what is going to happen before it happens so that the
		developer can prepare ahead of time.

	Input:
		inDebug					CHAR(1),		-- N=no debug.  Y=debug on.
		startingResourcePath	LONGVARCHAR,	-- The resource path to interrogate.  May be published resource, folder or datasource.
		targetDVSchemaPath		LONGVARCHAR, 	-- DV Path to a &quot;Composite Datasource&quot; schema where the following resources are published:
												--			getBasicResourceCursor_SQL_TABLE and getServerAttribute
												--	  Example:  /shared/Common/ComparisonTools/DV_Server/Utilities/repository
		sendEmail				CHAR(1),		-- null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
		emailList				LONGVARCHAR,	-- A comma-separated list of valid emails

	Output:
		OUT result					PIPE (
			startingLineagePath		VARCHAR(4000),
			message 				LONGVARCHAR
		)

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	04/19/2019		Mike Tinius			7.0.8			Created new

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE compareMetadataTargetServer(
		IN inDebug					CHAR(1),		-- N=no debug.  Y=debug on.
		IN startingResourcePath		LONGVARCHAR,	-- The resource path to interrogate.  May be published resource, folder or datasource.
		IN targetDVSchemaPath		LONGVARCHAR, 	-- DV Path to a &quot;Composite Datasource&quot; schema where the following resources are published:
													--			getBasicResourceCursor_SQL_TABLE and getServerAttribute
													--	  Example:  /shared/Common/ComparisonTools/DV_Server/Utilities/repository
		IN sendEmail				CHAR(1),		-- null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
		IN emailList				LONGVARCHAR,	-- A comma-separated list of valid emails
		OUT result					PIPE (
			startingLineagePath		VARCHAR(4000),
			message 				LONGVARCHAR
		)
)
BEGIN
	DECLARE moduleName					VARCHAR DEFAULT &apos;compareMetadataTargetServer&apos;;
	DECLARE debug						CHAR(1) DEFAULT UPPER(NVL(inDebug,&apos;N&apos;));
	DECLARE DEBUG_PRINT_SIZE			INTEGER DEFAULT 63000;
	DECLARE resourcePath				VARCHAR(4000) DEFAULT startingResourcePath;
	DECLARE resourceType				VARCHAR;
	DECLARE parentPath					VARCHAR(4000);
	DECLARE resourceName				VARCHAR DEFAULT null;
	DECLARE message						LONGVARCHAR;
	DECLARE errorMessage				LONGVARCHAR;
	DECLARE sourceServerDisplayName		VARCHAR;
	DECLARE targetServerDisplayName		VARCHAR;
	DECLARE version						VARCHAR;
	DECLARE targetServerColumnList		LONGVARCHAR;
	DECLARE impactedResourceList		LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE tableException				BOOLEAN;
	DECLARE ex							EXCEPTION;
	DECLARE email						VARCHAR;
	DECLARE displayName					VARCHAR;
	DECLARE emailFormat					VARCHAR DEFAULT &apos;TEXT_PLAIN&apos;;
	DECLARE subject						VARCHAR(1000);	-- The email subject line
	DECLARE body						LONGVARCHAR;	-- The body of the email
	DECLARE pos1, pos2					INTEGER;
	DECLARE targetColumnNameType		VARCHAR;
	DECLARE resExists					BOOLEAN;
	DECLARE sqlStatement				LONGVARCHAR;
	DECLARE sqlResourcePath				VARCHAR(4000);
	DECLARE getServerAttributeCurs		CURSOR(serverDisplayName VARCHAR);
	DECLARE getBasicResourceCursorCurs	CURSOR(columnName VARCHAR, columnType VARCHAR);

	-- Validate input
	IF (sendEmail IS NOT NULL AND UPPER(sendEmail) = &apos;Y&apos; AND emailList IS NULL OR LENGTH(TRIM(emailList)) = 0) THEN
		RAISE ex VALUE &apos;The input variable &quot;emailList&quot; may not be null or emtpy when sendEmail=Y&apos;;
	END IF;
	IF (targetDVSchemaPath IS NULL OR LENGTH(TRIM(targetDVSchemaPath)) = 0) THEN
		RAISE ex VALUE &apos;The input variable &quot;targetDVSchemaPath&quot; may not be null or empty.&apos;;
	END IF;

	CALL /lib/resource/ResourceExists(targetDVSchemaPath, &apos;CONTAINER&apos;, null, resExists);
	IF (NOT resExists) THEN
		RAISE ex VALUE &apos;The input variable &quot;targetDVSchemaPath&quot; path does not exist.&apos;;
	END IF;

	-- Get the version of the source server.
	CALL /shared/ASAssets/Utilities/repository/server/getServerAttribute(&apos;/server/config/info/version&apos;, version);

	-- Get the display name of the source server.
	CALL /shared/ASAssets/Utilities/repository/server/getServerAttribute(&apos;/server/config/info/displayName&apos;, sourceServerDisplayName);

	-- Concat the version at the end of the server display
	SET pos1 = INSTR(sourceServerDisplayName, &apos;-&apos;, -1, 1);
	IF (pos1 &gt; 0) THEN
		SET sourceServerDisplayName = SUBSTRING(sourceServerDisplayName, 1, pos1);
	END IF;
	SET sourceServerDisplayName = sourceServerDisplayName || &apos;[&apos;||version||&apos;]&apos;;

	-- Get the version of the target server.
	SET sqlResourcePath = targetDVSchemaPath || &apos;/getServerAttribute&apos;;
	CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(sqlResourcePath, null, sqlResourcePath);
	SET sqlStatement = &apos;SELECT * FROM &apos;||sqlResourcePath||&apos;(&apos;&apos;/server/config/info/version&apos;&apos;)&apos;;
	OPEN getServerAttributeCurs FOR sqlStatement;
	FOR script AS getServerAttributeCurs DO
		SET version = script.serverDisplayName;
	END FOR;

	-- Get the display name of the server.
	SET sqlResourcePath = targetDVSchemaPath || &apos;/getServerAttribute&apos;;
	CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(sqlResourcePath, null, sqlResourcePath);
	SET sqlStatement = &apos;SELECT * FROM &apos;||sqlResourcePath||&apos;(&apos;&apos;/server/config/info/displayName&apos;&apos;)&apos;;
	OPEN getServerAttributeCurs FOR sqlStatement;
	FOR script AS getServerAttributeCurs DO
		SET targetServerDisplayName = script.serverDisplayName;
	END FOR;

	-- Concat the version at the end of the server display
	SET pos1 = INSTR(targetServerDisplayName, &apos;-&apos;, -1, 1);
	IF (pos1 &gt; 0) THEN
		SET targetServerDisplayName = SUBSTRING(targetServerDisplayName, 1, pos1);
	END IF;
	SET targetServerDisplayName = targetServerDisplayName || &apos;[&apos;||version||&apos;]&apos;;

	IF (UPPER(debug) = &apos;Y&apos;) THEN
		CALL PRINT(moduleName||&apos; : sourceServerDisplayName=&apos;||NVL(sourceServerDisplayName,&apos;null&apos;));
		CALL PRINT(moduleName||&apos; : targetServerDisplayName=&apos;||NVL(targetServerDisplayName,&apos;null&apos;));
		CALL PRINT(&apos;&apos;);
	END IF;

	-- Get the resource type
	getType:
	FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, null) DO
		IF (r.&quot;type&quot; = &apos;DATA_SOURCE&apos; OR r.&quot;type&quot; = &apos;CONTAINER&apos;) THEN
			SET resourceType = r.&quot;type&quot;;
			leave getType;
		ELSEIF (r.&quot;type&quot; = &apos;LINK&apos; AND INSTR(resourcePath, &apos;/services/&apos;) &gt; 0) THEN
			SET resourceType = r.&quot;type&quot;;
			leave getType;
		ELSEIF ((r.&quot;type&quot; = &apos;TABLE&apos; OR r.&quot;type&quot; = &apos;PROCEDURE&apos;) AND INSTR(resourcePath, &apos;/shared/&apos;) &gt; 0) THEN
			SET resourceType = r.&quot;type&quot;;
			leave getType;
		END IF;
	END FOR;
	IF (UPPER(debug) = &apos;Y&apos;) THEN
		SET message = moduleName||&apos; : Starting resourceType=&apos;||NVL(resourceType,&apos;null&apos;) || &apos;   resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;);  
		CALL PRINT(message);
	END IF;

	IF (resourceType &lt;&gt; &apos;CONTAINER&apos; AND resourceType &lt;&gt; &apos;DATA_SOURCE&apos; AND resourceType &lt;&gt; &apos;LINK&apos; AND (INSTR(resourcePath,&apos;/shared/&apos;) &gt; 0 AND resourceType = &apos;DATA_SOURCE&apos;)) THEN
		RAISE ex VALUE &apos;The starting path must be a CONTAINER/FOLDER or a published DATA_SOURCE.&apos;;
	END IF;

	IF (resourceType IN (&apos;LINK&apos;, &apos;TABLE&apos;, &apos;PROCEDURE&apos;)) THEN
		CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;R&apos;, resourceName, parentPath);
		SET resourcePath = parentPath;
		-- Get the resource type
		getType:
		FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, null) DO
			IF (r.&quot;type&quot; = &apos;DATA_SOURCE&apos; OR r.&quot;type&quot; = &apos;CONTAINER&apos;) THEN
				SET resourceType = r.&quot;type&quot;;
				leave getType;
			ELSEIF (r.&quot;type&quot; = &apos;LINK&apos; AND INSTR(resourcePath, &apos;/services/&apos;) &gt; 0) THEN
				SET resourceType = r.&quot;type&quot;;
				leave getType;
			ELSEIF ((r.&quot;type&quot; = &apos;TABLE&apos; OR r.&quot;type&quot; = &apos;PROCEDURE&apos;) AND INSTR(resourcePath, &apos;/shared/&apos;) &gt; 0) THEN
				SET resourceType = r.&quot;type&quot;;
				leave getType;
			END IF;
		END FOR;
		IF (UPPER(debug) = &apos;Y&apos;) THEN
			SET message = moduleName||&apos; : resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;)||&apos;   resourceType=&apos;||NVL(resourceType,&apos;null&apos;)||&apos;   resourceName=&apos;||NVL(resourceName,&apos;null&apos;);  
			CALL PRINT(message);
		END IF;
	END IF;

	-- Logic for /services/databases folders
	IF (INSTR(resourcePath, &apos;/services/databases&apos;) &gt; 0) THEN
		-- Iterate over the resource container list
		FOR r AS 
			SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(resourcePath, resourceType) 
			WHERE resType &lt;&gt; &apos;CONTAINER&apos;
		DO
			SET resourcePath = r.resPath;
			SET resourceType = r.resType;

			IF (resourceName IS NULL OR (resourceName IS NOT NULL AND resourceName = r.name)) THEN
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL PRINT(&apos;&apos;);
					CALL PRINT(&apos;ANALYZE PUBLISHED resourcePath=&apos;||resourcePath);
				END IF;

				FOR l AS
					SELECT DISTINCT resName, resPath, resType 
					FROM /shared/ASAssets/Utilities/repository/getResourceLineageDirectRecursive(
						null,		--IN inSeqNum					INTEGER,		-- null to start with
						null,		--IN inParentID					INTEGER, 		-- null to start with
						null,		--IN inResourceDepth			INTEGER, 		-- null to start with
						null,		--IN inLineageResourceIdList	LONGVARCHAR,	-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
								 	-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
						r.resPath, 	--IN resourcePath 				/shared/ASAssets/Utilities/TypeDefinitions.pathType, -- actual resource path and not a folder path
						r.resType,	--IN resourceType				VARCHAR, 		-- The resource type
						null,		--IN excludePathsList			LONGVARCHAR, 	-- comma separate list of resource paths or partials paths to exclude
						0,			--IN datasourceAncestor			INTEGER, 		-- flag to get the data source ancestory (1=yes, 0=no)
						1			--IN inIgnoreResourceDoesNotExist INTEGER, 		-- Ignore any resources that do not exist
									-- 1 = Bypass the processing of that resource.
									-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
					)
					WHERE subType = &apos;DATABASE_TABLE&apos;
				DO
					IF (UPPER(debug) = &apos;Y&apos;) THEN
						CALL PRINT(&apos;ANALYZE DATABASE_TABLE resourcePath=&apos;||l.resPath);
					END IF;
					-- Produce a pipe delimited string of column name:column type pairs
					-- 	e.g. TABLE=tablename|name1:type1|name2:type2|name3:type3|
					SET targetServerColumnList = &apos;TABLE=&apos;||l.resName||&apos;|&apos;;
					SET tableException = false;
					BEGIN INDEPENDENT TRANSACTION
						-- Get the name of the target server this procedure is comparing with
						SET sqlResourcePath = targetDVSchemaPath || &apos;/getBasicResourceCursor_SQL_TABLE&apos;;
						CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(sqlResourcePath, null, sqlResourcePath);
						-- Prepare the SQL statement
						SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||sqlResourcePath||&apos;(l.resPath, l.resType) WHERE columnName IS NOT NULL&apos;;
						-- Get the column list from the target server
						OPEN getBasicResourceCursorCurs FOR sqlStatement;
						FOR target AS getBasicResourceCursorCurs DO
							SET targetServerColumnList = targetServerColumnList || target.columnName||&apos;:&apos;||target.columnType||&apos;|&apos;;
						END FOR;
					EXCEPTION
							ELSE
								SET errorMessage = CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR);
								SET tableException = true;
								IF (INSTR(errorMessage, &apos;does not exist&apos;) &gt; 0) THEN
									SET message = &apos;TABLE DOES NOT EXIST: &apos;||l.resPath;
									SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
									INSERT INTO result VALUES(resourcePath, message);
									IF (UPPER(debug) = &apos;Y&apos;) THEN
										CALL PRINT(message);
									END IF;
								ELSE
									SET message = &apos;UNKNOWN EXCEPTION: &apos;||l.resPath||&apos;  &apos;||REPLACE(errorMessage, CHR(10), &apos; &apos;);
									SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
									INSERT INTO result VALUES(resourcePath, message);
									IF (UPPER(debug) = &apos;Y&apos;) THEN
										CALL PRINT(message);
									END IF;
								END IF;
					END;

					IF (NOT tableException) THEN
						FOR c AS 
							SELECT columnName, columnType FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(l.resPath, l.resType)
							WHERE columnName IS NOT NULL
						DO
							IF (INSTR(targetServerColumnList, &apos;|&apos;||c.columnName||&apos;:&apos;||c.columnType||&apos;|&apos;) = 0) THEN
								SET pos1 = INSTR(targetServerColumnList, &apos;|&apos;||c.columnName||&apos;:&apos;);
								IF (pos1 = 0) THEN
									SET message = &apos;COLUMN DOES NOT EXIST: &apos;||l.resPath||&apos;  column=&apos;||c.columnName||&apos;:&apos;||c.columnType;
									SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
									INSERT INTO result VALUES(resourcePath, message);
									IF (UPPER(debug) = &apos;Y&apos;) THEN
										CALL PRINT(message);
									END IF;
								ELSE
									-- Given the column name was found in &quot;|col1:type|&quot;, get the ending position of &quot;|&quot;
									SET pos2 = INSTR(targetServerColumnList, &apos;|&apos;, pos1+1);
									-- Extract the target server column name and type to show as a comparison.
									SET targetColumnNameType = SUBSTRING(targetServerColumnList, pos1+1, pos2-pos1-1);
									SET message = &apos;COLUMN TYPE MISMATCH: &apos;||l.resPath||&apos;  column=&apos;||c.columnName||&apos;:&apos;||c.columnType||&apos;  &apos;||&apos;TARGET=&apos;||targetColumnNameType;
									SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
									INSERT INTO result VALUES(resourcePath, message);
									IF (UPPER(debug) = &apos;Y&apos;) THEN
										CALL PRINT(message);
									END IF;
								END IF;
							END IF;
						END FOR;
					END IF;
				END FOR;
			ELSE
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL PRINT(&apos;SKIPPING PUBLISHED resourceType=&apos;||resourceType||&apos;  resourcePath=&apos;||resourcePath);
				END IF;
			END IF;
		END FOR;

	-- Logic for /services/webservices folders
	ELSEIF (INSTR(resourcePath, &apos;/services/webservices&apos;) &gt; 0 AND (resourceType = &apos;CONTAINER&apos; OR resourceType = &apos;DATA_SOURCE&apos;)) THEN

		FOR r AS 
			SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(resourcePath, resourceType) 
				WHERE resType = &apos;LINK&apos;
				  AND resPath &lt;&gt; &apos;/services/webservices/system/admin&apos;
				  AND resPath &lt;&gt; &apos;/services/webservices/system/util&apos;
		DO
			SET resourcePath = r.resPath;
			SET resourceType = r.resType;

			IF (resourceName IS NULL OR (resourceName IS NOT NULL AND resourceName = r.name)) THEN
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL PRINT(&apos;&apos;);
					CALL PRINT(&apos;ANALYZE PUBLISHED resourcePath=&apos;||resourcePath);
				END IF;

				FOR l AS
					SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceLineageDirectRecursive(
						null,		--IN inSeqNum					INTEGER,		-- null to start with
						null,		--IN inParentID					INTEGER, 		-- null to start with
						null,		--IN inResourceDepth			INTEGER, 		-- null to start with
						null,		--IN inLineageResourceIdList	LONGVARCHAR,	-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
									-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
						r.resPath, 	--IN resourcePath 				/shared/ASAssets/Utilities/TypeDefinitions.pathType, -- actual resource path and not a folder path
						r.resType,	--IN resourceType				VARCHAR, 		-- The resource type
						null,		--IN excludePathsList			LONGVARCHAR, 	-- comma separate list of resource paths or partials paths to exclude
						0,			--IN datasourceAncestor			INTEGER, 		-- flag to get the data source ancestory (1=yes, 0=no)
						1			--IN inIgnoreResourceDoesNotExist INTEGER, 		-- Ignore any resources that do not exist
									-- 1 = Bypass the processing of that resource.
									-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
					)
					WHERE subType = &apos;DATABASE_TABLE&apos;
				DO
					IF (UPPER(debug) = &apos;Y&apos;) THEN
						CALL PRINT(&apos;ANALYZE DATABASE_TABLE resourcePath=&apos;||l.resPath);
					END IF;
					-- Produce a pipe delimited string of column name:column type pairs
					-- 	e.g. TABLE=tablename|name1:type1|name2:type2|name3:type3|
					SET targetServerColumnList = &apos;TABLE=&apos;||l.resName||&apos;|&apos;;
					SET tableException = false;
					BEGIN INDEPENDENT TRANSACTION
						-- Get the name of the target server this procedure is comparing with
						SET sqlResourcePath = targetDVSchemaPath || &apos;/getBasicResourceCursor_SQL_TABLE&apos;;
						CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(sqlResourcePath, null, sqlResourcePath);
						-- Prepare the SQL statement
						SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||sqlResourcePath||&apos;(l.resPath, l.resType) WHERE columnName IS NOT NULL&apos;;
						-- Get the column list from the target server
						OPEN getBasicResourceCursorCurs FOR sqlStatement;
						FOR target AS getBasicResourceCursorCurs DO
							SET targetServerColumnList = targetServerColumnList || target.columnName||&apos;:&apos;||target.columnType||&apos;|&apos;;
						END FOR;
					EXCEPTION
						ELSE
							SET errorMessage = CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR);
							SET tableException = true;
							IF (INSTR(errorMessage, &apos;does not exist&apos;) &gt; 0) THEN
								SET message = &apos;TABLE DOES NOT EXIST: &apos;||l.resPath;
								SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
								INSERT INTO result VALUES(resourcePath, message);
								IF (UPPER(debug) = &apos;Y&apos;) THEN
									CALL PRINT(message);
								END IF;
							ELSE
								SET message = &apos;UNKNOWN EXCEPTION: &apos;||l.resPath||&apos;  &apos;||REPLACE(errorMessage, CHR(10), &apos; &apos;);
								SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
								INSERT INTO result VALUES(resourcePath, message);
								IF (UPPER(debug) = &apos;Y&apos;) THEN
									CALL PRINT(message);
								END IF;
							END IF;
					END;

					IF (NOT tableException) THEN
						FOR c AS 
							SELECT columnName, columnType FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(l.resPath, l.resType)
							WHERE columnName IS NOT NULL
						DO
							IF (INSTR(targetServerColumnList, &apos;|&apos;||c.columnName||&apos;:&apos;||c.columnType||&apos;|&apos;) = 0) THEN
								SET pos1 = INSTR(targetServerColumnList, &apos;|&apos;||c.columnName||&apos;:&apos;);
								IF (pos1 = 0) THEN
									SET message = &apos;COLUMN DOES NOT EXIST: &apos;||l.resPath||&apos;  column=&apos;||c.columnName||&apos;:&apos;||c.columnType;
									SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
									INSERT INTO result VALUES(resourcePath, message);
									IF (UPPER(debug) = &apos;Y&apos;) THEN
										CALL PRINT(message);
									END IF;
								ELSE
									-- Given the column name was found in &quot;|col1:type|&quot;, get the ending position of &quot;|&quot;
									SET pos2 = INSTR(targetServerColumnList, &apos;|&apos;, pos1+1);
									-- Extract the target server column name and type to show as a comparison.
									SET targetColumnNameType = SUBSTRING(targetServerColumnList, pos1+1, pos2-pos1-1);
									SET message = &apos;COLUMN TYPE MISMATCH: &apos;||l.resPath||&apos;  column=&apos;||c.columnName||&apos;:&apos;||c.columnType||&apos;  &apos;||&apos;TARGET=&apos;||targetColumnNameType;
									SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
									INSERT INTO result VALUES(resourcePath, message);
									IF (UPPER(debug) = &apos;Y&apos;) THEN
										CALL PRINT(message);
									END IF;
								END IF;
							END IF;
						END FOR;
					END IF;
				END FOR;
			ELSE
				IF (UPPER(debug) = &apos;Y&apos;) THEN
					CALL PRINT(&apos;SKIPPING PUBLISHED resourceType=&apos;||resourceType||&apos;  resourcePath=&apos;||resourcePath);
				END IF;
			END IF;
		END FOR;
	ELSE
		IF (UPPER(debug) = &apos;Y&apos;) THEN
			SET message = moduleName||&apos; : The resource is not valid for applying rules.  resourceType=&apos;||NVL(resourceType,&apos;null&apos;) || &apos;   resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;);  
			CALL PRINT(message);
		END IF;
	END IF;

	-- Send the email of the entire impacted list if there is anything in the list and sendEmail=&apos;Y&apos;
	IF (LENGTH(TRIM(impactedResourceList)) &gt; 0) THEN
		SET displayName = &apos;IT&apos;;
		SET email = emailList;
		IF (email IS NOT NULL) THEN
			SET subject = &apos;DV VALIDATION EXCEPTION: Comnpare Metadata&apos;||&apos;  Target Server=&apos;||targetServerDisplayName||&apos;   Source Server=&apos;||sourceServerDisplayName;
			SET body = &apos;To: &apos;|| displayName || CHR(10) || CHR(10);
			SET body = body  || subject || CHR(10) || CHR(10);
			SET body = body  || &apos;The following resources have been flagged due to impacted resources.&apos;|| CHR(10);
			SET body = body  || impactedResourceList || CHR(10);
			-- Print out email debug
			IF (UPPER(debug) = &apos;Y&apos;) THEN
				SET message = moduleName||&apos; : Send Email:&apos;||CHR(10)||
										&apos;  email=&apos;||NVL(email,&apos;null recipient list&apos;)||CHR(10)||
										&apos;  subject=&apos;||NVL(subject,&apos;null subject&apos;)||CHR(10)||
										&apos;  body=&apos;||NVL(body,&apos;null message body&apos;);
				CALL PRINT(&apos;&apos;);
				CALL PRINT(SUBSTRING(message,1,DEBUG_PRINT_SIZE));
			END IF;
			-- Send the email
			IF (sendEmail IS NOT NULL AND UPPER(sendEmail) = &apos;Y&apos;) THEN
				CALL /lib/util/SendEMail(null, null, email, null, null, subject, emailFormat, NVL(body,&apos;null message body&apos;));
			END IF;
		END IF;
	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1554936424229</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564694116236</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">16/277</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/399</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/297</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/253</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/317</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/316</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/364</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/338</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/204</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/188</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/288</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/388</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/408</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/205</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/260</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/143</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/142</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/415</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/141</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/371</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/162</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/227</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/435</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/436</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1554936424229</attribute>
</metadata>
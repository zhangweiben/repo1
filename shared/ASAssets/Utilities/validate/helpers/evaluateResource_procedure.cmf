<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="evaluateResource" path="/shared/ASAssets/Utilities/validate/helpers/evaluateResource" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>evaluateResource

	This procedure is used to evaluate DV source code and provide an output of code that fails the source code check rules.

	evaluate rules list:
		1=impacted resource
		2=select distinct
		3=select *
		4=order by
        5=published path not allowed
        6=shared path(s) not allowed (specified)
        7=users path not allowed
		8=limit number of web service operations
	
	INPUT:
		IN inDebug				CHAR(1),		-- N=no debug.  Y=debug on.
		IN resourcePath 		LONGVARCHAR,	-- The actual resource path
		IN resourceType			VARCHAR,		-- The resource type [LINK if published, TABLE or PROCEDURE if in /shared area].
		IN displayViolations	VARCHAR,		-- Display violation types: A[all],P[pass],W[warning],F[fail] or a combination like W,F.  A comma separated list.  Null returns all.
		IN includeList			VARCHAR,		-- Comma separated list of evaluation rules to include.
		IN excludeList			VARCHAR,		-- Comma separated list of evaluation rules to exclude.  ExcludeList overrides includeList.
		IN inGroupNum			INTEGER,		-- The group number associated with the list of resource generated by the incoming resourcePath.
 		IN pathNowAllowed		LONGVARCHAR,	-- Comma separated list of paths that are not allowed to be directly accessed from views above the formatting layer.

	OUTPUT:
		result				PIPE (
			groupNum			INTEGER,		-- A numerical sequential value indicating what group number the set of resources belong to.
			violation			CHAR(1),		-- F=Fail, W=Warning, P=pass.
			ruleViolations		VARCHAR(255),	-- A list of rule violations that have occurred for a given resource.
			ruleWarnings		VARCHAR(255),	-- A list of rule warnings that have occurred for a given resource.
			ruleMessage			VARCHAR(500),	-- A message to be relayed to the user.
			parentPath			VARCHAR(4000),	-- The parent path of the resource being evaluated.
			resourcePath 		VARCHAR(4000),	-- The actual path of the resource being evaluated.
			resourceType		VARCHAR(255),	-- The resource type of the resource being evaluated.
			resourceName		VARCHAR(255),	-- The resource name of the resource being evaluated.
			ownerName			VARCHAR(255),	-- The owner name of the resource being modified.
			ownerDomain			VARCHAR(255),	-- The owner domain of the resource being modified.
			modUser				VARCHAR(255),	-- The modified user of the resource being modified.
			modDomain			VARCHAR(255),	-- The modified user domain of the resource being modified.
			modDate				TIMESTAMP,		-- The modified timestamp of the resource being modified.
			impactLevel			VARCHAR(255),	-- The impact level (type) of the resource being modified.
			impactMessage		VARCHAR(32767)	-- The impact message of the resource beaing modified.
		)
	
	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	04/19/2019		Mike Tinius			7.0.8			Created new

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="inDebug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="displayViolations" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="includeList" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="excludeList" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inGroupNum" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="pathNotAllowed" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="excludePathsList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="maxNumberWebServiceOperations" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="groupNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="violation">
          <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
        </element>
        <element name="ruleViolations">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ruleWarnings">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ruleMessage">
          <datatype name="VARCHAR" type="STRING" maxLength="500"/>
        </element>
        <element name="parentPath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ownerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ownerDomain">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="modUser">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="modDomain">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="modDate">
          <datatype name="TIMESTAMP" type="DATETIME"/>
        </element>
        <element name="impactLevel">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="impactMessage">
          <datatype name="VARCHAR" type="STRING" maxLength="32767"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_ResourceAttributes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="value">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="valueList">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="valueMap">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceLineageDirectRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="DATETIME"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/user/getDomains" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="domainType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="guid">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/time/DateUtils/BigintToTimestamp" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inBigint" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="DATETIME"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/validate/helpers/evaluateResourceOrderBy" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="inSqlScript" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="containsOrderBy" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	evaluateResource

	This procedure is used to evaluate DV source code and provide an output of code that fails the source code check rules.

	evaluate rules list:
		1=impacted resource
		2=select distinct
		3=select *
		4=order by
        5=published path not allowed
        6=shared path(s) not allowed (specified)
        7=users path not allowed
		8=limit number of web service operations
	
	INPUT:
		IN inDebug				CHAR(1),		-- N=no debug.  Y=debug on.
		IN resourcePath 		LONGVARCHAR,	-- The actual resource path
		IN resourceType			VARCHAR,		-- The resource type [LINK if published, TABLE or PROCEDURE if in /shared area].
		IN displayViolations	VARCHAR,		-- Display violation types: A[all],P[pass],W[warning],F[fail] or a combination like W,F.  A comma separated list.  Null returns all.
		IN includeList			VARCHAR,		-- Comma separated list of evaluation rules to include.
		IN excludeList			VARCHAR,		-- Comma separated list of evaluation rules to exclude.  ExcludeList overrides includeList.
		IN inGroupNum			INTEGER,		-- The group number associated with the list of resource generated by the incoming resourcePath.
 		IN pathNowAllowed		LONGVARCHAR,	-- Comma separated list of paths that are not allowed to be directly accessed from views above the formatting layer.

	OUTPUT:
		result				PIPE (
			groupNum			INTEGER,		-- A numerical sequential value indicating what group number the set of resources belong to.
			violation			CHAR(1),		-- F=Fail, W=Warning, P=pass.
			ruleViolations		VARCHAR(255),	-- A list of rule violations that have occurred for a given resource.
			ruleWarnings		VARCHAR(255),	-- A list of rule warnings that have occurred for a given resource.
			ruleMessage			VARCHAR(500),	-- A message to be relayed to the user.
			parentPath			VARCHAR(4000),	-- The parent path of the resource being evaluated.
			resourcePath 		VARCHAR(4000),	-- The actual path of the resource being evaluated.
			resourceType		VARCHAR(255),	-- The resource type of the resource being evaluated.
			resourceName		VARCHAR(255),	-- The resource name of the resource being evaluated.
			ownerName			VARCHAR(255),	-- The owner name of the resource being modified.
			ownerDomain			VARCHAR(255),	-- The owner domain of the resource being modified.
			modUser				VARCHAR(255),	-- The modified user of the resource being modified.
			modDomain			VARCHAR(255),	-- The modified user domain of the resource being modified.
			modDate				TIMESTAMP,		-- The modified timestamp of the resource being modified.
			impactLevel			VARCHAR(255),	-- The impact level (type) of the resource being modified.
			impactMessage		VARCHAR(32767)	-- The impact message of the resource beaing modified.
		)
	
	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2019.200	04/19/2019		Mike Tinius			7.0.8			Created new

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE evaluateResource(
	IN inDebug						CHAR(1),		-- N=no debug.  Y=debug on.
	IN resourcePath 				LONGVARCHAR,	-- The actual resource path
	IN resourceType					VARCHAR,		-- The resource type [LINK if published, TABLE or PROCEDURE if in /shared area].  If NULL, LINK is assumed to be the default.
	IN displayViolations			VARCHAR,		-- Display violation types: A[all],P[pass],W[warning],F[fail] or a combination like W,F.  A comma separated list.  Null returns all.
	IN includeList					VARCHAR,		-- Comma separated list of evaluation rules to include.
	IN excludeList					VARCHAR,		-- Comma separated list of evaluation rules to exclude.  ExcludeList overrides includeList.
	IN inGroupNum					INTEGER,		-- The group number associated with the list of resource generated by the incoming resourcePath.
 	IN pathNotAllowed				LONGVARCHAR,	-- Comma separated list of paths that are not allowed to be directly accessed from views above the formatting layer.
	IN excludePathsList				LONGVARCHAR,	-- Comma separated list of resource paths or partials paths to exclude while processing.
	IN maxNumberWebServiceOperations INTEGER,		-- Maximum number of web service operations per web service
	OUT result				PIPE (
			groupNum			INTEGER,		-- A numerical sequential value indicating what group number the set of resources belong to.
			violation			CHAR(1),		-- F=Fail, W=Warning, P=pass.
			ruleViolations		VARCHAR(255),	-- A list of rule violations that have occurred for a given resource.
			ruleWarnings		VARCHAR(255),	-- A list of rule warnings that have occurred for a given resource.
			ruleMessage			VARCHAR(500),	-- A message to be relayed to the user.
			parentPath			VARCHAR(4000),	-- The parent path of the resource being evaluated.
			resourcePath 		VARCHAR(4000),	-- The actual path of the resource being evaluated.
			resourceType		VARCHAR(255),	-- The resource type of the resource being evaluated.
			resourceName		VARCHAR(255),	-- The resource name of the resource being evaluated.
			ownerName			VARCHAR(255),	-- The owner name of the resource being modified.
			ownerDomain			VARCHAR(255),	-- The owner domain of the resource being modified.
			modUser				VARCHAR(255),	-- The modified user of the resource being modified.
			modDomain			VARCHAR(255),	-- The modified user domain of the resource being modified.
			modDate				TIMESTAMP,		-- The modified timestamp of the resource being modified.
			impactLevel			VARCHAR(255),	-- The impact level (type) of the resource being modified.
			impactMessage		VARCHAR(32767)	-- The impact message of the resource beaing modified.
	)
)
BEGIN
	DECLARE moduleName					VARCHAR DEFAULT &apos;evaluateResource&apos;;
	DECLARE debug						CHAR(1) DEFAULT UPPER(NVL(inDebug,&apos;N&apos;));
	DECLARE rulesList					VARCHAR DEFAULT &apos;1,2,3,4,5,6,7,8&apos;;
	DECLARE rulesListExec				VARCHAR DEFAULT &apos;&apos;;
	DECLARE validDisplayViolationList	VARCHAR DEFAULT &apos;A,P,W,F&apos;;	-- A[all],P[pass],W[warning],F[fail]
	-- comma separated list of resource paths or partials paths to exclude
	DECLARE domainList					VARCHAR(1000) DEFAULT &apos;&apos;;
	DECLARE excludeList_				VARCHAR DEFAULT TRIM(NVL(excludeList,&apos;  &apos;));
	DECLARE groupNum					INTEGER DEFAULT inGroupNum;
	DECLARE sqlScript					LONGVARCHAR;
	DECLARE resPath						VARCHAR(4000) DEFAULT resourcePath;
	DECLARE resType						VARCHAR DEFAULT resourceType;
	DECLARE resCount					INTEGER DEFAULT 0;
	DECLARE parentPath					VARCHAR(4000) DEFAULT null;
	DECLARE outText						LONGVARCHAR;
	DECLARE message						LONGVARCHAR;
	DECLARE i,x,y						INTEGER;
	DECLARE ruleNum						INTEGER;
	DECLARE ruleResult					INTEGER;
	DECLARE leftBracketPos				INTEGER;
	DECLARE rightBracketPos				INTEGER;
	DECLARE bracketCount				INTEGER;
	DECLARE ch							CHAR(1);
	DECLARE ex							EXCEPTION;
	DECLARE TYPE recType				ROW (
			groupNum			INTEGER,		-- A numerical sequential value indicating what group number the set of resources belong to.
			violation			CHAR(1),		-- F=Fail, W=Warning, P=pass.
			ruleViolations		VARCHAR(255),	-- A list of rule violations that have occurred for a given resource.
			ruleWarnings		VARCHAR(255),	-- A list of rule warnings that have occurred for a given resource.
			ruleMessage			VARCHAR(500),	-- A message to be relayed to the user.
			parentPath			VARCHAR(4000),	-- The parent path of the resource being evaluated.
			resourcePath 		VARCHAR(4000),	-- The actual path of the resource being evaluated.
			resourceType		VARCHAR(255),	-- The resource type of the resource being evaluated.
			resourceName		VARCHAR(255),	-- The resource name of the resource being evaluated.
			ownerName			VARCHAR(255),	-- The owner name of the resource being modified.
			ownerDomain			VARCHAR(255),	-- The owner domain of the resource being modified.
			modUser				VARCHAR(255),	-- The modified user of the resource being modified.
			modDomain			VARCHAR(255),	-- The modified user domain of the resource being modified.
			modDate				TIMESTAMP,		-- The modified timestamp of the resource being modified.
			impactLevel			VARCHAR(255),	-- The impact level (type) of the resource being modified.
			impactMessage		VARCHAR(32767)	-- The impact message of the resource beaing modified.
	);
	DECLARE rec							recType;
	DECLARE containsOrderBy				BIT;

	-- Assign group number
	IF (groupNum IS NULL) THEN
		SET groupNum = 1;
	END IF;

	-- Validate pathNotAllowed
	IF (pathNotAllowed IS NULL OR LENGTH(TRIM(pathNotAllowed)) = 0) THEN
		RAISE ex VALUE &apos;The input parameter &quot;pathNotAllowed&quot; may not be null or empty.&apos;;
	END IF;

	-- Get a list of domains
	FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/&quot;user&quot;/getDomains() DO
		SET domainList = domainList || r.name || &apos;,&apos;;
	END FOR;

	-- Validate the display violation list
	IF (displayViolations IS NOT NULL AND LENGTH(TRIM(displayViolations)) &gt; 0) THEN
		FOR r AS 
			SELECT object  
				FROM /shared/ASAssets/Utilities/string/extractDelimitedText(TRIM(displayViolations),&apos;,&apos;,0,0,0,1,0)
				WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
		DO
			-- Validate the incoming display violation list
			IF (INSTR(&apos;,&apos;||validDisplayViolationList||&apos;,&apos;,  &apos;,&apos;||UPPER(r.object)||&apos;,&apos;) = 0) THEN
				RAISE ex VALUE &apos;The display violation option is not valid: &apos;||r.object;
			END IF;
		END FOR;
	END IF;

	-- Determine the actual option/rules list to execute with based on inclusions and exclusions of rules.
	IF (includeList IS NOT NULL AND LENGTH(TRIM(includeList)) &gt; 0) THEN
		SET rulesList = TRIM(includeList);
	END IF;
	IF (excludeList IS NOT NULL AND LENGTH(TRIM(excludeList)) &gt; 0) THEN
		FOR r AS 
			SELECT object  
				FROM /shared/ASAssets/Utilities/string/extractDelimitedText(TRIM(rulesList),&apos;,&apos;,0,0,0,1,0)
				WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
		DO
			-- If the option list item is NOT found in the exclusion list then add it into the option execution list
			IF (INSTR(&apos;,&apos;||excludeList_||&apos;,&apos;,  &apos;,&apos;||r.object||&apos;,&apos;) = 0) THEN
				SET rulesListExec = rulesListExec || r.object || &apos;,&apos;;
			END IF;
		END FOR;
		-- Remove the last comma at the end of the list
		SET rulesListExec = SUBSTRING(rulesListExec, 1, LENGTH(rulesListExec) - 1);
	ELSE
		SET rulesListExec = rulesList;
	END IF;
	IF (UPPER(debug) = &apos;Y&apos;) THEN
		CALL PRINT(moduleName||&apos; : rulesListExec=&apos;||NVL(rulesListExec,&apos;null&apos;));
	END IF;

	-- If no resourceType was provided then do a lookup.  If LINK was found then exit otherwise get what is available for the type matching the resPath.
	IF (resourceType IS NULL) THEN
		getType:
		FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resPath, resType) DO
			IF (r.&quot;type&quot; = &apos;LINK&apos; AND INSTR(resPath, &apos;/services/&apos;) &gt; 0) THEN
				SET resType = r.&quot;type&quot;;
				leave getType;
			END IF;
			IF ((r.&quot;type&quot; = &apos;TABLE&apos; OR r.&quot;type&quot; = &apos;PROCEDURE&apos;) AND INSTR(resPath, &apos;/shared/&apos;) &gt; 0) THEN
				SET resType = r.&quot;type&quot;;
				leave getType;
			END IF;
		END FOR;
	END IF;

	-- Logic for /services/databases folders
	IF (INSTR(resourcePath, &apos;/services/databases&apos;) &gt; 0) THEN
		/*
			IN inSeqNum						INTEGER,		-- null to start with
			IN inParentID					INTEGER, 		-- null to start with
			IN inResourceDepth				INTEGER, 		-- null to start with
			IN inLineageResourceIdList		LONGVARCHAR,	-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
															-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
			IN resourcePath 				/shared/ASAssets/Utilities/TypeDefinitions.pathType, -- actual resource path and not a folder path
			IN resourceType					VARCHAR, 		-- The resource type
			IN excludePathsList				LONGVARCHAR, 	-- comma separate list of resource paths or partials paths to exclude
			IN datasourceAncestor			INTEGER, 		-- flag to get the data source ancestory (1=yes, 0=no)
			IN inIgnoreResourceDoesNotExist	INTEGER, 		-- Ignore any resources that do not exist
															-- 1 = Bypass the processing of that resource.
															-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
		*/
		FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceLineageDirectRecursive(null, null, null, null, resPath, resType, excludePathsList, 0, 1) DO
			-- Initialize variables
			SET rec = null;
			SET sqlScript = null;

			-- Setup the record
			SET rec.groupNum = groupNum;
			SET rec.violation = &apos;P&apos;;
			SET rec.ruleViolations = &apos;&apos;;
			SET rec.ruleWarnings = &apos;&apos;;
			SET rec.parentPath = parentPath;
			SET rec.resourcePath = r.resPath;
			SET rec.resourceType = r.resType;
			SET rec.resourceName = r.resName;

			-- Retrieve the SQL text and impacted flags
			FOR res AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(r.resPath, r.resType) DO
				IF (res.sqlText IS NOT NULL) THEN
					SET sqlScript = res.sqlText;
				END IF;
				IF (res.scriptText IS NOT NULL) THEN
					SET sqlScript = res.scriptText;
				END IF;
				SET rec.impactLevel = res.impactLevel;
				SET rec.impactMessage = res.impactMessage;
				SET rec.ownerName = res.ownerName;
				SET rec.ownerDomain = res.ownerDomain;
			END FOR;

			-- Retrieve the last modified information
			FOR attr AS 
				SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_ResourceAttributes(r.resPath, r.resType) 
				WHERE name IN (&apos;lastModifiedUserName&apos;, &apos;lastModifiedUserDomain&apos;, &apos;lastModifiedDate&apos;)
			DO
				IF (attr.name = &apos;lastModifiedUserName&apos;) THEN
					SET rec.modUser = attr.&quot;value&quot;;
				END IF;
				IF (attr.name = &apos;lastModifiedUserDomain&apos;) THEN
					SET rec.modDomain = attr.&quot;value&quot;;
				END IF;
				IF (attr.name = &apos;lastModifiedDate&apos;) THEN
					CALL /shared/ASAssets/Utilities/&quot;time&quot;/DateUtils/BigintToTimestamp(attr.&quot;value&quot;, rec.modDate);
				END IF;
			END FOR;

			-- Evaluate the SQL Script
			IF (sqlScript IS NOT NULL) THEN
				-- Remove multi-line and single-line comments from SQL, this can only be done before replacing CR/LFs
				IF (INSTR(sqlScript,&apos;--&apos;) &gt; 0 OR INSTR(sqlScript,&apos;/*&apos;) &gt; 0) THEN
					SET outText = sqlScript ;

					/********************************************************************************************
					 * Remove single-line comments
					 ********************************************************************************************/
					SET x = INSTR(outText,&apos;--&apos;);
					--call print(&apos;REMOVE SINGLE-LINE:  X=&apos;||x);
					WHILE x &gt; 0 DO
						SET	y = INSTR(outText,CHR(10),x+2);
						IF	y &gt; 0 THEN
							SET outText = SUBSTRING(outText,1,x-1) || SUBSTRING(outText,y);
						ELSE
							SET outText = SUBSTRING(outText,1,x-1);
						END IF;
						SET x = INSTR(outText,&apos;--&apos;);
						--call print(&apos;REMOVE SINGLE-LINE:  X=&apos;||x||&apos;  Y=&apos;||y);
					END WHILE;

					/********************************************************************************************
					 * Remove multi-line comments
					 ********************************************************************************************/
					SET x = INSTR(outText,&apos;/*&apos;);
					SET y = INSTR(outText, &apos;*/&apos;, x);
					--call print(&apos;REMOMVE MULTI-LINE:  X=&apos;||x||&apos;  Y=&apos;||y);
					WHILE (x &gt; 0 and y &gt; 0) DO
						-- Extract the text before and after the /* */ comment and leave a space in the middle
						IF (INSTR(SUBSTRING(outText,x,y-x+1), CHR(10)) &gt; 0) THEN
							SET outText = SUBSTRING(outText,1,x-1) ||CHR(10)|| SUBSTRING(outText,y+2);
						ELSE
							SET outText = SUBSTRING(outText,1,x-1) ||&apos; &apos;|| SUBSTRING(outText,y+2);
						END IF;
						SET x = INSTR(outText,&apos;/*&apos;);
						SET y = INSTR(outText, &apos;*/&apos;, x);
						--call print(&apos;REMOMVE MULTI-LINE:  X=&apos;||x||&apos;  Y=&apos;||y);
					END WHILE;
					set sqlScript = outText;
				END IF;

				/********************************************************************************************
				 * Remove all SQL options such as {OPTION xyz} 
				 ********************************************************************************************/
				if (INSTR(sqlScript,&apos;{&apos;) &gt; 0) THEN
					set leftBracketPos = 0;
					set rightBracketPos = 0;
					-- Search through the sql script to find the corresponding right curly bracket } for the starting left curly bracket {
					set i = 1;
					set bracketCount = -1;
					while (i &gt; 0 and i &lt;= LENGTH(sqlScript)) do
						set ch = substring(sqlScript,i,1);
						if (ch = &apos;{&apos;) then
							if (bracketCount &lt; 0) then
								set bracketCount = 0;
							end if;
							set bracketCount = bracketCount + 1;
							if (leftBracketPos = 0) then
								set leftBracketPos = i;
							end if;
						end if;
						if (ch = &apos;}&apos;) then
							set bracketCount = bracketCount - 1;
							if (bracketCount = 0) then
								set rightBracketPos = i;
								-- Remove all text between left curly bracket { and right curly bracket } as it is inconsequential for parsing.
								set sqlScript = &apos; &apos;||TRIM(SUBSTRING(sqlScript, 1, leftBracketPos-1)||&apos; &apos;||SUBSTRING(sqlScript, rightBracketPos+1));
								set i = INSTR(sqlScript, &apos;{&apos;) - 1; -- Advance to the next left curly bracket (subtract 1 as it will be incremented by 1 at the bottom of the loop)
								set leftBracketPos = 0;
							end if;
						end if;
						set i = i + 1;
					end while;
				end if; 

				/********************************************************************************************
				 * Replace white space characters with a space
				 ********************************************************************************************/
				-- Replace linefeed chr(10), carriage return chr(13), tab chr(9) and XML escaped characters with a space 
				set sqlScript = TRIM(REPLACE(sqlScript,chr(13),&apos; &apos;)); 	-- Carriage return
				set sqlScript = TRIM(REPLACE(sqlScript,chr(10),&apos; &apos;)); 	-- Line Feed
				set sqlScript = TRIM(REPLACE(sqlScript,chr(9), &apos; &apos;));	-- Tab
				set sqlScript = TRIM(REPLACE(REPLACE(sqlScript,&apos;&amp;#xd;&apos;,&apos; &apos;),&apos;&amp;#xD;&apos;,&apos; &apos;)); -- XML Carriage Return representation
				set sqlScript = TRIM(REPLACE(REPLACE(sqlScript,&apos;&amp;#xa;&apos;,&apos; &apos;),&apos;&amp;#xA;&apos;,&apos; &apos;)); -- XML Line Feed representation

				/********************************************************************************************
				 * Reduce the number of double spaces to a single space
				 ********************************************************************************************/
				WHILE (INSTR(sqlScript, &apos;  &apos;) &gt; 0) DO
					SET sqlScript = REPLACE(sqlScript, &apos;  &apos;, &apos; &apos;);
				END WHILE;

				-- Normalize the sql script to all LOWER
				SET sqlScript = LOWER(sqlScript);
			END IF;

			IF (UPPER(debug) = &apos;Y&apos;) THEN
				CALL PRINT(moduleName||&apos; : resourceType=&apos;||rec.resourceType);
				CALL PRINT(moduleName||&apos; : resourcePath=&apos;||rec.resourcePath);
				CALL PRINT(moduleName||&apos; : sqlScript=&apos;||NVL(sqlScript,&apos;null&apos;));
				CALL PRINT(moduleName||&apos; : rulesListExec=&apos;||NVL(rulesListExec,&apos;null&apos;));
			END IF;

			-- Process the rule list
			FOR l AS 
				SELECT CAST(object AS INTEGER) rule
					FROM /shared/ASAssets/Utilities/string/extractDelimitedText(TRIM(rulesListExec),&apos;,&apos;,0,0,0,1,0)
					WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
			DO
				SET ruleNum = l.rule;
				CASE
					-- Rule 1: Impacted Resource
					WHEN ruleNum = 1 THEN
						SET message = &apos; : Evaluate Rule 1 [impacted resource]&apos;;
						IF (rec.impactLevel IS NOT NULL AND rec.impactLevel &lt;&gt; &apos;NONE&apos;) THEN
							SET rec.violation = &apos;F&apos;;
							SET rec.ruleViolations = rec.ruleViolations || &apos;1,&apos;;
							SET message = message || &apos;: violation occurred&apos;;
						END IF; 
						IF (UPPER(debug) = &apos;Y&apos;) THEN
							CALL PRINT(moduleName||message);
						END IF;

					-- Rule 2: SELECT DISTINCT
					WHEN ruleNum = 2 THEN
						SET message = &apos; : Evaluate Rule 2 [select distinct]&apos;;
						-- Evaluate whether the SQL text uses &quot;select distinct&quot;
						IF (sqlScript IS NOT NULL AND INSTR(sqlScript, &apos;select distinct&apos;) &gt; 0) THEN
							IF (rec.violation IS NULL OR rec.violation &lt;&gt; &apos;F&apos;) THEN
								SET rec.violation = &apos;W&apos;;
							END IF;
							SET rec.ruleWarnings = rec.ruleWarnings || &apos;2,&apos;;
							SET message = message || &apos;: warning occurred&apos;;
						END IF; 
						IF (UPPER(debug) = &apos;Y&apos;) THEN
							CALL PRINT(moduleName||message);
						END IF;

					-- Rule 3: SELECT *
					WHEN ruleNum = 3 THEN
						SET message = &apos; : Evaluate Rule 3 [select *]&apos;;
						-- Evaluate whether the SQL text uses &quot;select *&quot;
						IF (sqlScript IS NOT NULL AND (INSTR(sqlScript, &apos;select *&apos;) &gt; 0 OR INSTR(sqlScript, &apos;select distinct *&apos;) &gt; 0)) THEN
							SET rec.violation = &apos;F&apos;;
							SET rec.ruleViolations = rec.ruleViolations || &apos;3,&apos;;
							SET message = message || &apos;: violation occurred&apos;;
						END IF; 
						IF (UPPER(debug) = &apos;Y&apos;) THEN
							CALL PRINT(moduleName||message);
						END IF;

					-- Rule 4: ORDER BY
					WHEN ruleNum = 4 THEN
						SET message = &apos; : Evaluate Rule 4 [order by]&apos;;
						-- Evaluate whether the SQL text uses &quot;order by&quot;
						CALL /shared/ASAssets/Utilities/validate/helpers/evaluateResourceOrderBy(debug, sqlScript, containsOrderBy);
						IF (containsOrderBy = 1) THEN
							SET rec.violation = &apos;F&apos;;
							SET rec.ruleViolations = rec.ruleViolations || &apos;4,&apos;;
							SET message = message || &apos;: violation occurred&apos;;
						END IF; 
						IF (UPPER(debug) = &apos;Y&apos;) THEN
							CALL PRINT(moduleName||message);
						END IF;

					-- Rule 5: published path
					WHEN ruleNum = 5 THEN
						SET message = &apos; : Evaluate Rule 5 [published path not allowed]&apos;;
						-- Evaluate whether the SQL text invokes a published resource.
						IF (sqlScript IS NOT NULL AND (INSTR(sqlScript, &apos;/services/databases/&apos;) &gt; 0 OR INSTR(sqlScript, &apos;/services/webservices/&apos;) &gt; 0)) THEN
							SET rec.violation = &apos;F&apos;;
							SET rec.ruleViolations = rec.ruleViolations || &apos;5,&apos;;
							SET message = message || &apos;: violation occurred&apos;;
						END IF; 
						IF (UPPER(debug) = &apos;Y&apos;) THEN
							CALL PRINT(moduleName||message);
						END IF;

					-- Rule 6: shared path specified
					WHEN ruleNum = 6 THEN
						SET message = &apos; : Evaluate Rule 6 [specified shared path not allowed]&apos;;
						-- Evaluate whether the SQL text invokes a /shared path that is not allowed.
						IF (sqlScript IS NOT NULL AND pathNotAllowed IS NOT NULL) THEN
							FOR p AS 
								SELECT object pathNotAllowed
									FROM /shared/ASAssets/Utilities/string/extractDelimitedText(TRIM(pathNotAllowed),&apos;,&apos;,0,0,0,1,0)
									WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
							DO
								IF (INSTR(sqlScript, REPLACE(LOWER(p.pathNotAllowed)||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;)) &gt; 0) THEN
									SET rec.violation = &apos;F&apos;;
									SET rec.ruleViolations = rec.ruleViolations || &apos;6,&apos;;
									SET message = message || &apos;: violation occurred&apos;;
								END IF;
							END FOR;
						END IF; 
						IF (UPPER(debug) = &apos;Y&apos;) THEN
							CALL PRINT(moduleName||message);
						END IF;

					-- Rule 7: users path
					WHEN ruleNum = 7 THEN
						SET message = &apos; : Evaluate Rule 7 [users/domain path not allowed]&apos;;
						-- Search for any /users/&quot;domain-name&quot;/ usage
						set ruleResult = 1;
						FOR d AS 
							SELECT object name 
							FROM /shared/ASAssets/Utilities/string/extractDelimitedText(TRIM(domainList),&apos;,&apos;,0,0,0,1,0)
							WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
						DO
							IF (sqlScript IS NOT NULL AND INSTR(sqlScript, &apos;/users/&apos;||LOWER(d.name)||&apos;/&apos;) &gt; 0) THEN
								set ruleResult = 0;
							END IF;
						END FOR;
						IF (ruleResult = 0) THEN
							SET rec.violation = &apos;F&apos;;
							SET rec.ruleViolations = rec.ruleViolations || &apos;7,&apos;;
							SET message = message || &apos;: violation occurred&apos;;
						END IF; 
						IF (UPPER(debug) = &apos;Y&apos;) THEN
							CALL PRINT(moduleName||message);
						END IF;

					-- Rule 8: limit number of web service operations
					--   This rule is implemented in the web service section.

					-- ADD NEW RULES BELOW THIS LINE SEQUENTIALLY FROM THE PREVIOUS RULE.
					-- 		Update the documententation section for both &quot;evaluate_resources_in_path&quot; and &quot;evaluate_resource&quot;. 
					--		Update the &quot;ruleKey&quot; variable in &quot;evaluate_resources_in_path&quot;.

					ELSE
						-- DO NOTHING
				END CASE;
			END FOR;
			-- Remove the last comma at the end of the list

			IF (rec.ruleViolations IS NOT NULL AND LENGTH(TRIM(rec.ruleViolations)) &gt; 0) THEN
				SET rec.ruleViolations = SUBSTRING(rec.ruleViolations, 1, LENGTH(rec.ruleViolations) - 1);
			END IF;
			IF (rec.ruleWarnings IS NOT NULL AND LENGTH(TRIM(rec.ruleWarnings)) &gt; 0) THEN
				SET rec.ruleWarnings = SUBSTRING(rec.ruleWarnings, 1, LENGTH(rec.ruleWarnings) - 1);
			END IF;
			IF (UPPER(debug) = &apos;Y&apos;) THEN
				CALL PRINT(moduleName||&apos; : ruleViolations=&apos;||NVL(rec.ruleViolations,&apos;null&apos;));
				CALL PRINT(moduleName||&apos; : ruleWarnings=&apos;||NVL(rec.ruleWarnings,&apos;null&apos;));
				CALL PRINT(&apos;&apos;);
			END IF;

			IF (displayViolations IS NULL OR INSTR(UPPER(displayViolations), &apos;A&apos;) &gt; 0) THEN
				INSERT INTO result VALUES (rec);
			ELSEIF (rec.violation = &apos;W&apos; AND INSTR(UPPER(displayViolations), &apos;W&apos;) &gt; 0) THEN
				INSERT INTO result VALUES (rec);
			ELSEIF (rec.violation = &apos;F&apos; AND INSTR(UPPER(displayViolations), &apos;F&apos;) &gt; 0) THEN
				INSERT INTO result VALUES (rec);
			ELSEIF (rec.violation = &apos;P&apos; AND INSTR(UPPER(displayViolations), &apos;P&apos;) &gt; 0) THEN
				INSERT INTO result VALUES (rec);
			END IF;

			-- Set the parent path for the next resource
			SET parentPath = r.resPath;
		END FOR;

	-- Logic for /services/webservices folders
	ELSEIF (INSTR(resourcePath, &apos;/services/webservices&apos;) &gt; 0 AND resourceType = &apos;DATA_SOURCE&apos;) THEN
			-- Initialize variables
			SET rec = null;
			SET sqlScript = null;

			-- Setup the record
			SET rec.groupNum = groupNum;
			SET rec.violation = &apos;P&apos;;
			SET rec.ruleViolations = &apos;&apos;;
			SET rec.ruleWarnings = &apos;&apos;;
			SET rec.resourcePath = resourcePath;
			SET rec.resourceType = resourceType;
			CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;R&apos;, rec.resourceName, rec.parentPath);

			-- Retrieve the SQL text and impacted flags
			FOR res AS SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, resourceType) DO
				IF (res.sqlText IS NOT NULL) THEN
					SET sqlScript = res.sqlText;
				END IF;
				IF (res.scriptText IS NOT NULL) THEN
					SET sqlScript = res.scriptText;
				END IF;
				SET rec.impactLevel = res.impactLevel;
				SET rec.impactMessage = res.impactMessage;
				SET rec.ownerName = res.ownerName;
				SET rec.ownerDomain = res.ownerDomain;
			END FOR;

			-- Retrieve the last modified information
			FOR attr AS 
				SELECT * FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_ResourceAttributes(resourcePath, resourceType) 
				WHERE name IN (&apos;lastModifiedUserName&apos;, &apos;lastModifiedUserDomain&apos;, &apos;lastModifiedDate&apos;)
			DO
				IF (attr.name = &apos;lastModifiedUserName&apos;) THEN
					SET rec.modUser = attr.&quot;value&quot;;
				END IF;
				IF (attr.name = &apos;lastModifiedUserDomain&apos;) THEN
					SET rec.modDomain = attr.&quot;value&quot;;
				END IF;
				IF (attr.name = &apos;lastModifiedDate&apos;) THEN
					CALL /shared/ASAssets/Utilities/&quot;time&quot;/DateUtils/BigintToTimestamp(attr.&quot;value&quot;, rec.modDate);
				END IF;
			END FOR;

			-- Process the rule list
			FOR l AS 
				SELECT CAST(object AS INTEGER) rule
					FROM /shared/ASAssets/Utilities/string/extractDelimitedText(TRIM(rulesListExec),&apos;,&apos;,0,0,0,1,0)
					WHERE object IS NOT NULL AND LENGTH(object) &gt; 0
			DO
				SET ruleNum = l.rule;
				CASE
					-- Rule 8: limit number of web service operations
					WHEN ruleNum = 8 THEN
						-- Check for a violation
						FOR r AS SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceListRecursive(resourcePath, resourceType) DO
							SET resCount = resCount + 1;
						END FOR; 
						-- 
						SET message = &apos; : Evaluate Rule 8 [web service operation limit=&apos;||maxNumberWebServiceOperations||&apos;]&apos;;
						IF (resCount &gt; maxNumberWebServiceOperations) THEN
							SET rec.violation = &apos;F&apos;;
							SET rec.ruleViolations = rec.ruleViolations || &apos;8,&apos;;
							SET rec.ruleMessage = &apos;violation occurred num operations=&apos;||resCount||&apos; &gt; max operations=&apos;||maxNumberWebServiceOperations;
							SET message = message || &apos;: &apos;||rec.ruleMessage;
						END IF; 
						IF (UPPER(debug) = &apos;Y&apos;) THEN
							CALL PRINT(moduleName||message);
						END IF;
				END CASE;
			END FOR;

			-- Remove the last comma at the end of the list
			IF (rec.ruleViolations IS NOT NULL AND LENGTH(TRIM(rec.ruleViolations)) &gt; 0) THEN
				SET rec.ruleViolations = SUBSTRING(rec.ruleViolations, 1, LENGTH(rec.ruleViolations) - 1);
			END IF;
			IF (rec.ruleWarnings IS NOT NULL AND LENGTH(TRIM(rec.ruleWarnings)) &gt; 0) THEN
				SET rec.ruleWarnings = SUBSTRING(rec.ruleWarnings, 1, LENGTH(rec.ruleWarnings) - 1);
			END IF;
			IF (UPPER(debug) = &apos;Y&apos;) THEN
				CALL PRINT(moduleName||&apos; : ruleViolations=&apos;||NVL(rec.ruleViolations,&apos;null&apos;));
				CALL PRINT(moduleName||&apos; : ruleWarnings=&apos;||NVL(rec.ruleWarnings,&apos;null&apos;));
				CALL PRINT(&apos;&apos;);
			END IF;

			IF (displayViolations IS NULL OR INSTR(UPPER(displayViolations), &apos;A&apos;) &gt; 0) THEN
				INSERT INTO result VALUES (rec);
			ELSEIF (rec.violation = &apos;W&apos; AND INSTR(UPPER(displayViolations), &apos;W&apos;) &gt; 0) THEN
				INSERT INTO result VALUES (rec);
			ELSEIF (rec.violation = &apos;F&apos; AND INSTR(UPPER(displayViolations), &apos;F&apos;) &gt; 0) THEN
				INSERT INTO result VALUES (rec);
			ELSEIF (rec.violation = &apos;P&apos; AND INSTR(UPPER(displayViolations), &apos;P&apos;) &gt; 0) THEN
				INSERT INTO result VALUES (rec);
			END IF;
	ELSE

	END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1418065394000</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564694132867</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/370</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/371</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/372</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/420</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/447</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/601</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/434</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/468</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/407</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/514</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/515</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/614</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/516</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/615</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/616</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/192</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/392</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/491</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/369</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
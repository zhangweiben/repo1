<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="_README" path="/shared/ASAssets/Utilities/repository/modelXSLT/_README" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>
    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.


</annotation>
  <parameters></parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <attribute name="Script" type="STRING">PROCEDURE &quot;_README&quot;()
BEGIN
/*	Purpose:  The &quot;modelXSLT&quot; folder remains in the repository folder for development purposes only.  
	It is meant to provide guidelines on how to create and test an XSLT transformation that takes 
	input from an input variable instead of an XML file.

	Uses the procedure /shared/Utilities/xml/reverseXML - This procedure is used to reverse the direction 
		of the XML to provide a datasource to an XSLT transformation.

	IMPORTANT:
	When creating an XSLT transformation, you first have to bind to an XML file to create the transformation.
	However, if you simply want to transform an inflight XML document within CIS using one of these XSLT functions,
	then you have to follow these steps.  It is easier to construct the XSLT using Studio then to create it by hand.
	You have the option of creating it by hand as well.

	The trick is to create an XSLT transformation by pointing to a procedure like this one (reverseXML) that takes
	  in an XML parameter and returns an XML parameter.
	In effect, this procedure is a pass-through procedure that reverses direction.
	The XSLT procedures passes in an XML document which in turns passes it down to this procedure which turns around
	  and passes it back out as output to the XSLT. 
	Therefore the XSLT can apply it&apos;s transformation against XML that was passed into it.  This is the best way to 
	  accomplish returning cursor data for a custom XSLT function where the datasource is an XML parameter and not
 	  an actual XML datasource file.

	The objective is to return a cursor of data for multipe XML rows found.

	Step 1.  Model your XSLT against an XML file containing your XML.  
		 a. Name the file something descriptive of the XML and add _file to the end of the name.
		 b. Expand the XML definition in the Data Map tab. 
		 c. Select an XML node and click the &quot;Create Link And Target&quot; icon to add the column to the cursor output.
		 d. Save
	Step 2.  Copy the XSLT procedure
		 a. Copy the file you created in step 1 and rename it by removing everything after _file in the name.
	Step 3.  Rebind the XSLT to use the reversXML
		 a. Open the newly copied file.
		 b. Click on rebind
		 c. Withing the rebind tab, click on the rebind icon again to rebind from the file to reverseXML.
			This has the effect of wiping out the XSLT.  However, now the input tab will now show that
			the XSLT procedure has an input variable of type XML.
	Step 4.  Restore the original XSLT script
		 a. Open the original XSLT file and copy the XSLT script into the memory buffer.
		 b. Back in the new file, select the XSLT tab and past the xslt script from the memory buffer.
		 c. It prompts that the Data Map panel will be disabled.  Click yes.
	Step 5.  Create a test procedure to invoke the XSLT.
		 a. Create a Parameterized View.
		 b. Drag the new XSLT procedure into the view.  This is done so that the cursor output is automatically 
			generated for you.  reduce the work.
		 c. After BEGIN, add the following code:
			declare inXML XML;
			set inXML = &apos;&apos;;
		 d. Copy the XML from the original XML file and paste in between the single quotes &apos;&apos; 
			for the &quot;set inXML&quot; statement.
		 d. Modify the invocation to your XSLT procedure to pass in the variable inXML instead of the
			static XML string that is currently there.

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2010.3		8/2/2010		Mike Tinius			5.1.0			Created new 

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
END</attribute>
  <attribute name="creationDate" type="LONG">1383622341939</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564747638073</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getBasicResourceCursor_PROCEDURE" path="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_PROCEDURE" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getBasicResourceCursor_PROCEDURE:
	-- CIS Repository Helper Procedure --
	This procedure retrieves the resource metadata for a given resource that is a procedure object.  
	A cursor of metadata is returned. This procedure invokes 2 lower level API procedures:
		getBasicResourceXML - this performs the actual invocation to the CIS repository API and returns XML
		getBasicResourceXSLT_PROCEDURE - this procedure takes the XML response from getBasicResourceXML 
			and turns it into a cursor which is more usable by other CIS procedures.

	Input:
		fullResourcePath - Full resource path which includes the path and the resource name  
			Values: e.g. /shared/Utilities/repository/examples/source/myProc
		resourceType - Type of CIS resource to be created
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. PROCEDURE
	Output:
		resourceCursor - XML response containing the resource metadata
			CURSOR (
				resourceName VARCHAR(255), 
				resourcePath VARCHAR(1024), 
				resourceType VARCHAR(255), 
				subtype VARCHAR(255), 
				enabled BIT, 
				annotation LONGVARCHAR,
				parameterName VARCHAR(255), 
				parameterType LONGVARCHAR, 
				parameterDirection VARCHAR(255)
				)
	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2011.4		08/12/2011		Tony Young, Matt Lee 5.2.0			Created new
	2012.3		04/27/2012		Mike Tinius        	5.2.0			Expanded result cursor.
	2013.2		03/19/2013		Mike Tinius			5.2.0			Added annotation to result cursor
	2013.4		10/28/2013		Mike Tinius			6.2.0			Added specific columns to projection instead of select * as the XSLT returns more columns now.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.



	TYPES / SUBTYPES:
	=================
	The following resource types/subtypes are supported by this operation.  Resources
	cannot be created under &quot;/services&quot; unless otherwise noted, and cannot be created
	within a physical data source.  

	* LINK / unknown at this time

	(CIS procedures)
	* PROCEDURE / SQL_SCRIPT_PROCEDURE - A Composite SQL Procedure.  Created with a simple default script body that is runnable.
	(Custom procedures)
	* PROCEDURE / JAVA_PROCEDURE - A Composite java data source procedure.  Created from a java data source (jar file).
	(Database procedures)
	* PROCEDURE / EXTERNAL_SQL_PROCEDURE - A Composite Packaged Query.  Created with no SQL text, so it is not runnable.  
	* PROCEDURE / DATABASE_PROCEDURE - A database stored procedure.
	(XML procedures)
	* PROCEDURE / BASIC_TRANSFORM_PROCEDURE - A Composite Basic XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / XSLT_TRANSFORM_PROCEDURE - A Composite XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / STREAM_TRANSFORM_PROCEDURE - A Composite XSLT Streaming Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / XQUERY_TRANSFORM_PROCEDURE - A Composite XQUERY Transformation Procedure.  Created with no target schema and no model, so it is not runnable.
	(Misc procedures)
	* PROCEDURE / OPERATION_PROCEDURE - A Composite web service or HTTP procedure operation.</annotation>
  <parameters>
    <parameter name="fullResourcePath" direction="IN" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
    </parameter>
    <parameter name="resourceCursor" direction="OUT" nullable="true">
      <datatype name="resourceCursor" type="TABLE" refId="1">
        <element name="resourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="annotation">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="parameterName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parameterType">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="parameterDirection">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXSLT_PROCEDURE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inXML" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outputs" direction="OUT" nullable="false">
        <datatype type="TABLE" refId="3">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="40"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="dataType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterType">
            <datatype type="STRING" maxLength="32767"/>
          </element>
          <element name="parameterDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterTypeName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterTypeNamespace">
            <datatype type="STRING" maxLength="32767"/>
          </element>
          <element name="parameterTypeReferencePath">
            <datatype type="STRING" maxLength="32767"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getBasicResourceCursor_PROCEDURE:
	-- CIS Repository Helper Procedure --
	This procedure retrieves the resource metadata for a given resource that is a procedure object.  
	A cursor of metadata is returned. This procedure invokes 2 lower level API procedures:
		getBasicResourceXML - this performs the actual invocation to the CIS repository API and returns XML
		getBasicResourceXSLT_PROCEDURE - this procedure takes the XML response from getBasicResourceXML 
			and turns it into a cursor which is more usable by other CIS procedures.

	Input:
		fullResourcePath - Full resource path which includes the path and the resource name  
			Values: e.g. /shared/Utilities/repository/examples/source/myProc
		resourceType - Type of CIS resource to be created
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. PROCEDURE
	Output:
		resourceCursor - XML response containing the resource metadata
			CURSOR (
				resourceName VARCHAR(255), 
				resourcePath VARCHAR(1024), 
				resourceType VARCHAR(255), 
				subtype VARCHAR(255), 
				enabled BIT, 
				annotation LONGVARCHAR,
				parameterName VARCHAR(255), 
				parameterType LONGVARCHAR, 
				parameterDirection VARCHAR(255)
				)
	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2011.4		08/12/2011		Tony Young, Matt Lee 5.2.0			Created new
	2012.3		04/27/2012		Mike Tinius        	5.2.0			Expanded result cursor.
	2013.2		03/19/2013		Mike Tinius			5.2.0			Added annotation to result cursor
	2013.4		10/28/2013		Mike Tinius			6.2.0			Added specific columns to projection instead of select * as the XSLT returns more columns now.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.


	TYPES / SUBTYPES:
	=================
	The following resource types/subtypes are supported by this operation.  Resources
	cannot be created under &quot;/services&quot; unless otherwise noted, and cannot be created
	within a physical data source.  

	* LINK / unknown at this time

	(CIS procedures)
	* PROCEDURE / SQL_SCRIPT_PROCEDURE - A Composite SQL Procedure.  Created with a simple default script body that is runnable.
	(Custom procedures)
	* PROCEDURE / JAVA_PROCEDURE - A Composite java data source procedure.  Created from a java data source (jar file).
	(Database procedures)
	* PROCEDURE / EXTERNAL_SQL_PROCEDURE - A Composite Packaged Query.  Created with no SQL text, so it is not runnable.  
	* PROCEDURE / DATABASE_PROCEDURE - A database stored procedure.
	(XML procedures)
	* PROCEDURE / BASIC_TRANSFORM_PROCEDURE - A Composite Basic XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / XSLT_TRANSFORM_PROCEDURE - A Composite XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / STREAM_TRANSFORM_PROCEDURE - A Composite XSLT Streaming Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / XQUERY_TRANSFORM_PROCEDURE - A Composite XQUERY Transformation Procedure.  Created with no target schema and no model, so it is not runnable.
	(Misc procedures)
	* PROCEDURE / OPERATION_PROCEDURE - A Composite web service or HTTP procedure operation.
*/
PROCEDURE getBasicResourceCursor_PROCEDURE(
    IN fullResourcePath 	/lib/resource/ResourceDefs.ResourcePath,  
    IN resourceType 		/lib/resource/ResourceDefs.ResourceType, 
    OUT resourceCursor CURSOR (
        resourceName VARCHAR(255), 
        resourcePath VARCHAR(1024), 
        resourceType VARCHAR(255), 
        subtype VARCHAR(255), 
        enabled BIT, 
		annotation LONGVARCHAR,
        parameterName VARCHAR(255), 
        parameterType LONGVARCHAR,
        parameterDirection VARCHAR(255)
        )
    )
BEGIN
	DECLARE resourceResponse XML;
	call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(fullResourcePath, resourceType, resourceResponse);
        OPEN resourceCursor FOR 
            SELECT resourceName, resourcePath, resourceType, subtype, enabled, annotation, parameterName, parameterType, parameterDirection
			  FROM /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXSLT_PROCEDURE(resourceResponse);
END</attribute>
  <attribute name="creationDate" type="LONG">1376679119329</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564713458052</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
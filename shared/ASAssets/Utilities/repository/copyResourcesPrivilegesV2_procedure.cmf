<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="copyResourcesPrivilegesV2" path="/shared/ASAssets/Utilities/repository/copyResourcesPrivilegesV2" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>copyResourcesPrivilegesV2:

	-- CIS Repository Helper Procedure --
	This is a procedure is used to copy resource privileges from one resource to another.
	This is version 2 of the original procedure &quot;copyResourcesPrivileges&quot;.  This procedure
		does NOT use a VECTOR for an input parameter.  Input vector parameters have been
		associated with memory leaks.
 
	This procedure enables changes to resource privileges for users and groups, by copying
	privileges from other resources. Changes can be made to one or more resources with
	different source resource for one or many users and groups. Resource privileges
	can be set for a specified set of users and groups without modifying any
	existing privileges for other users and groups, or the procedure can set resource
	privileges restrictively to only privileges of source resource explicitly.

	Only a user with GRANT privilege on a resource can modify the privileges for that
	resource. The owner of a resource always has GRANT privilege, as do users with the
	MODIFY_ALL_RESOURCES right.

	When &quot;mode&quot; is &quot;OVERWRITE_APPEND&quot;, or is not supplied, privileges are applied on a
	per-user or per-group basis, so that updating privileges for one user or group does not
	alter privileges from any other user or group.  The privileges applied for a user or
	group replace the previous value for that user or group. 

	When &quot;mode&quot; is &quot;SET_EXACTLY&quot;, all privileges on the resource are made to look exactly like 
	the privileges of source resource.

	When &quot;updateRecursively&quot; is &quot;false&quot;, the privileges are applied only to the specified
	resources.  When it is &quot;true&quot;, the privileges are recursively applied into any CONTAINER
	or DATA_SOURCE resource specified.  When recursively applying privileges, the privilege
	change is ignored for any resource the user lacks owner privileges for.

	Privileges that are not applicable for a given resource type are automatically stripped
	down to the set that is legal for each resource.  TABLE resources support NONE, READ,
	WRITE, SELECT, INSERT, UPDATE, and DELETE.  PROCEDURE resources support NONE, READ,
	WRITE, and EXECUTE.  All other resource types only support NONE, READ, and WRITE.

	Request Elements:
	------------------
    updateRecursively: If &quot;true&quot;, then all children of the given resources will
       recursively be updated with the privileges assigned to their parent.
    mode (optional): Determines whether privileges are merged with existing ones,
       default is &quot;OVERWRITE_APPEND&quot;, which merges and does not update privileges for
       users or groups not mentioned.  &quot;SET_EXACTLY&quot; makes privileges look exactly like
       those provided in the call.
    copyPrivilegeEntry: Source resource and list of destination resources.
       Privileges of the source resource will be copied over to destination resources.

	Input:
		updatePrivilegesRecursively - flag indicating whether to update the children of the given resources or not.
			0 (false) or null - only update the given resource and not the children.
			1 (true) - update children recursively

		copyPrivilegeMode - flag indicating the mode in which to copy privileges
			flag indicating the mode in which to copy privileges
			null (default) - do not set any privileges at all
			0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for
       			users or groups not mentioned.
			1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.

		copyPrivilegeEntry - XML formatted string containing the copy privilege entry.  An example is shown below of how to set the input.
			There can be mulitiple &quot;copyPrivilegeEntry&quot; XML entries indicating multiple sources each with a pairing 
				of multiple destinations.
			There is a single &lt;resource:srcResource&gt; entry.  There may be multiple &lt;resource:dstResource&gt; entries.
			set copyPrivilegeEntries = 
				&apos;    &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:srcResource&gt;&apos;||CHR(10)||
				&apos;        &lt;resource:path&gt;&apos; || CAST(XMLTEXT(sourcePath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
				&apos;        &lt;resource:type&gt;&apos; || CAST(XMLTEXT(sourceType) AS LONGVARCHAR) || &apos;&lt;/resource:type&gt;&apos;||CHR(10)||
				&apos;      &lt;/resource:srcResource&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:dstResource&gt;&apos;||CHR(10)||
				&apos;        &lt;resource:path&gt;&apos; || CAST(XMLTEXT(desinationPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
				&apos;        &lt;resource:type&gt;&apos; || CAST(XMLTEXT(destinationType) AS LONGVARCHAR) || &apos;&lt;/resource:type&gt;&apos;||CHR(10)||
				&apos;      &lt;/resource:dstResource&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:dstResource&gt;&apos;||CHR(10)||
				--	... There can be multiple &quot;dstResource&quot; per &quot;copyPrivilegeEntry&quot; entry
				&apos;      &lt;/resource:dstResource&gt;&apos;||CHR(10)||
				&apos;    &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				--  ... There can be mulitiple &quot;copyPrivilegeEntry&quot; XML entries
				&apos;    &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				--	...
				&apos;    &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				&apos;&apos;;

	Output:
		success	- true(1) or false(0)
		faultResponse - null if succesful otherwise contains a fault response.
			Values: Fault Resposne XML value

	Exceptions:  ex

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.3		05/06/2013		Mike Tinius			5.2.0			Created new for Best Practices 7.1
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/14/2019		Mike Tinius			7.0.8			New V2: Derived from copyResourcesPrivileges in order to remove the vector input parameter.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="updatePrivilegesRecursively" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="copyPrivilegeMode" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="inCopyPrivilegeEntries" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="faultResponse" direction="OUT" nullable="true">
      <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/webservices/system/admin/resource/operations/copyResourcePrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="copyResourcePrivileges" direction="IN">
        <datatype name="copyResourcePrivileges" extendedName="{http://www.compositesw.com/services/system/admin/resource}copyResourcePrivileges" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}copyResourcePrivileges" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}copyResourcePrivileges">
          <schemaDatatype>
            <datatype name="copyResourcePrivileges" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="copyResourcePrivilegesRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="2">
              <element name="updateRecursively" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
              <element name="copyPrivilegeEntries" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="3">
                  <element name="copyPrivilegeEntry" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                    <datatype name="copyPrivilegeEntryType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="4">
                      <element name="srcResource" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="pathTypeOrColumnPair" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="5">
                          <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="resourceOrColumnType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                          </element>
                        </datatype>
                      </element>
                      <element name="dstResource" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647">
                        <reference refId="5"/>
                      </element>
                    </datatype>
                  </element>
                </datatype>
              </element>
              <element name="mode" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="updatePrivilegesMode" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="copyResourcePrivilegesResponse" direction="OUT">
        <datatype name="copyResourcePrivilegesResponse" extendedName="{http://www.compositesw.com/services/system/admin/resource}copyResourcePrivilegesResponse" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}copyResourcePrivilegesResponse" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}copyResourcePrivilegesResponse">
          <schemaDatatype>
            <datatype name="copyResourcePrivilegesResponse" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="copyResourcePrivilegesResponse" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="6"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="fault" direction="OUT">
        <datatype name="fault" extendedName="{http://www.compositesw.com/services/system/util/common}fault" namespace="http://www.compositesw.com/services/system/util/common" referenceDefinitionSet="/services/webservices/system/util/common/operations/CommonSchema" referenceType="{http://www.compositesw.com/services/system/util/common}fault" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/util/common}fault">
          <schemaDatatype>
            <datatype name="fault" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="fault" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="ELEMENT_DECL" type="TREE" refId="7">
              <element name="errorEntry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                <datatype name="messageEntry" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="8">
                  <element name="code" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="message" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="detail" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="severity" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="messageSeverity" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
	copyResourcesPrivilegesV2:

	-- CIS Repository Helper Procedure --
	This is a procedure is used to copy resource privileges from one resource to another.
	This is version 2 of the original procedure &quot;copyResourcesPrivileges&quot;.  This procedure
		does NOT use a VECTOR for an input parameter.  Input vector parameters have been
		associated with memory leaks.
 
	This procedure enables changes to resource privileges for users and groups, by copying
	privileges from other resources. Changes can be made to one or more resources with
	different source resource for one or many users and groups. Resource privileges
	can be set for a specified set of users and groups without modifying any
	existing privileges for other users and groups, or the procedure can set resource
	privileges restrictively to only privileges of source resource explicitly.

	Only a user with GRANT privilege on a resource can modify the privileges for that
	resource. The owner of a resource always has GRANT privilege, as do users with the
	MODIFY_ALL_RESOURCES right.

	When &quot;mode&quot; is &quot;OVERWRITE_APPEND&quot;, or is not supplied, privileges are applied on a
	per-user or per-group basis, so that updating privileges for one user or group does not
	alter privileges from any other user or group.  The privileges applied for a user or
	group replace the previous value for that user or group. 

	When &quot;mode&quot; is &quot;SET_EXACTLY&quot;, all privileges on the resource are made to look exactly like 
	the privileges of source resource.

	When &quot;updateRecursively&quot; is &quot;false&quot;, the privileges are applied only to the specified
	resources.  When it is &quot;true&quot;, the privileges are recursively applied into any CONTAINER
	or DATA_SOURCE resource specified.  When recursively applying privileges, the privilege
	change is ignored for any resource the user lacks owner privileges for.

	Privileges that are not applicable for a given resource type are automatically stripped
	down to the set that is legal for each resource.  TABLE resources support NONE, READ,
	WRITE, SELECT, INSERT, UPDATE, and DELETE.  PROCEDURE resources support NONE, READ,
	WRITE, and EXECUTE.  All other resource types only support NONE, READ, and WRITE.

	Request Elements:
	------------------
    updateRecursively: If &quot;true&quot;, then all children of the given resources will
       recursively be updated with the privileges assigned to their parent.
    mode (optional): Determines whether privileges are merged with existing ones,
       default is &quot;OVERWRITE_APPEND&quot;, which merges and does not update privileges for
       users or groups not mentioned.  &quot;SET_EXACTLY&quot; makes privileges look exactly like
       those provided in the call.
    copyPrivilegeEntry: Source resource and list of destination resources.
       Privileges of the source resource will be copied over to destination resources.

	Input:
		updatePrivilegesRecursively - flag indicating whether to update the children of the given resources or not.
			0 (false) or null - only update the given resource and not the children.
			1 (true) - update children recursively

		copyPrivilegeMode - flag indicating the mode in which to copy privileges
			flag indicating the mode in which to copy privileges
			null (default) - do not set any privileges at all
			0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for
       			users or groups not mentioned.
			1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.

		copyPrivilegeEntry - XML formatted string containing the copy privilege entry.  An example is shown below of how to set the input.
			There can be mulitiple &quot;copyPrivilegeEntry&quot; XML entries indicating multiple sources each with a pairing 
				of multiple destinations.
			There is a single &lt;resource:srcResource&gt; entry.  There may be multiple &lt;resource:dstResource&gt; entries.
			set copyPrivilegeEntries = 
				&apos;    &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:srcResource&gt;&apos;||CHR(10)||
				&apos;        &lt;resource:path&gt;&apos; || CAST(XMLTEXT(sourcePath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
				&apos;        &lt;resource:type&gt;&apos; || CAST(XMLTEXT(sourceType) AS LONGVARCHAR) || &apos;&lt;/resource:type&gt;&apos;||CHR(10)||
				&apos;      &lt;/resource:srcResource&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:dstResource&gt;&apos;||CHR(10)||
				&apos;        &lt;resource:path&gt;&apos; || CAST(XMLTEXT(desinationPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
				&apos;        &lt;resource:type&gt;&apos; || CAST(XMLTEXT(destinationType) AS LONGVARCHAR) || &apos;&lt;/resource:type&gt;&apos;||CHR(10)||
				&apos;      &lt;/resource:dstResource&gt;&apos;||CHR(10)||
				&apos;      &lt;resource:dstResource&gt;&apos;||CHR(10)||
				--	... There can be multiple &quot;dstResource&quot; per &quot;copyPrivilegeEntry&quot; entry
				&apos;      &lt;/resource:dstResource&gt;&apos;||CHR(10)||
				&apos;    &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				--  ... There can be mulitiple &quot;copyPrivilegeEntry&quot; XML entries
				&apos;    &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				--	...
				&apos;    &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
				&apos;&apos;;

	Output:
		success	- true(1) or false(0)
		faultResponse - null if succesful otherwise contains a fault response.
			Values: Fault Resposne XML value

	Exceptions:  ex

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.3		05/06/2013		Mike Tinius			5.2.0			Created new for Best Practices 7.1
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/14/2019		Mike Tinius			7.0.8			New V2: Derived from copyResourcesPrivileges in order to remove the vector input parameter.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE copyResourcesPrivilegesV2(
	-- Flag indicating whether to update the children of the given resources or not.
	--		0 (false) or null - only update the given resource and not the children.
	--		1 (true) - update children recursively
	IN updatePrivilegesRecursively	BIT,

	-- Flag indicating the mode in which to copy privileges
	-- 		null (default) - do not set any privileges at all
	-- 		0 - set mode to &quot;OVERWRITE_APPEND&quot; - merges and does not update privileges for users or groups not mentioned.
	-- 		1 - set the mode to &quot;SET_EXACTLY&quot; - makes privileges look exactly like those provided in the call.
	IN copyPrivilegeMode			INTEGER,

	-- XML formatted string containing the copy privilege entry.  An example is shown below of how to set the input.
	-- 		There can be mulitiple &quot;copyPrivilegeEntry&quot; XML entries indicating multiple sources each with a pairing 
	--			of multiple destinations.
	--		There is a single &lt;resource:srcResource&gt; entry.  There may be multiple &lt;resource:dstResource&gt; entries.
	--		See documentation above for examples.
	IN inCopyPrivilegeEntries		LONGVARCHAR,
	OUT success						BIT, -- true(1) or false(0)
	OUT faultResponse 				XML
)
BEGIN
    DECLARE moduleName          VARCHAR DEFAULT &apos;copyResourcesPrivilegesV2&apos;;
	DECLARE debug				CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE copyPrivilegeEntries LONGVARCHAR DEFAULT inCopyPrivilegeEntries;
	DECLARE	mode				VARCHAR;
	DECLARE i					INTEGER DEFAULT 1;
	DECLARE createInput 		LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE createResponse 		XML;
	DECLARE privilegeEntry		LONGVARCHAR;
	DECLARE privilegeSrc		LONGVARCHAR;
	DECLARE privilegeDst		LONGVARCHAR;
	DECLARE pos1, pos2			INTEGER;
	DECLARE pos3, pos4			INTEGER;
	DECLARE pos5, pos6			INTEGER;
	DECLARE len					INTEGER;
	DECLARE resultStr			LONGVARCHAR;
	DECLARE numEntries			INTEGER;
	DECLARE numSrc				INTEGER;
	DECLARE numDst				INTEGER;
	DECLARE ex 					EXCEPTION;
	DECLARE namespaceTag		VARCHAR;

	-- Get the namespace tag=ns1 from [&lt;ns1: and &lt;/ns1:] and replace it with [&lt;resource: and &lt;/resource:]
	IF (copyPrivilegeEntries IS NOT NULL AND LENGTH(copyPrivilegeEntries) &gt; 0) THEN
		SET pos1 = INSTR(copyPrivilegeEntries, &apos;&lt;&apos;);
		SET pos2 = INSTR(copyPrivilegeEntries, &apos;:&apos;);
		IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
			SET namespaceTag = SUBSTRING(copyPrivilegeEntries, pos1+1, pos2-pos1-1);
			IF (namespaceTag &lt;&gt; &apos;resource&apos;) THEN
				SET copyPrivilegeEntries = REPLACE(copyPrivilegeEntries, &apos;&lt;&apos;||namespaceTag||&apos;:&apos;, &apos;&lt;resource:&apos;);
				SET copyPrivilegeEntries = REPLACE(copyPrivilegeEntries, &apos;&lt;/&apos;||namespaceTag||&apos;:&apos;, &apos;&lt;/resource:&apos;);
			END IF;
		END IF;
	END IF;

    set success = 1;
 	-- Validate input parameters
	if (updatePrivilegesRecursively is null) then
		raise ex value &apos;The input parameter &quot;updatePrivilegesRecursively&quot; may not be null.&apos;;
	end if;
	if (copyPrivilegeMode is null) then
		raise ex value &apos;The input parameter &quot;copyPrivilegeMode&quot; may not be null.&apos;;
	end if;
	if (copyPrivilegeEntries is null or length(trim(copyPrivilegeEntries)) = 0) then
		raise ex value &apos;The input parameter &quot;copyPrivilegeEntries&quot; may not be blank or empty.&apos;;
	end if;

	-- Translate the copy privilege mode
	if (copyPrivilegeMode = 0) then
		set mode = &apos;OVERWRITE_APPEND&apos;;
	elseif copyPrivilegeMode = 1 then
		set mode = &apos;SET_EXACTLY&apos;;
	else
		raise ex value &apos;Invlalid mode: copyPrivilegeMode=[&apos;||copyPrivilegeMode||&apos;]&apos;;
	end if;

	if (upper(debug) = &apos;Y&apos;) then
		call print(moduleName||&apos; : INPUT: updatePrivilegesRecursively=&apos;||updatePrivilegesRecursively);
		call print(moduleName||&apos; : INPUT: copyPrivilegeMode&apos;||copyPrivilegeMode||&apos;  translated to mode=&apos;||mode);
		call print(moduleName||&apos; : INPUT: copyPrivilegeEntries:&apos;||CHR(10)||copyPrivilegeEntries);
	end if;

	-- Validate all entries for the privilege entries
	set pos1 = INSTR(copyPrivilegeEntries, &apos;&lt;resource:copyPrivilegeEntry&gt;&apos;);
	set pos2 = INSTR(copyPrivilegeEntries, &apos;&lt;/resource:copyPrivilegeEntry&gt;&apos;);
	set numEntries = 0;
	while (pos1 &gt; 0 and pos2 &gt; 0) do
		set numEntries = numEntries + 1;
		set len = LENGTH(&apos;&lt;resource:copyPrivilegeEntry&gt;&apos;);
		set privilegeEntry = TRIM(SUBSTRING(copyPrivilegeEntries, pos1+len, pos2-(pos1+len)));

		-- Make sure the source resource path and type are not empty.
		set pos3 = INSTR(privilegeEntry, &apos;&lt;resource:srcResource&gt;&apos;);
		set pos4 = INSTR(privilegeEntry, &apos;&lt;/resource:srcResource&gt;&apos;);
		set numSrc = 0;
		while (pos3 &gt; 0 and pos4 &gt; 0) do
			set numSrc = numSrc + 1;
			set len = LENGTH(&apos;&lt;resource:srcResource&gt;&apos;);
			set privilegeSrc = TRIM(SUBSTRING(privilegeEntry, pos3+len, pos4-(pos3+len)));
			if (upper(debug) = &apos;Y&apos;) then
				call print(moduleName||&apos; : copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource[&apos;||numSrc||&apos;]:  privilegeSrc=&apos;||REPLACE(privilegeSrc, CHR(10), &apos;&apos;));
			end if;

			-- Extract the source path
			set pos5 = INSTR(privilegeSrc, &apos;&lt;resource:path&gt;&apos;);
			set pos6 = INSTR(privilegeSrc, &apos;&lt;/resource:path&gt;&apos;);
			set resultStr = null;
			if (pos5 = 0 or pos6 = 0) then
				raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource[&apos;||numSrc||&apos;]/path may not be blank or empty.&apos;;
			else
				set len = LENGTH(&apos;&lt;resource:path&gt;&apos;);
				set resultStr = TRIM(SUBSTRING(privilegeSrc, pos5+len, pos6-(pos5+len)));
				if (LENGTH(TRIM(resultStr)) = 0) then
					raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource[&apos;||numSrc||&apos;]/path may not be blank or empty.&apos;;
				end if;
			end if;
			if (upper(debug) = &apos;Y&apos;) then
				call print(moduleName||&apos; : copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource[&apos;||numSrc||&apos;]/path=&apos;||NVL(resultStr,&apos;null&apos;));
			end if;

			-- Extract the source type
			set pos5 = INSTR(privilegeSrc, &apos;&lt;resource:type&gt;&apos;);
			set pos6 = INSTR(privilegeSrc, &apos;&lt;/resource:type&gt;&apos;);
			set resultStr = null;
			if (pos5 = 0 or pos6 = 0) then
				raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource[&apos;||numSrc||&apos;]/type may not be blank or empty.&apos;;
			else
				set len = LENGTH(&apos;&lt;resource:type&gt;&apos;);
				set resultStr = TRIM(SUBSTRING(privilegeSrc, pos5+len, pos6-(pos5+len)));
				if (LENGTH(TRIM(resultStr)) = 0) then
					raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource[&apos;||numSrc||&apos;]/type may not be blank or empty.&apos;;
				end if;
			end if;
			if (upper(debug) = &apos;Y&apos;) then
				call print(moduleName||&apos; : copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource[&apos;||numSrc||&apos;]/type=&apos;||NVL(resultStr,&apos;null&apos;));
			end if;

			-- Get the next srcResource entry
			set pos3 = INSTR(privilegeEntry, &apos;&lt;resource:srcResource&gt;&apos;, pos3+1);
			set pos4 = INSTR(privilegeEntry, &apos;&lt;/resource:srcResource&gt;&apos;, pos4+1);
		end while;
		if (numSrc = 0) then
			raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource may not be blank or empty.&apos;;
		end if;
		if (numSrc &gt; 1) then
			raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/srcResource may not have more than one entry.  numSrc=&apos;||numSrc;
		end if;

		-- Make sure the destination resource path and type are not empty.
		set pos3 = INSTR(privilegeEntry, &apos;&lt;resource:dstResource&gt;&apos;);
		set pos4 = INSTR(privilegeEntry, &apos;&lt;/resource:dstResource&gt;&apos;);
		set numDst = 0;
		while (pos3 &gt; 0 and pos4 &gt; 0) do
			set numDst = numDst + 1;
			set len = LENGTH(&apos;&lt;resource:dstResource&gt;&apos;);
			set privilegeDst = TRIM(SUBSTRING(privilegeEntry, pos3+len, pos4-(pos3+len)));
			if (upper(debug) = &apos;Y&apos;) then
				call print(moduleName||&apos; : copyPrivilegeEntry[&apos;||numEntries||&apos;]/dstResource[&apos;||numDst||&apos;]:  privilegeDst=&apos;||REPLACE(privilegeDst, CHR(10), &apos;&apos;));
			end if;

			-- Extract the source path
			set pos5 = INSTR(privilegeDst, &apos;&lt;resource:path&gt;&apos;);
			set pos6 = INSTR(privilegeDst, &apos;&lt;/resource:path&gt;&apos;);
			set resultStr = null;
			if (pos5 = 0 or pos6 = 0) then
				raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/dstResource[&apos;||numDst||&apos;]/path may not be blank or empty.&apos;;
			else
				set len = LENGTH(&apos;&lt;resource:path&gt;&apos;);
				set resultStr = TRIM(SUBSTRING(privilegeDst, pos5+len, pos6-(pos5+len)));
				if (LENGTH(TRIM(resultStr)) = 0) then
					raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/dstResource[&apos;||numDst||&apos;]/path may not be blank or empty.&apos;;
				end if;
			end if;
			if (upper(debug) = &apos;Y&apos;) then
				call print(moduleName||&apos; : copyPrivilegeEntry[&apos;||numEntries||&apos;]/dstResource[&apos;||numDst||&apos;]/path=&apos;||NVL(resultStr,&apos;null&apos;));
			end if;

			-- Extract the source type
			set pos5 = INSTR(privilegeDst, &apos;&lt;resource:type&gt;&apos;);
			set pos6 = INSTR(privilegeDst, &apos;&lt;/resource:type&gt;&apos;);
			set resultStr = null;
			if (pos5 = 0 or pos6 = 0) then
				raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/dstResource[&apos;||numDst||&apos;]/type may not be blank or empty.&apos;;
			else
				set len = LENGTH(&apos;&lt;resource:type&gt;&apos;);
				set resultStr = TRIM(SUBSTRING(privilegeDst, pos5+len, pos6-(pos5+len)));
				if (LENGTH(TRIM(resultStr)) = 0) then
					raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/dstResource[&apos;||numDst||&apos;]/type may not be blank or empty.&apos;;
				end if;
			end if;
			if (upper(debug) = &apos;Y&apos;) then
				call print(moduleName||&apos; : copyPrivilegeEntry[&apos;||numEntries||&apos;]/dstResource[&apos;||numDst||&apos;]/type=&apos;||NVL(resultStr,&apos;null&apos;));
			end if;

			-- Get the next dstResource entry
			set pos3 = INSTR(privilegeEntry, &apos;&lt;resource:dstResource&gt;&apos;, pos3+1);
			set pos4 = INSTR(privilegeEntry, &apos;&lt;/resource:dstResource&gt;&apos;, pos4+1);
		end while;
		if (numDst = 0) then
			raise ex value &apos;copyPrivilegeEntry[&apos;||numEntries||&apos;]/dstResource may not be blank or empty.&apos;;
		end if;
		if (upper(debug) = &apos;Y&apos;) then
			call print(&apos;&apos;);
		end if;

		-- Get the next copy privilege entry
		set pos1 = INSTR(copyPrivilegeEntries, &apos;&lt;resource:copyPrivilegeEntry&gt;&apos;, pos1+1);
		set pos2 = INSTR(copyPrivilegeEntries, &apos;&lt;/resource:copyPrivilegeEntry&gt;&apos;, pos2+1);
	end while;

	-- Create the web service input request for copyResourcePrivileges
	set createInput = 
		&apos;&lt;resource:copyResourcePrivileges xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot;&gt;&apos;||CHR(10)||
		&apos;  &lt;resource:updateRecursively&gt;&apos; || CAST(XMLTEXT(updatePrivilegesRecursively) AS VARCHAR) || &apos;&lt;/resource:updateRecursively&gt;&apos;||CHR(10)||
		&apos;  &lt;resource:copyPrivilegeEntries&gt;&apos;||CHR(10)||
			 copyPrivilegeEntries || 
		&apos;  &lt;/resource:copyPrivilegeEntries&gt;&apos;||CHR(10)||
		&apos;  &lt;resource:mode&gt;&apos; || CAST(XMLTEXT(mode) AS VARCHAR) || &apos;&lt;/resource:mode&gt;&apos;||CHR(10)||
		&apos;&lt;/resource:copyResourcePrivileges&gt;&apos;;

	if (upper(debug) = &apos;Y&apos;) then
		call print(moduleName||&apos; : createInput:&apos;||CHR(10)||SUBSTRING(NVL(createInput,&apos;null&apos;),1,63900));
		--call pause(500);
	end if;

	-- Invoke copyResourcePrivileges
	call /services/webservices/system/admin/resource/operations/copyResourcePrivileges(createInput, createResponse, faultResponse);
	if (faultResponse is not null) then
		raise ex value CAST(faultResponse as LONGVARCHAR);
	end if;	
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1574891209708</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">na</attribute>
  <attribute name="lastModifiedUserName" type="STRING">aiu0920</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/216</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/307</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/233</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/273</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/250</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/337</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/195</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/318</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/194</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/290</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/193</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="createResourceCopy" path="/shared/ASAssets/Utilities/repository/createResourceCopy" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>createResourceCopy:
	-- CIS Repository Helper Procedure --
	This is a procedure is used to create a copy of a resource by adding _Copy_1 and etc.  It looks for existing copies and increments the number.
	The resource can be any resource including folders.
 
	Input:
		mode - C=Copy resource and leave original, R=Rename resource to the &quot;copied&quot; name
				If left null, the default is copy and leave original in place.
		resourcePath - CIS resource to be copied
			Values: e.g. /shared/examples/LookupProduct
		resourceType - the type of resources
			Values: e.g. PROCEDURE
	Output:
		success	- true(1) or false(0)
	Exceptions:  ex

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.3		05/23/2013		Mike Tinius			6.0.0			created new for Best Practices 7.1
	2018.100	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="mode" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/resource/CopyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="targetContainerPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="newName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
      <element name="copyMode" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="CopyMode" type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/RenameResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="newName" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository" type="CONTAINER">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* createResourceCopy:
	-- CIS Repository Helper Procedure --
	This is a procedure is used to create a copy of a resource by adding _Copy_1 and etc.  It looks for existing copies and increments the number.
	The resource can be any resource including folders.
 
	Input:
		mode - C=Copy resource and leave original, R=Rename resource to the &quot;copied&quot; name
				If left null, the default is copy and leave original in place.
		resourcePath - CIS resource to be copied
			Values: e.g. /shared/examples/LookupProduct
		resourceType - the type of resources
			Values: e.g. PROCEDURE
	Output:
		success	- true(1) or false(0)
	Exceptions:  ex

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.3		05/23/2013		Mike Tinius			6.0.0			created new for Best Practices 7.1
	2018.100	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE createResourceCopy(
	IN mode				CHAR(1),
	IN resourcePath		/shared/ASAssets/Utilities/TypeDefinitions.pathType,
	IN resourceType		VARCHAR,
	OUT success			INTEGER
)
BEGIN
    PATH /shared/ASAssets/Utilities/repository;

	DECLARE moduleName				VARCHAR DEFAULT &apos;createResourceCopy&apos;;
	DECLARE debug					CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE resourceNameCopy		VARCHAR;
	DECLARE resourceName			VARCHAR;
	DECLARE parentPath				/shared/ASAssets/Utilities/TypeDefinitions.pathType;
	DECLARE fullResourcePath		/shared/ASAssets/Utilities/TypeDefinitions.pathType;
	DECLARE resourceExists 			BOOLEAN;
	DECLARE i						INTEGER DEFAULT 1;

	set success = 0;
	call /lib/resource/ResourceExists(resourcePath, resourceType, null, resourceExists);
	if (resourceExists) then
		call /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;E&apos;, resourceName, parentPath);
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;));
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;parentPath=&apos;||NVL(parentPath,&apos;null&apos;));

		-- make a copy of the resource
		set resourceNameCopy = resourceName||&apos;_Copy_&apos;||i;
		set fullResourcePath = parentPath||&apos;/&apos;||resourceNameCopy;
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fullResourcePath=&apos;||NVL(fullResourcePath,&apos;null&apos;));

		call /lib/resource/ResourceExists(fullResourcePath, resourceType, null, resourceExists);
		while(resourceExists) do  -- Exit the loop if resource not found
			set i = i + 1;
			set resourceNameCopy = resourceName||&apos;_Copy_&apos;||i;
			set fullResourcePath = parentPath||&apos;/&apos;||resourceNameCopy;
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;resourceNameCopy=&apos;||NVL(resourceNameCopy,&apos;null&apos;));
			call /lib/resource/ResourceExists(fullResourcePath, resourceType, null, resourceExists);
		end while;

		if (mode is null or UPPER(mode) = &apos;C&apos;) then
			-- Rename the existing resource to a copy of the old name
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;renameResource: resourcePath=&apos;||resourcePath || &apos;...to new name=&apos;||resourceNameCopy);
			call /lib/resource/CopyResource(resourcePath, resourceType, parentPath, resourceNameCopy, &apos;OVERWRITE_REPLACE_IF_EXISTS&apos;);
			set success = 1;
		end if;
		if (mode is not null and UPPER(mode) = &apos;R&apos;) then
			-- Rename the existing resource to a copy of the old name
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;renameResource: resourcePath=&apos;||resourcePath || &apos;...to new name=&apos;||resourceNameCopy);
			call /lib/resource/RenameResource(resourcePath, resourceType, resourceNameCopy);
			set success = 1;
		end if;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564712725511</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
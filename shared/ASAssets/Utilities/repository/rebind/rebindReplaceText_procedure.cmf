<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="rebindReplaceText" path="/shared/ASAssets/Utilities/repository/rebind/rebindReplaceText" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>rebindReplaceText:

	-- CIS Repository Helper Procedure --
   	This procedure is used by both rebindFolder and rebindResource to replace the script text when the old path does not exist.

	Use the method to replace the path text within the table or procedure script
	This only gets used when the &quot;from&quot; path does not exist in the target CIS server.
	This can happen when a car file is imported from one environment like DEV where the 
	physical layer resources point to one data source and the target CIS server like TEST
	contains a different data source name.   In that use case, it is not permitted to use
	the regular rebind as it will throw an error, therefore, the only recourse is to rebind
	the actual script or procedure text and use the individual methods for each sub-type
	to perform the update.

	The following resource types and sub-types are supported:
		resourceType = &apos;TABLE&apos;
			subtype = &apos;SQL_TABLE&apos; -- Get Regular View
	
		resourceType = &apos;PROCEDURE&apos;
			subtype = &apos;SQL_SCRIPT_PROCEDURE&apos; -- Get Regular Procedure
			subtype = &apos;EXTERNAL_SQL_PROCEDURE&apos; -- Get Packaged Query Procedure
			subtype = &apos;BASIC_TRANSFORM_PROCEDURE&apos; -- Get XSLT Basic Transformation definition
			subtype = &apos;XSLT_TRANSFORM_PROCEDURE&apos; -- Get XSLT Transformation text
			subtype = &apos;STREAM_TRANSFORM_PROCEDURE&apos; -- Get XSLT Stream Transformation text

	Textual Path Replacement Rules:
	------------------------------
	 Caveat:
	   For textual path replacement, when the &quot;fromFolder&quot; does not exist and the SQL_TABLE (Views) and 
	   SQL_SCRIPT_PROCEDURE (Procedures) have models, the model is lost.  The reason is there is no way
	   to programatically create a model in the API.   For parameterized queries this is unfortunate as
	   there is no way to rebuild the model once removed.  For Views, the model can be regenerated in
	   most cases.
	
	resourceType = &apos;TABLE&apos;
		subtype = &apos;SQL_TABLE&apos; -- Get Regular View
			procedureTextCurr = tableResource.getSqlText();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			procedureText = procedureTextCurr.replaceAll(fromFolder, toFolder);
			updateSqlTable(resourcePath, detailLevel, procedureText, model, isExplicitDesign, columns, annotation, attributes);

	resourceType = &apos;PROCEDURE&apos;
		subtype = &apos;SQL_SCRIPT_PROCEDURE&apos; -- Update Regular Procedure
			procedureTextCurr = procedureResource.getScriptText();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			procedureText = procedureTextCurr.replaceAll(fromFolder, toFolder);
			updateSqlScriptProcedure(resourcePath, detailLevel, procedureText, model, isExplicitDesign, parameters, annotation, attributes);

		subtype = &apos;EXTERNAL_SQL_PROCEDURE&apos; -- Update Packaged Query Procedure
			usedResourcePathCurr = procedureResource.getExternalDataSourcePath();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			usedResourcePath = usedResourcePathCurr.replaceAll(fromFolder, toFolder);
			updateExternalSqlProcedure(resourcePath, detailLevel, procedureText, usedResourcePath, parameters, annotation, attributes);

		subtype = &apos;BASIC_TRANSFORM_PROCEDURE&apos; -- Update XSLT Basic Transformation definition
			usedResourcePathCurr = procedureResource.getTransformSourcePath();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			usedResourcePath = usedResourcePathCurr.replaceAll(fromFolder, toFolder);
			updateBasicTransformProcedure(resourcePath, detailLevel, usedResourcePath, resourceType, annotation, attributes);

		subtype = &apos;XSLT_TRANSFORM_PROCEDURE&apos; -- Update XSLT Transformation text
			usedResourcePathCurr = procedureResource.getTransformSourcePath();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			usedResourcePath = usedResourcePathCurr.replaceAll(fromFolder, toFolder);
			updateXsltTransformProcedure(resourcePath, detailLevel, usedResourcePath, resourceType, procedureText, model, annotation, isExplicitDesign, parameters, attributes);

		subtype = &apos;STREAM_TRANSFORM_PROCEDURE&apos; -- Update XSLT Stream Transformation text
			usedResourcePathCurr = procedureResource.getTransformSourcePath();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			usedResourcePath = usedResourcePathCurr.replaceAll(fromFolder, toFolder);
			updateStreamTransformProcedure(resourcePath, detailLevel, usedResourcePath, resourceType, model, isExplicitDesign, parameters, annotation, attributes);


	Input:
		resourcePath - the resource path of the resource being rebound

		resourceType - the type of the resource being rebound

		subtype - the subtype of the resource beging rebound

		fromFolder - the original &quot;from&quot; path of the &quot;used&quot; resource

		to Folder - the target &quot;to&quot; path of the for the &quot;used&quot; resource


	Output:
		success - 1 or 0 - 1=success, 0=unsuccessful


	Exceptions:
        System.IllegalArgumentException - thrown if an input value is missing
        System.SOAPFaultException - thrown if there is a fault


	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.2		04/24/2013		Mike Tinius			5.2.0			Created new
	2013.3		05/24/2013		Mike Tinius			6.0.0			Fixed issue with script text needing to be XML &quot;unescaped&quot; prior to it being updated and XML &quot;escaped&quot;
	2013.3		06/25/2013		Mike Tinius			6.1.0			Set explicit success=1 in the different sections to insure a proper value is returned.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/22/2019		Mike Tinius			7.0.8			Added the ability to update a trigger.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="fromFolder" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="toFolder" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/services/webservices/system/admin/resource/operations/updateTrigger" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="updateTrigger" direction="IN">
        <datatype name="updateTrigger" extendedName="{http://www.compositesw.com/services/system/admin/resource}updateTrigger" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}updateTrigger" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}updateTrigger">
          <schemaDatatype>
            <datatype name="updateTrigger" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="updateTriggerRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="2">
              <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="detail" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="detailLevel" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="enabled" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
              <element name="conditionType" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="conditionSchedule" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="schedule" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="3">
                  <element name="mode" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="scheduleMode" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="startTime" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="dateTime" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATETIME"/>
                  </element>
                  <element name="fromTimeInADay" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="long" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="integer" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER"/>
                  </element>
                  <element name="endTimeInADay" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="long" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="integer" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER"/>
                  </element>
                  <element name="recurringDay" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="int" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="long" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                  </element>
                  <element name="interval" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="int" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="long" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                  </element>
                  <element name="period" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="calendarPeriod" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="count" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="int" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="long" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                  </element>
                  <element name="isCluster" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                    <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                  </element>
                </datatype>
              </element>
              <element name="conditionAttributes" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="attributeList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="4">
                  <element name="attribute" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                    <datatype name="attribute" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="5">
                      <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                        <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <datatype name="attributeTypeValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="6">
                          <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                            <datatype name="attributeTypeValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="7">
                              <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                                <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <reference refId="6"/>
                              </element>
                              <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeTypeValueMap" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="8">
                                  <element name="entry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                    <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="9">
                                      <element name="key" namespace="http://www.compositesw.com/services/system/util/common">
                                        <reference refId="7"/>
                                      </element>
                                      <element name="value" namespace="http://www.compositesw.com/services/system/util/common">
                                        <reference refId="7"/>
                                      </element>
                                    </datatype>
                                  </element>
                                </datatype>
                              </element>
                              <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeSimpleValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="10">
                                  <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                    <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                  </element>
                                </datatype>
                              </element>
                            </datatype>
                          </element>
                        </datatype>
                      </element>
                      <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <reference refId="8"/>
                      </element>
                      <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <reference refId="10"/>
                      </element>
                      <element name="unset" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </element>
                </datatype>
              </element>
              <element name="actionType" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="actionAttributes" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <reference refId="4"/>
              </element>
              <element name="maxEventsQueued" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="integer" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="decimal" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DECIMAL" maxDigits="32" maxFractionalDigits="0"/>
              </element>
              <element name="annotation" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="attributes" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <reference refId="4"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="updateTriggerResponse" direction="OUT">
        <datatype name="updateTriggerResponse" extendedName="{http://www.compositesw.com/services/system/admin/resource}updateTriggerResponse" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}updateTriggerResponse" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}updateTriggerResponse">
          <schemaDatatype>
            <datatype name="updateTriggerResponse" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="updateTriggerResponse" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="11">
              <element name="resources" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="resourceList" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="12">
                  <element name="resource" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                    <datatype name="resource" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="13">
                      <element name="name" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="resourceType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="subtype" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="resourceSubType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="id" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="changeId" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="int" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="long" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                      </element>
                      <element name="version" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="introspectState" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="introspectState" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="ownerDomain" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="ownerName" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="impactLevel" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="impactLevel" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="impactMessage" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="enabled" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                      <element name="lockState" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="lockState" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="14">
                          <element name="lockOwnerDomain" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="lockOwnerName" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="lockCreateTime" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="dateTime" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATETIME"/>
                          </element>
                          <element name="lockParentPath" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                        </datatype>
                      </element>
                      <element name="hints" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="15">
                          <element name="hint" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                            <reference refId="5"/>
                          </element>
                        </datatype>
                      </element>
                      <element name="annotation" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="attributes" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <reference refId="4"/>
                      </element>
                    </datatype>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="fault" direction="OUT">
        <datatype name="fault" extendedName="{http://www.compositesw.com/services/system/util/common}fault" namespace="http://www.compositesw.com/services/system/util/common" referenceDefinitionSet="/services/webservices/system/util/common/operations/CommonSchema" referenceType="{http://www.compositesw.com/services/system/util/common}fault" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/util/common}fault">
          <schemaDatatype>
            <datatype name="fault" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="fault" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="ELEMENT_DECL" type="TREE" refId="16">
              <element name="errorEntry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                <datatype name="messageEntry" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="17">
                  <element name="code" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="message" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="detail" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="severity" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="messageSeverity" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_ActionAttributes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="actionType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="value">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateBasicTransformationProcedure" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="transformSourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="transformSourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="attributeVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="AttributeCompleteType" type="TREE" refId="2">
              <element name="attrName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrValue">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="valueList">
                <datatype name="valueList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="itemType" type="TREE" refId="3">
                      <element name="type">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="value">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="valueMap">
                <datatype name="valueMap" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="entryType" type="TREE" refId="4">
                      <element name="key">
                        <datatype name="key" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <reference refId="3"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="value">
                        <datatype name="value" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <reference refId="3"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="valueArray">
                <datatype name="valueArray" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="unset">
                <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateExternalSqlProcedure" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="externalSqlText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="externalDatasaourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="parameterVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="ParameterType" type="TREE" refId="2">
              <element name="name">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="sqlType">
                <datatype name="sqlType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="sqlType" type="TREE" refId="3">
                      <element name="definition">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="nativeType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="referencePath">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="referenceTypeName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="proprietaryModel">
                        <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                      </element>
                      <element name="name">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="trailingSpaces">
                        <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="xmlType">
                <datatype name="xmlType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="xmlType" type="TREE" refId="4">
                      <element name="name">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="namespace">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="nativeType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="schema">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="referencePath">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="proprietaryModel">
                        <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="pseudoType">
                <datatype name="pseudoType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="pseudoType" type="TREE" refId="5">
                      <element name="definition">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="direction">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="isNullable">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attributes">
                <datatype name="attributes" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="AttributeCompleteType" type="TREE" refId="6">
                      <element name="attrName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="attrType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="attrValue">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="valueList">
                        <datatype name="valueList" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="itemType" type="TREE" refId="7">
                              <element name="type">
                                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                              </element>
                              <element name="value">
                                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                              </element>
                            </datatype>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="valueMap">
                        <datatype name="valueMap" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="entryType" type="TREE" refId="8">
                              <element name="key">
                                <datatype name="key" type="ARRAY" maxLength="0">
                                  <itemDatatype>
                                    <reference refId="7"/>
                                  </itemDatatype>
                                </datatype>
                              </element>
                              <element name="value">
                                <datatype name="value" type="ARRAY" maxLength="0">
                                  <itemDatatype>
                                    <reference refId="7"/>
                                  </itemDatatype>
                                </datatype>
                              </element>
                            </datatype>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="valueArray">
                        <datatype name="valueArray" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="unset">
                        <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="annotation">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="attributeVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <reference refId="6"/>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateSqlTable" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="inScripttext" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateStreamTransformProcedure" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="transformSourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="transformSourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="streamModel" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="xsltModelType" type="TREE" refId="2">
              <element name="version">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="type">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="proprietaryModel">
                <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="isExplicitlyDesigned" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="parameterVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="ParameterType" type="TREE" refId="3">
              <element name="name">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="sqlType">
                <datatype name="sqlType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="sqlType" type="TREE" refId="4">
                      <element name="definition">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="nativeType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="referencePath">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="referenceTypeName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="proprietaryModel">
                        <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                      </element>
                      <element name="name">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="trailingSpaces">
                        <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="xmlType">
                <datatype name="xmlType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="xmlType" type="TREE" refId="5">
                      <element name="name">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="namespace">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="nativeType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="schema">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="referencePath">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="proprietaryModel">
                        <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="pseudoType">
                <datatype name="pseudoType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="pseudoType" type="TREE" refId="6">
                      <element name="definition">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="direction">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="isNullable">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attributes">
                <datatype name="attributes" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="AttributeCompleteType" type="TREE" refId="7">
                      <element name="attrName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="attrType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="attrValue">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="valueList">
                        <datatype name="valueList" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="itemType" type="TREE" refId="8">
                              <element name="type">
                                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                              </element>
                              <element name="value">
                                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                              </element>
                            </datatype>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="valueMap">
                        <datatype name="valueMap" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="entryType" type="TREE" refId="9">
                              <element name="key">
                                <datatype name="key" type="ARRAY" maxLength="0">
                                  <itemDatatype>
                                    <reference refId="8"/>
                                  </itemDatatype>
                                </datatype>
                              </element>
                              <element name="value">
                                <datatype name="value" type="ARRAY" maxLength="0">
                                  <itemDatatype>
                                    <reference refId="8"/>
                                  </itemDatatype>
                                </datatype>
                              </element>
                            </datatype>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="valueArray">
                        <datatype name="valueArray" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="unset">
                        <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="annotation">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="attributeVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <reference refId="7"/>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateXsltTransformProcedure" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="transformSourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="transformSourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="xsltText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="xsltModel" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="xsltModelType" type="TREE" refId="2">
              <element name="version">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="type">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="proprietaryModel">
                <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="isExplicitDesign" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="parameterVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="ParameterType" type="TREE" refId="3">
              <element name="name">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="sqlType">
                <datatype name="sqlType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="sqlType" type="TREE" refId="4">
                      <element name="definition">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="nativeType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="referencePath">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="referenceTypeName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="proprietaryModel">
                        <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                      </element>
                      <element name="name">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="trailingSpaces">
                        <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="xmlType">
                <datatype name="xmlType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="xmlType" type="TREE" refId="5">
                      <element name="name">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="namespace">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="nativeType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="schema">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="referencePath">
                        <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                      </element>
                      <element name="proprietaryModel">
                        <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="pseudoType">
                <datatype name="pseudoType" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="pseudoType" type="TREE" refId="6">
                      <element name="definition">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="direction">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="isNullable">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attributes">
                <datatype name="attributes" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="AttributeCompleteType" type="TREE" refId="7">
                      <element name="attrName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="attrType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="attrValue">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="valueList">
                        <datatype name="valueList" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="itemType" type="TREE" refId="8">
                              <element name="type">
                                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                              </element>
                              <element name="value">
                                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                              </element>
                            </datatype>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="valueMap">
                        <datatype name="valueMap" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="entryType" type="TREE" refId="9">
                              <element name="key">
                                <datatype name="key" type="ARRAY" maxLength="0">
                                  <itemDatatype>
                                    <reference refId="8"/>
                                  </itemDatatype>
                                </datatype>
                              </element>
                              <element name="value">
                                <datatype name="value" type="ARRAY" maxLength="0">
                                  <itemDatatype>
                                    <reference refId="8"/>
                                  </itemDatatype>
                                </datatype>
                              </element>
                            </datatype>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="valueArray">
                        <datatype name="valueArray" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="unset">
                        <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="annotation">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="attributeVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <reference refId="7"/>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/xml/unescapeXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    rebindReplaceText:

	-- CIS Repository Helper Procedure --
   	This procedure is used by both rebindFolder and rebindResource to replace the script text when the old path does not exist.

	Use the method to replace the path text within the table or procedure script
	This only gets used when the &quot;from&quot; path does not exist in the target CIS server.
	This can happen when a car file is imported from one environment like DEV where the 
	physical layer resources point to one data source and the target CIS server like TEST
	contains a different data source name.   In that use case, it is not permitted to use
	the regular rebind as it will throw an error, therefore, the only recourse is to rebind
	the actual script or procedure text and use the individual methods for each sub-type
	to perform the update.

	The following resource types and sub-types are supported:
		resourceType = &apos;TABLE&apos;
			subtype = &apos;SQL_TABLE&apos; -- Get Regular View
	
		resourceType = &apos;PROCEDURE&apos;
			subtype = &apos;SQL_SCRIPT_PROCEDURE&apos; -- Get Regular Procedure
			subtype = &apos;EXTERNAL_SQL_PROCEDURE&apos; -- Get Packaged Query Procedure
			subtype = &apos;BASIC_TRANSFORM_PROCEDURE&apos; -- Get XSLT Basic Transformation definition
			subtype = &apos;XSLT_TRANSFORM_PROCEDURE&apos; -- Get XSLT Transformation text
			subtype = &apos;STREAM_TRANSFORM_PROCEDURE&apos; -- Get XSLT Stream Transformation text

	Textual Path Replacement Rules:
	------------------------------
	 Caveat:
	   For textual path replacement, when the &quot;fromFolder&quot; does not exist and the SQL_TABLE (Views) and 
	   SQL_SCRIPT_PROCEDURE (Procedures) have models, the model is lost.  The reason is there is no way
	   to programatically create a model in the API.   For parameterized queries this is unfortunate as
	   there is no way to rebuild the model once removed.  For Views, the model can be regenerated in
	   most cases.
	
	resourceType = &apos;TABLE&apos;
		subtype = &apos;SQL_TABLE&apos; -- Get Regular View
			procedureTextCurr = tableResource.getSqlText();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			procedureText = procedureTextCurr.replaceAll(fromFolder, toFolder);
			updateSqlTable(resourcePath, detailLevel, procedureText, model, isExplicitDesign, columns, annotation, attributes);

	resourceType = &apos;PROCEDURE&apos;
		subtype = &apos;SQL_SCRIPT_PROCEDURE&apos; -- Update Regular Procedure
			procedureTextCurr = procedureResource.getScriptText();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			procedureText = procedureTextCurr.replaceAll(fromFolder, toFolder);
			updateSqlScriptProcedure(resourcePath, detailLevel, procedureText, model, isExplicitDesign, parameters, annotation, attributes);

		subtype = &apos;EXTERNAL_SQL_PROCEDURE&apos; -- Update Packaged Query Procedure
			usedResourcePathCurr = procedureResource.getExternalDataSourcePath();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			usedResourcePath = usedResourcePathCurr.replaceAll(fromFolder, toFolder);
			updateExternalSqlProcedure(resourcePath, detailLevel, procedureText, usedResourcePath, parameters, annotation, attributes);

		subtype = &apos;BASIC_TRANSFORM_PROCEDURE&apos; -- Update XSLT Basic Transformation definition
			usedResourcePathCurr = procedureResource.getTransformSourcePath();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			usedResourcePath = usedResourcePathCurr.replaceAll(fromFolder, toFolder);
			updateBasicTransformProcedure(resourcePath, detailLevel, usedResourcePath, resourceType, annotation, attributes);

		subtype = &apos;XSLT_TRANSFORM_PROCEDURE&apos; -- Update XSLT Transformation text
			usedResourcePathCurr = procedureResource.getTransformSourcePath();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			usedResourcePath = usedResourcePathCurr.replaceAll(fromFolder, toFolder);
			updateXsltTransformProcedure(resourcePath, detailLevel, usedResourcePath, resourceType, procedureText, model, annotation, isExplicitDesign, parameters, attributes);

		subtype = &apos;STREAM_TRANSFORM_PROCEDURE&apos; -- Update XSLT Stream Transformation text
			usedResourcePathCurr = procedureResource.getTransformSourcePath();
			// Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path
			usedResourcePath = usedResourcePathCurr.replaceAll(fromFolder, toFolder);
			updateStreamTransformProcedure(resourcePath, detailLevel, usedResourcePath, resourceType, model, isExplicitDesign, parameters, annotation, attributes);

	resourceType = &apos;TRIGGER&apos;
		subtype = &apos;NONE&apos; -- Update Trigger
			Loop over getBasicResourceCursor_ActionAttributes [PATH attribute]
				Replace all of the matching old &quot;fromFolder&quot; paths with the new &quot;toFolder&quot; path for attribute PATH
				updateTrigger(createInput, createResponse, faultResponse);

	Input:
		resourcePath - the resource path of the resource being rebound
		resourceType - the type of the resource being rebound
		subtype - the subtype of the resource beging rebound
		fromFolder - the original &quot;from&quot; path of the &quot;used&quot; resource
		to Folder - the target &quot;to&quot; path of the for the &quot;used&quot; resource

	Output:
		success - 1 or 0 - 1=success, 0=unsuccessful

	Exceptions:
        System.IllegalArgumentException - thrown if an input value is missing
        System.SOAPFaultException - thrown if there is a fault

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.2		04/24/2013		Mike Tinius			5.2.0			Created new
	2013.3		05/24/2013		Mike Tinius			6.0.0			Fixed issue with script text needing to be XML &quot;unescaped&quot; prior to it being updated and XML &quot;escaped&quot;
	2013.3		06/25/2013		Mike Tinius			6.1.0			Set explicit success=1 in the different sections to insure a proper value is returned.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/22/2019		Mike Tinius			7.0.8			Added the ability to update a trigger.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE rebindReplaceText(
	IN resourcePath		LONGVARCHAR, 
	IN resourceType		VARCHAR,
	IN fromFolder		LONGVARCHAR, 
	IN toFolder			LONGVARCHAR,
	IN debug			CHAR(1),
	OUT success			BIT
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;rebindReplaceText&apos;;
	DECLARE fromFolder_				LONGVARCHAR DEFAULT fromFolder;
	DECLARE toFolder_				LONGVARCHAR DEFAULT toFolder;
	-- A comma-separated list of words that come back as reserved but are not reserved.  applyReservedListToPath is incorrectly double-quoting these words.
	DECLARE notReservedWordList		LONGVARCHAR DEFAULT &apos;source&apos;;
	DECLARE createInput 			LONGVARCHAR;
	DECLARE createResponse 			XML;
	DECLARE faultResponse 			XML;
	DECLARE message					LONGVARCHAR;
	DECLARE xmlOut					XML;
	DECLARE xmlOutStr				LONGVARCHAR;
	DECLARE subtype					VARCHAR;
	DECLARE scriptText				LONGVARCHAR;
	DECLARE modifiedPath			LONGVARCHAR DEFAULT null;
	DECLARE externalDataSourcePath 	LONGVARCHAR;
   	DECLARE transformSourcePath 	LONGVARCHAR;
	DECLARE transformSourceType		VARCHAR;
	DECLARE word					VARCHAR;
	DECLARE pos1, pos2, len			INTEGER;
	-- These variables are for trigger update
	DECLARE actionPath				LONGVARCHAR;
	DECLARE actionType				VARCHAR;
	DECLARE actionAttributes		LONGVARCHAR;
	DECLARE enabled					VARCHAR;	-- true or false

	set success = 0;

	if ((resourcePath IS NOT NULL AND LENGTH(&apos;|&apos;||resourcePath||&apos;|&apos;) &gt; 2) and
		(resourceType IS NOT NULL AND LENGTH(&apos;|&apos;||resourceType||&apos;|&apos;) &gt; 2) ) then

		-- Retrieve the resource XML
		call /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getBasicResourceXML(resourcePath, resourceType, xmlOut);
		set xmlOutStr = CAST(xmlOut as LONGVARCHAR);

		-- Get the subtype:  &lt;resource:subtype&gt;NONE&lt;/resource:subtype&gt;
		set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:subtype&gt;&apos;);
		set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:subtype&gt;&apos;);
		set len = length(&apos;&lt;resource:subtype&gt;&apos;);
		if (pos1 &gt; 0 and pos2 &gt; 0) then
			set subtype = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
		end if;

		/*************************************************************
		 * Resource: TABLE / SQL_TABLE - View
		 *************************************************************/
		if (resourceType = &apos;TABLE&apos; and subtype =&apos;SQL_TABLE&apos;) then
			-- Get the view script text:  &lt;resource:sqlText&gt;...&lt;/resource:sqlText&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:sqlText&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:sqlText&gt;&apos;);
			set len = length(&apos;&lt;resource:sqlText&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set scriptText = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;
			-- Unescape the XML in preparation for it to be escaped again during update
			call /shared/ASAssets/Utilities/&quot;xml&quot;/unescapeXML(scriptText, scriptText);

			-- Apply reserved path to both the rebind from and the rebind to paths
			set fromFolder_ = REPLACE(fromFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
			set toFolder_ = REPLACE(toFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(fromFolder_, null, fromFolder_);
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(toFolder_, null, toFolder_);

			-- Words that are not actually reserved but come back as reserved from applyReservedListToPath:
			for r as 
				select object from /shared/ASAssets/Utilities/string/extractDelimitedText(notReservedWordList, &apos;,&apos;, 0, 0, 0, 1, 0)
				where object is not null and length(trim(object)) &gt; 0
			do
				set word = &apos;&quot;&apos;||lower(r.object)||&apos;&quot;&apos;;
				set len = length(word);
				-- Look for non-reserved words in the fromFolder_
				set pos1 = INSTR(lower(fromFolder_), word);
				while (pos1 &gt; 0) do
					set fromFolder_ = SUBSTRING(fromFolder_, 1, pos1-1) || SUBSTRING(fromFolder_, pos1+1, len-2) || SUBSTRING(fromFolder_, pos1+len);
					set pos1 = INSTR(lower(fromFolder_), word);
				end while;
				--call print(&apos;fromFolder_=&apos;||fromFolder_);

				-- Look for non-reserved words in the toFolder_
				set pos1 = INSTR(lower(toFolder_), word);
				while (pos1 &gt; 0) do
					set toFolder_ = SUBSTRING(toFolder_, 1, pos1-1) || SUBSTRING(toFolder_, pos1+1, len-2) || SUBSTRING(toFolder_, pos1+len);
					set pos1 = INSTR(lower(toFolder_), word);
				end while;
				--call print(&apos;toFolder_=&apos;||toFolder_);
			end for;

			-- Check to see if the script text contains a partial path for rebind by adding a / to the end to insure it is a complete partial path.
			if (INSTR(scriptText, fromFolder_) &gt; 0) then
				set message = &apos;UPDATED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||fromFolder_);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||toFolder_);
				end if;

				-- Replace the from path with the new to path
				set scriptText = REPLACE(scriptText, fromFolder_, toFolder_);

/*  updateSqlTable:
	IN fullResourcePath 	/shared/Utilities/TypeDefinitions.pathType, 
    IN inScripttext 		LONGVARCHAR,
	OUT success				BIT,
	OUT createResponse 		XML,
	OUT faultResponse		XML
*/
				-- Update the table text
				call /shared/ASAssets/Utilities/repository/updateSqlTable(resourcePath,scriptText,success,createResponse,faultResponse);
				if (faultResponse is not null or success = 0) then
					set message = &apos;ERROR: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
					if (UPPER(debug) = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					end if;
					raise System.SOAPFaultException value cast(faultResponse as longvarchar);
				end if;
			else
				set message = &apos;INSPECTED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||fromFolder_);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||toFolder_);
				end if;
			end if;
			set success = 1;
		end if;

		/*************************************************************
		 * Resource: PROCEDURE / SQL_SCRIPT_PROCEDURE - sql script procedure
		 *************************************************************/
		if (resourceType = &apos;PROCEDURE&apos; and subtype = &apos;SQL_SCRIPT_PROCEDURE&apos;) then
			-- Get procedure script text :  &lt;resource:scriptText&gt;...&lt;/resource:scriptText&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:scriptText&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:scriptText&gt;&apos;);
			set len = length(&apos;&lt;resource:scriptText&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set scriptText = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;
			-- Unescape the XML in preparation for it to be escaped again during update
			call /shared/ASAssets/Utilities/&quot;xml&quot;/unescapeXML(scriptText, scriptText);

			-- Apply reserved path to both the rebind from and the rebind to paths
			set fromFolder_ = REPLACE(fromFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
			set toFolder_ = REPLACE(toFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(fromFolder_, null, fromFolder_);
			call /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(toFolder_, null, toFolder_);

			-- Words that are not actually reserved but come back as reserved from applyReservedListToPath:
			for r as 
				select object from /shared/ASAssets/Utilities/string/extractDelimitedText(notReservedWordList, &apos;,&apos;, 0, 0, 0, 1, 0)
				where object is not null and length(trim(object)) &gt; 0
			do
				set word = &apos;&quot;&apos;||lower(r.object)||&apos;&quot;&apos;;
				set len = length(word);
				-- Look for non-reserved words in the fromFolder_
				set pos1 = INSTR(lower(fromFolder_), word);
				while (pos1 &gt; 0) do
					set fromFolder_ = SUBSTRING(fromFolder_, 1, pos1-1) || SUBSTRING(fromFolder_, pos1+1, len-2) || SUBSTRING(fromFolder_, pos1+len);
					set pos1 = INSTR(lower(fromFolder_), word);
				end while;
				--call print(&apos;fromFolder_=&apos;||fromFolder_);

				-- Look for non-reserved words in the toFolder_
				set pos1 = INSTR(lower(toFolder_), word);
				while (pos1 &gt; 0) do
					set toFolder_ = SUBSTRING(toFolder_, 1, pos1-1) || SUBSTRING(toFolder_, pos1+1, len-2) || SUBSTRING(toFolder_, pos1+len);
					set pos1 = INSTR(lower(toFolder_), word);
				end while;
				--call print(&apos;toFolder_=&apos;||toFolder_);
			end for;

			-- Check to see if the script text contains a partial path for rebind by adding a / to the end to insure it is a complete partial path.
			if (INSTR(scriptText, fromFolder_) &gt; 0) then
				set message = &apos;UPDATED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||fromFolder_);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||toFolder_);
				end if;

				-- Replace the from path with the new to path
				set scriptText = REPLACE(scriptText, fromFolder_, toFolder_);

/*  updateSqlScript:
	IN fullResourcePath 	/shared/Utilities/TypeDefinitions.pathType, 
    INOUT scripttext 		LONGVARCHAR,
	OUT success				BIT,
	OUT createResponse 		XML,
	OUT faultResponse		XML
*/
				-- Update the script text
				call /shared/ASAssets/Utilities/repository/updateSqlScript(resourcePath,scriptText,success,createResponse,faultResponse);
				if (faultResponse is not null or success = 0) then
					set message = &apos;ERROR: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
					if (UPPER(debug) = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					end if;
					raise System.SOAPFaultException value cast(faultResponse as longvarchar);
				end if;
			else
				set message = &apos;INSPECTED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||fromFolder_);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||toFolder_);
				end if;
			end if;
			set success = 1;
		end if;

		/*************************************************************
		 * Resource: PROCEDURE / EXTERNAL_SQL_PROCEDURE -- Packaged Query Procedure
		 *************************************************************/
		if (resourceType = &apos;PROCEDURE&apos; and subtype =&apos;EXTERNAL_SQL_PROCEDURE&apos;) then
			-- Get external procedure datasource path :  &lt;resource:externalDataSourcePath&gt;...&lt;/resource:externalDataSourcePath&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:externalDataSourcePath&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:externalDataSourcePath&gt;&apos;);
			set len = length(&apos;&lt;resource:externalDataSourcePath&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set externalDataSourcePath = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;

			-- Get external SQL script text :  &lt;resource:externalSqlText&gt;...&lt;/resource:externalSqlText&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:externalSqlText&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:externalSqlText&gt;&apos;);
			set len = length(&apos;&lt;resource:externalSqlText&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set scriptText = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;
			-- Unescape the XML in preparation for it to be escaped again during update
			call /shared/ASAssets/Utilities/&quot;xml&quot;/unescapeXML(scriptText, scriptText);

			-- Check to see if the actual path is the same as the rebind from path
			if (externalDataSourcePath = fromFolder_) then
				set modifiedPath = toFolder_;
			else
				set fromFolder_ = REPLACE(fromFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
				set toFolder_ = REPLACE(toFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
				-- Check to see if the actual path contains a partial path for rebind by adding a / to the end to insure it is a complete partial path.
				if (INSTR(externalDataSourcePath, fromFolder_) &gt; 0) then
					set modifiedPath = REPLACE(externalDataSourcePath, fromFolder_, toFolder_);
				end if;
			end if;

			if (modifiedPath is not null) then
				set message = &apos;UPDATED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;externalDataSourcePath=&apos;||NVL(externalDataSourcePath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;modifiedPath=&apos;||NVL(modifiedPath,&apos;null&apos;));
				end if;

/* 	updateExternalSqlProcedure:
	IN resourcePath 			/shared/Utilities/TypeDefinitions.pathType, 
   	IN externalSqlText 			LONGVARCHAR,
	IN externalDatasaourcePath	/shared/Utilities/TypeDefinitions.pathType, 
	IN parameterVector			/shared/Utilities/repository/definitions/RepositoryDefinitions.ParameterVectorType,
	IN annotation				LONGVARCHAR,
	IN attributeVector			/shared/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType,
	OUT success					BIT
*/
				-- Update the External Package
				call /shared/ASAssets/Utilities/repository/updateExternalSqlProcedure(resourcePath, scriptText, modifiedPath, null, null, null, success);

				if (faultResponse is not null or success = 0) then
					set message = &apos;ERROR: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
					if (UPPER(debug) = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					end if;
					raise System.SOAPFaultException value cast(faultResponse as longvarchar);
				end if;
			else
				set message = &apos;INSPECTED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;externalDataSourcePath=&apos;||NVL(externalDataSourcePath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
				end if;
			end if;
			set success = 1;
		end if;

		/*************************************************************
		 * Resource: PROCEDURE / BASIC_TRANSFORM_PROCEDURE -- Basic Transformation
		 *************************************************************/
		if (resourceType = &apos;PROCEDURE&apos; and subtype =&apos;BASIC_TRANSFORM_PROCEDURE&apos;) then
			-- Get transform source path :  &lt;resource:transformSourcePath&gt;...&lt;/resource:transformSourcePath&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:transformSourcePath&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:transformSourcePath&gt;&apos;);
			set len = length(&apos;&lt;resource:transformSourcePath&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set transformSourcePath = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;

			-- Get transform source type :  &lt;resource:transformSourceType&gt;...&lt;/resource:transformSourceType&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:transformSourceType&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:transformSourceType&gt;&apos;);
			set len = length(&apos;&lt;resource:transformSourceType&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set transformSourceType = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;

			-- Check to see if the actual path is the same as the rebind from path
			if (transformSourcePath = fromFolder_) then
				set modifiedPath = toFolder_;
			else
				set fromFolder_ = REPLACE(fromFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
				set toFolder_ = REPLACE(toFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
				-- Check to see if the actual path contains a partial path for rebind by adding a / to the end to insure it is a complete partial path.
				if (INSTR(transformSourcePath, fromFolder_) &gt; 0) then
					set modifiedPath = REPLACE(transformSourcePath, fromFolder_, toFolder_);
				end if;
			end if;

			if (modifiedPath is not null) then
				set message = &apos;UPDATED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourcePath=&apos;||NVL(transformSourcePath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourceType=&apos;||NVL(transformSourceType,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;modifiedPath=&apos;||NVL(modifiedPath,&apos;null&apos;));
				end if;

/*  updateBasicTransformationProcedure:
	IN resourcePath 			/shared/Utilities/TypeDefinitions.pathType, 
   	IN transformSourcePath 		/shared/Utilities/TypeDefinitions.pathType, 
	IN transformSourceType		VARCHAR,
	IN annotation				LONGVARCHAR,
	IN attributeVector			/shared/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType,
*/
				-- Update the Basic XSLT Transformation
				call /shared/ASAssets/Utilities/repository/updateBasicTransformationProcedure(resourcePath, modifiedPath, transformSourceType, null, null, success);

				if (faultResponse is not null or success = 0) then
					set message = &apos;ERROR: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
					if (UPPER(debug) = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					end if;
					raise System.SOAPFaultException value cast(faultResponse as longvarchar);
				end if;
			else
				set message = &apos;INSPECTED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourcePath=&apos;||NVL(transformSourcePath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourceType=&apos;||NVL(transformSourceType,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
				end if;
			end if;
			set success = 1;
		end if;

		/*************************************************************
		 * Resource: PROCEDURE / XSLT_TRANSFORM_PROCEDURE -- XSLT Custom Transformation
		 *************************************************************/
		if (resourceType = &apos;PROCEDURE&apos; and subtype =&apos;XSLT_TRANSFORM_PROCEDURE&apos;) then
			-- Get transform source path :  &lt;resource:transformSourcePath&gt;...&lt;/resource:transformSourcePath&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:transformSourcePath&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:transformSourcePath&gt;&apos;);
			set len = length(&apos;&lt;resource:transformSourcePath&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set transformSourcePath = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;

			-- Get transform source type :  &lt;resource:transformSourceType&gt;...&lt;/resource:transformSourceType&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:transformSourceType&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:transformSourceType&gt;&apos;);
			set len = length(&apos;&lt;resource:transformSourceType&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set transformSourceType = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;

			-- Check to see if the actual path is the same as the rebind from path
			if (transformSourcePath = fromFolder_) then
				set modifiedPath = toFolder_;
			else
				set fromFolder_ = REPLACE(fromFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
				set toFolder_ = REPLACE(toFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
				-- Check to see if the actual path contains a partial path for rebind by adding a / to the end to insure it is a complete partial path.
				if (INSTR(transformSourcePath, fromFolder_) &gt; 0) then
					set modifiedPath = REPLACE(transformSourcePath, fromFolder_, toFolder_);
				end if;
			end if;

			if (modifiedPath is not null) then
				set message = &apos;UPDATED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourcePath=&apos;||NVL(transformSourcePath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourceType=&apos;||NVL(transformSourceType,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;modifiedPath=&apos;||NVL(modifiedPath,&apos;null&apos;));
				end if;

/*  updateXsltTransformProcedure:
	IN resourcePath 			/shared/Utilities/TypeDefinitions.pathType, 
   	IN transformSourcePath 		/shared/Utilities/TypeDefinitions.pathType, 
	IN transformSourceType		VARCHAR,
	IN xsltText					LONGVARCHAR,
	IN xsltModel				/shared/Utilities/repository/definitions/RepositoryDefinitions.XsltModelVectorType,
	IN annotation				LONGVARCHAR,
	IN isExplicitDesign			BIT,
	IN parameterVector			/shared/Utilities/repository/definitions/RepositoryDefinitions.ParameterVectorType,
	IN attributeVector			/shared/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType,
	OUT success					BIT
*/
				-- Update the XSLT Transformation
				call /shared/ASAssets/Utilities/repository/updateXsltTransformProcedure(resourcePath, modifiedPath, transformSourceType, null, null, null, null, null, null, success);

				if (faultResponse is not null or success = 0) then
					set message = &apos;ERROR: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
					if (UPPER(debug) = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					end if;
					raise System.SOAPFaultException value cast(faultResponse as longvarchar);
				end if;
			else
				set message = &apos;INSPECTED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourcePath=&apos;||NVL(transformSourcePath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourceType=&apos;||NVL(transformSourceType,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
				end if;
			end if;
			set success = 1;
		end if;

		/*************************************************************
		 * Resource: PROCEDURE / STREAM_TRANSFORM_PROCEDURE -- XSLT Custom Transformation
		 *************************************************************/
		if (resourceType = &apos;PROCEDURE&apos; and subtype =&apos;STREAM_TRANSFORM_PROCEDURE&apos;) then
			-- Get transform source path :  &lt;resource:transformSourcePath&gt;...&lt;/resource:transformSourcePath&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:transformSourcePath&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:transformSourcePath&gt;&apos;);
			set len = length(&apos;&lt;resource:transformSourcePath&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set transformSourcePath = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;

			-- Get transform source type :  &lt;resource:transformSourceType&gt;...&lt;/resource:transformSourceType&gt;
			set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:transformSourceType&gt;&apos;);
			set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:transformSourceType&gt;&apos;);
			set len = length(&apos;&lt;resource:transformSourceType&gt;&apos;);
			if (pos1 &gt; 0 and pos2 &gt; 0) then
				set transformSourceType = SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len);
			end if;

			-- Check to see if the actual path is the same as the rebind from path
			if (transformSourcePath = fromFolder_) then
				set modifiedPath = toFolder_;
			else
				set fromFolder_ = REPLACE(fromFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
				set toFolder_ = REPLACE(toFolder_ ||&apos;/&apos;, &apos;//&apos;,&apos;/&apos;);
				-- Check to see if the actual path contains a partial path for rebind by adding a / to the end to insure it is a complete partial path.
				if (INSTR(transformSourcePath, fromFolder_) &gt; 0) then
					set modifiedPath = REPLACE(transformSourcePath, fromFolder_, toFolder_);
				end if;
			end if;

			if (modifiedPath is not null) then
				set message = &apos;UPDATED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourcePath=&apos;||NVL(transformSourcePath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourceType=&apos;||NVL(transformSourceType,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;modifiedPath=&apos;||NVL(modifiedPath,&apos;null&apos;));
				end if;

/*  updateStreamTransformProcedure:
	IN resourcePath 			/shared/Utilities/TypeDefinitions.pathType, 
   	IN transformSourcePath 		/shared/Utilities/TypeDefinitions.pathType, 
	IN transformSourceType		VARCHAR,
	IN streamModel				/shared/Utilities/repository/definitions/RepositoryDefinitions.XsltModelVectorType,
	IN annotation				LONGVARCHAR,
	IN isExplicitlyDesigned		BIT,
	IN parameterVector			/shared/Utilities/repository/definitions/RepositoryDefinitions.ParameterVectorType,
	IN attributeVector			/shared/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType,
	OUT success					BIT
*/
				-- Update the XSLT Streaming Transformation
				call /shared/ASAssets/Utilities/repository/updateStreamTransformProcedure(resourcePath, modifiedPath, transformSourceType, null, null, null, null, null, success);

				if (faultResponse is not null or success = 0) then
					set message = &apos;ERROR: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
					if (UPPER(debug) = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					end if;
					raise System.SOAPFaultException value cast(faultResponse as longvarchar);
				end if;
			else
				set message = &apos;INSPECTED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourcePath=&apos;||NVL(transformSourcePath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;transformSourceType=&apos;||NVL(transformSourceType,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
				end if;
			end if;
			set success = 1;
		end if;

		/*************************************************************
		 * Resource: TRIGGER / NONE -- Trigger
		 *************************************************************/
		if (resourceType = &apos;TRIGGER&apos; and subtype =&apos;NONE&apos;) then
			set actionAttributes = &apos;&apos;;
			set actionType = null;
			set actionPath = null;
			set modifiedPath = null;
			for a as
				select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor_ActionAttributes(resourcePath, resourceType)
				where name is not null
			do
				if (actionType is null and a.actionType is not null) then
					set actionType = a.actionType;
				end if;
				if (a.name = &apos;PATH&apos; and a.&quot;value&quot; is not null) then
					set actionPath = a.&quot;value&quot;;
					-- Check to see if the actual path is the same as the rebind from path
					if (actionPath = fromFolder_) then
						set modifiedPath = toFolder_;
					else
					-- Check to see if the actual path contains a partial path for rebind by adding a / to the end to insure it is a complete partial path.
						if (INSTR(actionPath, fromFolder_||&apos;/&apos;) &gt; 0) then
							set modifiedPath = REPLACE(actionPath, fromFolder_||&apos;/&apos;, toFolder_||&apos;/&apos;);
						end if;	
					end if;
					if (modifiedPath is not null) then
						set actionAttributes = actionAttributes ||
                   	     	&apos;        &lt;common:attribute&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:name&gt;PATH&lt;/common:name&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:type&gt;STRING&lt;/common:type&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:value&gt;&apos;||CAST(XMLTEXT(modifiedPath) AS LONGVARCHAR)||&apos;&lt;/common:value&gt;&apos;||CHR(10)||
                       		&apos;        &lt;/common:attribute&gt;&apos;||CHR(10);
					end if;
				else
					if (UPPER(a.&quot;type&quot;) = &apos;NULL&apos;) then
						set actionAttributes = actionAttributes ||
                        	&apos;        &lt;common:attribute&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:name&gt;&apos;||CAST(XMLTEXT(a.name) AS LONGVARCHAR)||&apos;&lt;/common:name&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:type&gt;&apos;||CAST(XMLTEXT(a.&quot;type&quot;) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:value/&gt;&apos;||CHR(10)||
                       		&apos;        &lt;/common:attribute&gt;&apos;||CHR(10);
					else
						set actionAttributes = actionAttributes ||
                        	&apos;        &lt;common:attribute&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:name&gt;&apos;||CAST(XMLTEXT(a.name) AS LONGVARCHAR)||&apos;&lt;/common:name&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:type&gt;&apos;||CAST(XMLTEXT(a.&quot;type&quot;) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;&apos;||CHR(10)||
                            &apos;            &lt;common:value&gt;&apos;||CAST(XMLTEXT(TRIM(NVL(a.&quot;value&quot;,&apos;  &apos;))) AS LONGVARCHAR)||&apos;&lt;/common:value&gt;&apos;||CHR(10)||
                       		&apos;        &lt;/common:attribute&gt;&apos;||CHR(10);
					end if;
				end if;
			end for;

			if (actionType is not null and modifiedPath is not null) then
				set message = &apos;UPDATED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;actionType=&apos;||NVL(actionType,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;actionPath=&apos;||NVL(actionPath,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;modifiedPath=&apos;||NVL(modifiedPath,&apos;null&apos;));
				end if;

				-- Get enabled :  &lt;resource:enabled&gt;false&lt;/resource:enabled&gt;
				set pos1 = INSTR(xmlOutStr, &apos;&lt;resource:enabled&gt;&apos;);
				set pos2 = INSTR(xmlOutStr, &apos;&lt;/resource:enabled&gt;&apos;);
				set len = length(&apos;&lt;resource:enabled&gt;&apos;);
				if (pos1 &gt; 0 and pos2 &gt; 0) then
					set enabled = LOWER(SUBSTRING(xmlOutStr, pos1+len, pos2-pos1-len));
				end if;

				-- Update the trigger
				set createInput = 
							&apos;&lt;resource:updateTrigger&apos;||CHR(10)||
 			                &apos;   xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot;&apos;||CHR(10)||
			                &apos;    xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||CHR(10)||
			                &apos;    &lt;resource:path&gt;&apos;||CAST(XMLTEXT(resourcePath) AS LONGVARCHAR)||&apos;&lt;/resource:path&gt;&apos;||CHR(10)||
			                &apos;    &lt;resource:enabled&gt;&apos;||enabled||&apos;&lt;/resource:enabled&gt;&apos;||CHR(10)||
			                &apos;    &lt;resource:detail&gt;SIMPLE&lt;/resource:detail&gt;&apos;||CHR(10)||
							&apos;    &lt;resource:actionType&gt;&apos;||actionType||&apos;&lt;/resource:actionType&gt;&apos;||CHR(10)||
                    		&apos;    &lt;resource:actionAttributes&gt;&apos;||CHR(10)||
									actionAttributes||
                    		&apos;    &lt;/resource:actionAttributes&gt;&apos;||CHR(10)||
			                &apos;&lt;/resource:updateTrigger&gt;&apos;;

				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;updateTrigger: createInput:&apos;||CHR(10)||NVL(createInput,&apos;null&apos;));
				end if;

				-- Invoke the API to update the trigger PATH action attribute
				CALL /services/webservices/system/admin/resource/operations/updateTrigger(createInput, createResponse, faultResponse);
				if (faultResponse is not null) then
					set message = &apos;ERROR: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
					if (UPPER(debug) = &apos;Y&apos;) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					end if;
					raise System.SOAPFaultException value cast(faultResponse as longvarchar);
				end if;
			else
				set message = &apos;INSPECTED: &apos;||LPAD(&apos;[&apos;||resourceType||&apos;]&apos;,11,&apos; &apos;)||LPAD(&apos;[&apos;||subtype||&apos;]&apos;,30,&apos; &apos;)||&apos; resourcePath=&apos;||resourcePath;
				if (UPPER(debug) = &apos;Y&apos;) then
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, message);
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;fromFolder=&apos;||NVL(fromFolder_,&apos;null&apos;));
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;__toFolder=&apos;||NVL(toFolder_,&apos;null&apos;));
				end if;
			end if;
			set success = 1;
		end if;

	else
		raise System.IllegalArgumentException value &apos;Resource Path=[&apos;||NVL(resourcePath,&apos;null&apos;)||&apos;] and Type=[&apos;||NVL(resourceType,&apos;null&apos;)||&apos;] and Subtype=[&apos;||NVL(subtype,&apos;null&apos;)||&apos;] cannot be empty.&apos;;
	end if;
	if (UPPER(debug) = &apos;Y&apos;) then
		call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;success=&apos;||NVL(cast(success as varchar),&apos;null&apos;));
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573160027349</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">12/322</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/396</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/468</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/546</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/623</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/239</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/735</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/749</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
  </attribute>
</metadata>
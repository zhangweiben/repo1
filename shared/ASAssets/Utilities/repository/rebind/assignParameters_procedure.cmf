<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="assignParameters" path="/shared/ASAssets/Utilities/repository/rebind/assignParameters" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>assignParameters:

	This procedure takes in a parameter vector and produces an XML parameter output which is used to create a request for
	a Composite web service API that requires a parameter.

	Input:
		parameterVector - the parameters to wrap in XML.  
			Values: A vector of parameters and values


	Output:
		annotationInput - the resulting XML
			Values: XML value


	Exceptions:  none


	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.2		04/27/2013		Mike Tinius			5.2.0			created new for assigning parameters to an XML parameter node.
	2015.2		04/02/2015		Calvin Goodrich		7.0.1			updated to COALESCE input values to prevent NULL request envelopes.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/31/2019		Mike Tinius			7.0.8			Consolidated code and removed assignAnnotation.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="parameterVector" direction="IN" nullable="true">
      <datatype name="ParameterVectorType" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="ParameterType" type="TREE" refId="1">
            <element name="name">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="sqlType">
              <datatype name="sqlType" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="sqlType" type="TREE" refId="2">
                    <element name="definition">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="nativeType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="referencePath">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="referenceTypeName">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="proprietaryModel">
                      <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                    </element>
                    <element name="name">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="trailingSpaces">
                      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="xmlType">
              <datatype name="xmlType" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="xmlType" type="TREE" refId="3">
                    <element name="name">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="namespace">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="nativeType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="schema">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="referencePath">
                      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
                    </element>
                    <element name="proprietaryModel">
                      <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="pseudoType">
              <datatype name="pseudoType" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="pseudoType" type="TREE" refId="4">
                    <element name="definition">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="direction">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="isNullable">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="attributes">
              <datatype name="attributes" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="AttributeCompleteType" type="TREE" refId="5">
                    <element name="attrName">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="attrType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="attrValue">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="valueList">
                      <datatype name="valueList" type="ARRAY" maxLength="0">
                        <itemDatatype>
                          <datatype name="itemType" type="TREE" refId="6">
                            <element name="type">
                              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                            </element>
                            <element name="value">
                              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                            </element>
                          </datatype>
                        </itemDatatype>
                      </datatype>
                    </element>
                    <element name="valueMap">
                      <datatype name="valueMap" type="ARRAY" maxLength="0">
                        <itemDatatype>
                          <datatype name="entryType" type="TREE" refId="7">
                            <element name="key">
                              <datatype name="key" type="ARRAY" maxLength="0">
                                <itemDatatype>
                                  <reference refId="6"/>
                                </itemDatatype>
                              </datatype>
                            </element>
                            <element name="value">
                              <datatype name="value" type="ARRAY" maxLength="0">
                                <itemDatatype>
                                  <reference refId="6"/>
                                </itemDatatype>
                              </datatype>
                            </element>
                          </datatype>
                        </itemDatatype>
                      </datatype>
                    </element>
                    <element name="valueArray">
                      <datatype name="valueArray" type="ARRAY" maxLength="0">
                        <itemDatatype>
                          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                        </itemDatatype>
                      </datatype>
                    </element>
                    <element name="unset">
                      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="annotation">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="parameterInput" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/rebind/assignAttributes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="attributeVector" direction="IN">
        <datatype type="ARRAY" maxLength="0">
          <itemDatatype>
            <datatype name="AttributeCompleteType" type="TREE" refId="2">
              <element name="attrName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrValue">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="valueList">
                <datatype name="valueList" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="itemType" type="TREE" refId="3">
                      <element name="type">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="value">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="valueMap">
                <datatype name="valueMap" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="entryType" type="TREE" refId="4">
                      <element name="key">
                        <datatype name="key" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <reference refId="3"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="value">
                        <datatype name="value" type="ARRAY" maxLength="0">
                          <itemDatatype>
                            <reference refId="3"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="valueArray">
                <datatype name="valueArray" type="ARRAY" maxLength="0">
                  <itemDatatype>
                    <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="unset">
                <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="attributeInput" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    assignParameters:

	This procedure takes in a parameter vector and produces an XML parameter output which is used to create a request for
	a Composite web service API that requires a parameter.

	Input:
		parameterVector - the parameters to wrap in XML.  
			Values: A vector of parameters and values

	Output:
		annotationInput - the resulting XML
			Values: XML value

	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.2		04/27/2013		Mike Tinius			5.2.0			created new for assigning parameters to an XML parameter node.
	2015.2		04/02/2015		Calvin Goodrich		7.0.1			updated to COALESCE input values to prevent NULL request envelopes.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	05/31/2019		Mike Tinius			7.0.8			Consolidated code and removed assignAnnotation.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE assignParameters(
	IN parameterVector			/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.ParameterVectorType,
	OUT parameterInput			LONGVARCHAR
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;assignParameters&apos;;
	DECLARE i,j				INTEGER;
	DECLARE attributeInput	LONGVARCHAR;
	DECLARE valueFound		BOOLEAN DEFAULT FALSE;
	DECLARE ex				EXCEPTION;
	DECLARE annotation		LONGVARCHAR;

	set parameterInput = &apos;&apos;;
	if (parameterVector IS NOT NULL) then
		set parameterInput = parameterInput || CHR(10)||
    &apos;          &lt;resource:parameters&gt;&apos;;
		set i = 1;
		while (i &lt;= CARDINALITY(parameterVector)) do	

			if (parameterVector[i].name IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].name||&apos;|&apos;) = 2) then
				raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  &quot;name&quot; may not be null or blank.&apos;;
			end if;
			-- &quot;name&quot; - parameter name
			set parameterInput = parameterInput || CHR(10)||
    &apos;            &lt;resource:parameter&gt;&apos;||CHR(10)||
    &apos;              &lt;resource:name&gt;&apos;||CAST(XMLTEXT(parameterVector[i].name) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
    &apos;              &lt;resource:dataType&gt;&apos;;

			-- &quot;sqlType&quot; - choice of 1 of sqlType, xmlType or pseudoType
			if (NOT valueFound AND parameterVector[i].sqlType IS NOT NULL) then
				if (parameterVector[i].sqlType[1].definition IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].sqlType[1].definition||&apos;|&apos;) = 2) then
					raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  sqlType &quot;definition&quot; may not be null or blank.&apos;;
				end if;

				set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;common:sqlType&gt;&apos;||CHR(10)||
    &apos;                  &lt;common:definition&gt;&apos;||CAST(XMLTEXT(parameterVector[i].sqlType[1].definition) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;;

					if (parameterVector[i].sqlType[1].nativeType IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:nativeType&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].nativeType) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:nativeType&gt;&apos;;
					end if;
					if (parameterVector[i].sqlType[1].referencePath IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:referencePath&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].referencePath) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:referencePath&gt;&apos;;
					end if;
					if (parameterVector[i].sqlType[1].referenceTypeName IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:referenceTypeName&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].referenceTypeName) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:referenceTypeName&gt;&apos;;
					end if;
					if (parameterVector[i].sqlType[1].proprietaryModel IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:proprietaryModel&gt;&apos;||COALESCE(CAST(parameterVector[i].sqlType[1].proprietaryModel AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:proprietaryModel&gt;&apos;;
					end if;
					if (parameterVector[i].sqlType[1].name IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:name&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].name) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:name&gt;&apos;;
					end if;
					if (parameterVector[i].sqlType[1].trailingSpaces IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:trailingSpaces&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].trailingSpaces) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:trailingSpaces&gt;&apos;;
					end if;
					set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;/common:sqlType&gt;&apos;;
			end if;

			-- &quot;xmlType&quot; - choice of 1 of sqlType, xmlType or pseudoType
			if (NOT valueFound AND parameterVector[i].xmlType IS NOT NULL) then
				if (parameterVector[i].xmlType[1].name IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].xmlType[1].name||&apos;|&apos;) = 2) then
					raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  xmlType &quot;name&quot; may not be null or blank.&apos;;
				end if;
				if (parameterVector[i].xmlType[1].namespace IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].xmlType[1].namespace||&apos;|&apos;) = 2) then
					raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  xmlType &quot;namespace&quot; may not be null or blank.&apos;;
				end if;
				set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;common:xmlType&gt;&apos;||CHR(10)||
    &apos;                  &lt;common:name&gt;&apos;||CAST(XMLTEXT(parameterVector[i].xmlType[1].name) AS LONGVARCHAR)||&apos;&lt;/common:name&gt;&apos;||CHR(10)||
    &apos;                  &lt;common:namespace&gt;&apos;||CAST(XMLTEXT(parameterVector[i].xmlType[1].namespace) AS LONGVARCHAR)||&apos;&lt;/common:namespace&gt;&apos;;
					if (parameterVector[i].xmlType[1].&quot;schema&quot; IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:schema&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].xmlType[1].&quot;schema&quot;) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:schema&gt;&apos;;
					end if;
					if (parameterVector[i].xmlType[1].referencePath IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:referencePath&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].xmlType[1].referencePath) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:referencePath&gt;&apos;;
					end if;
					if (parameterVector[i].xmlType[1].proprietaryModel IS NOT NULL) then
						set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:proprietaryModel&gt;&apos;||COALESCE(CAST(parameterVector[i].xmlType[1].proprietaryModel AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:proprietaryModel&gt;&apos;;
					end if;
						set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;/common:xmlType&gt;&apos;;
			end if;

			-- &quot;pseudoType&quot; - choice of 1 of sqlType, xmlType or pseudoType
			if (NOT valueFound AND parameterVector[i].pseudoType IS NOT NULL) then
				if (parameterVector[i].pseudoType[1].definition IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].pseudoType[1].definition||&apos;|&apos;) = 2) then
					raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  pseudoType &quot;definition&quot; may not be null or blank.&apos;;
				end if;
				set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;common:pseudoType&gt;&apos;||CHR(10)||
    &apos;                  &lt;common:definition&gt;&apos;||CAST(XMLTEXT(parameterVector[i].pseudoType[1].definition) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||CHR(10)||
    &apos;                &lt;/common:pseudoType&gt;&apos;;
			end if;
			set parameterInput = parameterInput || CHR(10)||
    &apos;              &lt;/resource:dataType&gt;&apos;;

			-- &quot;direction&quot; - IN,OUT,INOUT
			-- &quot;isNullable&quot; - IS_NULLABLE or IS_NOT_NULLABLE
			if (parameterVector[i].direction IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].direction||&apos;|&apos;) = 2) then
				raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  &quot;direction&quot; may not be null or blank.&apos;;
			end if;
			if (parameterVector[i].isNullable IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].isNullable||&apos;|&apos;) = 2) then
				raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  &quot;isNullable&quot; may not be null or blank.&apos;;
			end if;
			set parameterInput = parameterInput || CHR(10)||
    &apos;              &lt;resource:direction&gt;&apos;||CAST(XMLTEXT(parameterVector[i].direction) AS LONGVARCHAR)||&apos;&lt;/resource:direction&gt;&apos;||CHR(10)||
    &apos;              &lt;resource:isNullable&gt;&apos;||CAST(XMLTEXT(parameterVector[i].isNullable) AS LONGVARCHAR)||&apos;&lt;/resource:isNullable&gt;&apos;;

			if (parameterVector[i].attributes IS NOT NULL) then
				call /shared/ASAssets/Utilities/repository/rebind/assignAttributes(parameterVector[i].attributes, attributeInput);
				set parameterInput = parameterInput || attributeInput;
			end if;

			-- &quot;annotation&quot; - parameter annotation
			set annotation = &apos;&apos;;
			if (parameterVector[i].annotation IS NOT NULL) then
				set annotation = CHR(10)||&apos;    &lt;resource:annotation&gt;&apos; || COALESCE(CAST(XMLTEXT(parameterVector[i].annotation) AS LONGVARCHAR), &apos;&apos;) || &apos;&lt;/resource:annotation&gt;&apos;||CHR(10);
			end if;
			set parameterInput = parameterInput || annotation;

			set parameterInput = parameterInput || CHR(10)||
    &apos;            &lt;/resource:parameter&gt;&apos;;
			set i = i + 1;
		end while;
		set parameterInput = parameterInput || CHR(10)||
    &apos;          &lt;/resource:parameters&gt;&apos; || CHR(10);
	end if;

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573161757946</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="assignAttributes" path="/shared/ASAssets/Utilities/repository/rebind/assignAttributes" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>assignAttributes:

	This procedure takes in an a complete attribute vector and produces an XML attribute output which is used to create a request for
	a Composite web service API that requires an attribute.

	Input:
		attributeVector - the attributes to wrap in XML.  
			Values: A vector of attributes and values


	Output:
		attributeInput - the resulting XML
			Values: XML value


	Exceptions:  none


	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.2		04/27/2013		Mike Tinius			5.2.0			created new for assigning attributes to XML attribute node.
	2015.2		04/02/2015		Calvin Goodrich		7.0.1			updated to COALESCE input values to prevent NULL request envelopes.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.


    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="attributeVector" direction="IN" nullable="true">
      <datatype name="AttributeCompleteVectorType" type="ARRAY" maxLength="0">
        <itemDatatype>
          <datatype name="AttributeCompleteType" type="TREE" refId="1">
            <element name="attrName">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="attrType">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="attrValue">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="valueList">
              <datatype name="valueList" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="itemType" type="TREE" refId="2">
                    <element name="type">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="value">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="valueMap">
              <datatype name="valueMap" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="entryType" type="TREE" refId="3">
                    <element name="key">
                      <datatype name="key" type="ARRAY" maxLength="0">
                        <itemDatatype>
                          <reference refId="2"/>
                        </itemDatatype>
                      </datatype>
                    </element>
                    <element name="value">
                      <datatype name="value" type="ARRAY" maxLength="0">
                        <itemDatatype>
                          <reference refId="2"/>
                        </itemDatatype>
                      </datatype>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="valueArray">
              <datatype name="valueArray" type="ARRAY" maxLength="0">
                <itemDatatype>
                  <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                </itemDatatype>
              </datatype>
            </element>
            <element name="unset">
              <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="attributeInput" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    assignAttributes:

	This procedure takes in an a complete attribute vector and produces an XML attribute output which is used to create a request for
	a Composite web service API that requires an attribute.

	Input:
		attributeVector - the attributes to wrap in XML.  
			Values: A vector of attributes and values

	Output:
		attributeInput - the resulting XML
			Values: XML value

	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.2		04/27/2013		Mike Tinius			5.2.0			created new for assigning attributes to XML attribute node.
	2015.2		04/02/2015		Calvin Goodrich		7.0.1			updated to COALESCE input values to prevent NULL request envelopes.
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE assignAttributes(
	IN attributeVector			/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType,
	OUT attributeInput			LONGVARCHAR
)
BEGIN
	DECLARE moduleName		VARCHAR DEFAULT &apos;assignAttributes&apos;;
	DECLARE i,j				INTEGER;
	DECLARE valueFound		BOOLEAN DEFAULT FALSE;
	DECLARE ex				EXCEPTION;

	set attributeInput = &apos;&apos;;
	if (attributeVector is not null) then
		set attributeInput = attributeInput || CHR(10)||
    &apos;      &lt;resource:attributes&gt;&apos;;
		set i = 1;
		while (i &lt;= CARDINALITY(attributeVector)) do
			if (attributeVector[i].attrName IS NULL OR LENGTH(&apos;|&apos;||attributeVector[i].attrName||&apos;|&apos;) = 2) then
				raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  &quot;name&quot; may not be null or blank.&apos;;
			end if;
			if (attributeVector[i].attrType IS NULL OR LENGTH(&apos;|&apos;||attributeVector[i].attrType||&apos;|&apos;) = 2) then
				raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  &quot;type&quot; may not be null or blank.&apos;;
			end if;
			-- &quot;name&quot; - attribute name
			-- &quot;type&quot; - attribute type
			set attributeInput = attributeInput || CHR(10)||
    &apos;        &lt;common:attribute&gt;&apos;||CHR(10)||
    &apos;          &lt;common:name&gt;&apos;||CAST(XMLTEXT(attributeVector[i].attrName) AS LONGVARCHAR)||&apos;&lt;/common:name&gt;&apos;||CHR(10)||
    &apos;          &lt;common:type&gt;&apos;||CAST(XMLTEXT(attributeVector[i].attrType) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;&apos;;

			-- &quot;value&quot; - choice of 1 of value, valueList, valueMap or ValueArray
			if (NOT valueFound AND attributeVector[i].attrValue IS NOT NULL) then
				set valueFound = true;	-- only 1 of the optional value structures are allowed.  Don&apos;t allow any more to be set.
				set attributeInput = attributeInput || CHR(10)||
    &apos;          &lt;common:value&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].attrValue) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:value&gt;&apos;;
			end if;

			-- &quot;valueList&quot; - choice of 1 of value, valueList, valueMap or ValueArray
			if (NOT valueFound AND attributeVector[i].valueList IS NOT NULL) then
				set valueFound = true;	-- only 1 of the optional value structures are allowed.  Don&apos;t allow any more to be set.
				set attributeInput = attributeInput || CHR(10)||
    &apos;                  &lt;common:valueList&gt;&apos;;
				set j = 1;
				while (j &lt;= CARDINALITY(attributeVector[i].valueList)) do
					if (attributeVector[i].valueList[j].&quot;type&quot; IS NULL OR LENGTH(&apos;|&apos;||attributeVector[i].valueList[j].&quot;type&quot;||&apos;|&apos;) = 2) then
						raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  valueList &apos;||j||&apos; &quot;type&quot; may not be null or blank.&apos;;
					end if;
					set attributeInput = attributeInput || CHR(10)||
    &apos;                    &lt;common:item&gt;&apos;||CHR(10)||
    &apos;                      &lt;common:type&gt;&apos;||CAST(XMLTEXT(attributeVector[i].valueList[j].&quot;type&quot;) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;&apos;||CHR(10)||
    &apos;                      &lt;common:value&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].valueList[j].&quot;value&quot;) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:value&gt;&apos;;
/* NOT IMPLEMENTED:
						  &lt;common:valueList/&gt;
						  &lt;common:valueMap&gt;
							&lt;common:entry&gt;
							  &lt;common:key&gt;
								&lt;common:type&gt;?&lt;/common:type&gt;
								&lt;common:value&gt;?&lt;/common:value&gt;
								&lt;common:valueList/&gt;
								&lt;common:valueArray&gt;
								  &lt;common:item&gt;?&lt;/common:item&gt;
								&lt;/common:valueArray&gt;
							  &lt;/common:key&gt;
							  &lt;common:value&gt;
								&lt;common:type&gt;?&lt;/common:type&gt;
								&lt;common:value&gt;?&lt;/common:value&gt;
								&lt;common:valueList/&gt;
								&lt;common:valueArray&gt;
								  &lt;common:item&gt;?&lt;/common:item&gt;
								&lt;/common:valueArray&gt;
							  &lt;/common:value&gt;
							&lt;/common:entry&gt;
						  &lt;/common:valueMap&gt;
						  &lt;common:valueArray&gt;
							&lt;common:item&gt;?&lt;/common:item&gt;
						  &lt;/common:valueArray&gt;
*/
					set attributeInput = attributeInput || CHR(10)||
    &apos;                    &lt;/common:item&gt;&apos;;
					set j = j + 1;
				end while;
				set attributeInput = attributeInput || CHR(10)||
    &apos;                  &lt;/common:valueList&gt;&apos;;
			end if;

			-- &quot;valueMap&quot; - choice of 1 of value, valueList, valueMap or ValueArray
			if (NOT valueFound AND attributeVector[i].valueMap IS NOT NULL) then
				set valueFound = true;	-- only 1 of the optional value structures are allowed.  Don&apos;t allow any more to be set.
				set attributeInput = attributeInput || CHR(10)||
    &apos;                  &lt;common:valueMap&gt;&apos;;
				set j = 1;
				while (j &lt;= CARDINALITY(attributeVector[i].valueMap)) do
					if (attributeVector[i].valueList[j].&quot;type&quot; IS NULL OR LENGTH(&apos;|&apos;||attributeVector[i].valueList[j].&quot;type&quot;||&apos;|&apos;) = 2) then
						raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  valueMap &apos;||j||&apos;  key 1 &quot;type&quot; may not be null or blank.&apos;;
					end if;
					set attributeInput = attributeInput || CHR(10)||
    &apos;                    &lt;common:entry&gt;&apos;||CHR(10)||
    &apos;                      &lt;common:key&gt;&apos;||CHR(10)||
    &apos;                        &lt;common:type&gt;&apos;||CAST(XMLTEXT(attributeVector[i].valueMap[j].&quot;key&quot;[1].&quot;type&quot;) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;&apos;||CHR(10)||
    &apos;                        &lt;common:value&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].valueMap[j].&quot;key&quot;[1].&quot;value&quot;) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:value&gt;&apos;;
/* NOT IMPLEMENTED:
							&lt;common:valueList&gt;
							  &lt;common:item&gt;
								&lt;common:type&gt;?&lt;/common:type&gt;
								&lt;common:value&gt;?&lt;/common:value&gt;
								&lt;common:valueMap/&gt;
								&lt;common:valueArray&gt;
								  &lt;common:item&gt;?&lt;/common:item&gt;
								&lt;/common:valueArray&gt;
							  &lt;/common:item&gt;
							&lt;/common:valueList&gt;
							&lt;common:valueMap/&gt;
							&lt;common:valueArray&gt;
							  &lt;common:item&gt;?&lt;/common:item&gt;
							&lt;/common:valueArray&gt;
*/
					if (attributeVector[i].valueList[j].&quot;type&quot; IS NULL OR LENGTH(&apos;|&apos;||attributeVector[i].valueList[j].&quot;type&quot;||&apos;|&apos;) = 2) then
						raise ex value moduleName||&apos;::  Attribute &apos;||i||&apos;  valueMap &apos;||j||&apos;  value 1 &quot;type&quot; may not be null or blank.&apos;;
					end if;
					set attributeInput = attributeInput || CHR(10)||
    &apos;                      &lt;/common:key&gt;&apos;||CHR(10)||
    &apos;                      &lt;common:value&gt;&apos;||CHR(10)||
    &apos;                        &lt;common:type&gt;&apos;||CAST(XMLTEXT(attributeVector[i].valueMap[j].&quot;value&quot;[1].&quot;type&quot;) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;&apos;||CHR(10)||
    &apos;                        &lt;common:value&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].valueMap[j].&quot;value&quot;[1].&quot;value&quot;) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:value&gt;&apos;;
/* NOT IMPLEMENTED:
							&lt;common:valueList&gt;
							  &lt;common:item&gt;
								&lt;common:type&gt;?&lt;/common:type&gt;
								&lt;common:value&gt;?&lt;/common:value&gt;
								&lt;common:valueMap/&gt;
								&lt;common:valueArray&gt;
								  &lt;common:item&gt;?&lt;/common:item&gt;
								&lt;/common:valueArray&gt;
							  &lt;/common:item&gt;
							&lt;/common:valueList&gt;
							&lt;common:valueMap/&gt;
							&lt;common:valueArray&gt;
							  &lt;common:item&gt;?&lt;/common:item&gt;
							&lt;/common:valueArray&gt;
*/
					set attributeInput = attributeInput || CHR(10)||
    &apos;                      &lt;/common:value&gt;&apos;||CHR(10)||
    &apos;                    &lt;/common:entry&gt;&apos;;
					set j = j + 1;
				end while;
				set attributeInput = attributeInput || CHR(10)||
	&apos;				  &lt;/common:valueMap&gt;&apos;;
			end if;
			  
			-- &quot;valueArray&quot; - choice of 1 of value, valueList, valueMap or ValueArray
			if (NOT valueFound AND attributeVector[i].valueArray IS NOT NULL) then
				set valueFound = true;	-- only 1 of the optional value structures are allowed.  Don&apos;t allow any more to be set.
				set attributeInput = attributeInput || CHR(10)||
    &apos;                  &lt;common:valueArray&gt;&apos;;
				set j = 1;
				while (j &lt;= CARDINALITY(attributeVector[i].valueArray)) do
					set attributeInput = attributeInput || CHR(10)||
    &apos;                    &lt;common:item&gt;&apos;||COALESCE(CAST(XMLTEXT(attributeVector[i].valueArray[j]) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:item&gt;&apos;;
					set j = j + 1;
				end while;
				set attributeInput = attributeInput || CHR(10)||
    &apos;                  &lt;/common:valueArray&gt;&apos;;
			end if;

			-- &quot;unset&quot; - 
			if (attributeVector[i].unset IS NOT NULL) then
				set attributeInput = attributeInput || CHR(10)||
    &apos;          &lt;common:unset&gt;&apos;||attributeVector[i].unset||&apos;&lt;/common:unset&gt;&apos;;
			end if;

			set attributeInput = attributeInput || CHR(10)||
    &apos;        &lt;/common:attribute&gt;&apos;;

			set i = i + 1;
		end while;

		set attributeInput = attributeInput || CHR(10)||
    &apos;      &lt;/resource:attributes&gt;&apos; || CHR(10);
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573161757946</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>
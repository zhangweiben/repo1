<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="copyResourceAnnotations" path="/shared/ASAssets/Utilities/repository/copyResourceAnnotations" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>copyResourceAnnotations:

    This procedure copies the annotations from one resource to another. If both resources are of
    type &quot;TABLE&quot;, the column annotations are copied as well (where the column names are the same,
    ignoring case.) This procedure is NOT recursive when resources of type &quot;CONTAINER&quot; are
    specified as input. There are a couple of Utilities that can walk a resource or dependency
    tree and can be used in conjunction with this procedure.


    Input:
        inSourcePath - Path to the resource to get annotations from.
            Values: Any resource path

        inSourceType - The resource type of the resource to get annotations from.
            Values: Any resource type

        inDestPath - Path to the resource to get annotations from.
            Values: Any resource path

        inDestType - The resource type of the resource to get annotations from.
            Values: Any resource type


    Output:
        N/A (throws an exception if the destination resource can&apos;t be updated.)


    Exceptions:
        System.IllegalArgumentException - Thrown when inputs can&apos;t be validated.

        System.NotSupportedExceptions   - Copying annotations TO a data source table is not supported at this time.

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/17/2012		Calvin Goodirch		6.0.0			Created new
	2018.100	01/10/2018		Mike Tinius			7.0.5			Modified so that column annotations are not modified on a published resource as this is not valid.
	2019.200	05/15/2019		Mike Tinius			7.0.8			Modified to use updateResourceAnnotationsV2 with no vector input instead of the deprecated updateResourceAnnotationsV2.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="inSourcePath" direction="IN" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="inSourceType" direction="IN" nullable="true">
      <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
    </parameter>
    <parameter name="inDestPath" direction="IN" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="inDestType" direction="IN" nullable="true">
      <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="copyResponse" direction="OUT" nullable="true">
      <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="faultResponse" direction="OUT" nullable="true">
      <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="1"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getResourceAnnotations" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="columnName">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/updateResourceAnnotationsV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inColumnAnnotations" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="updateResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="2"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
    copyResourceAnnotations:

    This procedure copies the annotations from one resource to another. If both resources are of
    type &quot;TABLE&quot;, the column annotations are copied as well (where the column names are the same,
    ignoring case.)  If the column name matches (case insensitive) and the source annotation has a value,
    set the destination annotation. otherwise destination annotation is preserved.

	This procedure is NOT recursive when resources of type &quot;CONTAINER&quot; are
    specified as input. There are a couple of Utilities that can walk a resource or dependency
    tree and can be used in conjunction with this procedure.


    Input:
        inSourcePath - Path to the resource to get annotations from.
            Values: Any resource path

        inSourceType - The resource type of the resource to get annotations from.
            Values: Any resource type

        inDestPath - Path to the resource to get annotations from.
            Values: Any resource path

        inDestType - The resource type of the resource to get annotations from.
            Values: Any resource type


    Output:
        N/A (throws an exception if the destination resource can&apos;t be updated.)


    Exceptions:
        System.NotFoundException      - Thrown when inputs can&apos;t be validated.

        System.NotSupportedExceptions - Copying annotations TO a data source table is not supported at this time.


	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2012.3		07/17/2012		Calvin Goodirch		6.0.0			Created new
	2018.100	01/10/2018		Mike Tinius			7.0.5			Modified so that column annotations are not modified on a published resource as this is not valid.
	2019.200	05/15/2019		Mike Tinius			7.0.8			Modified to use updateResourceAnnotationsV2 with no vector input instead of the deprecated updateResourceAnnotationsV2.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE copyResourceAnnotations(
    IN inSourcePath 	/lib/resource/ResourceDefs.ResourcePath,
    IN inSourceType 	/lib/resource/ResourceDefs.ResourceType,
    IN inDestPath 		/lib/resource/ResourceDefs.ResourcePath,
    IN inDestType 		/lib/resource/ResourceDefs.ResourceType,
    OUT success 		BIT,
	OUT copyResponse 	 XML,
	OUT faultResponse    XML
)
BEGIN
	DECLARE moduleName				VARCHAR DEFAULT &apos;copyResourceAnnotations&apos;;
	DECLARE debug					CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE destType				VARCHAR DEFAULT inDestType;
    DECLARE resourceExists 			BOOLEAN;
    DECLARE resourceAnnotation 		LONGVARCHAR DEFAULT &apos;&apos;;
    DECLARE sourceColumns			LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE destColumns 			LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE columnAnnotations		LONGVARCHAR;
	DECLARE columnEntry				LONGVARCHAR;
	DECLARE columnName				VARCHAR;
	DECLARE columnType				VARCHAR;
	DECLARE columnAnnotation		LONGVARCHAR;
	DECLARE pos1, pos2				INTEGER;
	DECLARE pos3, pos4				INTEGER;
	DECLARE pos5, pos6				INTEGER;
	DECLARE len						INTEGER;

	-- If the destination path is within /services/databases/ or /services/webservices/ and the destType is not LINK then change it to LINK
	IF (INSTR(inDestPath, &apos;/services/databases/&apos;) = 1 OR INSTR(inDestPath, &apos;/services/webservices/&apos;) = 1 AND destType &lt;&gt; &apos;LINK&apos;) THEN
		SET destType = &apos;LINK&apos;;
	END IF;

    -- make sure source resource exists
    --
    CALL /lib/resource/ResourceExists (inSourcePath, inSourceType, NULL, resourceExists);
    IF (NOT resourceExists) THEN
        RAISE System.NotFoundException VALUE &apos;Resource &apos; || inSourcePath || &apos; of type &apos; || inSourceType || &apos; does not exist.&apos;;
    END IF;

    -- make sure destination resource exists
    --
    CALL /lib/resource/ResourceExists (inDestPath, destType, NULL, resourceExists);
    IF (NOT resourceExists) THEN
        RAISE System.NotFoundException VALUE &apos;Resource &apos; || inDestPath || &apos; of type &apos; || destType || &apos; does not exist.&apos;;
    END IF;

	IF (debug = &apos;Y&apos;) THEN
		CALL print(moduleName||&apos; : inSourcePath=&apos;||NVL(inSourcePath, &apos;null&apos;));
		CALL print(moduleName||&apos; : inSourceType=&apos;||NVL(inSourceType, &apos;null&apos;));
		CALL print(moduleName||&apos; :   inDestPath=&apos;||NVL(inDestPath, &apos;null&apos;));
		CALL print(moduleName||&apos; :     destType=&apos;||NVL(destType, &apos;null&apos;));
	END IF;

    -- get the annotations from the source resource
    --
    FOR r AS
        SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceAnnotations(inSourcePath,inSourceType)
    DO
        -- if columnn name is null then we&apos;ve got the table row or the resource is not a table.
        --
        IF (r.columnName IS NULL) THEN

            -- only update the destination annotation if the source is not null
            --
            IF (r.annotation IS NOT NULL) THEN
                SET resourceAnnotation = r.annotation;
            END IF;
			IF (debug = &apos;Y&apos;) THEN
				call print(moduleName||&apos; : resourceAnnotation=&apos;||NVL(resourceAnnotation, &apos;null&apos;));
			END IF;

        -- otherwise we&apos;re dealing with a column and need to add it to the updateSqlTable request XML structure
        --
        ELSE
			-- Store the source column annotation as long as we know that the destination is not a published resource.
            IF (r.annotation IS NOT NULL AND LENGTH(r.annotation) &gt; 0 AND INSTR(inDestPath,&apos;/services/databases/&apos;) = 0 AND INSTR(inDestPath,&apos;/services/webservices/&apos;) = 0) THEN
				SET sourceColumns = sourceColumns ||
					-- Repeat this &lt;resource:column&gt; for multiple columns
					&apos;        &lt;resource:column&gt;&apos;||CHR(10)||
					&apos;            &lt;resource:name&gt;&apos; || CAST(XMLTEXT(r.columnName) AS VARCHAR) || &apos;&lt;/resource:name&gt;&apos;||CHR(10)||
					&apos;            &lt;resource:annotation&gt;&apos; || CAST(XMLTEXT(COALESCE(r.annotation, &apos;&apos;)) AS LONGVARCHAR) || &apos;&lt;/resource:annotation&gt;&apos;||CHR(10)||
					&apos;        &lt;/resource:column&gt;&apos;||CHR(10)||
					&apos;&apos;;

 				IF (debug = &apos;Y&apos;) THEN
					CALL print(moduleName||&apos; : column=[&apos;||r.columnName||&apos;]  annotation=[&apos;||NVL(r.annotation, &apos;null&apos;)||&apos;]&apos;);
				END IF;
            END IF;
        END IF;
    END FOR;

    -- if the destination resource is a TABLE and the source resource had any column annotations defined.
    -- Do not build up a destination column list for published resources of type LINK.
    IF (destType = &apos;TABLE&apos; AND LENGTH(sourceColumns) &gt; 0) THEN
        -- build up the column definitions of the destination
        --
        FOR r AS
            SELECT * FROM /shared/ASAssets/Utilities/repository/getResourceAnnotations(inDestPath,destType) WHERE columnName IS NOT NULL
        DO
			SET columnName = r.columnName;
			SET columnType = r.columnType;
			SET columnAnnotation = r.annotation;
			/* Example:

			&apos;        &lt;resource:column&gt;&apos;||CHR(10)||
				&apos;            &lt;resource:name&gt;productid&lt;/resource:name&gt;&apos;||CHR(10)||
				&apos;            &lt;resource:annotation&gt;Product identifier&lt;/resource:annotation&gt;&apos;||CHR(10)||
				&apos;        &lt;/resource:column&gt;&apos;||CHR(10)||
			*/
			-- Search the input parameter for the column
			SET pos1 = INSTR(sourceColumns, &apos;&lt;resource:name&gt;&apos;||columnName||&apos;&lt;/resource:name&gt;&apos;);
			IF (pos1 &gt; 0) THEN
				SET len = LENGTH(sourceColumns);
				SET pos3 = INSTR(REVERSE(sourceColumns), REVERSE(&apos;&lt;resource:column&gt;&apos;), len-pos1);
				SET pos4 = INSTR(sourceColumns, &apos;&lt;/resource:column&gt;&apos;, pos1);
				SET pos3 = len-pos3-1;
				IF (pos3 &gt; 0 AND pos4 &gt; 0 AND pos4 &gt; pos3) THEN
					SET len = LENGTH(&apos;&lt;resource:column&gt;&apos;);
					SET columnEntry = TRIM(SUBSTRING(sourceColumns, pos3+len, pos4-(pos3+len)));
					IF (UPPER(debug) = &apos;Y&apos;) THEN
						CALL PRINT(moduleName||&apos; : columnEntry=&apos;||CHR(10)||NVL(columnEntry,&apos;null&apos;));
					END IF;

					-- Extract the resource annotation
					SET pos5 = INSTR(columnEntry, &apos;&lt;resource:annotation&gt;&apos;);
					SET pos6 = INSTR(columnEntry, &apos;&lt;/resource:annotation&gt;&apos;);
					SET columnAnnotation = &apos;&apos;;
					IF (pos5 &gt; 0 AND pos6 &gt; 0) THEN
						SET len = LENGTH(&apos;&lt;resource:annotation&gt;&apos;);
						SET columnAnnotation = TRIM(SUBSTRING(columnEntry, pos5+len, pos6-(pos5+len)));
					END IF;
					IF (UPPER(debug) = &apos;Y&apos;) THEN
						CALL PRINT(moduleName||&apos; : columnEntry/annotation=[&apos;||NVL(columnAnnotation,&apos;null&apos;)||&apos;]&apos;);
					END IF;
				END IF;
			END IF;
			SET destColumns = destColumns || 
				&apos;        &lt;resource:column&gt;&apos;||CHR(10)||
				&apos;            &lt;resource:name&gt;&apos; || CAST(XMLTEXT(columnName) AS VARCHAR) || &apos;&lt;/resource:name&gt;&apos;||CHR(10)||
				&apos;            &lt;resource:dataType&gt;&apos;||CHR(10)||
				&apos;                &lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||CHR(10)||
				&apos;                    &lt;common:definition&gt;&apos; || CAST(XMLTEXT(columnType) AS VARCHAR) || &apos;&lt;/common:definition&gt;&apos;||CHR(10)||
				&apos;                &lt;/common:sqlType&gt;&apos;||CHR(10)||
				&apos;            &lt;/resource:dataType&gt;&apos;||CHR(10)||
				&apos;            &lt;resource:annotation&gt;&apos; || CAST(XMLTEXT(COALESCE(columnAnnotation, &apos;&apos;)) AS VARCHAR(2147483647)) || &apos;&lt;/resource:annotation&gt;&apos;||CHR(10)||
				&apos;        &lt;/resource:column&gt;&apos;||CHR(10)||
				&apos;&apos;;

			IF (debug = &apos;Y&apos;) THEN
				CALL print(moduleName||&apos; : columnname=[&apos;||NVL(r.columnname, &apos;null&apos;)||&apos;]  annotation=[&apos;||NVL(r.annotation, &apos;null&apos;)||&apos;]&apos;);
			END IF;
        END FOR;
    END IF;

	-- only when copying annotated columns from one table to another do we pass the destination column annotations	
	CASE 
		WHEN (LENGTH(sourceColumns) &gt; 0 AND LENGTH(destColumns) &gt; 0) THEN 
			SET columnAnnotations = destColumns;
		ELSE 
			SET columnAnnotations = NULL;
	END CASE;
	IF (debug = &apos;Y&apos;) THEN
		CALL print(moduleName||&apos; : columnAnnotations=&apos;||CHR(10)||NVL(columnAnnotations, &apos;null&apos;));
	END IF;


    CALL /shared/ASAssets/Utilities/repository/updateResourceAnnotationsV2(
        inDestPath,
        destType,
        resourceAnnotation,
		columnAnnotations,
        success,
        copyResponse,
        faultResponse
    ); 
END
</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564746983967</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:5:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:6:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">15/96</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/145</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/109</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/192</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/108</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/107</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/180</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/128</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/222</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/110</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/103</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/209</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
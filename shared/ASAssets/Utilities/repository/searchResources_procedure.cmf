<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="searchResources" path="/shared/ASAssets/Utilities/repository/searchResources" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>searchResources:

	This procedure searches for keywords within the script text of a resource or attributes of a data source.
	It returns a cursor of resource paths, types and subtypes for resources that contain the keywords.
	It also returns the text position of the occurrence of any keyword matches and which keyword was matched.
	It will not search a resource that is impacted.  The impactLevel may be &apos;NONE&apos; or &apos;SYNTAX_ERROR&apos;.  It will skip starting 
	resource paths that do not exist.  

 	The following resource types and sub-types are supported:
		resourceType = &apos;PROCEDURE&apos;
			subtype = &apos;SQL_SCRIPT_PROCEDURE&apos; -- Get Regular Procedure
			subtype = &apos;EXTERNAL_SQL_PROCEDURE&apos; -- Get Packaged Query Procedure
			subtype = &apos;XSLT_TRANSFORM_PROCEDURE&apos; -- Get XSLT Transformation text
			subtype = &apos;XQUERY_TRANSFORM_PROCEDURE&apos; -- Get XQuery Transformation text

		resourceType = &apos;TABLE&apos;
			subtype = &apos;SQL_TABLE&apos; -- Get Regular View

		resourceType = &apos;DATA_SOURCE&apos;
			subtype = all sub types -- Get data source attributes

	This procedure uses RegexPosition which has the following rules:
	-------------------------------------------------------
	Finds an occurrence of a regular expression match in a VARCHAR and returns the position
	of the match (similar to the SQL POSITION function, positions start at 1 with 0 indicating
	a match was not found.) The value of the occurrence input value determines which 
	occurrence to return (numbered starting at 1 from left to right. Use negative values to 
	number occurrences from right to left.) If a NULL value is passed in as the value of 
	any of the inputs, a NULL is returned. Zero may not be used as a value for an 
	occurrence.

	The regular expression language used is what is supported by the JDK used by CIS 
	(currently 1.5 in CIS 4.0.1) See the javadoc for java.util.regex.Pattern for 
	details on what is supported.


	Input:

		startingFolders - Comma separated list of starting folders to search within 
			Values: /shared/Examples,/shared/test

		keywordList - Comma separated list of keyword strings to search for. If the string 
                      contains a comma then it must be enclosed in double quotes like 
                      &quot;a,b&quot;,c,&quot;d,&quot;. The keyword list may also contain regular expressions.  
                      For example to search for the data type &apos;Integer&apos; or &apos;integer&apos; but not 
                      &apos;INTEGER&apos; use the regular expression [Ii]nteger in the keyword list.
			Values: products.ProductName,&quot;CustomerName,&quot;,[Ii]nteger

		keywordOccurrence - comma separated list of keyword occurrences which exactly match 
                            the number of keywords. If this entry is left null then it is 
                            assumed that the occurrence for each keyword is 1. The value of 
                            the occurrence input value determines which occurrence to return 
			                (numbered starting at 1 from left to right. Use negative values 
                            to number occurrences from right to left.)

        force - Indicates whether to examine impacted resources or not
            Values: 0=(default) do not force search on impacted resources.  1=force the search 
                    even when resources are impacted.
            

	Output:
		OUT result PIPE (
			startOrder		INTEGER,		-- The starting path execution order
			startPath		VARCHAR(1024), 	-- The starting path
			resourcePath 	VARCHAR(1024), 	-- The full path to the resource
			resourceType 	VARCHAR(255),	-- The type of resource
			subtype 		VARCHAR(255),	-- The sub-type of the resource
			impactLevel		VARCHAR(255),	-- The impact level of the resource NONE and SYNTAX_ERROR are permitted.
			pos				INTEGER,		-- The position of the first occurrence of any of the keywords
			keyword			LONGVARCHAR,	-- The keyword that was found from the keyword list
			keywordNum		INTEGER,		-- The keyword position number within the keyword list
			occurrence		INTEGER			-- The occurrence of the keyword
		)


	Exceptions:  none


	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.1		01/21/2013		Mike Tinius			5.2.0			Created new
	2013.301	08/27/2013		Mike Tinius			6.1.0			Required for Best Practices 7.3: Return impactLevel in result and allow impactLevel=SYNTAX_ERROR.  
																	Invoking programs can filter on impactLevel=NONE to search for resources with no errors or impact being reported.
	2014.1		12/17/2013		Mike Tinius			6.2.0			Added &quot;force&quot; to allow the search to be forced when resources are impacted.  Added &quot;resourceText&quot; to the output cursor.
	2018.100	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	2018.100	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	06/17/2019		Mike Tinius			7.0.8			Changed the implementation to use /services/databases/system/ALL_RESOURCES instead of getResourceListRecursive.


    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.</annotation>
  <parameters>
    <parameter name="startingFolders" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="keywordList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="keywordOccurrence" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="force" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="1">
        <element name="startOrder">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="startPath">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="impactLevel">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="pos">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="keyword">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="keywordNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="occurrence">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resourceText">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getDataSourceAttributes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="dataSourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="attrName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="attrValue">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getScriptText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="2">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* searchResources:

	This procedure searches for keywords within the script text of a resource or attributes of a data source.
	It returns a cursor of resource paths, types and subtypes for resources that contain the keywords.
	It also returns the text position of the occurrence of any keyword matches and which keyword was matched.
	It will not search a resource that is impacted.  The impactLevel may be &apos;NONE&apos; or &apos;SYNTAX_ERROR&apos;.  It will skip starting 
	resource paths that do not exist.  

 	The following resource types and sub-types are supported:
		resourceType = &apos;PROCEDURE&apos;
			subtype = &apos;SQL_SCRIPT_PROCEDURE&apos; -- Get Regular Procedure
			subtype = &apos;EXTERNAL_SQL_PROCEDURE&apos; -- Get Packaged Query Procedure
			subtype = &apos;XSLT_TRANSFORM_PROCEDURE&apos; -- Get XSLT Transformation text
			subtype = &apos;XQUERY_TRANSFORM_PROCEDURE&apos; -- Get XQuery Transformation text

		resourceType = &apos;TABLE&apos;
			subtype = &apos;SQL_TABLE&apos; -- Get Regular View

		resourceType = &apos;DATA_SOURCE&apos;
			subtype = all sub types -- Get data source attributes

	This procedure uses RegexPosition which has the following rules:
	-------------------------------------------------------
	Finds an occurrence of a regular expression match in a VARCHAR and returns the position
	of the match (similar to the SQL POSITION function, positions start at 1 with 0 indicating
	a match was not found.) The value of the occurrence input value determines which 
	occurrence to return (numbered starting at 1 from left to right. Use negative values to 
	number occurrences from right to left.) If a NULL value is passed in as the value of 
	any of the inputs, a NULL is returned. Zero may not be used as a value for an 
	occurrence.

	The regular expression language used is what is supported by the JDK used by CIS 
	(currently 1.5 in CIS 4.0.1) See the javadoc for java.util.regex.Pattern for 
	details on what is supported.


	Input:

		startingFolders - Comma separated list of starting folders to search within 
			Values: /shared/Examples,/shared/test

		keywordList - Comma separated list of keyword strings to search for. If the string 
                      contains a comma then it must be enclosed in double quotes like 
                      &quot;a,b&quot;,c,&quot;d,&quot;. The keyword list may also contain regular expressions.  
                      For example to search for the data type &apos;Integer&apos; or &apos;integer&apos; but not 
                      &apos;INTEGER&apos; use the regular expression [Ii]nteger in the keyword list.
			Values: products.ProductName,&quot;CustomerName,&quot;,[Ii]nteger

		keywordOccurrence - comma separated list of keyword occurrences which exactly match 
                            the number of keywords. If this entry is left null then it is 
                            assumed that the occurrence for each keyword is 1. The value of 
                            the occurrence input value determines which occurrence to return 
			                (numbered starting at 1 from left to right. Use negative values 
                            to number occurrences from right to left.)

        force - Indicates whether to examine impacted resources or not
            Values: 0=(default) do not force search on impacted resources.  1=force the search 
                    even when resources are impacted.
            

	Output:
		OUT result PIPE (
			startOrder		INTEGER,		-- The starting path execution order
			startPath		VARCHAR(1024), 	-- The starting path
			resourcePath 	VARCHAR(1024), 	-- The full path to the resource
			resourceType 	VARCHAR(255),	-- The type of resource
			subtype 		VARCHAR(255),	-- The sub-type of the resource
			impactLevel		VARCHAR(255),	-- The impact level of the resource NONE and SYNTAX_ERROR are permitted.
			pos				INTEGER,		-- The position of the first occurrence of any of the keywords
			keyword			LONGVARCHAR,	-- The keyword that was found from the keyword list
			keywordNum		INTEGER,		-- The keyword position number within the keyword list
			occurrence		INTEGER			-- The occurrence of the keyword
		)


	Exceptions:  none


	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2013.1		01/21/2013		Mike Tinius			5.2.0			Created new
	2013.301	08/27/2013		Mike Tinius			6.1.0			Required for Best Practices 7.3: Return impactLevel in result and allow impactLevel=SYNTAX_ERROR.  
																	Invoking programs can filter on impactLevel=NONE to search for resources with no errors or impact being reported.
	2014.1		12/17/2013		Mike Tinius			6.2.0			Added &quot;force&quot; to allow the search to be forced when resources are impacted.  Added &quot;resourceText&quot; to the output cursor.
	2018.100	03/01/2018		Mike Tinius			7.0.5			Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
	2018.100	03/02/2018		Mike Tinius			7.0.5			Replaced RegexSplit with extractDelimitedText
	2019.200	04/04/2019		Mike Tinius			7.0.8			Changed custom functions to explicit paths.
	2019.200	06/17/2019		Mike Tinius			7.0.8			Changed the implementation to use /services/databases/system/ALL_RESOURCES instead of getResourceListRecursive.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.

*/
PROCEDURE searchResources(
	IN startingFolders 		LONGVARCHAR, -- comma separated list of starting folder to begin searching
	IN keywordList			LONGVARCHAR, -- comma separated list of keyword strings to search for. 
	IN keywordOccurrence	LONGVARCHAR, -- comma separated list of keyword occurrences or null to default to 1.
	IN force				INTEGER,	 -- 0=(default) do not force search on impacted resources.  1=force the search even when resources are impacted.
	OUT result PIPE (
		startOrder		INTEGER,		-- The start path execution order
		startPath		VARCHAR(1024), 	-- The start path extracted from the comma separated startingFolders
		resourcePath 	VARCHAR(1024), 	-- The full path to the resource
		resourceType 	VARCHAR(255),	-- The type of resource
		subtype 		VARCHAR(255),	-- The sub-type of the resource
		impactLevel		VARCHAR(255),	-- The impact level of the resource NONE and SYNTAX_ERROR are permitted.
		pos				INTEGER,		-- The position of the first occurrence of any of the keywords
		keyword			LONGVARCHAR,	-- The keyword that was found from the keyword list
		keywordNum		INTEGER,		-- The keyword position number within the keyword list
		occurrence		INTEGER,		-- The occurrence of the keyword
		resourceText	LONGVARCHAR		-- The resource text that where the keywordList was found
	)
)
BEGIN
	DEClARE moduleName			VARCHAR(255) DEFAULT &apos;searchResources&apos;;
	DECLARE debug				CHAR(1) DEFAULT /shared/ASAssets/Utilities/repository/&quot;_debug&quot;.debug;
	DECLARE startPath			VARCHAR(1024);
	DECLARE startOrder			INTEGER DEFAULT 0;
	DECLARE resourcePath		VARCHAR(1024);
	DECLARE resourceType		VARCHAR;
	DECLARE resourceExists 		BOOLEAN;
	DECLARE subtype				VARCHAR;
	DECLARE scriptText			LONGVARCHAR;
	DECLARE pos					INTEGER;
	DECLARE nextpos				INTEGER DEFAULT 1;
	DECLARE keyword				LONGVARCHAR;
	DECLARE keywordNum, i		INTEGER;
	DECLARE num					INTEGER;
	DECLARE occurrenceStr		VARCHAR;
	DECLARE occurrence			INTEGER;
	DECLARE numOccurrences		INTEGER;
	DECLARE impactLevel			VARCHAR;
	DECLARE sqlStatement		LONGVARCHAR;
	DECLARE whereClause			LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE whereClauseSearch	LONGVARCHAR DEFAULT &apos;&apos;;
	DECLARE ex_invalid_occurrence	EXCEPTION;
	DECLARE resCur CURSOR (
		resPath 		VARCHAR(4000), 
		resType	 		VARCHAR, 
		subtype 		VARCHAR, 
		definition 		LONGVARCHAR
	);

	-- Continue if not empty
	if (keywordList IS NOT NULL AND LENGTH(&apos;|&apos;||keywordList||&apos;|&apos;) &gt; 2) then
		for s as select * from /shared/ASAssets/Utilities/string/extractDelimitedText(startingFolders,&apos;,&apos;,0,0,0,1,0) do
			set startPath = s.object;
			set startOrder = startOrder + 1;

			call /lib/resource/ResourceExists(startPath, &apos;CONTAINER&apos;, null, resourceExists);
			if (resourceExists) then
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Path exists for searching: &apos;||NVL(startPath,&apos;null&apos;));
				if (length(whereClause) &gt; 0) then
					set whereClause = whereClause || &apos;   OR &apos;;
				end if;
				set whereClause = whereClause || &apos;PARENT_PATH LIKE &apos;&apos;&apos; || startPath || &apos;%&apos;&apos;&apos; || CHR(10);
			else
				call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;Path does not exist: &apos;||NVL(startPath,&apos;null&apos;));
			end if;
		end for;

		-- Extract keyword list
		for k as 
			select * from /shared/ASAssets/Utilities/string/extractTextList(keywordList, &apos;,&apos;, 1, 0, 0, 0, 1) 
			where textExpression is not null and length(trim(textExpression)) &gt; 0
		do
			set keyword = k.textExpression;
			-- escape any single quotes
			if (INSTR(keyword, &apos;&apos;&apos;&apos;) &gt; 0) then
				set keyword = REPLACE(keyword, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
			end if;
			if (length(whereClauseSearch) &gt; 0) then
				set whereClauseSearch = whereClauseSearch || &apos;   OR &apos;;
			end if;
			set whereClauseSearch = whereClauseSearch || &apos;LOWER(DEFINITION) LIKE &apos;&apos;%&apos; || LOWER(keyword) || &apos;%&apos;&apos;&apos;||CHR(10);
		end for;

		if (LENGTH(whereClause) = 0) then
			call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;No paths were provided to search:&apos;);
		else
			SET sqlStatement = 
					&apos;SELECT * FROM (&apos;||CHR(10)||
					&apos;SELECT &apos;||CHR(10)||
					&apos;  PARENT_PATH || &apos;&apos;/&apos;&apos; || RESOURCE_NAME resourcePath,&apos;||CHR(10)||
					&apos;  CASE RESOURCE_TYPE &apos;||CHR(10)||
					&apos;     WHEN &apos;&apos;DATASOURCE&apos;&apos; THEN &apos;&apos;DATA_SOURCE&apos;&apos; &apos;||CHR(10)||
					&apos;     ELSE RESOURCE_TYPE &apos;||CHR(10)||
					&apos;  END resourceType,&apos;||CHR(10)||
					&apos;  RESOURCE_SUBTYPE subType,&apos;||CHR(10)||
					&apos;  DEFINITION definition&apos;||CHR(10)||
					&apos;FROM /services/databases/system/ALL_RESOURCES&apos;||CHR(10)||
					&apos;WHERE RESOURCE_TYPE IN (&apos;&apos;TABLE&apos;&apos;,&apos;&apos;PROCEDURE&apos;&apos;)&apos;||CHR(10)||
					&apos;  AND (&apos;||TRIM(whereClause)||&apos;)&apos;||CHR(10)||
					&apos;  AND (&apos;||TRIM(whereClauseSearch)||&apos;)&apos;||CHR(10)||
					&apos;UNION&apos;||CHR(10)||
					&apos;SELECT &apos;||CHR(10)||
					&apos;  PARENT_PATH || &apos;&apos;/&apos;&apos; || RESOURCE_NAME resourcePath,&apos;||CHR(10)||
					&apos;  CASE RESOURCE_TYPE &apos;||CHR(10)||
					&apos;     WHEN &apos;&apos;DATASOURCE&apos;&apos; THEN &apos;&apos;DATA_SOURCE&apos;&apos; &apos;||CHR(10)||
					&apos;     ELSE RESOURCE_TYPE &apos;||CHR(10)||
					&apos;  END resourceType,&apos;||CHR(10)||
					&apos;  RESOURCE_SUBTYPE subType,&apos;||CHR(10)||
					&apos;  DEFINITION definition&apos;||CHR(10)||
					&apos;FROM /services/databases/system/ALL_RESOURCES&apos;||CHR(10)||
					&apos;WHERE RESOURCE_TYPE = &apos;&apos;DATASOURCE&apos;&apos;&apos;||CHR(10)||
					&apos;  AND (&apos;||TRIM(whereClause)||&apos;)&apos;||CHR(10)||
					&apos;) a &apos;||CHR(10)||
					&apos;ORDER BY a.resourcePath&apos;;

			IF (UPPER(debug) = &apos;Y&apos;) THEN
				CALL PRINT(moduleName||&apos; : sqlStatement=&apos;||sqlStatement);
			END IF;

			OPEN resCur for sqlStatement;
			FOR list AS resCur DO
				set resourcePath = list.resPath;
				set resourceType = list.resType;
				set subtype = list.subtype;
				set scriptText = list.definition;

				-- Determine the impact level of the resource
				set impactLevel = null;
				for r as select * from /shared/ASAssets/Utilities/repository/getBasicResourceCursor(resourcePath, resourceType) do
					set impactLevel = r.impactLevel;
				end for;

				-- Proceed only if there is no impact on the resource
				if (impactLevel = &apos;NONE&apos; or impactLevel = &apos;SYNTAX_ERROR&apos; or (force is not null and force = 1)) then
						call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;PROCEED: resourcePath=&apos;||resourcePath||&apos; resourceType=&apos;||NVL(resourceType,&apos;null&apos;)||&apos; subtype=&apos;||NVL(subtype,&apos;null&apos;)||&apos;   ImpactLevel=&apos;||NVL(impactLevel,&apos;null&apos;));

						-- This is a best effort at retrieving the script text
						BEGIN
							-- Only use getScriptText if the definition from ALL_RESOURCES was null.  Probably would never be null.
							if (scriptText is null and (resourceType = &apos;PROCEDURE&apos; or resourceType = &apos;TABLE&apos;)) then
								set scriptText = &apos;&apos;;
								-- Get the script text for the resource
								call /shared/ASAssets/Utilities/repository/getScriptText(resourcePath, resourceType, subtype, scriptText);
							end if;
							-- Get a concatenated list of attribures from the datasource
							if (resourceType = &apos;DATA_SOURCE&apos;) then
								set scriptText = &apos;&apos;;
								for ds as select * from /shared/ASAssets/Utilities/repository/getDataSourceAttributes(resourcePath) do
									set scriptText = scriptText || ds.attrName||&apos;=&apos;||NVL(ds.attrValue,&apos;null&apos;)||CHR(10);
								end for;
							end if;
						EXCEPTION
							ELSE
						END;

						-- Search this resource for all the keywords in the list
						set keywordNum = 0;
						keywordLoop:
						for k as 
							select * from /shared/ASAssets/Utilities/string/extractTextList(keywordList, &apos;,&apos;, 1, 0, 0, 0, 1) 
							where textExpression is not null and length(trim(textExpression)) &gt; 0
						do
							set keyword = k.textExpression;
							set keywordNum = keywordNum + 1;	

							-- Extract the keyword occurrence for the respective keyword being searched and default to one to start out.
							set occurrence = 1; -- default occurrence
							set i = 0;
							occurrenceLoop:
							for o as 
								select * from /shared/ASAssets/Utilities/string/extractTextList(keywordOccurrence, &apos;,&apos;, 0, 0, 0, 0, 1) 
								where textExpression is not null and length(trim(textExpression)) &gt; 0
							do
								set occurrenceStr = o.textExpression;
								set i = i + 1;
								if (i = keywordNum) then
									if (occurrenceStr IS NOT NULL AND LENGTH(&apos;|&apos;||occurrenceStr||&apos;|&apos;) &gt; 2) then
										begin
											if (cast(occurrenceStr as integer) &lt;= 0) then
												raise ex_invalid_occurrence value &apos;The occurrence string [&apos;||occurrenceStr||&apos;] must be a positive integer value.&apos;;
											end if;
										exception
											else
												raise ex_invalid_occurrence value &apos;The occurrence string [&apos;||occurrenceStr||&apos;] must be a positive integer value.&apos;;
										end;
										set occurrence = occurrenceStr;
										leave occurrenceLoop;
									end if;
								end if;
							end for;

							-- Search for the position of the regular expression in the script text
							set scriptText = LOWER(scriptText);
							set keyword = LOWER(keyword);
							set numOccurrences = 0;
							set pos = 0;
							IF (keyword is not null and scriptText is not null) THEN
								set nextpos = INSTR(scriptText, keyword);
								WHILE (nextpos is not null and nextpos &gt; 0) DO
									set numOccurrences = numOccurrences + 1;
									if (occurrence = numOccurrences) then
										set pos = nextpos;
									end if;
									set nextpos = INSTR(scriptText, keyword, nextpos+1);
								END WHILE;
							END IF;

							call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;numOccurrences=&apos;||numOccurrences||&apos;  occurrence=&apos;||occurrence||&apos;  pos=&apos;||pos||&apos;  keyword=&apos;||keyword);
							if (occurrence &lt;= numOccurrences) then
								insert into result values (startOrder, startPath, resourcePath, resourceType, subtype, impactLevel, pos, keyword, keywordNum, occurrence, scriptText);
								leave keywordLoop;
							end if;
						end for;
				else
					call /shared/ASAssets/Utilities/log/logDebugMessage(moduleName, debug, &apos;SKIP: resourcePath=&apos;||resourcePath||&apos; resourceType=&apos;||NVL(resourceType,&apos;null&apos;)||&apos; subtype=&apos;||NVL(subtype,&apos;null&apos;)||&apos;   ImpactLevel=&apos;||NVL(impactLevel,&apos;null&apos;));
				end if;
			end for;
		end if;
	end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1573160027349</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/222</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>
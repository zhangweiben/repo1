<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:44831da2-fa57-48b1-b3e8-4297d727cb06 -->
<metadata name="getChildResourcesCursor" path="/shared/ASAssets/Utilities/repository/getChildResourcesCursor" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation>getChildResourcesCursor:
	-- CIS Repository Helper Procedure --
	This procedure retrieves the child metadata for a given resource.  A cursor of metadata is returned.
 	This procedure invokes 2 lower level API procedures &apos;getChildResourcesXML&apos; and &apos;getChildResourcesXSLT&apos;.
		getChildResourcesXML - this performs the actual invocation to the CIS repository API and returns XML
		getChildResourcesXSLT - this procedure takes the XML response and turns it into a cursor which
			is more usable by other CIS procedures.

	Input:
		fullResourcePath - Full resource path which includes the path and the resource name  
			Values: e.g. /shared/Utilities/repository/definitions
		resourceType - Type of CIS resource to be created
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. CONTAINER
	Output:
		childResCursor  - response containing the resource metadata
		CURSOR (
				resourceName VARCHAR(255), 
        		resourcePath VARCHAR(1024), 
        		resourceType VARCHAR(255), 
        		subtype VARCHAR(255), 
        		enabled BIT, 
				annotation LONGVARCHAR,
        		isNullable VARCHAR(255), 
        		columnName VARCHAR(255), 
        		columnType VARCHAR(255), 
        		nativeBaseType VARCHAR(255), 
        		nativeType VARCHAR(255)	)
	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2010.3		08/02/2010		Mike Tinius			5.1.0			Created new
	2013.2		03/15/2013		Mike Tinius			5.2.0			modified to provide &quot;annotation&quot; to output cursor for Best Practices 7.0.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.



	TYPES / SUBTYPES:
	=================
	The following resource types/subtypes are supported by this operation.  Resources
	cannot be created under &quot;/services&quot; unless otherwise noted, and cannot be created
	within a physical data source.  

	(Basic CIS folder)
	* CONTAINER / FOLDER_CONTAINER - A Composite folder.   Cannot be created anywhere under /services except in another FOLDER under /services/webservices.
	* CONTAINER / DIRECTORY_CONTAINER - A Composite directory.
	(Database)
	* CONTAINER / CATALOG_CONTAINER - A Composite catalog folder under a data source.  Can only be created within a data source under /services/databases.
	* CONTAINER / SCHEMA_CONTAINER - A Composite schema container.  Can only be created within a CATALOG that is under /services/databases.
	(Web Services)
	* CONTAINER / SERVICE_CONTAINER - A web service container for the service.  Can only be created within a Composite Web Services data source that is under /services/webservices.
	* CONTAINER / OPERATIONS_CONTAINER - A web service container for the operations
	* CONTAINER / PORT_CONTAINER - A Composite web service container for port.   Can only be created within a SERVICE under /services/webservices.
	(Connectors)
	* CONTAINER / CONNECTOR_CONTAINER - A Composite container for connectors.

	* CONNECTOR / JMS - A Composite JMS Connector.  Created with no connection information
	* CONNECTOR / HTTP - A Composite HTTP Connector.  Created with no connection information

	* DATA_SOURCE / RELATIONAL_DATA_SOURCE - A relational database source.
	* DATA_SOURCE / FILE_DATA_SOURCE - A comma separate file data source.
	* DATA_SOURCE / XML_FILE_DATA_SOURCE - An XML file data source.
	* DATA_SOURCE / WSDL_DATA_SOURCE - A Composite web service data source.
	* DATA_SOURCE / XML_HTTP_DATA_SOURCE - An HTTP XML data source.
	* DATA_SOURCE / NONE - A custom java procedure data source.

	* DEFINITION_SET / SQL_DEFINITION_SET - A Composite SQL Definition set.
	* DEFINITION_SET / XML_SCHEMA_DEFINITION_SET - A Composite XML Schema Defintion set.
	* DEFINITION_SET / WSDL_DEFINITION_SET - A Composite WSDL Definition set.
	* DEFINITION_SET / ABSTRACT_WSDL_DEFINITION_SET - A Composite Abstract WSDL Definition set such as the ones imported from Designer.
	* DEFINITION_SET / SCDL_DEFINITION_SET - A Composite SCA composite Definition set imported from Designer.

	* LINK / unknown at this time

	(CIS procedures)
	* PROCEDURE / SQL_SCRIPT_PROCEDURE - A Composite SQL Procedure.  Created with a simple default script body that is runnable.
	(Custom procedures)
	* PROCEDURE / JAVA_PROCEDURE - A Composite java data source procedure.  Created from a java data source (jar file).
	(Database procedures)
	* PROCEDURE / EXTERNAL_SQL_PROCEDURE - A Composite Packaged Query.  Created with no SQL text, so it is not runnable.  
	* PROCEDURE / DATABASE_PROCEDURE - A database stored procedure.
	(XML procedures)
	* PROCEDURE / BASIC_TRANSFORM_PROCEDURE - A Composite Basic XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / XSLT_TRANSFORM_PROCEDURE - A Composite XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / STREAM_TRANSFORM_PROCEDURE - A Composite XSLT Streaming Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / XQUERY_TRANSFORM_PROCEDURE - A Composite XQUERY Transformation Procedure.  Created with no target schema and no model, so it is not runnable.
	(Misc procedures)
	* PROCEDURE / OPERATION_PROCEDURE - A Composite web service or HTTP procedure operation.

	* TABLE / SQL_TABLE - A Composite View.  Created with no SQL text or model, so it is not runnable.  
	* TABLE / DATABASE_TABLE - A Composite database table.
	* TABLE / DELIMITED_FILE_TABLE - A Composite delimited file table
	* TABLE / SYSTEM_TABLE - A Composite system table view.

	* TREE / XML_FILE_TREE - The XML tree structure associated with a file-XML data source.

	* TRIGGER / NONE - A Composite trigger.   Created disabled.</annotation>
  <parameters>
    <parameter name="fullResourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="childResCursor" direction="OUT" nullable="true">
      <datatype name="childResCursor" type="TABLE" refId="1">
        <element name="resourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="annotation">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="isNullable">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="columnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="columnType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="nativeBaseType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="nativeType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege group="all" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/shared/ASAssets/Utilities/TypeDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1"></datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getChildResourcesXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/ASAssets/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceResponse" direction="OUT">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/lowerLevelProcedures/getChildResourcesXSLT" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="1">
      <element name="inXML" direction="IN">
        <datatype name="XML" referenceType="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="2"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outputs" direction="OUT" nullable="false">
        <datatype type="TABLE" refId="3">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="isNullable">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getChildResourcesCursor:
	-- CIS Repository Helper Procedure --
	This procedure retrieves the child metadata for a given resource.  A cursor of metadata is returned.
 	This procedure invokes 2 lower level API procedures &apos;getChildResourcesXML&apos; and &apos;getChildResourcesXSLT&apos;.
		getChildResourcesXML - this performs the actual invocation to the CIS repository API and returns XML
		getChildResourcesXSLT - this procedure takes the XML response and turns it into a cursor which
			is more usable by other CIS procedures.

	Input:
		fullResourcePath - Full resource path which includes the path and the resource name  
			Values: e.g. /shared/Utilities/repository/definitions
		resourceType - Type of CIS resource to be created
			Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. CONTAINER
	Output:
		childResCursor  - response containing the resource metadata
		CURSOR (
				resourceName VARCHAR(255), 
        		resourcePath VARCHAR(1024), 
        		resourceType VARCHAR(255), 
        		subtype VARCHAR(255), 
        		enabled BIT, 
				annotation LONGVARCHAR,
        		isNullable VARCHAR(255), 
        		columnName VARCHAR(255), 
        		columnType VARCHAR(255), 
        		nativeBaseType VARCHAR(255), 
        		nativeType VARCHAR(255)	)
	Exceptions:  none

	Release:	Modified Date:	Modified By:		DV Version:		Reason:
	2010.3		08/02/2010		Mike Tinius			5.1.0			Created new
	2013.2		03/15/2013		Mike Tinius			5.2.0			modified to provide &quot;annotation&quot; to output cursor for Best Practices 7.0.

	(c) 2017 TIBCO Software Inc.  All rights reserved.
	
	Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
	The details can be found in the file LICENSE.
	
	The following proprietary files are included as a convenience, and may not be used except pursuant
	to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
	csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
	csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
	and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
	are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
	
	This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
	If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
	agreement with TIBCO.


	TYPES / SUBTYPES:
	=================
	The following resource types/subtypes are supported by this operation.  Resources
	cannot be created under &quot;/services&quot; unless otherwise noted, and cannot be created
	within a physical data source.  

	(Basic CIS folder)
	* CONTAINER / FOLDER_CONTAINER - A Composite folder.   Cannot be created anywhere under /services except in another FOLDER under /services/webservices.
	* CONTAINER / DIRECTORY_CONTAINER - A Composite directory.
	(Database)
	* CONTAINER / CATALOG_CONTAINER - A Composite catalog folder under a data source.  Can only be created within a data source under /services/databases.
	* CONTAINER / SCHEMA_CONTAINER - A Composite schema container.  Can only be created within a CATALOG that is under /services/databases.
	(Web Services)
	* CONTAINER / SERVICE_CONTAINER - A web service container for the service.  Can only be created within a Composite Web Services data source that is under /services/webservices.
	* CONTAINER / OPERATIONS_CONTAINER - A web service container for the operations
	* CONTAINER / PORT_CONTAINER - A Composite web service container for port.   Can only be created within a SERVICE under /services/webservices.
	(Connectors)
	* CONTAINER / CONNECTOR_CONTAINER - A Composite container for connectors.

	* CONNECTOR / JMS - A Composite JMS Connector.  Created with no connection information
	* CONNECTOR / HTTP - A Composite HTTP Connector.  Created with no connection information

	* DATA_SOURCE / RELATIONAL_DATA_SOURCE - A relational database source.
	* DATA_SOURCE / FILE_DATA_SOURCE - A comma separate file data source.
	* DATA_SOURCE / XML_FILE_DATA_SOURCE - An XML file data source.
	* DATA_SOURCE / WSDL_DATA_SOURCE - A Composite web service data source.
	* DATA_SOURCE / XML_HTTP_DATA_SOURCE - An HTTP XML data source.
	* DATA_SOURCE / NONE - A custom java procedure data source.

	* DEFINITION_SET / SQL_DEFINITION_SET - A Composite SQL Definition set.
	* DEFINITION_SET / XML_SCHEMA_DEFINITION_SET - A Composite XML Schema Defintion set.
	* DEFINITION_SET / WSDL_DEFINITION_SET - A Composite WSDL Definition set.
	* DEFINITION_SET / ABSTRACT_WSDL_DEFINITION_SET - A Composite Abstract WSDL Definition set such as the ones imported from Designer.
	* DEFINITION_SET / SCDL_DEFINITION_SET - A Composite SCA composite Definition set imported from Designer.

	* LINK / unknown at this time

	(CIS procedures)
	* PROCEDURE / SQL_SCRIPT_PROCEDURE - A Composite SQL Procedure.  Created with a simple default script body that is runnable.
	(Custom procedures)
	* PROCEDURE / JAVA_PROCEDURE - A Composite java data source procedure.  Created from a java data source (jar file).
	(Database procedures)
	* PROCEDURE / EXTERNAL_SQL_PROCEDURE - A Composite Packaged Query.  Created with no SQL text, so it is not runnable.  
	* PROCEDURE / DATABASE_PROCEDURE - A database stored procedure.
	(XML procedures)
	* PROCEDURE / BASIC_TRANSFORM_PROCEDURE - A Composite Basic XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / XSLT_TRANSFORM_PROCEDURE - A Composite XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / STREAM_TRANSFORM_PROCEDURE - A Composite XSLT Streaming Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
	* PROCEDURE / XQUERY_TRANSFORM_PROCEDURE - A Composite XQUERY Transformation Procedure.  Created with no target schema and no model, so it is not runnable.
	(Misc procedures)
	* PROCEDURE / OPERATION_PROCEDURE - A Composite web service or HTTP procedure operation.

	* TABLE / SQL_TABLE - A Composite View.  Created with no SQL text or model, so it is not runnable.  
	* TABLE / DATABASE_TABLE - A Composite database table.
	* TABLE / DELIMITED_FILE_TABLE - A Composite delimited file table
	* TABLE / SYSTEM_TABLE - A Composite system table view.

	* TREE / XML_FILE_TREE - The XML tree structure associated with a file-XML data source.

	* TRIGGER / NONE - A Composite trigger.   Created disabled.
*/
PROCEDURE getChildResourcesCursor(
    IN fullResourcePath 	/shared/ASAssets/Utilities/TypeDefinitions.pathType, 
    IN resourceType 		VARCHAR(255), 
    OUT childResCursor CURSOR (
        resourceName VARCHAR(255), 
        resourcePath VARCHAR(1024), 
        resourceType VARCHAR(255), 
        subtype VARCHAR(255), 
        enabled BIT, 
		annotation LONGVARCHAR,
        isNullable VARCHAR(255), 
        columnName VARCHAR(255), 
        columnType VARCHAR(255), 
        nativeBaseType VARCHAR(255), 
        nativeType VARCHAR(255)
        )
    )
BEGIN
	DECLARE childResourceResponse	XML;

	CALL /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getChildResourcesXML(fullResourcePath, resourceType, childResourceResponse);
	OPEN childResCursor FOR 
		SELECT *
		FROM /shared/ASAssets/Utilities/repository/lowerLevelProcedures/getChildResourcesXSLT(childResourceResponse);
		/* Important Note:  The FIRST ROW FOR a TABLE returns a NULL IN the COLUMN name.  
		   This IS used TO determine the start OF a new TABLE.  Don&apos;t change the XSLT -- getChildResourcesResponseXSLT
	    	   getChildResourcesResponseXSLT returns the following:
		select--&gt; resourceName:	inventorytransactions
		select--&gt; resourcePath:	/shared/ViewGenerator/PhysicalLayer/INVENTORY/ds_inventory/inventorytransactions
		select--&gt; resourceType:	TABLE
		select--&gt; subtype:	DATABASE_TABLE
		select--&gt; enabled:	1
		select--&gt; isNullable:	IS_NOT_NULLABLE
		select--&gt; columnName:	TransactionID
		select--&gt; columnType:	INTEGER
		select--&gt; nativeBaseType:	int
		select--&gt; nativeType:	int(11)    				
*/
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1564713782694</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>